
ESC_G4A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c2c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e14  08004e14  00020b94  2**0
                  CONTENTS
  4 .ARM          00000000  08004e14  08004e14  00020b94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e14  08004e14  00020b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b94  20000000  08004e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000b94  080059b0  00020b94  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  080059b0  00020cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020b94  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d291  00000000  00000000  00020bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b8  00000000  00000000  0002de55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00030c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020232  00000000  00000000  000317c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e13b  00000000  00000000  000519fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7b83  00000000  00000000  0005fb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001376b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d4  00000000  00000000  00137708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000b94 	.word	0x20000b94
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004dec 	.word	0x08004dec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000b98 	.word	0x20000b98
 8000214:	08004dec 	.word	0x08004dec

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	0000      	movs	r0, r0
	...

08000bb8 <TIM3_IRQHandler>:
volatile uint8_t current_phase = 1;
volatile float phase_timing = 0;
volatile uint8_t zero_crossing_flag = 0;

//FOC Loop
void TIM3_IRQHandler(void) {
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	static int32_t cnt, pre_cnt;
	static float diff;
	if(TIM3->SR & 0x1){
 8000bbc:	4b7c      	ldr	r3, [pc, #496]	; (8000db0 <TIM3_IRQHandler+0x1f8>)
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 80ed 	beq.w	8000da4 <TIM3_IRQHandler+0x1ec>
		TIM3->SR &= ~(0x1);
 8000bca:	4b79      	ldr	r3, [pc, #484]	; (8000db0 <TIM3_IRQHandler+0x1f8>)
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	4a78      	ldr	r2, [pc, #480]	; (8000db0 <TIM3_IRQHandler+0x1f8>)
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	6113      	str	r3, [r2, #16]

//		GPIOB->BSRR |= 1 << 3;

		pre_cnt = cnt;
 8000bd6:	4b77      	ldr	r3, [pc, #476]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a77      	ldr	r2, [pc, #476]	; (8000db8 <TIM3_IRQHandler+0x200>)
 8000bdc:	6013      	str	r3, [r2, #0]
		cnt = (int16_t)TIM8->CNT;
 8000bde:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <TIM3_IRQHandler+0x204>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b73      	ldr	r3, [pc, #460]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000be8:	601a      	str	r2, [r3, #0]
		cnt -= motor_zero_offset;
 8000bea:	4b72      	ldr	r3, [pc, #456]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b74      	ldr	r3, [pc, #464]	; (8000dc0 <TIM3_IRQHandler+0x208>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	4a6f      	ldr	r2, [pc, #444]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000bf6:	6013      	str	r3, [r2, #0]
		if(cnt < 0) {
 8000bf8:	4b6e      	ldr	r3, [pc, #440]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	da05      	bge.n	8000c0c <TIM3_IRQHandler+0x54>
			cnt += ENCODER_RES;
 8000c00:	4b6c      	ldr	r3, [pc, #432]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c08:	4a6a      	ldr	r2, [pc, #424]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000c0a:	6013      	str	r3, [r2, #0]
		}
		cnt = cnt % ENCODER_RES;
 8000c0c:	4b69      	ldr	r3, [pc, #420]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	425a      	negs	r2, r3
 8000c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c16:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000c1a:	bf58      	it	pl
 8000c1c:	4253      	negpl	r3, r2
 8000c1e:	4a65      	ldr	r2, [pc, #404]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000c20:	6013      	str	r3, [r2, #0]
//		cnt &= 0x7FFF;

		if(diff > ENCODER_RES/2) {
 8000c22:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000c24:	edd3 7a00 	vldr	s15, [r3]
 8000c28:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000dc8 <TIM3_IRQHandler+0x210>
 8000c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c34:	dd0a      	ble.n	8000c4c <TIM3_IRQHandler+0x94>
			diff -= ENCODER_RES;
 8000c36:	4b63      	ldr	r3, [pc, #396]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000dcc <TIM3_IRQHandler+0x214>
 8000c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c44:	4b5f      	ldr	r3, [pc, #380]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000c46:	edc3 7a00 	vstr	s15, [r3]
 8000c4a:	e013      	b.n	8000c74 <TIM3_IRQHandler+0xbc>
		} else if(diff < -ENCODER_RES/2) {
 8000c4c:	4b5d      	ldr	r3, [pc, #372]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000dd0 <TIM3_IRQHandler+0x218>
 8000c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5e:	d509      	bpl.n	8000c74 <TIM3_IRQHandler+0xbc>
			diff += ENCODER_RES;
 8000c60:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000c62:	edd3 7a00 	vldr	s15, [r3]
 8000c66:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000dcc <TIM3_IRQHandler+0x214>
 8000c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c6e:	4b55      	ldr	r3, [pc, #340]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000c70:	edc3 7a00 	vstr	s15, [r3]
		}
		diff = ((float)cnt - (float)pre_cnt) / ENCODER_RES * 50000.0f * 60.0f;
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c80:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <TIM3_IRQHandler+0x200>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000dcc <TIM3_IRQHandler+0x214>
 8000c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c98:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000dd4 <TIM3_IRQHandler+0x21c>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000dd8 <TIM3_IRQHandler+0x220>
 8000ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca8:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000caa:	edc3 7a00 	vstr	s15, [r3]
		if(fabs(diff) > 10000) {
 8000cae:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	eef0 7ae7 	vabs.f32	s15, s15
 8000cb8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000ddc <TIM3_IRQHandler+0x224>
 8000cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	dd03      	ble.n	8000cce <TIM3_IRQHandler+0x116>
			diff = rpm;
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <TIM3_IRQHandler+0x228>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a3e      	ldr	r2, [pc, #248]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000ccc:	6013      	str	r3, [r2, #0]
		}
		rpm = RPM_LPF * rpm + (1.0-RPM_LPF) * diff;
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <TIM3_IRQHandler+0x228>)
 8000cd0:	edd3 7a00 	vldr	s15, [r3]
 8000cd4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000de4 <TIM3_IRQHandler+0x22c>
 8000cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cdc:	ee17 0a90 	vmov	r0, s15
 8000ce0:	f7ff fbfe 	bl	80004e0 <__aeabi_f2d>
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <TIM3_IRQHandler+0x20c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fbf7 	bl	80004e0 <__aeabi_f2d>
 8000cf2:	a32d      	add	r3, pc, #180	; (adr r3, 8000da8 <TIM3_IRQHandler+0x1f0>)
 8000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf8:	f7ff fc4a 	bl	8000590 <__aeabi_dmul>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4620      	mov	r0, r4
 8000d02:	4629      	mov	r1, r5
 8000d04:	f7ff fa8e 	bl	8000224 <__adddf3>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f7ff ff00 	bl	8000b14 <__aeabi_d2f>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <TIM3_IRQHandler+0x228>)
 8000d18:	6013      	str	r3, [r2, #0]

		position = (float)cnt * 360.0f / ENCODER_RES;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <TIM3_IRQHandler+0x1fc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d26:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000de8 <TIM3_IRQHandler+0x230>
 8000d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d2e:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000dcc <TIM3_IRQHandler+0x214>
 8000d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <TIM3_IRQHandler+0x234>)
 8000d38:	edc3 7a00 	vstr	s15, [r3]
		if(position < 0) {
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <TIM3_IRQHandler+0x234>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4a:	d512      	bpl.n	8000d72 <TIM3_IRQHandler+0x1ba>
			position += 360.0;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <TIM3_IRQHandler+0x234>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fbc5 	bl	80004e0 <__aeabi_f2d>
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <TIM3_IRQHandler+0x238>)
 8000d5c:	f7ff fa62 	bl	8000224 <__adddf3>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	4610      	mov	r0, r2
 8000d66:	4619      	mov	r1, r3
 8000d68:	f7ff fed4 	bl	8000b14 <__aeabi_d2f>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <TIM3_IRQHandler+0x234>)
 8000d70:	6013      	str	r3, [r2, #0]
		}

		if(motor_mode) {
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <TIM3_IRQHandler+0x23c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d013      	beq.n	8000da4 <TIM3_IRQHandler+0x1ec>
			setPhaseVoltage(power, position * POLE_PAIRS + PHASE_DIFF);
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <TIM3_IRQHandler+0x240>)
 8000d7e:	ed93 7a00 	vldr	s14, [r3]
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <TIM3_IRQHandler+0x234>)
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000d8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d90:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000dfc <TIM3_IRQHandler+0x244>
 8000d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d98:	eef0 0a67 	vmov.f32	s1, s15
 8000d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8000da0:	f000 f8b6 	bl	8000f10 <setPhaseVoltage>
		}

//		GPIOB->BSRR |= 1 << 19;
	}
}
 8000da4:	bf00      	nop
 8000da6:	bdb0      	pop	{r4, r5, r7, pc}
 8000da8:	00000000 	.word	0x00000000
 8000dac:	3f847ae0 	.word	0x3f847ae0
 8000db0:	40000400 	.word	0x40000400
 8000db4:	20000bc8 	.word	0x20000bc8
 8000db8:	20000bcc 	.word	0x20000bcc
 8000dbc:	40013400 	.word	0x40013400
 8000dc0:	20000b40 	.word	0x20000b40
 8000dc4:	20000bd0 	.word	0x20000bd0
 8000dc8:	45000000 	.word	0x45000000
 8000dcc:	45800000 	.word	0x45800000
 8000dd0:	c5000000 	.word	0xc5000000
 8000dd4:	47435000 	.word	0x47435000
 8000dd8:	42700000 	.word	0x42700000
 8000ddc:	461c4000 	.word	0x461c4000
 8000de0:	20000bb4 	.word	0x20000bb4
 8000de4:	3f7d70a4 	.word	0x3f7d70a4
 8000de8:	43b40000 	.word	0x43b40000
 8000dec:	20000bb0 	.word	0x20000bb0
 8000df0:	40768000 	.word	0x40768000
 8000df4:	20000bbc 	.word	0x20000bbc
 8000df8:	20000bb8 	.word	0x20000bb8
 8000dfc:	42b40000 	.word	0x42b40000

08000e00 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 8000e00:	b5b0      	push	{r4, r5, r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	if(TIM1->SR & 1 << 4){
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <TIM1_CC_IRQHandler+0xd0>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d053      	beq.n	8000eb8 <TIM1_CC_IRQHandler+0xb8>
		TIM1->SR &= ~(1 << 4);
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <TIM1_CC_IRQHandler+0xd0>)
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <TIM1_CC_IRQHandler+0xd0>)
 8000e16:	f023 0310 	bic.w	r3, r3, #16
 8000e1a:	6113      	str	r3, [r2, #16]
		if(get_COMP_value(current_phase) && TIM2->CNT > 25) {
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <TIM1_CC_IRQHandler+0xd4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fad2 	bl	80013cc <get_COMP_value>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d044      	beq.n	8000eb8 <TIM1_CC_IRQHandler+0xb8>
 8000e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	2b19      	cmp	r3, #25
 8000e36:	d93f      	bls.n	8000eb8 <TIM1_CC_IRQHandler+0xb8>
//			phase_timing = TIM2->CNT;
			phase_timing = 0.9 * phase_timing + 0.1 * (float)TIM2->CNT;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <TIM1_CC_IRQHandler+0xd8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb4f 	bl	80004e0 <__aeabi_f2d>
 8000e42:	a31f      	add	r3, pc, #124	; (adr r3, 8000ec0 <TIM1_CC_IRQHandler+0xc0>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff fba2 	bl	8000590 <__aeabi_dmul>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4614      	mov	r4, r2
 8000e52:	461d      	mov	r5, r3
 8000e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e62:	ee17 0a90 	vmov	r0, s15
 8000e66:	f7ff fb3b 	bl	80004e0 <__aeabi_f2d>
 8000e6a:	a317      	add	r3, pc, #92	; (adr r3, 8000ec8 <TIM1_CC_IRQHandler+0xc8>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fb8e 	bl	8000590 <__aeabi_dmul>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f7ff f9d2 	bl	8000224 <__adddf3>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fe44 	bl	8000b14 <__aeabi_d2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <TIM1_CC_IRQHandler+0xd8>)
 8000e90:	6013      	str	r3, [r2, #0]

			zero_crossing_flag = 1;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <TIM1_CC_IRQHandler+0xdc>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]

			GPIOB->BSRR |= 1 << 3;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <TIM1_CC_IRQHandler+0xe0>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <TIM1_CC_IRQHandler+0xe0>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6193      	str	r3, [r2, #24]

			TIM2->CNT = 0;
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
//			TIM2-> ARR = phase_timing;
//			TIM2->DIER |= 1;

			TIM1->DIER &= ~(1 << 4);
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <TIM1_CC_IRQHandler+0xd0>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <TIM1_CC_IRQHandler+0xd0>)
 8000eb2:	f023 0310 	bic.w	r3, r3, #16
 8000eb6:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bdb0      	pop	{r4, r5, r7, pc}
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	cccccccd 	.word	0xcccccccd
 8000ec4:	3feccccc 	.word	0x3feccccc
 8000ec8:	9999999a 	.word	0x9999999a
 8000ecc:	3fb99999 	.word	0x3fb99999
 8000ed0:	40012c00 	.word	0x40012c00
 8000ed4:	20000b44 	.word	0x20000b44
 8000ed8:	20000bc0 	.word	0x20000bc0
 8000edc:	20000bc4 	.word	0x20000bc4
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	if(TIM2->SR & 0x1){
 8000ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <TIM2_IRQHandler+0x22>
		TIM2->SR &= ~(0x1);
 8000ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	6113      	str	r3, [r2, #16]

//		current_phase = ((++current_phase - 1) % 6 + 1);
	}
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <setPhaseVoltage>:

inline void setPhaseVoltage(float p, float angle_el) {
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f1a:	edc7 0a00 	vstr	s1, [r7]
    static float pwm_u, pwm_v, pwm_w;

    p = p < -1.0 ? -1.0 : p > 1.0 ? 1.0 : p;
 8000f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	d501      	bpl.n	8000f34 <setPhaseVoltage+0x24>
 8000f30:	4b89      	ldr	r3, [pc, #548]	; (8001158 <setPhaseVoltage+0x248>)
 8000f32:	e00c      	b.n	8000f4e <setPhaseVoltage+0x3e>
 8000f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	dd02      	ble.n	8000f4c <setPhaseVoltage+0x3c>
 8000f46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f4a:	e000      	b.n	8000f4e <setPhaseVoltage+0x3e>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	607b      	str	r3, [r7, #4]
//    p = -p;

	static int index;

	if(p < 0) {
 8000f50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	d50d      	bpl.n	8000f7a <setPhaseVoltage+0x6a>
		angle_el += 180;
 8000f5e:	edd7 7a00 	vldr	s15, [r7]
 8000f62:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800115c <setPhaseVoltage+0x24c>
 8000f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f6a:	edc7 7a00 	vstr	s15, [r7]
		p = -p;
 8000f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f72:	eef1 7a67 	vneg.f32	s15, s15
 8000f76:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	angle_el *= 2;
 8000f7a:	edd7 7a00 	vldr	s15, [r7]
 8000f7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f82:	edc7 7a00 	vstr	s15, [r7]
	index = angle_el;
 8000f86:	edd7 7a00 	vldr	s15, [r7]
 8000f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8e:	ee17 2a90 	vmov	r2, s15
 8000f92:	4b73      	ldr	r3, [pc, #460]	; (8001160 <setPhaseVoltage+0x250>)
 8000f94:	601a      	str	r2, [r3, #0]
	index = index % 720;
 8000f96:	4b72      	ldr	r3, [pc, #456]	; (8001160 <setPhaseVoltage+0x250>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a72      	ldr	r2, [pc, #456]	; (8001164 <setPhaseVoltage+0x254>)
 8000f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa0:	441a      	add	r2, r3
 8000fa2:	1251      	asrs	r1, r2, #9
 8000fa4:	17da      	asrs	r2, r3, #31
 8000fa6:	1a8a      	subs	r2, r1, r2
 8000fa8:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000fac:	fb01 f202 	mul.w	r2, r1, r2
 8000fb0:	1a9a      	subs	r2, r3, r2
 8000fb2:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <setPhaseVoltage+0x250>)
 8000fb4:	601a      	str	r2, [r3, #0]
//	index = angle_el;
//	index = (index < 0.0) | (index >= SVPWM_SIZE) ? 0 : index;



	pwm_u = 0.5 * SVPWM_table[index] * p;
 8000fb6:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <setPhaseVoltage+0x250>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a6b      	ldr	r2, [pc, #428]	; (8001168 <setPhaseVoltage+0x258>)
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa8c 	bl	80004e0 <__aeabi_f2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b67      	ldr	r3, [pc, #412]	; (800116c <setPhaseVoltage+0x25c>)
 8000fce:	f7ff fadf 	bl	8000590 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	461d      	mov	r5, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fa80 	bl	80004e0 <__aeabi_f2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	f7ff fad2 	bl	8000590 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd8e 	bl	8000b14 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a5d      	ldr	r2, [pc, #372]	; (8001170 <setPhaseVoltage+0x260>)
 8000ffc:	6013      	str	r3, [r2, #0]

	index = (index + SVPWM_INCREMENT) % SVPWM_SIZE;
 8000ffe:	4b58      	ldr	r3, [pc, #352]	; (8001160 <setPhaseVoltage+0x250>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	33f0      	adds	r3, #240	; 0xf0
 8001004:	4a57      	ldr	r2, [pc, #348]	; (8001164 <setPhaseVoltage+0x254>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	441a      	add	r2, r3
 800100c:	1251      	asrs	r1, r2, #9
 800100e:	17da      	asrs	r2, r3, #31
 8001010:	1a8a      	subs	r2, r1, r2
 8001012:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001016:	fb01 f202 	mul.w	r2, r1, r2
 800101a:	1a9a      	subs	r2, r3, r2
 800101c:	4b50      	ldr	r3, [pc, #320]	; (8001160 <setPhaseVoltage+0x250>)
 800101e:	601a      	str	r2, [r3, #0]
	pwm_v = 0.5 * SVPWM_table[index] * p;
 8001020:	4b4f      	ldr	r3, [pc, #316]	; (8001160 <setPhaseVoltage+0x250>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a50      	ldr	r2, [pc, #320]	; (8001168 <setPhaseVoltage+0x258>)
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa57 	bl	80004e0 <__aeabi_f2d>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <setPhaseVoltage+0x25c>)
 8001038:	f7ff faaa 	bl	8000590 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4614      	mov	r4, r2
 8001042:	461d      	mov	r5, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fa4b 	bl	80004e0 <__aeabi_f2d>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff fa9d 	bl	8000590 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd59 	bl	8000b14 <__aeabi_d2f>
 8001062:	4603      	mov	r3, r0
 8001064:	4a43      	ldr	r2, [pc, #268]	; (8001174 <setPhaseVoltage+0x264>)
 8001066:	6013      	str	r3, [r2, #0]

	index = (index + SVPWM_INCREMENT) % SVPWM_SIZE;
 8001068:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <setPhaseVoltage+0x250>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	33f0      	adds	r3, #240	; 0xf0
 800106e:	4a3d      	ldr	r2, [pc, #244]	; (8001164 <setPhaseVoltage+0x254>)
 8001070:	fb82 1203 	smull	r1, r2, r2, r3
 8001074:	441a      	add	r2, r3
 8001076:	1251      	asrs	r1, r2, #9
 8001078:	17da      	asrs	r2, r3, #31
 800107a:	1a8a      	subs	r2, r1, r2
 800107c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001080:	fb01 f202 	mul.w	r2, r1, r2
 8001084:	1a9a      	subs	r2, r3, r2
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <setPhaseVoltage+0x250>)
 8001088:	601a      	str	r2, [r3, #0]
	pwm_w = 0.5 * SVPWM_table[index] * p;
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <setPhaseVoltage+0x250>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a36      	ldr	r2, [pc, #216]	; (8001168 <setPhaseVoltage+0x258>)
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa22 	bl	80004e0 <__aeabi_f2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <setPhaseVoltage+0x25c>)
 80010a2:	f7ff fa75 	bl	8000590 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4614      	mov	r4, r2
 80010ac:	461d      	mov	r5, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fa16 	bl	80004e0 <__aeabi_f2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fa68 	bl	8000590 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd24 	bl	8000b14 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <setPhaseVoltage+0x268>)
 80010d0:	6013      	str	r3, [r2, #0]

	static float center;
	center = MAX_PWM / 2.0;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <setPhaseVoltage+0x26c>)
 80010d4:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <setPhaseVoltage+0x270>)
 80010d6:	601a      	str	r2, [r3, #0]
//	static float Umin, Umax;
//	Umin = fmin(pwm_u, fmin(pwm_v, pwm_w));
//	Umax = fmax(pwm_u, fmax(pwm_v, pwm_w));
//	center -= (Umax+Umin) / 2;
	pwm_u += center;
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <setPhaseVoltage+0x260>)
 80010da:	ed93 7a00 	vldr	s14, [r3]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <setPhaseVoltage+0x26c>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <setPhaseVoltage+0x260>)
 80010ea:	edc3 7a00 	vstr	s15, [r3]
	pwm_v += center;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <setPhaseVoltage+0x264>)
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <setPhaseVoltage+0x26c>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <setPhaseVoltage+0x264>)
 8001100:	edc3 7a00 	vstr	s15, [r3]
	pwm_w += center;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <setPhaseVoltage+0x268>)
 8001106:	ed93 7a00 	vldr	s14, [r3]
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <setPhaseVoltage+0x26c>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <setPhaseVoltage+0x268>)
 8001116:	edc3 7a00 	vstr	s15, [r3]

	set_motor_pwm(pwm_u, pwm_w, pwm_v);
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <setPhaseVoltage+0x260>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001124:	ee17 3a90 	vmov	r3, s15
 8001128:	b29b      	uxth	r3, r3
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <setPhaseVoltage+0x268>)
 800112c:	edd2 7a00 	vldr	s15, [r2]
 8001130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001134:	ee17 2a90 	vmov	r2, s15
 8001138:	b291      	uxth	r1, r2
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <setPhaseVoltage+0x264>)
 800113c:	edd2 7a00 	vldr	s15, [r2]
 8001140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001144:	ee17 2a90 	vmov	r2, s15
 8001148:	b292      	uxth	r2, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f982 	bl	8001454 <set_motor_pwm>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bdb0      	pop	{r4, r5, r7, pc}
 8001158:	bf800000 	.word	0xbf800000
 800115c:	43340000 	.word	0x43340000
 8001160:	20000bd4 	.word	0x20000bd4
 8001164:	b60b60b7 	.word	0xb60b60b7
 8001168:	20000000 	.word	0x20000000
 800116c:	3fe00000 	.word	0x3fe00000
 8001170:	20000bd8 	.word	0x20000bd8
 8001174:	20000bdc 	.word	0x20000bdc
 8001178:	20000be0 	.word	0x20000be0
 800117c:	20000be4 	.word	0x20000be4
 8001180:	43dac000 	.word	0x43dac000

08001184 <BLDC_phase>:

void BLDC_phase(unsigned char phase, float p) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	ed87 0a00 	vstr	s0, [r7]
 8001190:	71fb      	strb	r3, [r7, #7]
	if(phase == 1) {
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d12a      	bne.n	80011ee <BLDC_phase+0x6a>
		TIM1->CCER |= TIM_CCER_CC1NP;
 8001198:	4b8a      	ldr	r3, [pc, #552]	; (80013c4 <BLDC_phase+0x240>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a89      	ldr	r2, [pc, #548]	; (80013c4 <BLDC_phase+0x240>)
 800119e:	f043 0308 	orr.w	r3, r3, #8
 80011a2:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 80011a4:	4b87      	ldr	r3, [pc, #540]	; (80013c4 <BLDC_phase+0x240>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4a86      	ldr	r2, [pc, #536]	; (80013c4 <BLDC_phase+0x240>)
 80011aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ae:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80011b0:	4b84      	ldr	r3, [pc, #528]	; (80013c4 <BLDC_phase+0x240>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4a83      	ldr	r2, [pc, #524]	; (80013c4 <BLDC_phase+0x240>)
 80011b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011ba:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80011bc:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <BLDC_phase+0x240>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	4a80      	ldr	r2, [pc, #512]	; (80013c4 <BLDC_phase+0x240>)
 80011c2:	f043 0320 	orr.w	r3, r3, #32
 80011c6:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 80011c8:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <BLDC_phase+0x240>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p * MAX_PWM;
 80011ce:	edd7 7a00 	vldr	s15, [r7]
 80011d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80013c8 <BLDC_phase+0x244>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <BLDC_phase+0x240>)
 80011dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e0:	ee17 2a90 	vmov	r2, s15
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80011e6:	4b77      	ldr	r3, [pc, #476]	; (80013c4 <BLDC_phase+0x240>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->EGR |= TIM_EGR_COMG;
		TIM1->CCR1 = p * MAX_PWM;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 80011ec:	e0e4      	b.n	80013b8 <BLDC_phase+0x234>
	} else if(phase == 2) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d12a      	bne.n	800124a <BLDC_phase+0xc6>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80011f4:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <BLDC_phase+0x240>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <BLDC_phase+0x240>)
 80011fa:	f023 0308 	bic.w	r3, r3, #8
 80011fe:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <BLDC_phase+0x240>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <BLDC_phase+0x240>)
 8001206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800120a:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 800120c:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <BLDC_phase+0x240>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4a6c      	ldr	r2, [pc, #432]	; (80013c4 <BLDC_phase+0x240>)
 8001212:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001216:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <BLDC_phase+0x240>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	4a69      	ldr	r2, [pc, #420]	; (80013c4 <BLDC_phase+0x240>)
 800121e:	f043 0320 	orr.w	r3, r3, #32
 8001222:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8001224:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <BLDC_phase+0x240>)
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p * MAX_PWM;
 800122a:	edd7 7a00 	vldr	s15, [r7]
 800122e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013c8 <BLDC_phase+0x244>
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <BLDC_phase+0x240>)
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	ee17 2a90 	vmov	r2, s15
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001242:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <BLDC_phase+0x240>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001248:	e0b6      	b.n	80013b8 <BLDC_phase+0x234>
	} else if(phase == 3) {
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d12a      	bne.n	80012a6 <BLDC_phase+0x122>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <BLDC_phase+0x240>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a5b      	ldr	r2, [pc, #364]	; (80013c4 <BLDC_phase+0x240>)
 8001256:	f023 0308 	bic.w	r3, r3, #8
 800125a:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 800125c:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <BLDC_phase+0x240>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <BLDC_phase+0x240>)
 8001262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001266:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8001268:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <BLDC_phase+0x240>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a55      	ldr	r2, [pc, #340]	; (80013c4 <BLDC_phase+0x240>)
 800126e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001272:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <BLDC_phase+0x240>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <BLDC_phase+0x240>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <BLDC_phase+0x240>)
 8001282:	2200      	movs	r2, #0
 8001284:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001286:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <BLDC_phase+0x240>)
 8001288:	2200      	movs	r2, #0
 800128a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = p * MAX_PWM;
 800128c:	edd7 7a00 	vldr	s15, [r7]
 8001290:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80013c8 <BLDC_phase+0x244>
 8001294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <BLDC_phase+0x240>)
 800129a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129e:	ee17 2a90 	vmov	r2, s15
 80012a2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012a4:	e088      	b.n	80013b8 <BLDC_phase+0x234>
	} else if(phase == 4) {
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d12a      	bne.n	8001302 <BLDC_phase+0x17e>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 80012ac:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <BLDC_phase+0x240>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a44      	ldr	r2, [pc, #272]	; (80013c4 <BLDC_phase+0x240>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <BLDC_phase+0x240>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a41      	ldr	r2, [pc, #260]	; (80013c4 <BLDC_phase+0x240>)
 80012be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012c2:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <BLDC_phase+0x240>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <BLDC_phase+0x240>)
 80012ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012ce:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <BLDC_phase+0x240>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4a3b      	ldr	r2, [pc, #236]	; (80013c4 <BLDC_phase+0x240>)
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <BLDC_phase+0x240>)
 80012de:	2200      	movs	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <BLDC_phase+0x240>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p * MAX_PWM;
 80012e8:	edd7 7a00 	vldr	s15, [r7]
 80012ec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80013c8 <BLDC_phase+0x244>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <BLDC_phase+0x240>)
 80012f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fa:	ee17 2a90 	vmov	r2, s15
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001300:	e05a      	b.n	80013b8 <BLDC_phase+0x234>
	} else if(phase == 5) {
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d12a      	bne.n	800135e <BLDC_phase+0x1da>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <BLDC_phase+0x240>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <BLDC_phase+0x240>)
 800130e:	f023 0308 	bic.w	r3, r3, #8
 8001312:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <BLDC_phase+0x240>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <BLDC_phase+0x240>)
 800131a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800131e:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <BLDC_phase+0x240>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <BLDC_phase+0x240>)
 8001326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800132a:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <BLDC_phase+0x240>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <BLDC_phase+0x240>)
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p * MAX_PWM;
 8001338:	edd7 7a00 	vldr	s15, [r7]
 800133c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013c8 <BLDC_phase+0x244>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <BLDC_phase+0x240>)
 8001346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134a:	ee17 2a90 	vmov	r2, s15
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <BLDC_phase+0x240>)
 8001352:	2200      	movs	r2, #0
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <BLDC_phase+0x240>)
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800135c:	e02c      	b.n	80013b8 <BLDC_phase+0x234>
	} else if(phase == 6) {
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b06      	cmp	r3, #6
 8001362:	d129      	bne.n	80013b8 <BLDC_phase+0x234>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <BLDC_phase+0x240>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <BLDC_phase+0x240>)
 800136a:	f023 0308 	bic.w	r3, r3, #8
 800136e:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <BLDC_phase+0x240>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <BLDC_phase+0x240>)
 8001376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137a:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <BLDC_phase+0x240>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <BLDC_phase+0x240>)
 8001382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001386:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <BLDC_phase+0x240>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <BLDC_phase+0x240>)
 800138e:	f043 0320 	orr.w	r3, r3, #32
 8001392:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p * MAX_PWM;
 8001394:	edd7 7a00 	vldr	s15, [r7]
 8001398:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013c8 <BLDC_phase+0x244>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <BLDC_phase+0x240>)
 80013a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a6:	ee17 2a90 	vmov	r2, s15
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <BLDC_phase+0x240>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <BLDC_phase+0x240>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40012c00 	.word	0x40012c00
 80013c8:	445ac000 	.word	0x445ac000

080013cc <get_COMP_value>:

		COMP1->CSR |= 0b1;
	}
}

uint8_t get_COMP_value(uint8_t phase) {
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	uint32_t t;
	if(phase == 1) {
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d104      	bne.n	80013e6 <get_COMP_value+0x1a>
		t = ~COMP2->CSR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <get_COMP_value+0x80>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e026      	b.n	8001434 <get_COMP_value+0x68>
	} else if(phase == 2) {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d104      	bne.n	80013f6 <get_COMP_value+0x2a>
		t = ~COMP1->CSR;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <get_COMP_value+0x84>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e01e      	b.n	8001434 <get_COMP_value+0x68>
	} else if(phase == 3) {
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d103      	bne.n	8001404 <get_COMP_value+0x38>
		t = COMP1->CSR;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <get_COMP_value+0x84>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e017      	b.n	8001434 <get_COMP_value+0x68>
	} else if(phase == 4) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d103      	bne.n	8001412 <get_COMP_value+0x46>
		t = COMP2->CSR;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <get_COMP_value+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e010      	b.n	8001434 <get_COMP_value+0x68>
	} else if(phase == 5) {
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d103      	bne.n	8001420 <get_COMP_value+0x54>
		t = COMP1->CSR;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <get_COMP_value+0x84>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e009      	b.n	8001434 <get_COMP_value+0x68>
	} else if(phase == 6) {
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b06      	cmp	r3, #6
 8001424:	d104      	bne.n	8001430 <get_COMP_value+0x64>
		t = ~COMP1->CSR;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <get_COMP_value+0x84>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	43db      	mvns	r3, r3
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e001      	b.n	8001434 <get_COMP_value+0x68>
	} else {
		return 0;
 8001430:	2300      	movs	r3, #0
 8001432:	e005      	b.n	8001440 <get_COMP_value+0x74>
	}
	return (t >> 30) & 1;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	0f9b      	lsrs	r3, r3, #30
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40010204 	.word	0x40010204
 8001450:	40010200 	.word	0x40010200

08001454 <set_motor_pwm>:

void set_motor_pwm(uint16_t u, uint16_t v, uint16_t w) {
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	460b      	mov	r3, r1
 8001460:	80bb      	strh	r3, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	807b      	strh	r3, [r7, #2]
	u = u < 0 ? 0 : u;
	u = u > MAX_PWM ? MAX_PWM : u;
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001470:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001520 <set_motor_pwm+0xcc>
 8001474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	dd02      	ble.n	8001484 <set_motor_pwm+0x30>
 800147e:	f240 336b 	movw	r3, #875	; 0x36b
 8001482:	e009      	b.n	8001498 <set_motor_pwm+0x44>
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001492:	ee17 3a90 	vmov	r3, s15
 8001496:	b29b      	uxth	r3, r3
 8001498:	80fb      	strh	r3, [r7, #6]

	v = v < 0 ? 0 : v;
	v = v > MAX_PWM ? MAX_PWM : v;
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001520 <set_motor_pwm+0xcc>
 80014a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	dd02      	ble.n	80014b8 <set_motor_pwm+0x64>
 80014b2:	f240 336b 	movw	r3, #875	; 0x36b
 80014b6:	e009      	b.n	80014cc <set_motor_pwm+0x78>
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c6:	ee17 3a90 	vmov	r3, s15
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	80bb      	strh	r3, [r7, #4]

	w = w < 0 ? 0 : w;
	w = w > MAX_PWM ? MAX_PWM : w;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001520 <set_motor_pwm+0xcc>
 80014dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd02      	ble.n	80014ec <set_motor_pwm+0x98>
 80014e6:	f240 336b 	movw	r3, #875	; 0x36b
 80014ea:	e009      	b.n	8001500 <set_motor_pwm+0xac>
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fa:	ee17 3a90 	vmov	r3, s15
 80014fe:	b29b      	uxth	r3, r3
 8001500:	807b      	strh	r3, [r7, #2]

	TIM1->CCR1 = u;
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <set_motor_pwm+0xd0>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = v;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <set_motor_pwm+0xd0>)
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = w;
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <set_motor_pwm+0xd0>)
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	445ac000 	.word	0x445ac000
 8001524:	40012c00 	.word	0x40012c00

08001528 <motor_on>:

void motor_on() {
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	TIM1->CCER &= ~TIM_CCER_CC1NP;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <motor_on+0x34>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <motor_on+0x34>)
 8001532:	f023 0308 	bic.w	r3, r3, #8
 8001536:	6213      	str	r3, [r2, #32]
	TIM1->CCER &= ~TIM_CCER_CC2NP;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <motor_on+0x34>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <motor_on+0x34>)
 800153e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001542:	6213      	str	r3, [r2, #32]
	TIM1->CCER &= ~TIM_CCER_CC3NP;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <motor_on+0x34>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <motor_on+0x34>)
 800154a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800154e:	6213      	str	r3, [r2, #32]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40012c00 	.word	0x40012c00

08001560 <motor_off>:

void motor_off() {
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	TIM1->CCER |= TIM_CCER_CC1NP;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <motor_off+0x44>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <motor_off+0x44>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2NP;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <motor_off+0x44>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <motor_off+0x44>)
 8001576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157a:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3NP;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <motor_off+0x44>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <motor_off+0x44>)
 8001582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001586:	6213      	str	r3, [r2, #32]
	TIM1->CCR1 = 0;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <motor_off+0x44>)
 800158a:	2200      	movs	r2, #0
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <motor_off+0x44>)
 8001590:	2200      	movs	r2, #0
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <motor_off+0x44>)
 8001596:	2200      	movs	r2, #0
 8001598:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40012c00 	.word	0x40012c00

080015a8 <UART_init>:
#include "UART.h"
#include "main.h"

void UART_init(float freq) {
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]
    RCC->APB1ENR1 |= 1 << 17;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <UART_init+0xd8>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <UART_init+0xd8>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOB->AFR[0] |= 0b0111 << 12;
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <UART_init+0xdc>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a30      	ldr	r2, [pc, #192]	; (8001684 <UART_init+0xdc>)
 80015c4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80015c8:	6213      	str	r3, [r2, #32]
    GPIOB->MODER &= ~(1<<6);
 80015ca:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <UART_init+0xdc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <UART_init+0xdc>)
 80015d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015d4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 1<<7;
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <UART_init+0xdc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <UART_init+0xdc>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e0:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] |= 0b0111 << 16;
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <UART_init+0xdc>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <UART_init+0xdc>)
 80015e8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80015ec:	6213      	str	r3, [r2, #32]
    GPIOB->MODER &= ~(1<<8);
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <UART_init+0xdc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a24      	ldr	r2, [pc, #144]	; (8001684 <UART_init+0xdc>)
 80015f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 1<<9;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <UART_init+0xdc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a21      	ldr	r2, [pc, #132]	; (8001684 <UART_init+0xdc>)
 8001600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001604:	6013      	str	r3, [r2, #0]

    USART2->CR1 &= ~(1);
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <UART_init+0xe0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <UART_init+0xe0>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]
    USART2->CR1 = 0x00000000;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <UART_init+0xe0>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    USART2->CR1 |= 1;
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <UART_init+0xe0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <UART_init+0xe0>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6013      	str	r3, [r2, #0]
    USART2->CR2 = 0x00000000;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <UART_init+0xe0>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
    USART2->CR3 = 0x00000000;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <UART_init+0xe0>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]

    float f = 170000000.0 / freq;
 8001630:	eddf 6a16 	vldr	s13, [pc, #88]	; 800168c <UART_init+0xe4>
 8001634:	ed97 7a01 	vldr	s14, [r7, #4]
 8001638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163c:	edc7 7a03 	vstr	s15, [r7, #12]
	USART2->BRR = (uint32_t)f;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <UART_init+0xe0>)
 8001642:	edd7 7a03 	vldr	s15, [r7, #12]
 8001646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164a:	ee17 2a90 	vmov	r2, s15
 800164e:	60da      	str	r2, [r3, #12]
    USART2->PRESC &= ~(0b1111);
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <UART_init+0xe0>)
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <UART_init+0xe0>)
 8001656:	f023 030f 	bic.w	r3, r3, #15
 800165a:	62d3      	str	r3, [r2, #44]	; 0x2c

    //Enable UART
    USART2->CR1 |= 1<<2;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <UART_init+0xe0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a09      	ldr	r2, [pc, #36]	; (8001688 <UART_init+0xe0>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= 1<<3;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <UART_init+0xe0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <UART_init+0xe0>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40021000 	.word	0x40021000
 8001684:	48000400 	.word	0x48000400
 8001688:	40004400 	.word	0x40004400
 800168c:	4d221fe8 	.word	0x4d221fe8

08001690 <UART_send>:

void UART_send(uint8_t ch) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    while((USART2->ISR & (1 << 7)) == 0);
 800169a:	bf00      	nop
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <UART_send+0x2c>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f9      	beq.n	800169c <UART_send+0xc>
	USART2->TDR = ch;
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <UART_send+0x2c>)
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40004400 	.word	0x40004400

080016c0 <UART_write_float>:
    for(; tens > 0; tens /= 10) {
        UART_send(((a / tens) % 10) + 48);
    }
}

void UART_write_float(double a, unsigned char right) {
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
    unsigned char i;
    long int tens;

    if(a < 0) {
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016da:	f7ff f9cb 	bl	8000a74 <__aeabi_dcmplt>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <UART_write_float+0x36>
        a *= (-1);
 80016e4:	68bc      	ldr	r4, [r7, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016ec:	e9c7 4502 	strd	r4, r5, [r7, #8]
        UART_send('-');
 80016f0:	202d      	movs	r0, #45	; 0x2d
 80016f2:	f7ff ffcd 	bl	8001690 <UART_send>
    } 
    //else UART_send('+');
    
    if(a >= 1.0) {
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <UART_write_float+0x158>)
 80016fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001700:	f7ff f9cc 	bl	8000a9c <__aeabi_dcmpge>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d04a      	beq.n	80017a0 <UART_write_float+0xe0>
        for(tens = 1; tens <= a; tens *= 10);
 800170a:	2301      	movs	r3, #1
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e005      	b.n	800171c <UART_write_float+0x5c>
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	6938      	ldr	r0, [r7, #16]
 800171e:	f7fe fecd 	bl	80004bc <__aeabi_i2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800172a:	f7ff f9b7 	bl	8000a9c <__aeabi_dcmpge>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ed      	bne.n	8001710 <UART_write_float+0x50>
        tens /= 10;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4a39      	ldr	r2, [pc, #228]	; (800181c <UART_write_float+0x15c>)
 8001738:	fb82 1203 	smull	r1, r2, r2, r3
 800173c:	1092      	asrs	r2, r2, #2
 800173e:	17db      	asrs	r3, r3, #31
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	613b      	str	r3, [r7, #16]
        for(; tens > 0; tens /= 10)
 8001744:	e028      	b.n	8001798 <UART_write_float+0xd8>
            UART_send(((long int)(a / tens) % 10) + 48);
 8001746:	6938      	ldr	r0, [r7, #16]
 8001748:	f7fe feb8 	bl	80004bc <__aeabi_i2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001754:	f7ff f846 	bl	80007e4 <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f9b0 	bl	8000ac4 <__aeabi_d2iz>
 8001764:	4602      	mov	r2, r0
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <UART_write_float+0x15c>)
 8001768:	fb83 1302 	smull	r1, r3, r3, r2
 800176c:	1099      	asrs	r1, r3, #2
 800176e:	17d3      	asrs	r3, r2, #31
 8001770:	1ac9      	subs	r1, r1, r3
 8001772:	460b      	mov	r3, r1
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	1ad1      	subs	r1, r2, r3
 800177c:	b2cb      	uxtb	r3, r1
 800177e:	3330      	adds	r3, #48	; 0x30
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff84 	bl	8001690 <UART_send>
        for(; tens > 0; tens /= 10)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <UART_write_float+0x15c>)
 800178c:	fb82 1203 	smull	r1, r2, r2, r3
 8001790:	1092      	asrs	r2, r2, #2
 8001792:	17db      	asrs	r3, r3, #31
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	dcd3      	bgt.n	8001746 <UART_write_float+0x86>
 800179e:	e002      	b.n	80017a6 <UART_write_float+0xe6>
    } else {
        UART_send('0');
 80017a0:	2030      	movs	r0, #48	; 0x30
 80017a2:	f7ff ff75 	bl	8001690 <UART_send>
    }

    UART_send('.');
 80017a6:	202e      	movs	r0, #46	; 0x2e
 80017a8:	f7ff ff72 	bl	8001690 <UART_send>
    for(i = 0, tens = 10; i < right; i++, tens *= 10) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	75fb      	strb	r3, [r7, #23]
 80017b0:	230a      	movs	r3, #10
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	e027      	b.n	8001806 <UART_write_float+0x146>
        UART_send(((long int)(a * tens) % 10) + 48);
 80017b6:	6938      	ldr	r0, [r7, #16]
 80017b8:	f7fe fe80 	bl	80004bc <__aeabi_i2d>
 80017bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017c0:	f7fe fee6 	bl	8000590 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f97a 	bl	8000ac4 <__aeabi_d2iz>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <UART_write_float+0x15c>)
 80017d4:	fb83 1302 	smull	r1, r3, r3, r2
 80017d8:	1099      	asrs	r1, r3, #2
 80017da:	17d3      	asrs	r3, r2, #31
 80017dc:	1ac9      	subs	r1, r1, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	1ad1      	subs	r1, r2, r3
 80017e8:	b2cb      	uxtb	r3, r1
 80017ea:	3330      	adds	r3, #48	; 0x30
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff4e 	bl	8001690 <UART_send>
    for(i = 0, tens = 10; i < right; i++, tens *= 10) {
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	3301      	adds	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	7dfa      	ldrb	r2, [r7, #23]
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3d3      	bcc.n	80017b6 <UART_write_float+0xf6>
    }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bdb0      	pop	{r4, r5, r7, pc}
 8001818:	3ff00000 	.word	0x3ff00000
 800181c:	66666667 	.word	0x66666667

08001820 <main>:
//	} else if((EXTI->PR1 >> 22) & 1) {
//		EXTI->PR1 |= 1 << 22;
//	}
//}

int main(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	HAL_Init();
 8001824:	f001 f831 	bl	800288a <HAL_Init>

	SystemClock_Config();
 8001828:	f000 fd1e 	bl	8002268 <SystemClock_Config>

	GPIO_init();
 800182c:	f000 f902 	bl	8001a34 <GPIO_init>

	TIM1_init();	//PWM timer - 24/48/96 khz
 8001830:	f000 f99a 	bl	8001b68 <TIM1_init>
	TIM6_init();	//Delay timer - 1 khz
 8001834:	f000 fb9e 	bl	8001f74 <TIM6_init>
	TIM3_init();	//FOC timer - 25 khz
 8001838:	f000 fb12 	bl	8001e60 <TIM3_init>
	TIM4_init();	//Audio timer
 800183c:	f000 fb58 	bl	8001ef0 <TIM4_init>
	TIM2_init();
 8001840:	f000 face 	bl	8001de0 <TIM2_init>

	COMP_init();
 8001844:	f000 fc86 	bl	8002154 <COMP_init>
	MX_ADC1_Init();
 8001848:	f000 fd5a 	bl	8002300 <MX_ADC1_Init>
	MX_ADC2_Init();
 800184c:	f000 fdd0 	bl	80023f0 <MX_ADC2_Init>

	TIM8_init();	//Encoder
 8001850:	f000 fc02 	bl	8002058 <TIM8_init>
	UART_init(115200);
 8001854:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001988 <main+0x168>
 8001858:	f7ff fea6 	bl	80015a8 <UART_init>

//	TIM3_on();

	play_music();
 800185c:	f000 ff74 	bl	8002748 <play_music>
	delay_ms(500);
 8001860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001864:	f000 fbc8 	bl	8001ff8 <delay_ms>

	TIM2_on();
 8001868:	f000 f93e 	bl	8001ae8 <TIM2_on>
	motor_mode = 0;
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <main+0x16c>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]

	TIM3_on();
 8001872:	f000 f949 	bl	8001b08 <TIM3_on>
	motor_on();
 8001876:	f7ff fe57 	bl	8001528 <motor_on>
	power = 0.2;
 800187a:	4b45      	ldr	r3, [pc, #276]	; (8001990 <main+0x170>)
 800187c:	4a45      	ldr	r2, [pc, #276]	; (8001994 <main+0x174>)
 800187e:	601a      	str	r2, [r3, #0]
	motor_mode = 1;
 8001880:	4b42      	ldr	r3, [pc, #264]	; (800198c <main+0x16c>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
	setPhaseVoltage(0.075, 0);
 8001886:	eddf 0a44 	vldr	s1, [pc, #272]	; 8001998 <main+0x178>
 800188a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800199c <main+0x17c>
 800188e:	f7ff fb3f 	bl	8000f10 <setPhaseVoltage>
		delay_ms(100);
		setPhaseVoltage(0.075, 300);
		delay_ms(100);
	}*/
	while(1) {
		UART_write_float(rpm, 2);
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <main+0x180>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe22 	bl	80004e0 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	2002      	movs	r0, #2
 80018a2:	ec43 2b10 	vmov	d0, r2, r3
 80018a6:	f7ff ff0b 	bl	80016c0 <UART_write_float>
		UART_send('\n');
 80018aa:	200a      	movs	r0, #10
 80018ac:	f7ff fef0 	bl	8001690 <UART_send>
		delay_ms(50);
 80018b0:	2032      	movs	r0, #50	; 0x32
 80018b2:	f000 fba1 	bl	8001ff8 <delay_ms>
		if(power < 0.97) {
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <main+0x170>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe10 	bl	80004e0 <__aeabi_f2d>
 80018c0:	a32b      	add	r3, pc, #172	; (adr r3, 8001970 <main+0x150>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7ff f8d5 	bl	8000a74 <__aeabi_dcmplt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <main+0xbc>
			power += 0.003;
		} else {
			break;
 80018d0:	bf00      	nop
		}
	}
	delay_ms(500);
 80018d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d6:	f000 fb8f 	bl	8001ff8 <delay_ms>
 80018da:	e013      	b.n	8001904 <main+0xe4>
			power += 0.003;
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <main+0x170>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fdfd 	bl	80004e0 <__aeabi_f2d>
 80018e6:	a324      	add	r3, pc, #144	; (adr r3, 8001978 <main+0x158>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fc9a 	bl	8000224 <__adddf3>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7ff f90c 	bl	8000b14 <__aeabi_d2f>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4a24      	ldr	r2, [pc, #144]	; (8001990 <main+0x170>)
 8001900:	6013      	str	r3, [r2, #0]
		UART_write_float(rpm, 2);
 8001902:	e7c6      	b.n	8001892 <main+0x72>
	while(1) {
		UART_write_float(rpm, 2);
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <main+0x180>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fde9 	bl	80004e0 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	2002      	movs	r0, #2
 8001914:	ec43 2b10 	vmov	d0, r2, r3
 8001918:	f7ff fed2 	bl	80016c0 <UART_write_float>
		UART_send('\n');
 800191c:	200a      	movs	r0, #10
 800191e:	f7ff feb7 	bl	8001690 <UART_send>
		delay_ms(50);
 8001922:	2032      	movs	r0, #50	; 0x32
 8001924:	f000 fb68 	bl	8001ff8 <delay_ms>
		if(power > 0.2) {
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <main+0x170>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fdd7 	bl	80004e0 <__aeabi_f2d>
 8001932:	a313      	add	r3, pc, #76	; (adr r3, 8001980 <main+0x160>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7ff f8ba 	bl	8000ab0 <__aeabi_dcmpgt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <main+0x148>
			power -= 0.003;
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <main+0x170>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdca 	bl	80004e0 <__aeabi_f2d>
 800194c:	a30a      	add	r3, pc, #40	; (adr r3, 8001978 <main+0x158>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fc65 	bl	8000220 <__aeabi_dsub>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f8d9 	bl	8000b14 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <main+0x170>)
 8001966:	6013      	str	r3, [r2, #0]
		UART_write_float(rpm, 2);
 8001968:	e7cc      	b.n	8001904 <main+0xe4>
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w
 8001970:	70a3d70a 	.word	0x70a3d70a
 8001974:	3fef0a3d 	.word	0x3fef0a3d
 8001978:	bc6a7efa 	.word	0xbc6a7efa
 800197c:	3f689374 	.word	0x3f689374
 8001980:	9999999a 	.word	0x9999999a
 8001984:	3fc99999 	.word	0x3fc99999
 8001988:	47e10000 	.word	0x47e10000
 800198c:	20000bbc 	.word	0x20000bbc
 8001990:	20000bb8 	.word	0x20000bb8
 8001994:	3e4ccccd 	.word	0x3e4ccccd
 8001998:	00000000 	.word	0x00000000
 800199c:	3d99999a 	.word	0x3d99999a
 80019a0:	20000bb4 	.word	0x20000bb4

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <GPIO_init>:
#include <math.h>

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void GPIO_init() {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 0b1111111;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <GPIO_init+0xac>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <GPIO_init+0xac>)
 8001a3e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8001a42:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->OTYPER &= ~(1<<3);
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <GPIO_init+0xb0>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <GPIO_init+0xb0>)
 8001a4a:	f023 0308 	bic.w	r3, r3, #8
 8001a4e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(1<<4);
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <GPIO_init+0xb0>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <GPIO_init+0xb0>)
 8001a56:	f023 0310 	bic.w	r3, r3, #16
 8001a5a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (1<<7);
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <GPIO_init+0xb0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <GPIO_init+0xb0>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<9);
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <GPIO_init+0xb0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <GPIO_init+0xb0>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6093      	str	r3, [r2, #8]

	GPIOB->MODER |= 1<<6;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <GPIO_init+0xb0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <GPIO_init+0xb0>)
 8001a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <GPIO_init+0xb0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <GPIO_init+0xb0>)
 8001a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a8a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <GPIO_init+0xb0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <GPIO_init+0xb0>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <GPIO_init+0xb0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <GPIO_init+0xb0>)
 8001a9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aa2:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= 1<<6;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <GPIO_init+0xb0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <GPIO_init+0xb0>)
 8001aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <GPIO_init+0xb0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <GPIO_init+0xb0>)
 8001ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <GPIO_init+0xb0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <GPIO_init+0xb0>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <GPIO_init+0xb0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <GPIO_init+0xb0>)
 8001ace:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <TIM2_on>:

void TIM1_on() {
	TIM1->CR1 |= 1;
}

void TIM2_on() {
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 1;
 8001aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <TIM3_on>:

void TIM3_on() {
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 1;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <TIM3_on+0x1c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <TIM3_on+0x1c>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40000400 	.word	0x40000400

08001b28 <TIM4_on>:

void TIM4_on() {
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 1;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <TIM4_on+0x1c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <TIM4_on+0x1c>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40000800 	.word	0x40000800

08001b48 <TIM4_off>:

void TIM3_off() {
	TIM3->CR1 &= ~1;
}

void TIM4_off() {
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~1;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <TIM4_off+0x1c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <TIM4_off+0x1c>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40000800 	.word	0x40000800

08001b68 <TIM1_init>:
	TIM8->CR1 &= ~1;
}

//---------------------

void TIM1_init() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= 1 << 11;
 8001b6c:	4b98      	ldr	r3, [pc, #608]	; (8001dd0 <TIM1_init+0x268>)
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b70:	4a97      	ldr	r2, [pc, #604]	; (8001dd0 <TIM1_init+0x268>)
 8001b72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b76:	6613      	str	r3, [r2, #96]	; 0x60

    //PA[8] - 1P
    GPIOA->AFR[1] |= 0b0110;
 8001b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b82:	f043 0306 	orr.w	r3, r3, #6
 8001b86:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 16);
 8001b88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 17;
 8001b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 16;
 8001ba8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6093      	str	r3, [r2, #8]

    //PA[7] - 1N
    GPIOA->AFR[0] |= 0b0110 << 28;
 8001bb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bc2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001bc6:	6213      	str	r3, [r2, #32]
	GPIOA->MODER &= ~(1 << 14);
 8001bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 15;
 8001bd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 14;
 8001be8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6093      	str	r3, [r2, #8]

    //PA[9] - 2P
    GPIOA->AFR[1] |= 0b0110 << 4;
 8001bf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c06:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 18);
 8001c08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 19;
 8001c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c26:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 18;
 8001c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6093      	str	r3, [r2, #8]

    //PB[0] - 2N
    GPIOB->AFR[0] |= 0b0110;
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <TIM1_init+0x26c>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <TIM1_init+0x26c>)
 8001c3e:	f043 0306 	orr.w	r3, r3, #6
 8001c42:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~1;
 8001c44:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <TIM1_init+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a62      	ldr	r2, [pc, #392]	; (8001dd4 <TIM1_init+0x26c>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1 << 1;
 8001c50:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <TIM1_init+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a5f      	ldr	r2, [pc, #380]	; (8001dd4 <TIM1_init+0x26c>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= 0b11;
 8001c5c:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <TIM1_init+0x26c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a5c      	ldr	r2, [pc, #368]	; (8001dd4 <TIM1_init+0x26c>)
 8001c62:	f043 0303 	orr.w	r3, r3, #3
 8001c66:	6093      	str	r3, [r2, #8]

    //PA[10] - 3P
    GPIOA->AFR[1] |= 0b0110 << 8;
 8001c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001c76:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 20);
 8001c78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 21;
 8001c88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c96:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 20;
 8001c98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6093      	str	r3, [r2, #8]

    //PF[0] - 3N
    GPIOF->AFR[0] |= 0b0110;
 8001ca8:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <TIM1_init+0x270>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a4a      	ldr	r2, [pc, #296]	; (8001dd8 <TIM1_init+0x270>)
 8001cae:	f043 0306 	orr.w	r3, r3, #6
 8001cb2:	6213      	str	r3, [r2, #32]
	GPIOF->MODER &= ~1;
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <TIM1_init+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a47      	ldr	r2, [pc, #284]	; (8001dd8 <TIM1_init+0x270>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= 1 << 1;
 8001cc0:	4b45      	ldr	r3, [pc, #276]	; (8001dd8 <TIM1_init+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a44      	ldr	r2, [pc, #272]	; (8001dd8 <TIM1_init+0x270>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= 0b11;
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <TIM1_init+0x270>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a41      	ldr	r2, [pc, #260]	; (8001dd8 <TIM1_init+0x270>)
 8001cd2:	f043 0303 	orr.w	r3, r3, #3
 8001cd6:	6093      	str	r3, [r2, #8]

    TIM1->CR1 = 0;
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <TIM1_init+0x274>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    TIM1->CR2 = 0;
 8001cde:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <TIM1_init+0x274>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	605a      	str	r2, [r3, #4]

    TIM1->CR1 |= 1 << 7; //Auto-preload enable    
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <TIM1_init+0x274>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3c      	ldr	r2, [pc, #240]	; (8001ddc <TIM1_init+0x274>)
 8001cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cee:	6013      	str	r3, [r2, #0]
//    TIM1->CR1 |= 0b01 << 5; //Center-aligned mode 1
    TIM1->CR1 |= 0b10 << 5; //Center-aligned mode 2
 8001cf0:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <TIM1_init+0x274>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a39      	ldr	r2, [pc, #228]	; (8001ddc <TIM1_init+0x274>)
 8001cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfa:	6013      	str	r3, [r2, #0]

    TIM1->CCMR1 = 0;
 8001cfc:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <TIM1_init+0x274>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
    TIM1->CCMR1 |= 0b110 << 12;
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <TIM1_init+0x274>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	4a35      	ldr	r2, [pc, #212]	; (8001ddc <TIM1_init+0x274>)
 8001d08:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001d0c:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= 0b110 << 4;
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <TIM1_init+0x274>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	4a32      	ldr	r2, [pc, #200]	; (8001ddc <TIM1_init+0x274>)
 8001d14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d18:	6193      	str	r3, [r2, #24]

    TIM1->CCMR2 = 0;
 8001d1a:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <TIM1_init+0x274>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61da      	str	r2, [r3, #28]
    TIM1->CCMR2 |= 0b110 << 4;
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <TIM1_init+0x274>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <TIM1_init+0x274>)
 8001d26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d2a:	61d3      	str	r3, [r2, #28]

    TIM1->CCMR2 = 0;
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <TIM1_init+0x274>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= 0b110 << 4;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <TIM1_init+0x274>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <TIM1_init+0x274>)
 8001d38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d3c:	61d3      	str	r3, [r2, #28]

    TIM1->ARR = MAX_PWM;
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <TIM1_init+0x274>)
 8001d40:	f240 326b 	movw	r2, #875	; 0x36b
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC = 0;
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <TIM1_init+0x274>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28

    TIM1->CNT = 0;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <TIM1_init+0x274>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

    TIM1->CCER = 0;
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <TIM1_init+0x274>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= 0b010101010101; //enable outputs
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <TIM1_init+0x274>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <TIM1_init+0x274>)
 8001d5e:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8001d62:	f043 0305 	orr.w	r3, r3, #5
 8001d66:	6213      	str	r3, [r2, #32]

	TIM1->CCER |= TIM_CCER_CC1NP;
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <TIM1_init+0x274>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <TIM1_init+0x274>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2NP;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <TIM1_init+0x274>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <TIM1_init+0x274>)
 8001d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7e:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3NP;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <TIM1_init+0x274>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <TIM1_init+0x274>)
 8001d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8a:	6213      	str	r3, [r2, #32]
	TIM1->CCR1 = 0;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <TIM1_init+0x274>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <TIM1_init+0x274>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <TIM1_init+0x274>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c

	//OC4
//	TIM1->CCMR2 |= 0b001 << 12;
//	TIM1->CCER |= 1 << 16;
	TIM1->CCR4 = 0;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <TIM1_init+0x274>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
//    TIM1->CCMR3 = 0;
//	TIM1->CCMR3 |= 0b110 << 4;
//	TIM1->CCER |= 1 << 16;
//	TIM1->CCR5 = 0;

	TIM1->BDTR |= 1 << 15;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <TIM1_init+0x274>)
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <TIM1_init+0x274>)
 8001daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dae:	6453      	str	r3, [r2, #68]	; 0x44

	NVIC_SetPriority(TIM1_CC_IRQn, 2);
 8001db0:	2102      	movs	r1, #2
 8001db2:	201b      	movs	r0, #27
 8001db4:	f7ff fe14 	bl	80019e0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001db8:	201b      	movs	r0, #27
 8001dba:	f7ff fdf3 	bl	80019a4 <__NVIC_EnableIRQ>

    TIM1->CR1 |= 1;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <TIM1_init+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <TIM1_init+0x274>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6013      	str	r3, [r2, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48001400 	.word	0x48001400
 8001ddc:	40012c00 	.word	0x40012c00

08001de0 <TIM2_init>:

void TIM2_init() {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <TIM2_init+0x7c>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <TIM2_init+0x7c>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6593      	str	r3, [r2, #88]	; 0x58

    TIM2->CR1 = 0;
 8001df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    TIM2->CR2 = 0;
 8001df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]

    TIM2->CR1 |= 1 << 7;
 8001e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0e:	6013      	str	r3, [r2, #0]

    TIM2->ARR = 1000;
 8001e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC = 170 - 1;
 8001e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e1e:	22a9      	movs	r2, #169	; 0xa9
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->CNT = 0;
 8001e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

    TIM2->EGR |= 1;
 8001e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6153      	str	r3, [r2, #20]

    TIM2->DIER |= 1;
 8001e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 3);
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	201c      	movs	r0, #28
 8001e4e:	f7ff fdc7 	bl	80019e0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8001e52:	201c      	movs	r0, #28
 8001e54:	f7ff fda6 	bl	80019a4 <__NVIC_EnableIRQ>

//	TIM2->CR1 |= 1;
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000

08001e60 <TIM3_init>:

void TIM3_init() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 1;
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <TIM3_init+0x80>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <TIM3_init+0x80>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58

    TIM3->CR1 = 0;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <TIM3_init+0x84>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
    TIM3->CR2 = 0;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <TIM3_init+0x84>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]

    TIM3->CR1 |= 1 << 7;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <TIM3_init+0x84>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <TIM3_init+0x84>)
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	6013      	str	r3, [r2, #0]

    float freq = 50000;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <TIM3_init+0x88>)
 8001e8c:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 8001e8e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001eec <TIM3_init+0x8c>
 8001e92:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9a:	edc7 7a00 	vstr	s15, [r7]
    TIM3->ARR = (uint16_t)f;
 8001e9e:	edd7 7a00 	vldr	s15, [r7]
 8001ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea6:	ee17 3a90 	vmov	r3, s15
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <TIM3_init+0x84>)
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 0;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <TIM3_init+0x84>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28

    TIM3->CNT = 0;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <TIM3_init+0x84>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24

    TIM3->DIER |= 1;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <TIM3_init+0x84>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <TIM3_init+0x84>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	60d3      	str	r3, [r2, #12]
//    TIM3->CR1 |= 1;
    NVIC_SetPriority(TIM3_IRQn, 2);
 8001ec8:	2102      	movs	r1, #2
 8001eca:	201d      	movs	r0, #29
 8001ecc:	f7ff fd88 	bl	80019e0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 8001ed0:	201d      	movs	r0, #29
 8001ed2:	f7ff fd67 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	47435000 	.word	0x47435000
 8001eec:	4d221fe8 	.word	0x4d221fe8

08001ef0 <TIM4_init>:

void TIM4_init() {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 2;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <TIM4_init+0x7c>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <TIM4_init+0x7c>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6593      	str	r3, [r2, #88]	; 0x58

    TIM4->CR1 = 0;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <TIM4_init+0x80>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    TIM4->CR2 = 0;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <TIM4_init+0x80>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]

    TIM4->CR1 |= 1 << 7;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <TIM4_init+0x80>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <TIM4_init+0x80>)
 8001f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f16:	6013      	str	r3, [r2, #0]

    TIM4->ARR |= 0xFFFFF;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <TIM4_init+0x80>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <TIM4_init+0x80>)
 8001f1e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001f22:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001f26:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM4->PSC = 0;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <TIM4_init+0x80>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28

    TIM4->CNT = 0;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <TIM4_init+0x80>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

    TIM4->EGR |= 1;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <TIM4_init+0x80>)
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <TIM4_init+0x80>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6153      	str	r3, [r2, #20]

    TIM4->DIER |= 1;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <TIM4_init+0x80>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <TIM4_init+0x80>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	60d3      	str	r3, [r2, #12]

    TIM4->SR &= ~(0x1);
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <TIM4_init+0x80>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <TIM4_init+0x80>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6113      	str	r3, [r2, #16]

    // TIM4->CR1 |= 1;
    NVIC_SetPriority(TIM4_IRQn, 5);
 8001f58:	2105      	movs	r1, #5
 8001f5a:	201e      	movs	r0, #30
 8001f5c:	f7ff fd40 	bl	80019e0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn);
 8001f60:	201e      	movs	r0, #30
 8001f62:	f7ff fd1f 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40000800 	.word	0x40000800

08001f74 <TIM6_init>:

void TIM6_init() {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 4;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <TIM6_init+0x74>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <TIM6_init+0x74>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58

    TIM6->CR1 = 0;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <TIM6_init+0x78>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    TIM6->CR2 = 0;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <TIM6_init+0x78>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	605a      	str	r2, [r3, #4]

    float freq = 10000;
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <TIM6_init+0x7c>)
 8001f94:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 8001f96:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001ff4 <TIM6_init+0x80>
 8001f9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa2:	edc7 7a00 	vstr	s15, [r7]
    // TIM6->ARR |= ((uint32_t)f & 0x000FFFFF);
    // TIM6->ARR = (uint32_t)f;
    TIM6->ARR |= 0xFFFFF;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <TIM6_init+0x78>)
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <TIM6_init+0x78>)
 8001fac:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001fb0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM6->PSC = (uint16_t)f - 1;
 8001fb6:	edd7 7a00 	vldr	s15, [r7]
 8001fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbe:	ee17 3a90 	vmov	r3, s15
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <TIM6_init+0x78>)
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28

    TIM6->CNT = 0;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <TIM6_init+0x78>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24

    TIM6->EGR |= 1;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <TIM6_init+0x78>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	4a05      	ldr	r2, [pc, #20]	; (8001fec <TIM6_init+0x78>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6153      	str	r3, [r2, #20]

    // TIM6->CR1 |= 1;
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40001000 	.word	0x40001000
 8001ff0:	461c4000 	.word	0x461c4000
 8001ff4:	4d221fe8 	.word	0x4d221fe8

08001ff8 <delay_ms>:

void delay_ms(uint16_t d) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
	TIM6->CNT = 0;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <delay_ms+0x5c>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = 17000 - 1;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <delay_ms+0x5c>)
 800200a:	f244 2267 	movw	r2, #16999	; 0x4267
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->EGR |= 1;
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <delay_ms+0x5c>)
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <delay_ms+0x5c>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= 1;
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <delay_ms+0x5c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <delay_ms+0x5c>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6013      	str	r3, [r2, #0]
	while(TIM6->CNT < d*10);
 8002028:	bf00      	nop
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <delay_ms+0x5c>)
 800202c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4299      	cmp	r1, r3
 800203a:	d3f6      	bcc.n	800202a <delay_ms+0x32>
	TIM6->CR1 &= ~1;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <delay_ms+0x5c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <delay_ms+0x5c>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40001000 	.word	0x40001000

08002058 <TIM8_init>:
	TIM6->CR1 |= 1;
	while(TIM6->CNT < d);
	TIM6->CR1 &= ~1;
}

void TIM8_init() {
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 1 << 13;
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <TIM8_init+0xf0>)
 800205e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002060:	4a39      	ldr	r2, [pc, #228]	; (8002148 <TIM8_init+0xf0>)
 8002062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002066:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2ENR |= 0b1111111;
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <TIM8_init+0xf0>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	4a36      	ldr	r2, [pc, #216]	; (8002148 <TIM8_init+0xf0>)
 800206e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8002072:	6613      	str	r3, [r2, #96]	; 0x60

	//PA15 - TIM8_CH1
	GPIOA->AFR[1] |= 0b0010 << 28;
 8002074:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800207e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002082:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1<<30);
 8002084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800208e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002092:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1<<31;
 8002094:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800209e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020a2:	6013      	str	r3, [r2, #0]

	//PB8 - TIM8_CH2
	GPIOB->AFR[1] |= 0b1010;
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <TIM8_init+0xf4>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <TIM8_init+0xf4>)
 80020aa:	f043 030a 	orr.w	r3, r3, #10
 80020ae:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~(1<<16);
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <TIM8_init+0xf4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM8_init+0xf4>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<17;
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <TIM8_init+0xf4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <TIM8_init+0xf4>)
 80020c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c6:	6013      	str	r3, [r2, #0]

	//PB6 <> TIM8_ETR
	GPIOB->AFR[0] |= 0b0110 << 24;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <TIM8_init+0xf4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a1f      	ldr	r2, [pc, #124]	; (800214c <TIM8_init+0xf4>)
 80020ce:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80020d2:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~(1<<12);
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <TIM8_init+0xf4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <TIM8_init+0xf4>)
 80020da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020de:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<13;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <TIM8_init+0xf4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <TIM8_init+0xf4>)
 80020e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ea:	6013      	str	r3, [r2, #0]

    TIM8->CR1 = 0;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <TIM8_init+0xf8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

    TIM8->CR2 = 0;
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <TIM8_init+0xf8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
    TIM8->SMCR = 0b0011;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <TIM8_init+0xf8>)
 80020fa:	2203      	movs	r2, #3
 80020fc:	609a      	str	r2, [r3, #8]
    TIM8->CCMR1 |= 0b01 << 8;
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <TIM8_init+0xf8>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <TIM8_init+0xf8>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6193      	str	r3, [r2, #24]
    TIM8->CCMR1 |= 0b01;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <TIM8_init+0xf8>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <TIM8_init+0xf8>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6193      	str	r3, [r2, #24]
    TIM8->ECR = 1;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <TIM8_init+0xf8>)
 8002118:	2201      	movs	r2, #1
 800211a:	659a      	str	r2, [r3, #88]	; 0x58

    TIM8->ARR |= 0xFFFFF;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <TIM8_init+0xf8>)
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <TIM8_init+0xf8>)
 8002122:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002126:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800212a:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM8->CNT = 0;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <TIM8_init+0xf8>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

    TIM8->CR1 |= 1;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <TIM8_init+0xf8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a06      	ldr	r2, [pc, #24]	; (8002150 <TIM8_init+0xf8>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6013      	str	r3, [r2, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000
 800214c:	48000400 	.word	0x48000400
 8002150:	40013400 	.word	0x40013400

08002154 <COMP_init>:

//---------------------------------------------------

void COMP_init() {
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	//PA0 - U - COMP1_INM
	GPIOA->MODER |= 0b11;
 8002158:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002162:	f043 0303 	orr.w	r3, r3, #3
 8002166:	6013      	str	r3, [r2, #0]

	//PA1 - X - COMP1_INP
	GPIOA->MODER |= 0b11 << 2;
 8002168:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002172:	f043 030c 	orr.w	r3, r3, #12
 8002176:	6013      	str	r3, [r2, #0]

	//PA3 - W - COMP2_INP
	GPIOA->MODER |= 0b11 << 6;
 8002178:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002186:	6013      	str	r3, [r2, #0]

	//PA4 - V - COMP1_INM
	GPIOA->MODER |= 0b11 << 8;
 8002188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002192:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002196:	6013      	str	r3, [r2, #0]

	//PA5 - X - COMP2_INM
	GPIOA->MODER |= 0b11 << 10;
 8002198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80021a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80021a6:	6013      	str	r3, [r2, #0]


	COMP1->CSR |= (0b111 << 16);
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <COMP_init+0x108>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2b      	ldr	r2, [pc, #172]	; (800225c <COMP_init+0x108>)
 80021ae:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80021b2:	6013      	str	r3, [r2, #0]
	COMP1->CSR &= ~(0b1 << 8);	//Set COMP1_INP - PA1 (X)
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <COMP_init+0x108>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a28      	ldr	r2, [pc, #160]	; (800225c <COMP_init+0x108>)
 80021ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021be:	6013      	str	r3, [r2, #0]
	COMP1->CSR |= (0b111 << 4);	//Set COMP1_INM - PA0 (U)
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <COMP_init+0x108>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <COMP_init+0x108>)
 80021c6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80021ca:	6013      	str	r3, [r2, #0]
//	COMP1->CSR |= (0b001 << 19);

	COMP2->CSR |= (0b111 << 16);
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <COMP_init+0x10c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <COMP_init+0x10c>)
 80021d2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80021d6:	6013      	str	r3, [r2, #0]
	COMP2->CSR |= 0b1 << 8;		//Set COMP2_INP - PA3 (W)
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <COMP_init+0x10c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a20      	ldr	r2, [pc, #128]	; (8002260 <COMP_init+0x10c>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	6013      	str	r3, [r2, #0]
	COMP2->CSR |= (0b110 << 4);	//Set COMP2_INM - PA5 (X)
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <COMP_init+0x10c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <COMP_init+0x10c>)
 80021ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021ee:	6013      	str	r3, [r2, #0]
//	COMP2->CSR |= (0b001 << 19);

	//EXTI Interrupt masks
	EXTI->IMR1 |= 1 << 21;
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <COMP_init+0x110>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <COMP_init+0x110>)
 80021f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021fa:	6013      	str	r3, [r2, #0]
	EXTI->IMR1 |= 1 << 22;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <COMP_init+0x110>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a18      	ldr	r2, [pc, #96]	; (8002264 <COMP_init+0x110>)
 8002202:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002206:	6013      	str	r3, [r2, #0]

	EXTI->RTSR1 |= 1 << 21;
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <COMP_init+0x110>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <COMP_init+0x110>)
 800220e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002212:	6093      	str	r3, [r2, #8]
	EXTI->RTSR1 |= 1 << 22;
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <COMP_init+0x110>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <COMP_init+0x110>)
 800221a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800221e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 |= 1 << 21;
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <COMP_init+0x110>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <COMP_init+0x110>)
 8002226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222a:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR1 |= 1 << 22;
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <COMP_init+0x110>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <COMP_init+0x110>)
 8002232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002236:	60d3      	str	r3, [r2, #12]

//    NVIC_SetPriority(COMP1_2_3_IRQn, 5);
//    NVIC_EnableIRQ(COMP1_2_3_IRQn);

    //Enable COMPs
    COMP1->CSR |= 0b1;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <COMP_init+0x108>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <COMP_init+0x108>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]
	COMP2->CSR |= 0b1;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <COMP_init+0x10c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <COMP_init+0x10c>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40010200 	.word	0x40010200
 8002260:	40010204 	.word	0x40010204
 8002264:	40010400 	.word	0x40010400

08002268 <SystemClock_Config>:

void SystemClock_Config(void) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b094      	sub	sp, #80	; 0x50
 800226c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226e:	f107 0318 	add.w	r3, r7, #24
 8002272:	2238      	movs	r2, #56	; 0x38
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f002 fdb0 	bl	8004ddc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800228a:	2000      	movs	r0, #0
 800228c:	f001 fdf2 	bl	8003e74 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800229a:	2340      	movs	r3, #64	; 0x40
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229e:	2302      	movs	r3, #2
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022a2:	2302      	movs	r3, #2
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 21;
 80022aa:	2315      	movs	r3, #21
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022b6:	2302      	movs	r3, #2
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ba:	f107 0318 	add.w	r3, r7, #24
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 fe7c 	bl	8003fbc <HAL_RCC_OscConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0x66>
	{
	Error_Handler();
 80022ca:	f000 f8f7 	bl	80024bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ce:	230f      	movs	r3, #15
 80022d0:	607b      	str	r3, [r7, #4]
	                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d2:	2303      	movs	r3, #3
 80022d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2104      	movs	r1, #4
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 f980 	bl	80045ec <HAL_RCC_ClockConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SystemClock_Config+0x8e>
	{
	Error_Handler();
 80022f2:	f000 f8e3 	bl	80024bc <Error_Handler>
	}
}
 80022f6:	bf00      	nop
 80022f8:	3750      	adds	r7, #80	; 0x50
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <MX_ADC1_Init>:

void MX_ADC1_Init(void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2220      	movs	r2, #32
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fd5f 	bl	8004ddc <memset>

	hadc1.Instance = ADC1;
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002324:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002328:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800232c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800232e:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <MX_ADC1_Init+0xe8>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002348:	2204      	movs	r2, #4
 800234a:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <MX_ADC1_Init+0xe8>)
 800234e:	2200      	movs	r2, #0
 8002350:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002354:	2200      	movs	r2, #0
 8002356:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <MX_ADC1_Init+0xe8>)
 800235a:	2201      	movs	r2, #1
 800235c:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002368:	2200      	movs	r2, #0
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <MX_ADC1_Init+0xe8>)
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_ADC1_Init+0xe8>)
 800237c:	2200      	movs	r2, #0
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_ADC1_Init+0xe8>)
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002388:	4817      	ldr	r0, [pc, #92]	; (80023e8 <MX_ADC1_Init+0xe8>)
 800238a:	f000 fcc9 	bl	8002d20 <HAL_ADC_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_ADC1_Init+0x98>
	{
	Error_Handler();
 8002394:	f000 f892 	bl	80024bc <Error_Handler>
	}

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	4811      	ldr	r0, [pc, #68]	; (80023e8 <MX_ADC1_Init+0xe8>)
 80023a4:	f001 fa5c 	bl	8003860 <HAL_ADCEx_MultiModeConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_ADC1_Init+0xb2>
	{
	Error_Handler();
 80023ae:	f000 f885 	bl	80024bc <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_ADC1_Init+0xec>)
 80023b4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80023b6:	2306      	movs	r3, #6
 80023b8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023be:	237f      	movs	r3, #127	; 0x7f
 80023c0:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023c2:	2304      	movs	r3, #4
 80023c4:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <MX_ADC1_Init+0xe8>)
 80023d0:	f000 fe30 	bl	8003034 <HAL_ADC_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_ADC1_Init+0xde>
	{
	Error_Handler();
 80023da:	f000 f86f 	bl	80024bc <Error_Handler>
	}
}
 80023de:	bf00      	nop
 80023e0:	3730      	adds	r7, #48	; 0x30
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000be8 	.word	0x20000be8
 80023ec:	0c900008 	.word	0x0c900008

080023f0 <MX_ADC2_Init>:

void MX_ADC2_Init(void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80023f6:	463b      	mov	r3, r7
 80023f8:	2220      	movs	r2, #32
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 fced 	bl	8004ddc <memset>

	hadc2.Instance = ADC2;
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002404:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <MX_ADC2_Init+0xc4>)
 8002406:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <MX_ADC2_Init+0xc0>)
 800240a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800240e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <MX_ADC2_Init+0xc0>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_ADC2_Init+0xc0>)
 800242a:	2204      	movs	r2, #4
 800242c:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002436:	2200      	movs	r2, #0
 8002438:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_ADC2_Init+0xc0>)
 800243c:	2201      	movs	r2, #1
 800243e:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_ADC2_Init+0xc0>)
 800244a:	2200      	movs	r2, #0
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_ADC2_Init+0xc0>)
 800245e:	2200      	movs	r2, #0
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if(HAL_ADC_Init(&hadc2) != HAL_OK)
 800246a:	4811      	ldr	r0, [pc, #68]	; (80024b0 <MX_ADC2_Init+0xc0>)
 800246c:	f000 fc58 	bl	8002d20 <HAL_ADC_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_ADC2_Init+0x8a>
	{
	Error_Handler();
 8002476:	f000 f821 	bl	80024bc <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_ADC2_Init+0xc8>)
 800247c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800247e:	2306      	movs	r3, #6
 8002480:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002486:	237f      	movs	r3, #127	; 0x7f
 8002488:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800248a:	2304      	movs	r3, #4
 800248c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
	if(HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002492:	463b      	mov	r3, r7
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_ADC2_Init+0xc0>)
 8002498:	f000 fdcc 	bl	8003034 <HAL_ADC_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_ADC2_Init+0xb6>
	{
	Error_Handler();
 80024a2:	f000 f80b 	bl	80024bc <Error_Handler>
	}
}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000c54 	.word	0x20000c54
 80024b4:	50000100 	.word	0x50000100
 80024b8:	0c900008 	.word	0x0c900008

080024bc <Error_Handler>:

void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <Error_Handler+0x8>
	...

080024c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_MspInit+0x44>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <HAL_MspInit+0x44>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6613      	str	r3, [r2, #96]	; 0x60
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_MspInit+0x44>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_MspInit+0x44>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <HAL_MspInit+0x44>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6593      	str	r3, [r2, #88]	; 0x58
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_MspInit+0x44>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b09c      	sub	sp, #112	; 0x70
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	2244      	movs	r2, #68	; 0x44
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fc53 	bl	8004ddc <memset>
  if(hadc->Instance==ADC1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800253e:	d13e      	bne.n	80025be <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002544:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002546:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800254a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fa2f 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800255c:	f7ff ffae 	bl	80024bc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002560:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_ADC_MspInit+0x13c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a39      	ldr	r2, [pc, #228]	; (800264c <HAL_ADC_MspInit+0x13c>)
 8002568:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_ADC_MspInit+0x13c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10b      	bne.n	800258a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	4a36      	ldr	r2, [pc, #216]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800257c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_ADC_MspInit+0x140>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	4a30      	ldr	r2, [pc, #192]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025a2:	2304      	movs	r3, #4
 80025a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025a6:	2303      	movs	r3, #3
 80025a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f001 fada 	bl	8003b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025bc:	e042      	b.n	8002644 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a24      	ldr	r2, [pc, #144]	; (8002654 <HAL_ADC_MspInit+0x144>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d13d      	bne.n	8002644 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d4:	f107 0318 	add.w	r3, r7, #24
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 f9eb 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80025e4:	f7ff ff6a 	bl	80024bc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_ADC_MspInit+0x13c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_ADC_MspInit+0x13c>)
 80025f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_ADC_MspInit+0x13c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10b      	bne.n	8002612 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_ADC_MspInit+0x140>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_ADC_MspInit+0x140>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800262a:	2340      	movs	r3, #64	; 0x40
 800262c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262e:	2303      	movs	r3, #3
 8002630:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f001 fa96 	bl	8003b70 <HAL_GPIO_Init>
}
 8002644:	bf00      	nop
 8002646:	3770      	adds	r7, #112	; 0x70
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000cc0 	.word	0x20000cc0
 8002650:	40021000 	.word	0x40021000
 8002654:	50000100 	.word	0x50000100

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800265c:	e7fe      	b.n	800265c <NMI_Handler+0x4>

0800265e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <HardFault_Handler+0x4>

08002664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <MemManage_Handler+0x4>

0800266a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <BusFault_Handler+0x4>

08002670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <UsageFault_Handler+0x4>

08002676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a4:	f000 f944 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <SystemInit+0x20>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <SystemInit+0x20>)
 80026b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <TIM4_IRQHandler>:
#define B6	B5 * 2

static float music_tones[] = {D5, F5, D5, C5, A4, 0, A4};
static float music_delays[] = {600, 600, 600, 600, 1000, 200, 400, 0};

void TIM4_IRQHandler(void) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	static uint8_t phase = 1;
	if(TIM4->SR & 0x1){
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <TIM4_IRQHandler+0x40>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d015      	beq.n	800270c <TIM4_IRQHandler+0x3c>
		TIM4->SR &= ~(0x1);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <TIM4_IRQHandler+0x40>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <TIM4_IRQHandler+0x40>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6113      	str	r3, [r2, #16]
		BLDC_phase(phase + 1, TONE_POWER);
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <TIM4_IRQHandler+0x44>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002718 <TIM4_IRQHandler+0x48>
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fd43 	bl	8001184 <BLDC_phase>
//		setPhaseVoltage(0.15, phase*90);
		phase ^= 1;
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <TIM4_IRQHandler+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	f083 0301 	eor.w	r3, r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <TIM4_IRQHandler+0x44>)
 800270a:	701a      	strb	r2, [r3, #0]
	}
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40000800 	.word	0x40000800
 8002714:	20000b88 	.word	0x20000b88
 8002718:	3d4ccccd 	.word	0x3d4ccccd

0800271c <play_tone>:

void play_tone(float tone) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	ed87 0a01 	vstr	s0, [r7, #4]
	motor_on();
 8002726:	f7fe feff 	bl	8001528 <motor_on>
	TIM4_on();
 800272a:	f7ff f9fd 	bl	8001b28 <TIM4_on>
	TIM4_update_freq(tone*2);
 800272e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002732:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002736:	eeb0 0a67 	vmov.f32	s0, s15
 800273a:	f000 f857 	bl	80027ec <TIM4_update_freq>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <play_music>:

void play_music() {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	80fb      	strh	r3, [r7, #6]
	motor_on();
 8002752:	f7fe fee9 	bl	8001528 <motor_on>
	TIM4_on();
 8002756:	f7ff f9e7 	bl	8001b28 <TIM4_on>
	do {
		if(music_tones[i] < 0.5) {
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <play_music+0x8c>)
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	d502      	bpl.n	800277a <play_music+0x32>
			tone_off();
 8002774:	f000 f832 	bl	80027dc <tone_off>
 8002778:	e009      	b.n	800278e <play_music+0x46>
		} else {
			play_tone(music_tones[i]);
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <play_music+0x8c>)
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	f7ff ffc7 	bl	800271c <play_tone>
		}
		delay_ms(music_delays[i]);
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4a11      	ldr	r2, [pc, #68]	; (80027d8 <play_music+0x90>)
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800279e:	ee17 3a90 	vmov	r3, s15
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fc27 	bl	8001ff8 <delay_ms>
		i++;
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	3301      	adds	r3, #1
 80027ae:	80fb      	strh	r3, [r7, #6]
	}while(music_delays[i] != 0);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <play_music+0x90>)
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	d1c9      	bne.n	800275a <play_music+0x12>
	tone_off();
 80027c6:	f000 f809 	bl	80027dc <tone_off>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000b4c 	.word	0x20000b4c
 80027d8:	20000b68 	.word	0x20000b68

080027dc <tone_off>:

void tone_off() {
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	TIM4_off();
 80027e0:	f7ff f9b2 	bl	8001b48 <TIM4_off>
	motor_off();
 80027e4:	f7fe febc 	bl	8001560 <motor_off>
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <TIM4_update_freq>:

void TIM4_update_freq(float freq) {
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint32_t flag = TIM4->CR1 & 0b10;
//	TIM4->CR1 &= ~(1 << 1);

    float f = (float)(SYSCLK_FREQ/100) / freq;
 80027f6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002830 <TIM4_update_freq+0x44>
 80027fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80027fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002802:	edc7 7a03 	vstr	s15, [r7, #12]
    // TIM4->ARR |= ((uint32_t)f & 0x000FFFFF);
    TIM4->ARR = (uint32_t)f;
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <TIM4_update_freq+0x48>)
 8002808:	edd7 7a03 	vldr	s15, [r7, #12]
 800280c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002810:	ee17 2a90 	vmov	r2, s15
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC = 100 - 1;
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <TIM4_update_freq+0x48>)
 8002818:	2263      	movs	r2, #99	; 0x63
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

    TIM4->CNT = 0;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <TIM4_update_freq+0x48>)
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

//    TIM4->CR1 |= flag << 1;
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	49cf8500 	.word	0x49cf8500
 8002834:	40000800 	.word	0x40000800

08002838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800283a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800283c:	480d      	ldr	r0, [pc, #52]	; (8002874 <LoopForever+0x6>)
  ldr r1, =_edata
 800283e:	490e      	ldr	r1, [pc, #56]	; (8002878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <LoopForever+0xe>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002844:	e002      	b.n	800284c <LoopCopyDataInit>

08002846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284a:	3304      	adds	r3, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800284c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002850:	d3f9      	bcc.n	8002846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002854:	4c0b      	ldr	r4, [pc, #44]	; (8002884 <LoopForever+0x16>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002858:	e001      	b.n	800285e <LoopFillZerobss>

0800285a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800285c:	3204      	adds	r2, #4

0800285e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002860:	d3fb      	bcc.n	800285a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002862:	f7ff ff23 	bl	80026ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002866:	f002 fa95 	bl	8004d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800286a:	f7fe ffd9 	bl	8001820 <main>

0800286e <LoopForever>:

LoopForever:
    b LoopForever
 800286e:	e7fe      	b.n	800286e <LoopForever>
  ldr   r0, =_estack
 8002870:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002878:	20000b94 	.word	0x20000b94
  ldr r2, =_sidata
 800287c:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 8002880:	20000b94 	.word	0x20000b94
  ldr r4, =_ebss
 8002884:	20000cc8 	.word	0x20000cc8

08002888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC1_2_IRQHandler>

0800288a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002894:	2003      	movs	r0, #3
 8002896:	f001 f939 	bl	8003b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289a:	200f      	movs	r0, #15
 800289c:	f000 f80e 	bl	80028bc <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	71fb      	strb	r3, [r7, #7]
 80028aa:	e001      	b.n	80028b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028ac:	f7ff fe0c 	bl	80024c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b0:	79fb      	ldrb	r3, [r7, #7]

}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_InitTick+0x68>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d022      	beq.n	8002916 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_InitTick+0x6c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_InitTick+0x68>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 f936 	bl	8003b56 <HAL_SYSTICK_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10f      	bne.n	8002910 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	d809      	bhi.n	800290a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f6:	2200      	movs	r2, #0
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	f04f 30ff 	mov.w	r0, #4294967295
 80028fe:	f001 f910 	bl	8003b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_InitTick+0x70>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e007      	b.n	800291a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e004      	b.n	800291a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e001      	b.n	800291a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000b90 	.word	0x20000b90
 8002928:	20000b48 	.word	0x20000b48
 800292c:	20000b8c 	.word	0x20000b8c

08002930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_IncTick+0x1c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_IncTick+0x20>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4413      	add	r3, r2
 800293e:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_IncTick+0x1c>)
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	20000cc4 	.word	0x20000cc4
 8002950:	20000b90 	.word	0x20000b90

08002954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return uwTick;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_GetTick+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000cc4 	.word	0x20000cc4

0800296c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <LL_ADC_SetOffset+0x44>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	03fff000 	.word	0x03fff000

08002a1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3360      	adds	r3, #96	; 0x60
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b087      	sub	sp, #28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3360      	adds	r3, #96	; 0x60
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3360      	adds	r3, #96	; 0x60
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	615a      	str	r2, [r3, #20]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3330      	adds	r3, #48	; 0x30
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	4413      	add	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	211f      	movs	r1, #31
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	401a      	ands	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	f003 011f 	and.w	r1, r3, #31
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	431a      	orrs	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3314      	adds	r3, #20
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	0e5b      	lsrs	r3, r3, #25
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0d1b      	lsrs	r3, r3, #20
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2107      	movs	r1, #7
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	0d1b      	lsrs	r3, r3, #20
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	431a      	orrs	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d10a      	bne.n	8002bea <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002be8:	e00a      	b.n	8002c00 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	407f0000 	.word	0x407f0000

08002c10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6093      	str	r3, [r2, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c48:	d101      	bne.n	8002c4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c98:	d101      	bne.n	8002c9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <LL_ADC_IsEnabled+0x18>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <LL_ADC_IsEnabled+0x1a>
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d101      	bne.n	8002cea <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d101      	bne.n	8002d10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e177      	b.n	800302a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff fbe1 	bl	8002510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff67 	bl	8002c34 <LL_ADC_IsDeepPowerDownEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff4d 	bl	8002c10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff82 	bl	8002c84 <LL_ADC_IsInternalRegulatorEnabled>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d115      	bne.n	8002db2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff66 	bl	8002c5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d90:	4b9c      	ldr	r3, [pc, #624]	; (8003004 <HAL_ADC_Init+0x2e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	4a9c      	ldr	r2, [pc, #624]	; (8003008 <HAL_ADC_Init+0x2e8>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002da4:	e002      	b.n	8002dac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f9      	bne.n	8002da6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff64 	bl	8002c84 <LL_ADC_IsInternalRegulatorEnabled>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff75 	bl	8002cd2 <LL_ADC_REG_IsConversionOngoing>
 8002de8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 8110 	bne.w	8003018 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 810c 	bne.w	8003018 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff49 	bl	8002cac <LL_ADC_IsEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e24:	f7ff ff42 	bl	8002cac <LL_ADC_IsEnabled>
 8002e28:	4604      	mov	r4, r0
 8002e2a:	4878      	ldr	r0, [pc, #480]	; (800300c <HAL_ADC_Init+0x2ec>)
 8002e2c:	f7ff ff3e 	bl	8002cac <LL_ADC_IsEnabled>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4323      	orrs	r3, r4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4874      	ldr	r0, [pc, #464]	; (8003010 <HAL_ADC_Init+0x2f0>)
 8002e40:	f7ff fd94 	bl	800296c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7f5b      	ldrb	r3, [r3, #29]
 8002e48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	045b      	lsls	r3, r3, #17
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <HAL_ADC_Init+0x2f4>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff01 	bl	8002cd2 <LL_ADC_REG_IsConversionOngoing>
 8002ed0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff0e 	bl	8002cf8 <LL_ADC_INJ_IsConversionOngoing>
 8002edc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d16d      	bne.n	8002fc0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d16a      	bne.n	8002fc0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ef6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f06:	f023 0302 	bic.w	r3, r3, #2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6911      	ldr	r1, [r2, #16]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002f4a:	e013      	b.n	8002f74 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f70:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d118      	bne.n	8002fb0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	611a      	str	r2, [r3, #16]
 8002fae:	e007      	b.n	8002fc0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f023 010f 	bic.w	r1, r3, #15
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	1e5a      	subs	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe0:	e007      	b.n	8002ff2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 020f 	bic.w	r2, r2, #15
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	65da      	str	r2, [r3, #92]	; 0x5c
 8003002:	e011      	b.n	8003028 <HAL_ADC_Init+0x308>
 8003004:	20000b48 	.word	0x20000b48
 8003008:	053e2d63 	.word	0x053e2d63
 800300c:	50000100 	.word	0x50000100
 8003010:	50000300 	.word	0x50000300
 8003014:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003028:	7ffb      	ldrb	r3, [r7, #31]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd90      	pop	{r4, r7, pc}
 8003032:	bf00      	nop

08003034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0b6      	sub	sp, #216	; 0xd8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x22>
 8003052:	2302      	movs	r3, #2
 8003054:	e3c8      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x7b4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fe35 	bl	8002cd2 <LL_ADC_REG_IsConversionOngoing>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	f040 83ad 	bne.w	80037ca <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f7ff fd47 	bl	8002b10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fe23 	bl	8002cd2 <LL_ADC_REG_IsConversionOngoing>
 800308c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fe2f 	bl	8002cf8 <LL_ADC_INJ_IsConversionOngoing>
 800309a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800309e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 81d9 	bne.w	800345a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 81d4 	bne.w	800345a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ba:	d10f      	bne.n	80030dc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7ff fd4e 	bl	8002b68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fd08 	bl	8002aea <LL_ADC_SetSamplingTimeCommonConfig>
 80030da:	e00e      	b.n	80030fa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7ff fd3d 	bl	8002b68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fcf8 	bl	8002aea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	08db      	lsrs	r3, r3, #3
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d022      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6919      	ldr	r1, [r3, #16]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800312c:	f7ff fc52 	bl	80029d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6919      	ldr	r1, [r3, #16]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	461a      	mov	r2, r3
 800313e:	f7ff fc9e 	bl	8002a7e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7f1b      	ldrb	r3, [r3, #28]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x124>
 8003152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003156:	e000      	b.n	800315a <HAL_ADC_ConfigChannel+0x126>
 8003158:	2300      	movs	r3, #0
 800315a:	461a      	mov	r2, r3
 800315c:	f7ff fcaa 	bl	8002ab4 <LL_ADC_SetOffsetSaturation>
 8003160:	e17b      	b.n	800345a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fc57 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_ADC_ConfigChannel+0x15a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fc4c 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	0e9b      	lsrs	r3, r3, #26
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	e01e      	b.n	80031cc <HAL_ADC_ConfigChannel+0x198>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fc41 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80031bc:	2320      	movs	r3, #32
 80031be:	e004      	b.n	80031ca <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80031c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1b0>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	e018      	b.n	8003216 <HAL_ADC_ConfigChannel+0x1e2>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003208:	2320      	movs	r3, #32
 800320a:	e004      	b.n	8003216 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800320c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003216:	429a      	cmp	r2, r3
 8003218:	d106      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fc10 	bl	8002a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fbf4 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x220>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fbe9 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	f003 021f 	and.w	r2, r3, #31
 8003252:	e01e      	b.n	8003292 <HAL_ADC_ConfigChannel+0x25e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fbde 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 8003260:	4603      	mov	r3, r0
 8003262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800327a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e004      	b.n	8003290 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003286:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x276>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	e018      	b.n	80032dc <HAL_ADC_ConfigChannel+0x2a8>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e004      	b.n	80032dc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80032d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032dc:	429a      	cmp	r2, r3
 80032de:	d106      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fbad 	bl	8002a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fb91 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <HAL_ADC_ConfigChannel+0x2e6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fb86 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	e01e      	b.n	8003358 <HAL_ADC_ConfigChannel+0x324>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2102      	movs	r1, #2
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fb7b 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 8003326:	4603      	mov	r3, r0
 8003328:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800333c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	e004      	b.n	8003356 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800334c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x33c>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	e016      	b.n	800339e <HAL_ADC_ConfigChannel+0x36a>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e004      	b.n	800339e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800339e:	429a      	cmp	r2, r3
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fb4c 	bl	8002a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2103      	movs	r1, #3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fb30 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x3a8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2103      	movs	r1, #3
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fb25 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	e017      	b.n	800340c <HAL_ADC_ConfigChannel+0x3d8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2103      	movs	r1, #3
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fb1a 	bl	8002a1c <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e003      	b.n	800340a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x3f0>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	e011      	b.n	8003448 <HAL_ADC_ConfigChannel+0x414>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003434:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e003      	b.n	8003448 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003448:	429a      	cmp	r2, r3
 800344a:	d106      	bne.n	800345a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2200      	movs	r2, #0
 8003452:	2103      	movs	r1, #3
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff faf7 	bl	8002a48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fc24 	bl	8002cac <LL_ADC_IsEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8140 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	461a      	mov	r2, r3
 800347a:	f7ff fba1 	bl	8002bc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a8f      	ldr	r2, [pc, #572]	; (80036c0 <HAL_ADC_ConfigChannel+0x68c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	f040 8131 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x47e>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	0e9b      	lsrs	r3, r3, #26
 80034a0:	3301      	adds	r3, #1
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	bf94      	ite	ls
 80034aa:	2301      	movls	r3, #1
 80034ac:	2300      	movhi	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e019      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x4b2>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80034c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80034ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2b09      	cmp	r3, #9
 80034de:	bf94      	ite	ls
 80034e0:	2301      	movls	r3, #1
 80034e2:	2300      	movhi	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d079      	beq.n	80035de <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x4d2>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0e9b      	lsrs	r3, r3, #26
 80034fc:	3301      	adds	r3, #1
 80034fe:	069b      	lsls	r3, r3, #26
 8003500:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003504:	e015      	b.n	8003532 <HAL_ADC_ConfigChannel+0x4fe>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e003      	b.n	800352a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	3301      	adds	r3, #1
 800352c:	069b      	lsls	r3, r3, #26
 800352e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x51e>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	3301      	adds	r3, #1
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	e017      	b.n	8003582 <HAL_ADC_ConfigChannel+0x54e>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e003      	b.n	8003576 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800356e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	ea42 0103 	orr.w	r1, r2, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x574>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0e9b      	lsrs	r3, r3, #26
 8003598:	3301      	adds	r3, #1
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	051b      	lsls	r3, r3, #20
 80035a6:	e018      	b.n	80035da <HAL_ADC_ConfigChannel+0x5a6>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f003 021f 	and.w	r2, r3, #31
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035da:	430b      	orrs	r3, r1
 80035dc:	e081      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x5c6>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	3301      	adds	r3, #1
 80035f2:	069b      	lsls	r3, r3, #26
 80035f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f8:	e015      	b.n	8003626 <HAL_ADC_ConfigChannel+0x5f2>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003612:	2320      	movs	r3, #32
 8003614:	e003      	b.n	800361e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	3301      	adds	r3, #1
 8003620:	069b      	lsls	r3, r3, #26
 8003622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x612>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	3301      	adds	r3, #1
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	e017      	b.n	8003676 <HAL_ADC_ConfigChannel+0x642>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	61fb      	str	r3, [r7, #28]
  return result;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800365e:	2320      	movs	r3, #32
 8003660:	e003      	b.n	800366a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3301      	adds	r3, #1
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2101      	movs	r1, #1
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	ea42 0103 	orr.w	r1, r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x66e>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	3301      	adds	r3, #1
 800368e:	f003 021f 	and.w	r2, r3, #31
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	3b1e      	subs	r3, #30
 800369a:	051b      	lsls	r3, r3, #20
 800369c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036a0:	e01e      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x6ac>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	613b      	str	r3, [r7, #16]
  return result;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80036ba:	2320      	movs	r3, #32
 80036bc:	e006      	b.n	80036cc <HAL_ADC_ConfigChannel+0x698>
 80036be:	bf00      	nop
 80036c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	3b1e      	subs	r3, #30
 80036da:	051b      	lsls	r3, r3, #20
 80036dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e0:	430b      	orrs	r3, r1
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7ff fa3e 	bl	8002b68 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d071      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036f8:	483e      	ldr	r0, [pc, #248]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80036fa:	f7ff f95d 	bl	80029b8 <LL_ADC_GetCommonPathInternalCh>
 80036fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x6e2>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3a      	ldr	r2, [pc, #232]	; (80037fc <HAL_ADC_ConfigChannel+0x7c8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d127      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800371a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d121      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800372a:	d157      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003734:	4619      	mov	r1, r3
 8003736:	482f      	ldr	r0, [pc, #188]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003738:	f7ff f92b 	bl	8002992 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373c:	4b30      	ldr	r3, [pc, #192]	; (8003800 <HAL_ADC_ConfigChannel+0x7cc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	4a30      	ldr	r2, [pc, #192]	; (8003804 <HAL_ADC_ConfigChannel+0x7d0>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003756:	e002      	b.n	800375e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3b01      	subs	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f9      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003764:	e03a      	b.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_ADC_ConfigChannel+0x7d4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d113      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x764>
 8003770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	; (800380c <HAL_ADC_ConfigChannel+0x7d8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02a      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378e:	4619      	mov	r1, r3
 8003790:	4818      	ldr	r0, [pc, #96]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003792:	f7ff f8fe 	bl	8002992 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003796:	e021      	b.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_ADC_ConfigChannel+0x7dc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d11c      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_ADC_ConfigChannel+0x7d8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d011      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c0:	4619      	mov	r1, r3
 80037c2:	480c      	ldr	r0, [pc, #48]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80037c4:	f7ff f8e5 	bl	8002992 <LL_ADC_SetCommonPathInternalCh>
 80037c8:	e008      	b.n	80037dc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	37d8      	adds	r7, #216	; 0xd8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	80080000 	.word	0x80080000
 80037f4:	50000300 	.word	0x50000300
 80037f8:	c3210000 	.word	0xc3210000
 80037fc:	90c00010 	.word	0x90c00010
 8003800:	20000b48 	.word	0x20000b48
 8003804:	053e2d63 	.word	0x053e2d63
 8003808:	c7520000 	.word	0xc7520000
 800380c:	50000100 	.word	0x50000100
 8003810:	cb840000 	.word	0xcb840000

08003814 <LL_ADC_IsEnabled>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <LL_ADC_IsEnabled+0x18>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <LL_ADC_IsEnabled+0x1a>
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_REG_IsConversionOngoing>:
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d101      	bne.n	8003852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b0a1      	sub	sp, #132	; 0x84
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800387a:	2302      	movs	r3, #2
 800387c:	e08b      	b.n	8003996 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003886:	2300      	movs	r3, #0
 8003888:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800388a:	2300      	movs	r3, #0
 800388c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003896:	d102      	bne.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003898:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e001      	b.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e06a      	b.n	8003996 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ffb9 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 80038c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ffb3 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d14c      	bne.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d149      	bne.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038e0:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80038e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d028      	beq.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038fe:	035b      	lsls	r3, r3, #13
 8003900:	430b      	orrs	r3, r1
 8003902:	431a      	orrs	r2, r3
 8003904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003906:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003908:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800390c:	f7ff ff82 	bl	8003814 <LL_ADC_IsEnabled>
 8003910:	4604      	mov	r4, r0
 8003912:	4823      	ldr	r0, [pc, #140]	; (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003914:	f7ff ff7e 	bl	8003814 <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	4323      	orrs	r3, r4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d133      	bne.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003928:	f023 030f 	bic.w	r3, r3, #15
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	6811      	ldr	r1, [r2, #0]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	6892      	ldr	r2, [r2, #8]
 8003934:	430a      	orrs	r2, r1
 8003936:	431a      	orrs	r2, r3
 8003938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800393c:	e024      	b.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800393e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003948:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800394a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800394e:	f7ff ff61 	bl	8003814 <LL_ADC_IsEnabled>
 8003952:	4604      	mov	r4, r0
 8003954:	4812      	ldr	r0, [pc, #72]	; (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003956:	f7ff ff5d 	bl	8003814 <LL_ADC_IsEnabled>
 800395a:	4603      	mov	r3, r0
 800395c:	4323      	orrs	r3, r4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d112      	bne.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800396a:	f023 030f 	bic.w	r3, r3, #15
 800396e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003970:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003972:	e009      	b.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003986:	e000      	b.n	800398a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003988:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003992:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003996:	4618      	mov	r0, r3
 8003998:	3784      	adds	r7, #132	; 0x84
 800399a:	46bd      	mov	sp, r7
 800399c:	bd90      	pop	{r4, r7, pc}
 800399e:	bf00      	nop
 80039a0:	50000100 	.word	0x50000100
 80039a4:	50000300 	.word	0x50000300

080039a8 <__NVIC_SetPriorityGrouping>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_GetPriorityGrouping>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_GetPriorityGrouping+0x18>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 0307 	and.w	r3, r3, #7
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_SetPriority>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db0a      	blt.n	8003a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	490c      	ldr	r1, [pc, #48]	; (8003a58 <__NVIC_SetPriority+0x4c>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a34:	e00a      	b.n	8003a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4908      	ldr	r1, [pc, #32]	; (8003a5c <__NVIC_SetPriority+0x50>)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3b04      	subs	r3, #4
 8003a44:	0112      	lsls	r2, r2, #4
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	440b      	add	r3, r1
 8003a4a:	761a      	strb	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000e100 	.word	0xe000e100
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f1c3 0307 	rsb	r3, r3, #7
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf28      	it	cs
 8003a7e:	2304      	movcs	r3, #4
 8003a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d902      	bls.n	8003a90 <NVIC_EncodePriority+0x30>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3b03      	subs	r3, #3
 8003a8e:	e000      	b.n	8003a92 <NVIC_EncodePriority+0x32>
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	4313      	orrs	r3, r2
         );
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3724      	adds	r7, #36	; 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad8:	d301      	bcc.n	8003ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00f      	b.n	8003afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <SysTick_Config+0x40>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ae6:	210f      	movs	r1, #15
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	f7ff ff8e 	bl	8003a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <SysTick_Config+0x40>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <SysTick_Config+0x40>)
 8003af8:	2207      	movs	r2, #7
 8003afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	e000e010 	.word	0xe000e010

08003b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff47 	bl	80039a8 <__NVIC_SetPriorityGrouping>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b30:	f7ff ff5e 	bl	80039f0 <__NVIC_GetPriorityGrouping>
 8003b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7ff ff90 	bl	8003a60 <NVIC_EncodePriority>
 8003b40:	4602      	mov	r2, r0
 8003b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff5f 	bl	8003a0c <__NVIC_SetPriority>
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ffb2 	bl	8003ac8 <SysTick_Config>
 8003b64:	4603      	mov	r3, r0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b7e:	e15a      	b.n	8003e36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 814c 	beq.w	8003e30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d005      	beq.n	8003bb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d130      	bne.n	8003c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003be6:	2201      	movs	r2, #1
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 0201 	and.w	r2, r3, #1
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d017      	beq.n	8003c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d123      	bne.n	8003ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	220f      	movs	r2, #15
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	6939      	ldr	r1, [r7, #16]
 8003c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 0203 	and.w	r2, r3, #3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a6 	beq.w	8003e30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce4:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <HAL_GPIO_Init+0x2e4>)
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce8:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_GPIO_Init+0x2e4>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6613      	str	r3, [r2, #96]	; 0x60
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_GPIO_Init+0x2e4>)
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cfc:	4a56      	ldr	r2, [pc, #344]	; (8003e58 <HAL_GPIO_Init+0x2e8>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	220f      	movs	r2, #15
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d26:	d01f      	beq.n	8003d68 <HAL_GPIO_Init+0x1f8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a4c      	ldr	r2, [pc, #304]	; (8003e5c <HAL_GPIO_Init+0x2ec>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d019      	beq.n	8003d64 <HAL_GPIO_Init+0x1f4>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a4b      	ldr	r2, [pc, #300]	; (8003e60 <HAL_GPIO_Init+0x2f0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_GPIO_Init+0x1f0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <HAL_GPIO_Init+0x2f4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00d      	beq.n	8003d5c <HAL_GPIO_Init+0x1ec>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a49      	ldr	r2, [pc, #292]	; (8003e68 <HAL_GPIO_Init+0x2f8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <HAL_GPIO_Init+0x1e8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a48      	ldr	r2, [pc, #288]	; (8003e6c <HAL_GPIO_Init+0x2fc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_GPIO_Init+0x1e4>
 8003d50:	2305      	movs	r3, #5
 8003d52:	e00a      	b.n	8003d6a <HAL_GPIO_Init+0x1fa>
 8003d54:	2306      	movs	r3, #6
 8003d56:	e008      	b.n	8003d6a <HAL_GPIO_Init+0x1fa>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	e006      	b.n	8003d6a <HAL_GPIO_Init+0x1fa>
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e004      	b.n	8003d6a <HAL_GPIO_Init+0x1fa>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e002      	b.n	8003d6a <HAL_GPIO_Init+0x1fa>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_GPIO_Init+0x1fa>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	f002 0203 	and.w	r2, r2, #3
 8003d70:	0092      	lsls	r2, r2, #2
 8003d72:	4093      	lsls	r3, r2
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d7a:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_GPIO_Init+0x2e8>)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d88:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dac:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003db2:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dd6:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ddc:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e00:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e2a:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_GPIO_Init+0x300>)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3301      	adds	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f ae9d 	bne.w	8003b80 <HAL_GPIO_Init+0x10>
  }
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	48000400 	.word	0x48000400
 8003e60:	48000800 	.word	0x48000800
 8003e64:	48000c00 	.word	0x48000c00
 8003e68:	48001000 	.word	0x48001000
 8003e6c:	48001400 	.word	0x48001400
 8003e70:	40010400 	.word	0x40010400

08003e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d141      	bne.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e82:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d131      	bne.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e90:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e96:	4a46      	ldr	r2, [pc, #280]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ea0:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ea8:	4a41      	ldr	r2, [pc, #260]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eb0:	4b40      	ldr	r3, [pc, #256]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2232      	movs	r2, #50	; 0x32
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	0c9b      	lsrs	r3, r3, #18
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ec6:	e002      	b.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eda:	d102      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f2      	bne.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eee:	d158      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e057      	b.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efa:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f04:	e04d      	b.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0c:	d141      	bne.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f0e:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d131      	bne.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2c:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f34:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2232      	movs	r2, #50	; 0x32
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	0c9b      	lsrs	r3, r3, #18
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f52:	e002      	b.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d102      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f2      	bne.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d112      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e011      	b.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f90:	e007      	b.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f9a:	4a05      	ldr	r2, [pc, #20]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	20000b48 	.word	0x20000b48
 8003fb8:	431bde83 	.word	0x431bde83

08003fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e306      	b.n	80045dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d075      	beq.n	80040c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fda:	4b97      	ldr	r3, [pc, #604]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fe4:	4b94      	ldr	r3, [pc, #592]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	d102      	bne.n	8003ffa <HAL_RCC_OscConfig+0x3e>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d002      	beq.n	8004000 <HAL_RCC_OscConfig+0x44>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d10b      	bne.n	8004018 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	4b8d      	ldr	r3, [pc, #564]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05b      	beq.n	80040c4 <HAL_RCC_OscConfig+0x108>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d157      	bne.n	80040c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e2e1      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x74>
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a84      	ldr	r2, [pc, #528]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e01d      	b.n	800406c <HAL_RCC_OscConfig+0xb0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x98>
 800403a:	4b7f      	ldr	r3, [pc, #508]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a7e      	ldr	r2, [pc, #504]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b7c      	ldr	r3, [pc, #496]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a7b      	ldr	r2, [pc, #492]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0xb0>
 8004054:	4b78      	ldr	r3, [pc, #480]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a77      	ldr	r2, [pc, #476]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b75      	ldr	r3, [pc, #468]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a74      	ldr	r2, [pc, #464]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe fc6e 	bl	8002954 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fe fc6a 	bl	8002954 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e2a6      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408e:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0xc0>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fc5a 	bl	8002954 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fe fc56 	bl	8002954 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e292      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b6:	4b60      	ldr	r3, [pc, #384]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0xe8>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d075      	beq.n	80041be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d2:	4b59      	ldr	r3, [pc, #356]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040dc:	4b56      	ldr	r3, [pc, #344]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d102      	bne.n	80040f2 <HAL_RCC_OscConfig+0x136>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d002      	beq.n	80040f8 <HAL_RCC_OscConfig+0x13c>
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11f      	bne.n	8004138 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f8:	4b4f      	ldr	r3, [pc, #316]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x154>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e265      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b49      	ldr	r3, [pc, #292]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	4946      	ldr	r1, [pc, #280]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004124:	4b45      	ldr	r3, [pc, #276]	; (800423c <HAL_RCC_OscConfig+0x280>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fbc7 	bl	80028bc <HAL_InitTick>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d043      	beq.n	80041bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e251      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d023      	beq.n	8004188 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004140:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a3c      	ldr	r2, [pc, #240]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fc02 	bl	8002954 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004154:	f7fe fbfe 	bl	8002954 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e23a      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004166:	4b34      	ldr	r3, [pc, #208]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	492d      	ldr	r1, [pc, #180]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
 8004186:	e01a      	b.n	80041be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 800418e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fbde 	bl	8002954 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419c:	f7fe fbda 	bl	8002954 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e216      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x1e0>
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d041      	beq.n	800424e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01c      	beq.n	800420c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d8:	4a17      	ldr	r2, [pc, #92]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fe fbb7 	bl	8002954 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ea:	f7fe fbb3 	bl	8002954 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e1ef      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80041fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0ef      	beq.n	80041ea <HAL_RCC_OscConfig+0x22e>
 800420a:	e020      	b.n	800424e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fe fb9a 	bl	8002954 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004222:	e00d      	b.n	8004240 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004224:	f7fe fb96 	bl	8002954 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d906      	bls.n	8004240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1d2      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	20000b8c 	.word	0x20000b8c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004240:	4b8c      	ldr	r3, [pc, #560]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1ea      	bne.n	8004224 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a6 	beq.w	80043a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004260:	4b84      	ldr	r3, [pc, #528]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x2b4>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x2b6>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	4b7f      	ldr	r3, [pc, #508]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	4a7e      	ldr	r2, [pc, #504]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6593      	str	r3, [r2, #88]	; 0x58
 8004282:	4b7c      	ldr	r3, [pc, #496]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800428e:	2301      	movs	r3, #1
 8004290:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004292:	4b79      	ldr	r3, [pc, #484]	; (8004478 <HAL_RCC_OscConfig+0x4bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d118      	bne.n	80042d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429e:	4b76      	ldr	r3, [pc, #472]	; (8004478 <HAL_RCC_OscConfig+0x4bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a75      	ldr	r2, [pc, #468]	; (8004478 <HAL_RCC_OscConfig+0x4bc>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042aa:	f7fe fb53 	bl	8002954 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fe fb4f 	bl	8002954 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e18b      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c4:	4b6c      	ldr	r3, [pc, #432]	; (8004478 <HAL_RCC_OscConfig+0x4bc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d108      	bne.n	80042ea <HAL_RCC_OscConfig+0x32e>
 80042d8:	4b66      	ldr	r3, [pc, #408]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	4a65      	ldr	r2, [pc, #404]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e8:	e024      	b.n	8004334 <HAL_RCC_OscConfig+0x378>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d110      	bne.n	8004314 <HAL_RCC_OscConfig+0x358>
 80042f2:	4b60      	ldr	r3, [pc, #384]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	4a5e      	ldr	r2, [pc, #376]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80042fa:	f043 0304 	orr.w	r3, r3, #4
 80042fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004302:	4b5c      	ldr	r3, [pc, #368]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	4a5a      	ldr	r2, [pc, #360]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004312:	e00f      	b.n	8004334 <HAL_RCC_OscConfig+0x378>
 8004314:	4b57      	ldr	r3, [pc, #348]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a56      	ldr	r2, [pc, #344]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fe fb0a 	bl	8002954 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004342:	e00a      	b.n	800435a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004344:	f7fe fb06 	bl	8002954 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e140      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435a:	4b46      	ldr	r3, [pc, #280]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ed      	beq.n	8004344 <HAL_RCC_OscConfig+0x388>
 8004368:	e015      	b.n	8004396 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fe faf3 	bl	8002954 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fe faef 	bl	8002954 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e129      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004388:	4b3a      	ldr	r3, [pc, #232]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ed      	bne.n	8004372 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b35      	ldr	r3, [pc, #212]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	4a34      	ldr	r2, [pc, #208]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d03c      	beq.n	800442e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01c      	beq.n	80043f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043bc:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80043be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c2:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe fac2 	bl	8002954 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043d4:	f7fe fabe 	bl	8002954 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0fa      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80043e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ef      	beq.n	80043d4 <HAL_RCC_OscConfig+0x418>
 80043f4:	e01b      	b.n	800442e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043f6:	4b1f      	ldr	r3, [pc, #124]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe faa5 	bl	8002954 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800440e:	f7fe faa1 	bl	8002954 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0dd      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ef      	bne.n	800440e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80d1 	beq.w	80045da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b0c      	cmp	r3, #12
 8004442:	f000 808b 	beq.w	800455c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d15e      	bne.n	800450c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b09      	ldr	r3, [pc, #36]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <HAL_RCC_OscConfig+0x4b8>)
 8004454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fe fa7b 	bl	8002954 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004460:	e00c      	b.n	800447c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fe fa77 	bl	8002954 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d905      	bls.n	800447c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0b3      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
 8004474:	40021000 	.word	0x40021000
 8004478:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447c:	4b59      	ldr	r3, [pc, #356]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ec      	bne.n	8004462 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004488:	4b56      	ldr	r3, [pc, #344]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <HAL_RCC_OscConfig+0x62c>)
 800448e:	4013      	ands	r3, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6a11      	ldr	r1, [r2, #32]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004498:	3a01      	subs	r2, #1
 800449a:	0112      	lsls	r2, r2, #4
 800449c:	4311      	orrs	r1, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044a2:	0212      	lsls	r2, r2, #8
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044aa:	0852      	lsrs	r2, r2, #1
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0552      	lsls	r2, r2, #21
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044b6:	0852      	lsrs	r2, r2, #1
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0652      	lsls	r2, r2, #25
 80044bc:	4311      	orrs	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044c2:	06d2      	lsls	r2, r2, #27
 80044c4:	430a      	orrs	r2, r1
 80044c6:	4947      	ldr	r1, [pc, #284]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b45      	ldr	r3, [pc, #276]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a44      	ldr	r2, [pc, #272]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044d8:	4b42      	ldr	r3, [pc, #264]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a41      	ldr	r2, [pc, #260]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 80044de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe fa36 	bl	8002954 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fe fa32 	bl	8002954 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e06e      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fe:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x530>
 800450a:	e066      	b.n	80045da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450c:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a34      	ldr	r2, [pc, #208]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 8004512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004516:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004518:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a31      	ldr	r2, [pc, #196]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a2e      	ldr	r2, [pc, #184]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 800452a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800452e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fa0e 	bl	8002954 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fe fa0a 	bl	8002954 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e046      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800454e:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x580>
 800455a:	e03e      	b.n	80045da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e039      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004568:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <HAL_RCC_OscConfig+0x628>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 0203 	and.w	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	429a      	cmp	r2, r3
 800457a:	d12c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	3b01      	subs	r3, #1
 8004588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d123      	bne.n	80045d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d11b      	bne.n	80045d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d113      	bne.n	80045d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d109      	bne.n	80045d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	3b01      	subs	r3, #1
 80045d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	019f800c 	.word	0x019f800c

080045ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e11e      	b.n	8004842 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b91      	ldr	r3, [pc, #580]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d910      	bls.n	8004634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b8e      	ldr	r3, [pc, #568]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 020f 	bic.w	r2, r3, #15
 800461a:	498c      	ldr	r1, [pc, #560]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b8a      	ldr	r3, [pc, #552]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e106      	b.n	8004842 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d073      	beq.n	8004728 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d129      	bne.n	800469c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004648:	4b81      	ldr	r3, [pc, #516]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0f4      	b.n	8004842 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004658:	f000 f966 	bl	8004928 <RCC_GetSysClockFreqFromPLLSource>
 800465c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <HAL_RCC_ClockConfig+0x268>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d93f      	bls.n	80046e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004666:	4b7a      	ldr	r3, [pc, #488]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800467a:	2b00      	cmp	r3, #0
 800467c:	d033      	beq.n	80046e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004682:	2b00      	cmp	r3, #0
 8004684:	d12f      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800468e:	4a70      	ldr	r2, [pc, #448]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e024      	b.n	80046e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0c6      	b.n	8004842 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0be      	b.n	8004842 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046c4:	f000 f8ce 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4a61      	ldr	r2, [pc, #388]	; (8004854 <HAL_RCC_ClockConfig+0x268>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d909      	bls.n	80046e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046d2:	4b5f      	ldr	r3, [pc, #380]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046da:	4a5d      	ldr	r2, [pc, #372]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4957      	ldr	r1, [pc, #348]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fe f92c 	bl	8002954 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe f928 	bl	8002954 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e095      	b.n	8004842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b4e      	ldr	r3, [pc, #312]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d023      	beq.n	800477c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a42      	ldr	r2, [pc, #264]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800474a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004758:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004760:	4a3b      	ldr	r2, [pc, #236]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004768:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4936      	ldr	r1, [pc, #216]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
 800477a:	e008      	b.n	800478e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d105      	bne.n	800478e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004782:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	4a32      	ldr	r2, [pc, #200]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800478e:	4b2f      	ldr	r3, [pc, #188]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d21d      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 020f 	bic.w	r2, r3, #15
 80047a4:	4929      	ldr	r1, [pc, #164]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047ac:	f7fe f8d2 	bl	8002954 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fe f8ce 	bl	8002954 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e03b      	b.n	8004842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCC_ClockConfig+0x260>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1ed      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4917      	ldr	r1, [pc, #92]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	490f      	ldr	r1, [pc, #60]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004816:	f000 f825 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_RCC_ClockConfig+0x264>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	490c      	ldr	r1, [pc, #48]	; (8004858 <HAL_RCC_ClockConfig+0x26c>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x270>)
 8004834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCC_ClockConfig+0x274>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe f83e 	bl	80028bc <HAL_InitTick>
 8004840:	4603      	mov	r3, r0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40022000 	.word	0x40022000
 8004850:	40021000 	.word	0x40021000
 8004854:	04c4b400 	.word	0x04c4b400
 8004858:	08004e04 	.word	0x08004e04
 800485c:	20000b48 	.word	0x20000b48
 8004860:	20000b8c 	.word	0x20000b8c

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800486a:	4b2c      	ldr	r3, [pc, #176]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b04      	cmp	r3, #4
 8004874:	d102      	bne.n	800487c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004876:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e047      	b.n	800490c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d102      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004888:	4b26      	ldr	r3, [pc, #152]	; (8004924 <HAL_RCC_GetSysClockFreq+0xc0>)
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	e03e      	b.n	800490c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800488e:	4b23      	ldr	r3, [pc, #140]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b0c      	cmp	r3, #12
 8004898:	d136      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800489a:	4b20      	ldr	r3, [pc, #128]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	3301      	adds	r3, #1
 80048b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b8:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	4a16      	ldr	r2, [pc, #88]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 80048c2:	68d2      	ldr	r2, [r2, #12]
 80048c4:	0a12      	lsrs	r2, r2, #8
 80048c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	617b      	str	r3, [r7, #20]
      break;
 80048d0:	e00c      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	4a10      	ldr	r2, [pc, #64]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 80048dc:	68d2      	ldr	r2, [r2, #12]
 80048de:	0a12      	lsrs	r2, r2, #8
 80048e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048e4:	fb02 f303 	mul.w	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
      break;
 80048ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	0e5b      	lsrs	r3, r3, #25
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	3301      	adds	r3, #1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	e001      	b.n	800490c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800490c:	693b      	ldr	r3, [r7, #16]
}
 800490e:	4618      	mov	r0, r3
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	00f42400 	.word	0x00f42400
 8004924:	007a1200 	.word	0x007a1200

08004928 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800492e:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d10c      	bne.n	8004966 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800494c:	4a17      	ldr	r2, [pc, #92]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004956:	68d2      	ldr	r2, [r2, #12]
 8004958:	0a12      	lsrs	r2, r2, #8
 800495a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	617b      	str	r3, [r7, #20]
    break;
 8004964:	e00c      	b.n	8004980 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	4a0e      	ldr	r2, [pc, #56]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	0a12      	lsrs	r2, r2, #8
 8004974:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
    break;
 800497e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0e5b      	lsrs	r3, r3, #25
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800499a:	687b      	ldr	r3, [r7, #4]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40021000 	.word	0x40021000
 80049ac:	007a1200 	.word	0x007a1200
 80049b0:	00f42400 	.word	0x00f42400

080049b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049bc:	2300      	movs	r3, #0
 80049be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c0:	2300      	movs	r3, #0
 80049c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8098 	beq.w	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d6:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e2:	4b40      	ldr	r3, [pc, #256]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e6:	4a3f      	ldr	r2, [pc, #252]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ec:	6593      	str	r3, [r2, #88]	; 0x58
 80049ee:	4b3d      	ldr	r3, [pc, #244]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fa:	2301      	movs	r3, #1
 80049fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fe:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a39      	ldr	r2, [pc, #228]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a0a:	f7fd ffa3 	bl	8002954 <HAL_GetTick>
 8004a0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a10:	e009      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a12:	f7fd ff9f 	bl	8002954 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d902      	bls.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	74fb      	strb	r3, [r7, #19]
        break;
 8004a24:	e005      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ef      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d159      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a38:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01e      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d019      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a54:	4b23      	ldr	r3, [pc, #140]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a60:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a70:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a80:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd ff5f 	bl	8002954 <HAL_GetTick>
 8004a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fd ff5b 	bl	8002954 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d902      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab0:	e006      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ec      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004adc:	e008      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	74bb      	strb	r3, [r7, #18]
 8004ae2:	e005      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af0:	7c7b      	ldrb	r3, [r7, #17]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af6:	4ba6      	ldr	r3, [pc, #664]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	4aa5      	ldr	r2, [pc, #660]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b0e:	4ba0      	ldr	r3, [pc, #640]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f023 0203 	bic.w	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	499c      	ldr	r1, [pc, #624]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b30:	4b97      	ldr	r3, [pc, #604]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 020c 	bic.w	r2, r3, #12
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	4994      	ldr	r1, [pc, #592]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b52:	4b8f      	ldr	r3, [pc, #572]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	498b      	ldr	r1, [pc, #556]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b74:	4b86      	ldr	r3, [pc, #536]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4983      	ldr	r1, [pc, #524]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b96:	4b7e      	ldr	r3, [pc, #504]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	497a      	ldr	r1, [pc, #488]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bb8:	4b75      	ldr	r3, [pc, #468]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	4972      	ldr	r1, [pc, #456]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bda:	4b6d      	ldr	r3, [pc, #436]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4969      	ldr	r1, [pc, #420]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bfc:	4b64      	ldr	r3, [pc, #400]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4961      	ldr	r1, [pc, #388]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c1e:	4b5c      	ldr	r3, [pc, #368]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	4958      	ldr	r1, [pc, #352]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c40:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	4950      	ldr	r1, [pc, #320]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c60:	4b4b      	ldr	r3, [pc, #300]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a4a      	ldr	r2, [pc, #296]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d015      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c78:	4b45      	ldr	r3, [pc, #276]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4942      	ldr	r1, [pc, #264]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c98:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4a3c      	ldr	r2, [pc, #240]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d015      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cb0:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4934      	ldr	r1, [pc, #208]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cce:	d105      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d015      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ce8:	4b29      	ldr	r3, [pc, #164]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf6:	4926      	ldr	r1, [pc, #152]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d06:	d105      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d08:	4b21      	ldr	r3, [pc, #132]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d015      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	4918      	ldr	r1, [pc, #96]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a12      	ldr	r2, [pc, #72]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d015      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d58:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	490a      	ldr	r1, [pc, #40]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d76:	d105      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d84:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40021000 	.word	0x40021000

08004d94 <__libc_init_array>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4d0d      	ldr	r5, [pc, #52]	; (8004dcc <__libc_init_array+0x38>)
 8004d98:	4c0d      	ldr	r4, [pc, #52]	; (8004dd0 <__libc_init_array+0x3c>)
 8004d9a:	1b64      	subs	r4, r4, r5
 8004d9c:	10a4      	asrs	r4, r4, #2
 8004d9e:	2600      	movs	r6, #0
 8004da0:	42a6      	cmp	r6, r4
 8004da2:	d109      	bne.n	8004db8 <__libc_init_array+0x24>
 8004da4:	4d0b      	ldr	r5, [pc, #44]	; (8004dd4 <__libc_init_array+0x40>)
 8004da6:	4c0c      	ldr	r4, [pc, #48]	; (8004dd8 <__libc_init_array+0x44>)
 8004da8:	f000 f820 	bl	8004dec <_init>
 8004dac:	1b64      	subs	r4, r4, r5
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	2600      	movs	r6, #0
 8004db2:	42a6      	cmp	r6, r4
 8004db4:	d105      	bne.n	8004dc2 <__libc_init_array+0x2e>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbc:	4798      	blx	r3
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7ee      	b.n	8004da0 <__libc_init_array+0xc>
 8004dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc6:	4798      	blx	r3
 8004dc8:	3601      	adds	r6, #1
 8004dca:	e7f2      	b.n	8004db2 <__libc_init_array+0x1e>
 8004dcc:	08004e14 	.word	0x08004e14
 8004dd0:	08004e14 	.word	0x08004e14
 8004dd4:	08004e14 	.word	0x08004e14
 8004dd8:	08004e18 	.word	0x08004e18

08004ddc <memset>:
 8004ddc:	4402      	add	r2, r0
 8004dde:	4603      	mov	r3, r0
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memset+0xa>
 8004de4:	4770      	bx	lr
 8004de6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dea:	e7f9      	b.n	8004de0 <memset+0x4>

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

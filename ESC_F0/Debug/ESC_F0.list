
ESC_F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08003b10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003b10  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de5e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7f  00000000  00000000  0002de92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000308f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010655  00000000  00000000  00031510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6cf  00000000  00000000  00041b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065de7  00000000  00000000  00051234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b701b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e64  00000000  00000000  000b706c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a88 	.word	0x08003a88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a88 	.word	0x08003a88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
  */

uint32_t adc_val[6];

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd03 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f84d 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fab1 	bl	8000794 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 fa91 	bl	8000758 <MX_DMA_Init>
  MX_ADC_Init();
 8000236:	f000 f8af 	bl	8000398 <MX_ADC_Init>
  MX_TIM1_Init();
 800023a:	f000 f949 	bl	80004d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800023e:	f000 f9fd 	bl	800063c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000242:	f000 fa59 	bl	80006f8 <MX_USART1_UART_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <main+0x9c>)
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f002 f89c 	bl	8002388 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <main+0x9c>)
 8000252:	2100      	movs	r1, #0
 8000254:	0018      	movs	r0, r3
 8000256:	f002 fe95 	bl	8002f84 <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800025a:	4b18      	ldr	r3, [pc, #96]	; (80002bc <main+0x9c>)
 800025c:	2104      	movs	r1, #4
 800025e:	0018      	movs	r0, r3
 8000260:	f002 f892 	bl	8002388 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <main+0x9c>)
 8000266:	2104      	movs	r1, #4
 8000268:	0018      	movs	r0, r3
 800026a:	f002 fe8b 	bl	8002f84 <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800026e:	4b13      	ldr	r3, [pc, #76]	; (80002bc <main+0x9c>)
 8000270:	2108      	movs	r1, #8
 8000272:	0018      	movs	r0, r3
 8000274:	f002 f888 	bl	8002388 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <main+0x9c>)
 800027a:	2108      	movs	r1, #8
 800027c:	0018      	movs	r0, r3
 800027e:	f002 fe81 	bl	8002f84 <HAL_TIMEx_PWMN_Start>
  	//	TIM1->EGR |= TIM_EGR_COMG;
  	//	TIM1->CCR1 = 0;
  	//	TIM1->CCR2 = 100;
  	//	TIM1->CCR3 = 0;

  	uint8_t MSG[35] = {'T', 'e', 's', 't', '\n', '\0'};
 8000282:	1d39      	adds	r1, r7, #4
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <main+0xa0>)
 8000286:	000b      	movs	r3, r1
 8000288:	6810      	ldr	r0, [r2, #0]
 800028a:	6018      	str	r0, [r3, #0]
 800028c:	8890      	ldrh	r0, [r2, #4]
 800028e:	8098      	strh	r0, [r3, #4]
 8000290:	7992      	ldrb	r2, [r2, #6]
 8000292:	719a      	strb	r2, [r3, #6]
 8000294:	2307      	movs	r3, #7
 8000296:	18cb      	adds	r3, r1, r3
 8000298:	221c      	movs	r2, #28
 800029a:	2100      	movs	r1, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f003 fbeb 	bl	8003a78 <memset>
  	while(1) {
  		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 80002a2:	1d39      	adds	r1, r7, #4
 80002a4:	4807      	ldr	r0, [pc, #28]	; (80002c4 <main+0xa4>)
 80002a6:	2364      	movs	r3, #100	; 0x64
 80002a8:	2223      	movs	r2, #35	; 0x23
 80002aa:	f003 f82d 	bl	8003308 <HAL_UART_Transmit>
  		HAL_Delay(500);
 80002ae:	23fa      	movs	r3, #250	; 0xfa
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fd20 	bl	8000cf8 <HAL_Delay>
  		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 80002b8:	e7f3      	b.n	80002a2 <main+0x82>
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	200000ac 	.word	0x200000ac
 80002c0:	08003aa0 	.word	0x08003aa0
 80002c4:	2000013c 	.word	0x2000013c

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b095      	sub	sp, #84	; 0x54
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2420      	movs	r4, #32
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2330      	movs	r3, #48	; 0x30
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f003 fbcd 	bl	8003a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	2310      	movs	r3, #16
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	0018      	movs	r0, r3
 80002e4:	2310      	movs	r3, #16
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f003 fbc5 	bl	8003a78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	2310      	movs	r3, #16
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f003 fbbe 	bl	8003a78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2212      	movs	r2, #18
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2201      	movs	r2, #1
 800030e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2210      	movs	r2, #16
 8000314:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2210      	movs	r2, #16
 800031a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2202      	movs	r2, #2
 8000320:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	22a0      	movs	r2, #160	; 0xa0
 800032c:	0392      	lsls	r2, r2, #14
 800032e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	187b      	adds	r3, r7, r1
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fa9b 	bl	8001874 <HAL_RCC_OscConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000342:	f000 fa67 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	2110      	movs	r1, #16
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2207      	movs	r2, #7
 800034c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2202      	movs	r2, #2
 8000352:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2101      	movs	r1, #1
 8000364:	0018      	movs	r0, r3
 8000366:	f001 fd9f 	bl	8001ea8 <HAL_RCC_ClockConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800036e:	f000 fa51 	bl	8000814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000372:	003b      	movs	r3, r7
 8000374:	2201      	movs	r2, #1
 8000376:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fee3 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800038a:	f000 fa43 	bl	8000814 <Error_Handler>
  }
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b015      	add	sp, #84	; 0x54
 8000394:	bd90      	pop	{r4, r7, pc}
	...

08000398 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	0018      	movs	r0, r3
 80003a2:	230c      	movs	r3, #12
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f003 fb66 	bl	8003a78 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003ac:	4b46      	ldr	r3, [pc, #280]	; (80004c8 <MX_ADC_Init+0x130>)
 80003ae:	4a47      	ldr	r2, [pc, #284]	; (80004cc <MX_ADC_Init+0x134>)
 80003b0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003b2:	4b45      	ldr	r3, [pc, #276]	; (80004c8 <MX_ADC_Init+0x130>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003b8:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <MX_ADC_Init+0x130>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003be:	4b42      	ldr	r3, [pc, #264]	; (80004c8 <MX_ADC_Init+0x130>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003c4:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <MX_ADC_Init+0x130>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ca:	4b3f      	ldr	r3, [pc, #252]	; (80004c8 <MX_ADC_Init+0x130>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003d0:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <MX_ADC_Init+0x130>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003d6:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <MX_ADC_Init+0x130>)
 80003d8:	2200      	movs	r2, #0
 80003da:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80003dc:	4b3a      	ldr	r3, [pc, #232]	; (80004c8 <MX_ADC_Init+0x130>)
 80003de:	2201      	movs	r2, #1
 80003e0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003e2:	4b39      	ldr	r3, [pc, #228]	; (80004c8 <MX_ADC_Init+0x130>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e8:	4b37      	ldr	r3, [pc, #220]	; (80004c8 <MX_ADC_Init+0x130>)
 80003ea:	22c2      	movs	r2, #194	; 0xc2
 80003ec:	32ff      	adds	r2, #255	; 0xff
 80003ee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f0:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <MX_ADC_Init+0x130>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003f6:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <MX_ADC_Init+0x130>)
 80003f8:	2224      	movs	r2, #36	; 0x24
 80003fa:	2101      	movs	r1, #1
 80003fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <MX_ADC_Init+0x130>)
 8000400:	2200      	movs	r2, #0
 8000402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000404:	4b30      	ldr	r3, [pc, #192]	; (80004c8 <MX_ADC_Init+0x130>)
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fc9a 	bl	8000d40 <HAL_ADC_Init>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000410:	f000 fa00 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0152      	lsls	r2, r2, #5
 8000420:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	0552      	lsls	r2, r2, #21
 8000428:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800042a:	1d3a      	adds	r2, r7, #4
 800042c:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <MX_ADC_Init+0x130>)
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fdc5 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800043a:	f000 f9eb 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2201      	movs	r2, #1
 8000442:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000444:	1d3a      	adds	r2, r7, #4
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <MX_ADC_Init+0x130>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fdb8 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000454:	f000 f9de 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2203      	movs	r2, #3
 800045c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_ADC_Init+0x130>)
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fdab 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800046e:	f000 f9d1 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2204      	movs	r2, #4
 8000476:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000478:	1d3a      	adds	r2, r7, #4
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_ADC_Init+0x130>)
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fd9e 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000488:	f000 f9c4 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2205      	movs	r2, #5
 8000490:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000492:	1d3a      	adds	r2, r7, #4
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_ADC_Init+0x130>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fd91 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80004a2:	f000 f9b7 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2206      	movs	r2, #6
 80004aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ac:	1d3a      	adds	r2, r7, #4
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_ADC_Init+0x130>)
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fd84 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80004bc:	f000 f9aa 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000028 	.word	0x20000028
 80004cc:	40012400 	.word	0x40012400

080004d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b092      	sub	sp, #72	; 0x48
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d6:	2340      	movs	r3, #64	; 0x40
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	2308      	movs	r3, #8
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f003 fac9 	bl	8003a78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e6:	2324      	movs	r3, #36	; 0x24
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	231c      	movs	r3, #28
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f003 fac1 	bl	8003a78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2320      	movs	r3, #32
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f003 faba 	bl	8003a78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000504:	4b4b      	ldr	r3, [pc, #300]	; (8000634 <MX_TIM1_Init+0x164>)
 8000506:	4a4c      	ldr	r2, [pc, #304]	; (8000638 <MX_TIM1_Init+0x168>)
 8000508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800050a:	4b4a      	ldr	r3, [pc, #296]	; (8000634 <MX_TIM1_Init+0x164>)
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b48      	ldr	r3, [pc, #288]	; (8000634 <MX_TIM1_Init+0x164>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000516:	4b47      	ldr	r3, [pc, #284]	; (8000634 <MX_TIM1_Init+0x164>)
 8000518:	22fa      	movs	r2, #250	; 0xfa
 800051a:	00d2      	lsls	r2, r2, #3
 800051c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b45      	ldr	r3, [pc, #276]	; (8000634 <MX_TIM1_Init+0x164>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000524:	4b43      	ldr	r3, [pc, #268]	; (8000634 <MX_TIM1_Init+0x164>)
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800052a:	4b42      	ldr	r3, [pc, #264]	; (8000634 <MX_TIM1_Init+0x164>)
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000530:	4b40      	ldr	r3, [pc, #256]	; (8000634 <MX_TIM1_Init+0x164>)
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fed8 	bl	80022e8 <HAL_TIM_PWM_Init>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 f96a 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2220      	movs	r2, #32
 8000546:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800054e:	187a      	adds	r2, r7, r1
 8000550:	4b38      	ldr	r3, [pc, #224]	; (8000634 <MX_TIM1_Init+0x164>)
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f002 fda9 	bl	80030ac <HAL_TIMEx_MasterConfigSynchronization>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800055e:	f000 f959 	bl	8000814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000562:	2124      	movs	r1, #36	; 0x24
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2260      	movs	r2, #96	; 0x60
 8000568:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800058e:	1879      	adds	r1, r7, r1
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <MX_TIM1_Init+0x164>)
 8000592:	2200      	movs	r2, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f002 f897 	bl	80026c8 <HAL_TIM_PWM_ConfigChannel>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800059e:	f000 f939 	bl	8000814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a2:	2324      	movs	r3, #36	; 0x24
 80005a4:	18f9      	adds	r1, r7, r3
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <MX_TIM1_Init+0x164>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 f88c 	bl	80026c8 <HAL_TIM_PWM_ConfigChannel>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80005b4:	f000 f92e 	bl	8000814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005b8:	2324      	movs	r3, #36	; 0x24
 80005ba:	18f9      	adds	r1, r7, r3
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_TIM1_Init+0x164>)
 80005be:	2208      	movs	r2, #8
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 f881 	bl	80026c8 <HAL_TIM_PWM_ConfigChannel>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80005ca:	f000 f923 	bl	8000814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ce:	2324      	movs	r3, #36	; 0x24
 80005d0:	18f9      	adds	r1, r7, r3
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_TIM1_Init+0x164>)
 80005d4:	220c      	movs	r2, #12
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 f876 	bl	80026c8 <HAL_TIM_PWM_ConfigChannel>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80005e0:	f000 f918 	bl	8000814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	0192      	lsls	r2, r2, #6
 8000608:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_TIM1_Init+0x164>)
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f002 fda0 	bl	800315c <HAL_TIMEx_ConfigBreakDeadTime>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000620:	f000 f8f8 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <MX_TIM1_Init+0x164>)
 8000626:	0018      	movs	r0, r3
 8000628:	f000 f9fc 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b012      	add	sp, #72	; 0x48
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000ac 	.word	0x200000ac
 8000638:	40012c00 	.word	0x40012c00

0800063c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000642:	2310      	movs	r3, #16
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	2308      	movs	r3, #8
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f003 fa13 	bl	8003a78 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000652:	003b      	movs	r3, r7
 8000654:	0018      	movs	r0, r3
 8000656:	2310      	movs	r3, #16
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f003 fa0c 	bl	8003a78 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_TIM3_Init+0xb0>)
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_TIM3_Init+0xb4>)
 8000664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_TIM3_Init+0xb0>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_TIM3_Init+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM3_Init+0xb0>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <MX_TIM3_Init+0xb8>)
 8000676:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_TIM3_Init+0xb0>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_TIM3_Init+0xb0>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_TIM3_Init+0xb0>)
 8000686:	0018      	movs	r0, r3
 8000688:	f001 ff2a 	bl	80024e0 <HAL_TIM_IC_Init>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000690:	f000 f8c0 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000694:	2110      	movs	r1, #16
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a2:	187a      	adds	r2, r7, r1
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_TIM3_Init+0xb0>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 fcff 	bl	80030ac <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80006b2:	f000 f8af 	bl	8000814 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006bc:	003b      	movs	r3, r7
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006ce:	0039      	movs	r1, r7
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_TIM3_Init+0xb0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 ff53 	bl	8002580 <HAL_TIM_IC_ConfigChannel>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80006de:	f000 f899 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b006      	add	sp, #24
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	200000f4 	.word	0x200000f4
 80006f0:	40000400 	.word	0x40000400
 80006f4:	00002710 	.word	0x00002710

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART1_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART1_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000704:	22e1      	movs	r2, #225	; 0xe1
 8000706:	0252      	lsls	r2, r2, #9
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fd8f 	bl	8003260 <HAL_UART_Init>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f865 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000013c 	.word	0x2000013c
 8000754:	40013800 	.word	0x40013800

08000758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_DMA_Init+0x38>)
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_DMA_Init+0x38>)
 8000764:	2101      	movs	r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	615a      	str	r2, [r3, #20]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_DMA_Init+0x38>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	2201      	movs	r2, #1
 8000770:	4013      	ands	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2009      	movs	r0, #9
 800077c:	f000 fdda 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000780:	2009      	movs	r0, #9
 8000782:	f000 fdec 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f003 f967 	bl	8003a78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_GPIO_Init+0x78>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_GPIO_Init+0x78>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0289      	lsls	r1, r1, #10
 80007b4:	430a      	orrs	r2, r1
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_GPIO_Init+0x78>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	029b      	lsls	r3, r3, #10
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_GPIO_Init+0x78>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_GPIO_Init+0x78>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	02c9      	lsls	r1, r1, #11
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_GPIO_Init+0x78>)
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	02db      	lsls	r3, r3, #11
 80007dc:	4013      	ands	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <MX_GPIO_Init+0x7c>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f000 fed1 	bl	80015a4 <HAL_GPIO_Init>

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b009      	add	sp, #36	; 0x24
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40021000 	.word	0x40021000
 8000810:	48000400 	.word	0x48000400

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	619a      	str	r2, [r3, #24]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0549      	lsls	r1, r1, #21
 8000848:	430a      	orrs	r2, r1
 800084a:	61da      	str	r2, [r3, #28]
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_MspInit+0x44>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	055b      	lsls	r3, r3, #21
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 f8fc 	bl	8003a78 <memset>
  if(hadc->Instance==ADC1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a2d      	ldr	r2, [pc, #180]	; (800093c <HAL_ADC_MspInit+0xd4>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d153      	bne.n	8000932 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <HAL_ADC_MspInit+0xd8>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <HAL_ADC_MspInit+0xd8>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0089      	lsls	r1, r1, #2
 8000894:	430a      	orrs	r2, r1
 8000896:	619a      	str	r2, [r3, #24]
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_ADC_MspInit+0xd8>)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <HAL_ADC_MspInit+0xd8>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <HAL_ADC_MspInit+0xd8>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <HAL_ADC_MspInit+0xd8>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	227b      	movs	r2, #123	; 0x7b
 80008c6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2203      	movs	r2, #3
 80008cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	193a      	adds	r2, r7, r4
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fe61 	bl	80015a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 80008e4:	4a18      	ldr	r2, [pc, #96]	; (8000948 <HAL_ADC_MspInit+0xe0>)
 80008e6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 800090c:	2220      	movs	r2, #32
 800090e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fd3d 	bl	8001398 <HAL_DMA_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000922:	f7ff ff77 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_ADC_MspInit+0xdc>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b00b      	add	sp, #44	; 0x2c
 8000938:	bd90      	pop	{r4, r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40012400 	.word	0x40012400
 8000940:	40021000 	.word	0x40021000
 8000944:	20000068 	.word	0x20000068
 8000948:	40020008 	.word	0x40020008

0800094c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_TIM_PWM_MspInit+0x38>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10d      	bne.n	800097a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_TIM_PWM_MspInit+0x3c>)
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_TIM_PWM_MspInit+0x3c>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0109      	lsls	r1, r1, #4
 8000968:	430a      	orrs	r2, r1
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_TIM_PWM_MspInit+0x3c>)
 800096e:	699a      	ldr	r2, [r3, #24]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b08b      	sub	sp, #44	; 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2414      	movs	r4, #20
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f003 f86a 	bl	8003a78 <memset>
  if(htim_ic->Instance==TIM3)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <HAL_TIM_IC_MspInit+0x8c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d12f      	bne.n	8000a0e <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_TIM_IC_MspInit+0x90>)
 80009b0:	69da      	ldr	r2, [r3, #28]
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_TIM_IC_MspInit+0x90>)
 80009b4:	2102      	movs	r1, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	61da      	str	r2, [r3, #28]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_TIM_IC_MspInit+0x90>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	2202      	movs	r2, #2
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_TIM_IC_MspInit+0x90>)
 80009c8:	695a      	ldr	r2, [r3, #20]
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_TIM_IC_MspInit+0x90>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	02c9      	lsls	r1, r1, #11
 80009d0:	430a      	orrs	r2, r1
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_TIM_IC_MspInit+0x90>)
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	02db      	lsls	r3, r3, #11
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009e2:	0021      	movs	r1, r4
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2210      	movs	r2, #16
 80009e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2202      	movs	r2, #2
 80009ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2201      	movs	r2, #1
 8000a00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_TIM_IC_MspInit+0x94>)
 8000a06:	0019      	movs	r1, r3
 8000a08:	0010      	movs	r0, r2
 8000a0a:	f000 fdcb 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b00b      	add	sp, #44	; 0x2c
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000400 	.word	0x48000400

08000a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b08b      	sub	sp, #44	; 0x2c
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	2414      	movs	r4, #20
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	0018      	movs	r0, r3
 8000a32:	2314      	movs	r3, #20
 8000a34:	001a      	movs	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	f003 f81e 	bl	8003a78 <memset>
  if(htim->Instance==TIM1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <HAL_TIM_MspPostInit+0xbc>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d148      	bne.n	8000ad8 <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000a48:	695a      	ldr	r2, [r3, #20]
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	0289      	lsls	r1, r1, #10
 8000a50:	430a      	orrs	r2, r1
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	029b      	lsls	r3, r3, #10
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	02c9      	lsls	r1, r1, #11
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000a72:	695a      	ldr	r2, [r3, #20]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	02db      	lsls	r3, r3, #11
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	22f0      	movs	r2, #240	; 0xf0
 8000a82:	00d2      	lsls	r2, r2, #3
 8000a84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2202      	movs	r2, #2
 8000a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	193a      	adds	r2, r7, r4
 8000aa0:	2390      	movs	r3, #144	; 0x90
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fd7c 	bl	80015a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2202      	movs	r2, #2
 8000aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	f000 fd66 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b00b      	add	sp, #44	; 0x2c
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	40012c00 	.word	0x40012c00
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000400 	.word	0x48000400

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	2414      	movs	r4, #20
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	0018      	movs	r0, r3
 8000afa:	2314      	movs	r3, #20
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f002 ffba 	bl	8003a78 <memset>
  if(huart->Instance==USART1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <HAL_UART_MspInit+0x90>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d132      	bne.n	8000b74 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	01c9      	lsls	r1, r1, #7
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	619a      	str	r2, [r3, #24]
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	01db      	lsls	r3, r3, #7
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	0289      	lsls	r1, r1, #10
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	029b      	lsls	r3, r3, #10
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000b46:	0021      	movs	r1, r4
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2202      	movs	r2, #2
 8000b52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2201      	movs	r2, #1
 8000b64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	2390      	movs	r3, #144	; 0x90
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 fd18 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b00b      	add	sp, #44	; 0x2c
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	00008004 	.word	0x00008004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f888 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <DMA1_Channel1_IRQHandler+0x14>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fc32 	bl	8001428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000068 	.word	0x20000068

08000bd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c06:	f7ff ffe3 	bl	8000bd0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f002 ff11 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff fb07 	bl	8000220 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c20:	08003b04 	.word	0x08003b04
  ldr r2, =_sbss
 8000c24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c28:	200001c4 	.word	0x200001c4

08000c2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_IRQHandler>
	...

08000c30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <HAL_Init+0x24>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_Init+0x24>)
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f809 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c46:	f7ff fdeb 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c62:	681c      	ldr	r4, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x60>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	0019      	movs	r1, r3
 8000c6a:	23fa      	movs	r3, #250	; 0xfa
 8000c6c:	0098      	lsls	r0, r3, #2
 8000c6e:	f7ff fa4b 	bl	8000108 <__udivsi3>
 8000c72:	0003      	movs	r3, r0
 8000c74:	0019      	movs	r1, r3
 8000c76:	0020      	movs	r0, r4
 8000c78:	f7ff fa46 	bl	8000108 <__udivsi3>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fb7d 	bl	800137e <HAL_SYSTICK_Config>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e00f      	b.n	8000cac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d80b      	bhi.n	8000caa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fb4a 	bl	8001334 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_InitTick+0x64>)
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	18d2      	adds	r2, r2, r3
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200001c0 	.word	0x200001c0

08000ce4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	200001c0 	.word	0x200001c0

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff fff0 	bl	8000ce4 <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	001a      	movs	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	f7ff ffe0 	bl	8000ce4 <HAL_GetTick>
 8000d24:	0002      	movs	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e125      	b.n	8000faa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10a      	bne.n	8000d7c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2234      	movs	r2, #52	; 0x34
 8000d70:	2100      	movs	r1, #0
 8000d72:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fd76 	bl	8000868 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d80:	2210      	movs	r2, #16
 8000d82:	4013      	ands	r3, r2
 8000d84:	d000      	beq.n	8000d88 <HAL_ADC_Init+0x48>
 8000d86:	e103      	b.n	8000f90 <HAL_ADC_Init+0x250>
 8000d88:	230f      	movs	r3, #15
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d000      	beq.n	8000d94 <HAL_ADC_Init+0x54>
 8000d92:	e0fd      	b.n	8000f90 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d9e:	d000      	beq.n	8000da2 <HAL_ADC_Init+0x62>
 8000da0:	e0f6      	b.n	8000f90 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da6:	4a83      	ldr	r2, [pc, #524]	; (8000fb4 <HAL_ADC_Init+0x274>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	2202      	movs	r2, #2
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d112      	bne.n	8000de6 <HAL_ADC_Init+0xa6>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d009      	beq.n	8000de2 <HAL_ADC_Init+0xa2>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	401a      	ands	r2, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Init+0xa6>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_ADC_Init+0xa8>
 8000de6:	2300      	movs	r3, #0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d116      	bne.n	8000e1a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2218      	movs	r2, #24
 8000df4:	4393      	bics	r3, r2
 8000df6:	0019      	movs	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	0899      	lsrs	r1, r3, #2
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4964      	ldr	r1, [pc, #400]	; (8000fb8 <HAL_ADC_Init+0x278>)
 8000e26:	400a      	ands	r2, r1
 8000e28:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7e1b      	ldrb	r3, [r3, #24]
 8000e2e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7e5b      	ldrb	r3, [r3, #25]
 8000e34:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e36:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7e9b      	ldrb	r3, [r3, #26]
 8000e3c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d002      	beq.n	8000e4e <HAL_ADC_Init+0x10e>
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	e000      	b.n	8000e50 <HAL_ADC_Init+0x110>
 8000e4e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e50:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e56:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d101      	bne.n	8000e64 <HAL_ADC_Init+0x124>
 8000e60:	2304      	movs	r3, #4
 8000e62:	e000      	b.n	8000e66 <HAL_ADC_Init+0x126>
 8000e64:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e66:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2124      	movs	r1, #36	; 0x24
 8000e6c:	5c5b      	ldrb	r3, [r3, r1]
 8000e6e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e70:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7edb      	ldrb	r3, [r3, #27]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d115      	bne.n	8000eac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e9b      	ldrb	r3, [r3, #26]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d105      	bne.n	8000e94 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	0252      	lsls	r2, r2, #9
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	e00b      	b.n	8000eac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e98:	2220      	movs	r2, #32
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69da      	ldr	r2, [r3, #28]
 8000eb0:	23c2      	movs	r3, #194	; 0xc2
 8000eb2:	33ff      	adds	r3, #255	; 0xff
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d007      	beq.n	8000ec8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68d9      	ldr	r1, [r3, #12]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	055b      	lsls	r3, r3, #21
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d01b      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d017      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d013      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d00f      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d00b      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d007      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d003      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	2b07      	cmp	r3, #7
 8000f1a:	d112      	bne.n	8000f42 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2107      	movs	r1, #7
 8000f28:	438a      	bics	r2, r1
 8000f2a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6959      	ldr	r1, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	2207      	movs	r2, #7
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_ADC_Init+0x27c>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d10b      	bne.n	8000f6a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4393      	bics	r3, r2
 8000f60:	2201      	movs	r2, #1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f68:	e01c      	b.n	8000fa4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6e:	2212      	movs	r2, #18
 8000f70:	4393      	bics	r3, r2
 8000f72:	2210      	movs	r2, #16
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7e:	2201      	movs	r2, #1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f8e:	e009      	b.n	8000fa4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f94:	2210      	movs	r2, #16
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	fffffefd 	.word	0xfffffefd
 8000fb8:	fffe0219 	.word	0xfffe0219
 8000fbc:	833fffe7 	.word	0x833fffe7

08000fc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	055b      	lsls	r3, r3, #21
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d011      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d00d      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d009      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d005      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d001      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x46>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2234      	movs	r2, #52	; 0x34
 800100a:	5c9b      	ldrb	r3, [r3, r2]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x54>
 8001010:	2302      	movs	r3, #2
 8001012:	e0d0      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x1f6>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2234      	movs	r2, #52	; 0x34
 8001018:	2101      	movs	r1, #1
 800101a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2204      	movs	r2, #4
 8001024:	4013      	ands	r3, r2
 8001026:	d000      	beq.n	800102a <HAL_ADC_ConfigChannel+0x6a>
 8001028:	e0b4      	b.n	8001194 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a64      	ldr	r2, [pc, #400]	; (80011c0 <HAL_ADC_ConfigChannel+0x200>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_ADC_ConfigChannel+0x76>
 8001034:	e082      	b.n	800113c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	055b      	lsls	r3, r3, #21
 8001054:	429a      	cmp	r2, r3
 8001056:	d037      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	2b01      	cmp	r3, #1
 800105e:	d033      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	2b02      	cmp	r3, #2
 8001066:	d02f      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	2b03      	cmp	r3, #3
 800106e:	d02b      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	2b04      	cmp	r3, #4
 8001076:	d027      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	2b05      	cmp	r3, #5
 800107e:	d023      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2b06      	cmp	r3, #6
 8001086:	d01f      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	2b07      	cmp	r3, #7
 800108e:	d01b      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	2107      	movs	r1, #7
 800109c:	400b      	ands	r3, r1
 800109e:	429a      	cmp	r2, r3
 80010a0:	d012      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2107      	movs	r1, #7
 80010ae:	438a      	bics	r2, r1
 80010b0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6959      	ldr	r1, [r3, #20]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2207      	movs	r2, #7
 80010be:	401a      	ands	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	d007      	beq.n	80010e0 <HAL_ADC_ConfigChannel+0x120>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b11      	cmp	r3, #17
 80010d6:	d003      	beq.n	80010e0 <HAL_ADC_ConfigChannel+0x120>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b12      	cmp	r3, #18
 80010de:	d163      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <HAL_ADC_ConfigChannel+0x204>)
 80010e2:	6819      	ldr	r1, [r3, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b10      	cmp	r3, #16
 80010ea:	d009      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x140>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b11      	cmp	r3, #17
 80010f2:	d102      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x13a>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	03db      	lsls	r3, r3, #15
 80010f8:	e004      	b.n	8001104 <HAL_ADC_ConfigChannel+0x144>
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	045b      	lsls	r3, r3, #17
 80010fe:	e001      	b.n	8001104 <HAL_ADC_ConfigChannel+0x144>
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	041b      	lsls	r3, r3, #16
 8001104:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_ADC_ConfigChannel+0x204>)
 8001106:	430b      	orrs	r3, r1
 8001108:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b10      	cmp	r3, #16
 8001110:	d14a      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_ADC_ConfigChannel+0x208>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	492d      	ldr	r1, [pc, #180]	; (80011cc <HAL_ADC_ConfigChannel+0x20c>)
 8001118:	0018      	movs	r0, r3
 800111a:	f7fe fff5 	bl	8000108 <__udivsi3>
 800111e:	0003      	movs	r3, r0
 8001120:	001a      	movs	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	189b      	adds	r3, r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800112c:	e002      	b.n	8001134 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3b01      	subs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <HAL_ADC_ConfigChannel+0x16e>
 800113a:	e035      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2101      	movs	r1, #1
 8001148:	4099      	lsls	r1, r3
 800114a:	000b      	movs	r3, r1
 800114c:	43d9      	mvns	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	400a      	ands	r2, r1
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d007      	beq.n	800116e <HAL_ADC_ConfigChannel+0x1ae>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b11      	cmp	r3, #17
 8001164:	d003      	beq.n	800116e <HAL_ADC_ConfigChannel+0x1ae>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b12      	cmp	r3, #18
 800116c:	d11c      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_ADC_ConfigChannel+0x204>)
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b10      	cmp	r3, #16
 8001178:	d007      	beq.n	800118a <HAL_ADC_ConfigChannel+0x1ca>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b11      	cmp	r3, #17
 8001180:	d101      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x1c6>
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_ConfigChannel+0x210>)
 8001184:	e002      	b.n	800118c <HAL_ADC_ConfigChannel+0x1cc>
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_ConfigChannel+0x214>)
 8001188:	e000      	b.n	800118c <HAL_ADC_ConfigChannel+0x1cc>
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_ConfigChannel+0x218>)
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_ADC_ConfigChannel+0x204>)
 800118e:	400b      	ands	r3, r1
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e009      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001198:	2220      	movs	r2, #32
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2234      	movs	r2, #52	; 0x34
 80011ac:	2100      	movs	r1, #0
 80011ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80011b0:	230f      	movs	r3, #15
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	00001001 	.word	0x00001001
 80011c4:	40012708 	.word	0x40012708
 80011c8:	20000000 	.word	0x20000000
 80011cc:	000f4240 	.word	0x000f4240
 80011d0:	ffbfffff 	.word	0xffbfffff
 80011d4:	feffffff 	.word	0xfeffffff
 80011d8:	ff7fffff 	.word	0xff7fffff

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	0002      	movs	r2, r0
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b7f      	cmp	r3, #127	; 0x7f
 80011ee:	d809      	bhi.n	8001204 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	001a      	movs	r2, r3
 80011f6:	231f      	movs	r3, #31
 80011f8:	401a      	ands	r2, r3
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_EnableIRQ+0x30>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	4091      	lsls	r1, r2
 8001200:	000a      	movs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
  }
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b7f      	cmp	r3, #127	; 0x7f
 8001224:	d828      	bhi.n	8001278 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	33c0      	adds	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	589b      	ldr	r3, [r3, r2]
 8001236:	1dfa      	adds	r2, r7, #7
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	0011      	movs	r1, r2
 800123c:	2203      	movs	r2, #3
 800123e:	400a      	ands	r2, r1
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	401a      	ands	r2, r3
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	2303      	movs	r3, #3
 800125e:	4003      	ands	r3, r0
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	430a      	orrs	r2, r1
 8001270:	33c0      	adds	r3, #192	; 0xc0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001276:	e031      	b.n	80012dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0019      	movs	r1, r3
 8001280:	230f      	movs	r3, #15
 8001282:	400b      	ands	r3, r1
 8001284:	3b08      	subs	r3, #8
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3306      	adds	r3, #6
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1dfa      	adds	r2, r7, #7
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	0011      	movs	r1, r2
 8001298:	2203      	movs	r2, #3
 800129a:	400a      	ands	r2, r1
 800129c:	00d2      	lsls	r2, r2, #3
 800129e:	21ff      	movs	r1, #255	; 0xff
 80012a0:	4091      	lsls	r1, r2
 80012a2:	000a      	movs	r2, r1
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	401a      	ands	r2, r3
 80012a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	401a      	ands	r2, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	2303      	movs	r3, #3
 80012ba:	4003      	ands	r3, r0
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	001c      	movs	r4, r3
 80012c8:	230f      	movs	r3, #15
 80012ca:	4023      	ands	r3, r4
 80012cc:	3b08      	subs	r3, #8
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	3306      	adds	r3, #6
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	18c3      	adds	r3, r0, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	045b      	lsls	r3, r3, #17
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d301      	bcc.n	8001304 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001300:	2301      	movs	r3, #1
 8001302:	e010      	b.n	8001326 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <SysTick_Config+0x44>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	3a01      	subs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130c:	2301      	movs	r3, #1
 800130e:	425b      	negs	r3, r3
 8001310:	2103      	movs	r1, #3
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff7c 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x44>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x44>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	210f      	movs	r1, #15
 8001340:	187b      	adds	r3, r7, r1
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	187b      	adds	r3, r7, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	0002      	movs	r2, r0
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b25b      	sxtb	r3, r3
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff33 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ffaf 	bl	80012ec <SysTick_Config>
 800138e:	0003      	movs	r3, r0
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e036      	b.n	800141c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2221      	movs	r2, #33	; 0x21
 80013b2:	2102      	movs	r1, #2
 80013b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_DMA_Init+0x8c>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 f8b4 	bl	800156c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2221      	movs	r2, #33	; 0x21
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2220      	movs	r2, #32
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}  
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}
 8001424:	ffffc00f 	.word	0xffffc00f

08001428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	2204      	movs	r2, #4
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	d024      	beq.n	800149a <HAL_DMA_IRQHandler+0x72>
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d020      	beq.n	800149a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2220      	movs	r2, #32
 8001460:	4013      	ands	r3, r2
 8001462:	d107      	bne.n	8001474 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2104      	movs	r1, #4
 8001470:	438a      	bics	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147c:	2104      	movs	r1, #4
 800147e:	4091      	lsls	r1, r2
 8001480:	000a      	movs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <HAL_DMA_IRQHandler+0x66>
 800148c:	e06a      	b.n	8001564 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	0010      	movs	r0, r2
 8001496:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001498:	e064      	b.n	8001564 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2202      	movs	r2, #2
 80014a0:	409a      	lsls	r2, r3
 80014a2:	0013      	movs	r3, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	d02b      	beq.n	8001502 <HAL_DMA_IRQHandler+0xda>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d027      	beq.n	8001502 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2220      	movs	r2, #32
 80014ba:	4013      	ands	r3, r2
 80014bc:	d10b      	bne.n	80014d6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	210a      	movs	r1, #10
 80014ca:	438a      	bics	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2221      	movs	r2, #33	; 0x21
 80014d2:	2101      	movs	r1, #1
 80014d4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	2102      	movs	r1, #2
 80014e0:	4091      	lsls	r1, r2
 80014e2:	000a      	movs	r2, r1
 80014e4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2220      	movs	r2, #32
 80014ea:	2100      	movs	r1, #0
 80014ec:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d036      	beq.n	8001564 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	0010      	movs	r0, r2
 80014fe:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001500:	e030      	b.n	8001564 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	2208      	movs	r2, #8
 8001508:	409a      	lsls	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	d028      	beq.n	8001564 <HAL_DMA_IRQHandler+0x13c>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2208      	movs	r2, #8
 8001516:	4013      	ands	r3, r2
 8001518:	d024      	beq.n	8001564 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	210e      	movs	r1, #14
 8001526:	438a      	bics	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001532:	2101      	movs	r1, #1
 8001534:	4091      	lsls	r1, r2
 8001536:	000a      	movs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2221      	movs	r2, #33	; 0x21
 8001544:	2101      	movs	r1, #1
 8001546:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	0010      	movs	r0, r2
 8001560:	4798      	blx	r3
    }
   }
}  
 8001562:	e7ff      	b.n	8001564 <HAL_DMA_IRQHandler+0x13c>
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}

0800156c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <DMA_CalcBaseAndBitshift+0x30>)
 800157a:	4694      	mov	ip, r2
 800157c:	4463      	add	r3, ip
 800157e:	2114      	movs	r1, #20
 8001580:	0018      	movs	r0, r3
 8001582:	f7fe fdc1 	bl	8000108 <__udivsi3>
 8001586:	0003      	movs	r3, r0
 8001588:	009a      	lsls	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <DMA_CalcBaseAndBitshift+0x34>)
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}
 800159c:	bffdfff8 	.word	0xbffdfff8
 80015a0:	40020000 	.word	0x40020000

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	e149      	b.n	8001848 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4091      	lsls	r1, r2
 80015be:	000a      	movs	r2, r1
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d100      	bne.n	80015cc <HAL_GPIO_Init+0x28>
 80015ca:	e13a      	b.n	8001842 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d005      	beq.n	80015e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2203      	movs	r2, #3
 80015de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d130      	bne.n	8001646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	409a      	lsls	r2, r3
 8001606:	0013      	movs	r3, r2
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	2201      	movs	r2, #1
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2203      	movs	r2, #3
 800164c:	4013      	ands	r3, r2
 800164e:	2b03      	cmp	r3, #3
 8001650:	d017      	beq.n	8001682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2203      	movs	r2, #3
 8001688:	4013      	ands	r3, r2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d123      	bne.n	80016d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	58d3      	ldr	r3, [r2, r3]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2207      	movs	r2, #7
 80016a0:	4013      	ands	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	43da      	mvns	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2107      	movs	r1, #7
 80016ba:	400b      	ands	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	6939      	ldr	r1, [r7, #16]
 80016d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2203      	movs	r2, #3
 80016f4:	401a      	ands	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d100      	bne.n	8001718 <HAL_GPIO_Init+0x174>
 8001716:	e094      	b.n	8001842 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_GPIO_Init+0x2bc>)
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_GPIO_Init+0x2bc>)
 800171e:	2101      	movs	r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	619a      	str	r2, [r3, #24]
 8001724:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <HAL_GPIO_Init+0x2bc>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <HAL_GPIO_Init+0x2c0>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	589b      	ldr	r3, [r3, r2]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2203      	movs	r2, #3
 8001742:	4013      	ands	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	43da      	mvns	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	2390      	movs	r3, #144	; 0x90
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	429a      	cmp	r2, r3
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x1d6>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a41      	ldr	r2, [pc, #260]	; (8001868 <HAL_GPIO_Init+0x2c4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x1d2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a40      	ldr	r2, [pc, #256]	; (800186c <HAL_GPIO_Init+0x2c8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x1ce>
 800176e:	2302      	movs	r3, #2
 8001770:	e004      	b.n	800177c <HAL_GPIO_Init+0x1d8>
 8001772:	2305      	movs	r3, #5
 8001774:	e002      	b.n	800177c <HAL_GPIO_Init+0x1d8>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x1d8>
 800177a:	2300      	movs	r3, #0
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	2103      	movs	r1, #3
 8001780:	400a      	ands	r2, r1
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4093      	lsls	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178c:	4935      	ldr	r1, [pc, #212]	; (8001864 <HAL_GPIO_Init+0x2c0>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43da      	mvns	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	025b      	lsls	r3, r3, #9
 80017b2:	4013      	ands	r3, r2
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43da      	mvns	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	4013      	ands	r3, r2
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	035b      	lsls	r3, r3, #13
 8001806:	4013      	ands	r3, r2
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43da      	mvns	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	039b      	lsls	r3, r3, #14
 8001830:	4013      	ands	r3, r2
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	40da      	lsrs	r2, r3
 8001850:	1e13      	subs	r3, r2, #0
 8001852:	d000      	beq.n	8001856 <HAL_GPIO_Init+0x2b2>
 8001854:	e6ae      	b.n	80015b4 <HAL_GPIO_Init+0x10>
  } 
}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b006      	add	sp, #24
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	48000400 	.word	0x48000400
 800186c:	48000800 	.word	0x48000800
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e301      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x1e>
 8001890:	e08d      	b.n	80019ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001892:	4bc3      	ldr	r3, [pc, #780]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	2b04      	cmp	r3, #4
 800189c:	d00e      	beq.n	80018bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800189e:	4bc0      	ldr	r3, [pc, #768]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	220c      	movs	r2, #12
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x64>
 80018aa:	4bbd      	ldr	r3, [pc, #756]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	401a      	ands	r2, r3
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d10d      	bne.n	80018d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	4bb8      	ldr	r3, [pc, #736]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	4013      	ands	r3, r2
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0x56>
 80018c8:	e070      	b.n	80019ac <HAL_RCC_OscConfig+0x138>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d000      	beq.n	80018d4 <HAL_RCC_OscConfig+0x60>
 80018d2:	e06b      	b.n	80019ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e2d8      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x7c>
 80018e0:	4baf      	ldr	r3, [pc, #700]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4bae      	ldr	r3, [pc, #696]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0249      	lsls	r1, r1, #9
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e02f      	b.n	8001950 <HAL_RCC_OscConfig+0xdc>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x9e>
 80018f8:	4ba9      	ldr	r3, [pc, #676]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4ba8      	ldr	r3, [pc, #672]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	49a9      	ldr	r1, [pc, #676]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001900:	400a      	ands	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	4ba6      	ldr	r3, [pc, #664]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4ba5      	ldr	r3, [pc, #660]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 800190a:	49a7      	ldr	r1, [pc, #668]	; (8001ba8 <HAL_RCC_OscConfig+0x334>)
 800190c:	400a      	ands	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e01e      	b.n	8001950 <HAL_RCC_OscConfig+0xdc>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10e      	bne.n	8001938 <HAL_RCC_OscConfig+0xc4>
 800191a:	4ba1      	ldr	r3, [pc, #644]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4ba0      	ldr	r3, [pc, #640]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	02c9      	lsls	r1, r1, #11
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	4b9d      	ldr	r3, [pc, #628]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b9c      	ldr	r3, [pc, #624]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0249      	lsls	r1, r1, #9
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xdc>
 8001938:	4b99      	ldr	r3, [pc, #612]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b98      	ldr	r3, [pc, #608]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 800193e:	4999      	ldr	r1, [pc, #612]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001940:	400a      	ands	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	4b96      	ldr	r3, [pc, #600]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b95      	ldr	r3, [pc, #596]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 800194a:	4997      	ldr	r1, [pc, #604]	; (8001ba8 <HAL_RCC_OscConfig+0x334>)
 800194c:	400a      	ands	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d014      	beq.n	8001982 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff f9c4 	bl	8000ce4 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001962:	f7ff f9bf 	bl	8000ce4 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e28a      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001974:	4b8a      	ldr	r3, [pc, #552]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	029b      	lsls	r3, r3, #10
 800197c:	4013      	ands	r3, r2
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0xee>
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff f9af 	bl	8000ce4 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f9aa 	bl	8000ce4 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e275      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	029b      	lsls	r3, r3, #10
 80019a6:	4013      	ands	r3, r2
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x118>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x146>
 80019b8:	e069      	b.n	8001a8e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ba:	4b79      	ldr	r3, [pc, #484]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	220c      	movs	r2, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	d00b      	beq.n	80019dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019c4:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	220c      	movs	r2, #12
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d11c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x196>
 80019d0:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	025b      	lsls	r3, r3, #9
 80019d8:	4013      	ands	r3, r2
 80019da:	d116      	bne.n	8001a0a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019dc:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x17e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e24b      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	22f8      	movs	r2, #248	; 0xf8
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	00da      	lsls	r2, r3, #3
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a08:	e041      	b.n	8001a8e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d024      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f961 	bl	8000ce4 <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff f95c 	bl	8000ce4 <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e227      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0f1      	beq.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	22f8      	movs	r2, #248	; 0xf8
 8001a4a:	4393      	bics	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00da      	lsls	r2, r3, #3
 8001a54:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e018      	b.n	8001a8e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	438a      	bics	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff f93c 	bl	8000ce4 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff f937 	bl	8000ce4 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e202      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a84:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d1f1      	bne.n	8001a72 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2208      	movs	r2, #8
 8001a94:	4013      	ands	r3, r2
 8001a96:	d036      	beq.n	8001b06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d019      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa0:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa4:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff f91a 	bl	8000ce4 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f915 	bl	8000ce4 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1e0      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac8:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d0f1      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x242>
 8001ad2:	e018      	b.n	8001b06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	438a      	bics	r2, r1
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f900 	bl	8000ce4 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aea:	f7ff f8fb 	bl	8000ce4 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1c6      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d1f1      	bne.n	8001aea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x29e>
 8001b10:	e0b4      	b.n	8001c7c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	201f      	movs	r0, #31
 8001b14:	183b      	adds	r3, r7, r0
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	055b      	lsls	r3, r3, #21
 8001b22:	4013      	ands	r3, r2
 8001b24:	d110      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	0549      	lsls	r1, r1, #21
 8001b30:	430a      	orrs	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	055b      	lsls	r3, r3, #21
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b42:	183b      	adds	r3, r7, r0
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x338>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d11a      	bne.n	8001b8a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x338>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_RCC_OscConfig+0x338>)
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	0049      	lsls	r1, r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f8bf 	bl	8000ce4 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6c:	f7ff f8ba 	bl	8000ce4 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e185      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x338>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d10e      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x33c>
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	621a      	str	r2, [r3, #32]
 8001b9e:	e035      	b.n	8001c0c <HAL_RCC_OscConfig+0x398>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	fffeffff 	.word	0xfffeffff
 8001ba8:	fffbffff 	.word	0xfffbffff
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x35e>
 8001bb8:	4bb6      	ldr	r3, [pc, #728]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	4bb5      	ldr	r3, [pc, #724]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	621a      	str	r2, [r3, #32]
 8001bc4:	4bb3      	ldr	r3, [pc, #716]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
 8001bc8:	4bb2      	ldr	r3, [pc, #712]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bca:	2104      	movs	r1, #4
 8001bcc:	438a      	bics	r2, r1
 8001bce:	621a      	str	r2, [r3, #32]
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x398>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x380>
 8001bda:	4bae      	ldr	r3, [pc, #696]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	4bad      	ldr	r3, [pc, #692]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001be0:	2104      	movs	r1, #4
 8001be2:	430a      	orrs	r2, r1
 8001be4:	621a      	str	r2, [r3, #32]
 8001be6:	4bab      	ldr	r3, [pc, #684]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	4baa      	ldr	r3, [pc, #680]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	621a      	str	r2, [r3, #32]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0x398>
 8001bf4:	4ba7      	ldr	r3, [pc, #668]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	4ba6      	ldr	r3, [pc, #664]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	621a      	str	r2, [r3, #32]
 8001c00:	4ba4      	ldr	r3, [pc, #656]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c02:	6a1a      	ldr	r2, [r3, #32]
 8001c04:	4ba3      	ldr	r3, [pc, #652]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c06:	2104      	movs	r1, #4
 8001c08:	438a      	bics	r2, r1
 8001c0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d014      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7ff f866 	bl	8000ce4 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff f861 	bl	8000ce4 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a9b      	ldr	r2, [pc, #620]	; (8001e98 <HAL_RCC_OscConfig+0x624>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e12b      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	4b98      	ldr	r3, [pc, #608]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x3aa>
 8001c3c:	e013      	b.n	8001c66 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f851 	bl	8000ce4 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c46:	e009      	b.n	8001c5c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff f84c 	bl	8000ce4 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	4a91      	ldr	r2, [pc, #580]	; (8001e98 <HAL_RCC_OscConfig+0x624>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e116      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	4b8d      	ldr	r3, [pc, #564]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c66:	231f      	movs	r3, #31
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c76:	4989      	ldr	r1, [pc, #548]	; (8001e9c <HAL_RCC_OscConfig+0x628>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2210      	movs	r2, #16
 8001c82:	4013      	ands	r3, r2
 8001c84:	d063      	beq.n	8001d4e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d12a      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c8e:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c92:	4b80      	ldr	r3, [pc, #512]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c94:	2104      	movs	r1, #4
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c9a:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9e:	4b7d      	ldr	r3, [pc, #500]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f81d 	bl	8000ce4 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cb0:	f7ff f818 	bl	8000ce4 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0e3      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d0f1      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ccc:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	22f8      	movs	r2, #248	; 0xf8
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	00da      	lsls	r2, r3, #3
 8001cdc:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce2:	e034      	b.n	8001d4e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	3305      	adds	r3, #5
 8001cea:	d111      	bne.n	8001d10 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cec:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	22f8      	movs	r2, #248	; 0xf8
 8001cfe:	4393      	bics	r3, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	00da      	lsls	r2, r3, #3
 8001d08:	4b62      	ldr	r3, [pc, #392]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0e:	e01e      	b.n	8001d4e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d10:	4b60      	ldr	r3, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d14:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d16:	2104      	movs	r1, #4
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d1c:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	438a      	bics	r2, r1
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7fe ffdc 	bl	8000ce4 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d32:	f7fe ffd7 	bl	8000ce4 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0a2      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d1f1      	bne.n	8001d32 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d100      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4e4>
 8001d56:	e097      	b.n	8001e88 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4f2>
 8001d64:	e06b      	b.n	8001e3e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d14c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d74:	494a      	ldr	r1, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x62c>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe ffb3 	bl	8000ce4 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe ffae 	bl	8000ce4 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e079      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	049b      	lsls	r3, r3, #18
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	220f      	movs	r2, #15
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001db6:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a3a      	ldr	r2, [pc, #232]	; (8001ea4 <HAL_RCC_OscConfig+0x630>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	0449      	lsls	r1, r1, #17
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7fe ff81 	bl	8000ce4 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe ff7c 	bl	8000ce4 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e047      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	049b      	lsls	r3, r3, #18
 8001e02:	4013      	ands	r3, r2
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x574>
 8001e06:	e03f      	b.n	8001e88 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	4924      	ldr	r1, [pc, #144]	; (8001ea0 <HAL_RCC_OscConfig+0x62c>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff66 	bl	8000ce4 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe ff61 	bl	8000ce4 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e02c      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	049b      	lsls	r3, r3, #18
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5aa>
 8001e3c:	e024      	b.n	8001e88 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e01f      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_RCC_OscConfig+0x620>)
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10e      	bne.n	8001e84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	220f      	movs	r2, #15
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	23f0      	movs	r3, #240	; 0xf0
 8001e78:	039b      	lsls	r3, r3, #14
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b008      	add	sp, #32
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	40021000 	.word	0x40021000
 8001e98:	00001388 	.word	0x00001388
 8001e9c:	efffffff 	.word	0xefffffff
 8001ea0:	feffffff 	.word	0xfeffffff
 8001ea4:	ffc2ffff 	.word	0xffc2ffff

08001ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b3      	b.n	8002024 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b5b      	ldr	r3, [pc, #364]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d911      	bls.n	8001eee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	4b55      	ldr	r3, [pc, #340]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e09a      	b.n	8002024 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d015      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2204      	movs	r2, #4
 8001efe:	4013      	ands	r3, r2
 8001f00:	d006      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f02:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f08:	21e0      	movs	r1, #224	; 0xe0
 8001f0a:	00c9      	lsls	r1, r1, #3
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	22f0      	movs	r2, #240	; 0xf0
 8001f16:	4393      	bics	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d040      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d114      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06e      	b.n	8002024 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	049b      	lsls	r3, r3, #18
 8001f56:	4013      	ands	r3, r2
 8001f58:	d108      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e062      	b.n	8002024 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e05b      	b.n	8002024 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	4393      	bics	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f80:	f7fe feb0 	bl	8000ce4 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8a:	f7fe feab 	bl	8000ce4 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4a27      	ldr	r2, [pc, #156]	; (8002034 <HAL_RCC_ClockConfig+0x18c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e042      	b.n	8002024 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1ec      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d211      	bcs.n	8001fe2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x184>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e020      	b.n	8002024 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_RCC_ClockConfig+0x190>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002000:	f000 f820 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002004:	0001      	movs	r1, r0
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x188>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	220f      	movs	r2, #15
 800200e:	4013      	ands	r3, r2
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x194>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	000a      	movs	r2, r1
 8002016:	40da      	lsrs	r2, r3
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x198>)
 800201a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800201c:	2003      	movs	r0, #3
 800201e:	f7fe fe1b 	bl	8000c58 <HAL_InitTick>
  
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b004      	add	sp, #16
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	00001388 	.word	0x00001388
 8002038:	fffff8ff 	.word	0xfffff8ff
 800203c:	08003ae4 	.word	0x08003ae4
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b08f      	sub	sp, #60	; 0x3c
 8002048:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800204a:	2314      	movs	r3, #20
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002050:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002052:	c313      	stmia	r3!, {r0, r1, r4}
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4a29      	ldr	r2, [pc, #164]	; (8002100 <HAL_RCC_GetSysClockFreq+0xbc>)
 800205c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800205e:	c313      	stmia	r3!, {r0, r1, r4}
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
 800206c:	2300      	movs	r3, #0
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	220c      	movs	r2, #12
 8002082:	4013      	ands	r3, r2
 8002084:	2b04      	cmp	r3, #4
 8002086:	d002      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x4a>
 8002088:	2b08      	cmp	r3, #8
 800208a:	d003      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x50>
 800208c:	e02d      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002092:	e02d      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	220f      	movs	r2, #15
 800209a:	4013      	ands	r3, r2
 800209c:	2214      	movs	r2, #20
 800209e:	18ba      	adds	r2, r7, r2
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	220f      	movs	r2, #15
 80020aa:	4013      	ands	r3, r2
 80020ac:	1d3a      	adds	r2, r7, #4
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	025b      	lsls	r3, r3, #9
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020be:	4812      	ldr	r0, [pc, #72]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c0:	f7fe f822 	bl	8000108 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	001a      	movs	r2, r3
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	4353      	muls	r3, r2
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
 80020ce:	e009      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d2:	000a      	movs	r2, r1
 80020d4:	0152      	lsls	r2, r2, #5
 80020d6:	1a52      	subs	r2, r2, r1
 80020d8:	0193      	lsls	r3, r2, #6
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	185b      	adds	r3, r3, r1
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80020e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e8:	e002      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b00f      	add	sp, #60	; 0x3c
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	08003ac4 	.word	0x08003ac4
 8002100:	08003ad4 	.word	0x08003ad4
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200

0800210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_RCC_GetHCLKFreq+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000000 	.word	0x20000000

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002124:	f7ff fff2 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002128:	0001      	movs	r1, r0
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	2207      	movs	r2, #7
 8002132:	4013      	ands	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	40d9      	lsrs	r1, r3
 800213a:	000b      	movs	r3, r1
}    
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40021000 	.word	0x40021000
 8002148:	08003af4 	.word	0x08003af4

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	4013      	ands	r3, r2
 8002166:	d100      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002168:	e08e      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2017      	movs	r0, #23
 800216c:	183b      	adds	r3, r7, r0
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	055b      	lsls	r3, r3, #21
 800217a:	4013      	ands	r3, r2
 800217c:	d110      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0549      	lsls	r1, r1, #21
 8002188:	430a      	orrs	r2, r1
 800218a:	61da      	str	r2, [r3, #28]
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	055b      	lsls	r3, r3, #21
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	183b      	adds	r3, r7, r0
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4013      	ands	r3, r2
 80021aa:	d11a      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ac:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	0049      	lsls	r1, r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7fe fd93 	bl	8000ce4 <HAL_GetTick>
 80021be:	0003      	movs	r3, r0
 80021c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	e008      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7fe fd8e 	bl	8000ce4 <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e077      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d034      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	23c0      	movs	r3, #192	; 0xc0
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d02c      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0249      	lsls	r1, r1, #9
 8002218:	430a      	orrs	r2, r1
 800221a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002222:	492e      	ldr	r1, [pc, #184]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002224:	400a      	ands	r2, r1
 8002226:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fd55 	bl	8000ce4 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	e009      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7fe fd50 	bl	8000ce4 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e038      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d0f0      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002264:	4013      	ands	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800226e:	430a      	orrs	r2, r1
 8002270:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002272:	2317      	movs	r3, #23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002282:	4918      	ldr	r1, [pc, #96]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002284:	400a      	ands	r2, r1
 8002286:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	2203      	movs	r2, #3
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2220      	movs	r2, #32
 80022ac:	4013      	ands	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	2210      	movs	r2, #16
 80022b6:	4393      	bics	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b006      	add	sp, #24
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
 80022d8:	fffffcff 	.word	0xfffffcff
 80022dc:	fffeffff 	.word	0xfffeffff
 80022e0:	00001388 	.word	0x00001388
 80022e4:	efffffff 	.word	0xefffffff

080022e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e042      	b.n	8002380 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	223d      	movs	r2, #61	; 0x3d
 80022fe:	5c9b      	ldrb	r3, [r3, r2]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223c      	movs	r2, #60	; 0x3c
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f7fe fb1b 	bl	800094c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223d      	movs	r2, #61	; 0x3d
 800231a:	2102      	movs	r1, #2
 800231c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	0019      	movs	r1, r3
 8002328:	0010      	movs	r0, r2
 800232a:	f000 fa93 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2246      	movs	r2, #70	; 0x46
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	223e      	movs	r2, #62	; 0x3e
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	223f      	movs	r2, #63	; 0x3f
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2240      	movs	r2, #64	; 0x40
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2241      	movs	r2, #65	; 0x41
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2242      	movs	r2, #66	; 0x42
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2243      	movs	r2, #67	; 0x43
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2244      	movs	r2, #68	; 0x44
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2245      	movs	r2, #69	; 0x45
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	223d      	movs	r2, #61	; 0x3d
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <HAL_TIM_PWM_Start+0x22>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	223e      	movs	r2, #62	; 0x3e
 800239c:	5c9b      	ldrb	r3, [r3, r2]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	4193      	sbcs	r3, r2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	e01f      	b.n	80023ea <HAL_TIM_PWM_Start+0x62>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d108      	bne.n	80023c2 <HAL_TIM_PWM_Start+0x3a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	223f      	movs	r2, #63	; 0x3f
 80023b4:	5c9b      	ldrb	r3, [r3, r2]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	4193      	sbcs	r3, r2
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	e013      	b.n	80023ea <HAL_TIM_PWM_Start+0x62>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d108      	bne.n	80023da <HAL_TIM_PWM_Start+0x52>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	5c9b      	ldrb	r3, [r3, r2]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	1e5a      	subs	r2, r3, #1
 80023d4:	4193      	sbcs	r3, r2
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	e007      	b.n	80023ea <HAL_TIM_PWM_Start+0x62>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2241      	movs	r2, #65	; 0x41
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	4193      	sbcs	r3, r2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e06a      	b.n	80024c8 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <HAL_TIM_PWM_Start+0x7a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	223e      	movs	r2, #62	; 0x3e
 80023fc:	2102      	movs	r1, #2
 80023fe:	5499      	strb	r1, [r3, r2]
 8002400:	e013      	b.n	800242a <HAL_TIM_PWM_Start+0xa2>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d104      	bne.n	8002412 <HAL_TIM_PWM_Start+0x8a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	223f      	movs	r2, #63	; 0x3f
 800240c:	2102      	movs	r1, #2
 800240e:	5499      	strb	r1, [r3, r2]
 8002410:	e00b      	b.n	800242a <HAL_TIM_PWM_Start+0xa2>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d104      	bne.n	8002422 <HAL_TIM_PWM_Start+0x9a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	2102      	movs	r1, #2
 800241e:	5499      	strb	r1, [r3, r2]
 8002420:	e003      	b.n	800242a <HAL_TIM_PWM_Start+0xa2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2241      	movs	r2, #65	; 0x41
 8002426:	2102      	movs	r1, #2
 8002428:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	0018      	movs	r0, r3
 8002434:	f000 fd82 	bl	8002f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_TIM_PWM_Start+0x148>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_TIM_PWM_Start+0xce>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <HAL_TIM_PWM_Start+0x14c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_TIM_PWM_Start+0xce>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_TIM_PWM_Start+0x150>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_TIM_PWM_Start+0xd2>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_TIM_PWM_Start+0xd4>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	0209      	lsls	r1, r1, #8
 800246e:	430a      	orrs	r2, r1
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_TIM_PWM_Start+0x148>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00a      	beq.n	8002492 <HAL_TIM_PWM_Start+0x10a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	05db      	lsls	r3, r3, #23
 8002484:	429a      	cmp	r2, r3
 8002486:	d004      	beq.n	8002492 <HAL_TIM_PWM_Start+0x10a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_TIM_PWM_Start+0x154>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d111      	bne.n	80024b6 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2207      	movs	r2, #7
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d010      	beq.n	80024c6 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b4:	e007      	b.n	80024c6 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40014400 	.word	0x40014400
 80024d8:	40014800 	.word	0x40014800
 80024dc:	40000400 	.word	0x40000400

080024e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e042      	b.n	8002578 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	223d      	movs	r2, #61	; 0x3d
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	223c      	movs	r2, #60	; 0x3c
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe fa3f 	bl	800098c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223d      	movs	r2, #61	; 0x3d
 8002512:	2102      	movs	r1, #2
 8002514:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	0019      	movs	r1, r3
 8002520:	0010      	movs	r0, r2
 8002522:	f000 f997 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2246      	movs	r2, #70	; 0x46
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223e      	movs	r2, #62	; 0x3e
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	223f      	movs	r2, #63	; 0x3f
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2241      	movs	r2, #65	; 0x41
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2242      	movs	r2, #66	; 0x42
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2243      	movs	r2, #67	; 0x43
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2244      	movs	r2, #68	; 0x44
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2245      	movs	r2, #69	; 0x45
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	223d      	movs	r2, #61	; 0x3d
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2317      	movs	r3, #23
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	223c      	movs	r2, #60	; 0x3c
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_IC_ConfigChannel+0x22>
 800259e:	2302      	movs	r3, #2
 80025a0:	e08c      	b.n	80026bc <HAL_TIM_IC_ConfigChannel+0x13c>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	223c      	movs	r2, #60	; 0x3c
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f000 fb9e 	bl	8002d00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	210c      	movs	r1, #12
 80025d0:	438a      	bics	r2, r1
 80025d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6999      	ldr	r1, [r3, #24]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	619a      	str	r2, [r3, #24]
 80025e6:	e062      	b.n	80026ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d11c      	bne.n	8002628 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f000 fbd5 	bl	8002dac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	492d      	ldr	r1, [pc, #180]	; (80026c4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800260e:	400a      	ands	r2, r1
 8002610:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6999      	ldr	r1, [r3, #24]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	e042      	b.n	80026ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11b      	bne.n	8002666 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f000 fbf7 	bl	8002e30 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	210c      	movs	r1, #12
 800264e:	438a      	bics	r2, r1
 8002650:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69d9      	ldr	r1, [r3, #28]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	61da      	str	r2, [r3, #28]
 8002664:	e023      	b.n	80026ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d11c      	bne.n	80026a6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f000 fc18 	bl	8002eb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800268c:	400a      	ands	r2, r1
 800268e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69d9      	ldr	r1, [r3, #28]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	61da      	str	r2, [r3, #28]
 80026a4:	e003      	b.n	80026ae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80026a6:	2317      	movs	r3, #23
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	223c      	movs	r2, #60	; 0x3c
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]

  return status;
 80026b6:	2317      	movs	r3, #23
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	781b      	ldrb	r3, [r3, #0]
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b006      	add	sp, #24
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	fffff3ff 	.word	0xfffff3ff

080026c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d4:	2317      	movs	r3, #23
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	223c      	movs	r2, #60	; 0x3c
 80026e0:	5c9b      	ldrb	r3, [r3, r2]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x22>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e0ad      	b.n	8002846 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	223c      	movs	r2, #60	; 0x3c
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d100      	bne.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x32>
 80026f8:	e076      	b.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	d900      	bls.n	8002702 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002700:	e095      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d04e      	beq.n	80027a6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d900      	bls.n	8002710 <HAL_TIM_PWM_ConfigChannel+0x48>
 800270e:	e08e      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b04      	cmp	r3, #4
 800271a:	d021      	beq.n	8002760 <HAL_TIM_PWM_ConfigChannel+0x98>
 800271c:	e087      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f90a 	bl	8002940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2108      	movs	r1, #8
 8002738:	430a      	orrs	r2, r1
 800273a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2104      	movs	r1, #4
 8002748:	438a      	bics	r2, r1
 800274a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6999      	ldr	r1, [r3, #24]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	619a      	str	r2, [r3, #24]
      break;
 800275e:	e06b      	b.n	8002838 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f967 	bl	8002a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	0109      	lsls	r1, r1, #4
 800277c:	430a      	orrs	r2, r1
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4931      	ldr	r1, [pc, #196]	; (8002850 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800278c:	400a      	ands	r2, r1
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
      break;
 80027a4:	e048      	b.n	8002838 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f9c2 	bl	8002b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2108      	movs	r1, #8
 80027c0:	430a      	orrs	r2, r1
 80027c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2104      	movs	r1, #4
 80027d0:	438a      	bics	r2, r1
 80027d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69d9      	ldr	r1, [r3, #28]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	61da      	str	r2, [r3, #28]
      break;
 80027e6:	e027      	b.n	8002838 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fa21 	bl	8002c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0109      	lsls	r1, r1, #4
 8002804:	430a      	orrs	r2, r1
 8002806:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	490f      	ldr	r1, [pc, #60]	; (8002850 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002814:	400a      	ands	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69d9      	ldr	r1, [r3, #28]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	021a      	lsls	r2, r3, #8
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	61da      	str	r2, [r3, #28]
      break;
 800282c:	e004      	b.n	8002838 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800282e:	2317      	movs	r3, #23
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
      break;
 8002836:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	223c      	movs	r2, #60	; 0x3c
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]

  return status;
 8002840:	2317      	movs	r3, #23
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b006      	add	sp, #24
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	fffffbff 	.word	0xfffffbff

08002854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a30      	ldr	r2, [pc, #192]	; (8002928 <TIM_Base_SetConfig+0xd4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d008      	beq.n	800287e <TIM_Base_SetConfig+0x2a>
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	05db      	lsls	r3, r3, #23
 8002872:	429a      	cmp	r2, r3
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x2a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a2c      	ldr	r2, [pc, #176]	; (800292c <TIM_Base_SetConfig+0xd8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2270      	movs	r2, #112	; 0x70
 8002882:	4393      	bics	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a25      	ldr	r2, [pc, #148]	; (8002928 <TIM_Base_SetConfig+0xd4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d014      	beq.n	80028c2 <TIM_Base_SetConfig+0x6e>
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	429a      	cmp	r2, r3
 80028a0:	d00f      	beq.n	80028c2 <TIM_Base_SetConfig+0x6e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a21      	ldr	r2, [pc, #132]	; (800292c <TIM_Base_SetConfig+0xd8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <TIM_Base_SetConfig+0x6e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a20      	ldr	r2, [pc, #128]	; (8002930 <TIM_Base_SetConfig+0xdc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <TIM_Base_SetConfig+0x6e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <TIM_Base_SetConfig+0xe0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <TIM_Base_SetConfig+0x6e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <TIM_Base_SetConfig+0xe4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d108      	bne.n	80028d4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <TIM_Base_SetConfig+0xe8>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	4393      	bics	r3, r2
 80028da:	001a      	movs	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <TIM_Base_SetConfig+0xd4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <TIM_Base_SetConfig+0xbe>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <TIM_Base_SetConfig+0xe0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <TIM_Base_SetConfig+0xbe>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <TIM_Base_SetConfig+0xe4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d103      	bne.n	800291a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	615a      	str	r2, [r3, #20]
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b004      	add	sp, #16
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40002000 	.word	0x40002000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	fffffcff 	.word	0xfffffcff

08002940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	2201      	movs	r2, #1
 8002950:	4393      	bics	r3, r2
 8002952:	001a      	movs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2270      	movs	r2, #112	; 0x70
 800296e:	4393      	bics	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2203      	movs	r2, #3
 8002976:	4393      	bics	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2202      	movs	r2, #2
 8002988:	4393      	bics	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <TIM_OC1_SetConfig+0xe8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <TIM_OC1_SetConfig+0x6e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <TIM_OC1_SetConfig+0xec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_OC1_SetConfig+0x6e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a21      	ldr	r2, [pc, #132]	; (8002a30 <TIM_OC1_SetConfig+0xf0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10c      	bne.n	80029c8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2208      	movs	r2, #8
 80029b2:	4393      	bics	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2204      	movs	r2, #4
 80029c4:	4393      	bics	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <TIM_OC1_SetConfig+0xe8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <TIM_OC1_SetConfig+0xa0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <TIM_OC1_SetConfig+0xec>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_OC1_SetConfig+0xa0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <TIM_OC1_SetConfig+0xf0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d111      	bne.n	8002a04 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <TIM_OC1_SetConfig+0xf4>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <TIM_OC1_SetConfig+0xf8>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b006      	add	sp, #24
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40014400 	.word	0x40014400
 8002a30:	40014800 	.word	0x40014800
 8002a34:	fffffeff 	.word	0xfffffeff
 8002a38:	fffffdff 	.word	0xfffffdff

08002a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	001a      	movs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <TIM_OC2_SetConfig+0xe0>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <TIM_OC2_SetConfig+0xe4>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2220      	movs	r2, #32
 8002a86:	4393      	bics	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <TIM_OC2_SetConfig+0xe8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10d      	bne.n	8002aba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	4393      	bics	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <TIM_OC2_SetConfig+0xe8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <TIM_OC2_SetConfig+0x96>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <TIM_OC2_SetConfig+0xec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_OC2_SetConfig+0x96>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <TIM_OC2_SetConfig+0xf0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d113      	bne.n	8002afa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <TIM_OC2_SetConfig+0xf4>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <TIM_OC2_SetConfig+0xf8>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	621a      	str	r2, [r3, #32]
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b006      	add	sp, #24
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	ffff8fff 	.word	0xffff8fff
 8002b20:	fffffcff 	.word	0xfffffcff
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	fffffbff 	.word	0xfffffbff
 8002b34:	fffff7ff 	.word	0xfffff7ff

08002b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a33      	ldr	r2, [pc, #204]	; (8002c14 <TIM_OC3_SetConfig+0xdc>)
 8002b48:	401a      	ands	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2270      	movs	r2, #112	; 0x70
 8002b64:	4393      	bics	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <TIM_OC3_SetConfig+0xe0>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <TIM_OC3_SetConfig+0xe4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10d      	bne.n	8002bb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <TIM_OC3_SetConfig+0xe8>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <TIM_OC3_SetConfig+0xec>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <TIM_OC3_SetConfig+0xe4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <TIM_OC3_SetConfig+0x92>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <TIM_OC3_SetConfig+0xf0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d003      	beq.n	8002bca <TIM_OC3_SetConfig+0x92>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <TIM_OC3_SetConfig+0xf4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d113      	bne.n	8002bf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <TIM_OC3_SetConfig+0xf8>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <TIM_OC3_SetConfig+0xfc>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b006      	add	sp, #24
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fffffeff 	.word	0xfffffeff
 8002c18:	fffffdff 	.word	0xfffffdff
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	fffff7ff 	.word	0xfffff7ff
 8002c24:	fffffbff 	.word	0xfffffbff
 8002c28:	40014400 	.word	0x40014400
 8002c2c:	40014800 	.word	0x40014800
 8002c30:	ffffefff 	.word	0xffffefff
 8002c34:	ffffdfff 	.word	0xffffdfff

08002c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <TIM_OC4_SetConfig+0xa8>)
 8002c48:	401a      	ands	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <TIM_OC4_SetConfig+0xac>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <TIM_OC4_SetConfig+0xb0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <TIM_OC4_SetConfig+0xb4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	031b      	lsls	r3, r3, #12
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <TIM_OC4_SetConfig+0xb8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <TIM_OC4_SetConfig+0x70>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <TIM_OC4_SetConfig+0xbc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d003      	beq.n	8002ca8 <TIM_OC4_SetConfig+0x70>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <TIM_OC4_SetConfig+0xc0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d109      	bne.n	8002cbc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <TIM_OC4_SetConfig+0xc4>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b006      	add	sp, #24
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	ffffefff 	.word	0xffffefff
 8002ce4:	ffff8fff 	.word	0xffff8fff
 8002ce8:	fffffcff 	.word	0xfffffcff
 8002cec:	ffffdfff 	.word	0xffffdfff
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40014400 	.word	0x40014400
 8002cf8:	40014800 	.word	0x40014800
 8002cfc:	ffffbfff 	.word	0xffffbfff

08002d00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4393      	bics	r3, r2
 8002d16:	001a      	movs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <TIM_TI1_SetConfig+0xa4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d008      	beq.n	8002d42 <TIM_TI1_SetConfig+0x42>
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d003      	beq.n	8002d42 <TIM_TI1_SetConfig+0x42>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <TIM_TI1_SetConfig+0xa8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <TIM_TI1_SetConfig+0x46>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <TIM_TI1_SetConfig+0x48>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2203      	movs	r2, #3
 8002d50:	4393      	bics	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e003      	b.n	8002d66 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	22f0      	movs	r2, #240	; 0xf0
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	4013      	ands	r3, r2
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	220a      	movs	r2, #10
 8002d80:	4393      	bics	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	220a      	movs	r2, #10
 8002d88:	4013      	ands	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b006      	add	sp, #24
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40000400 	.word	0x40000400

08002dac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <TIM_TI2_SetConfig+0x7c>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <TIM_TI2_SetConfig+0x80>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	031b      	lsls	r3, r3, #12
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	22a0      	movs	r2, #160	; 0xa0
 8002e00:	4393      	bics	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	22a0      	movs	r2, #160	; 0xa0
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b006      	add	sp, #24
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	fffffcff 	.word	0xfffffcff
 8002e2c:	ffff0fff 	.word	0xffff0fff

08002e30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <TIM_TI3_SetConfig+0x78>)
 8002e44:	401a      	ands	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	22f0      	movs	r2, #240	; 0xf0
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	22ff      	movs	r2, #255	; 0xff
 8002e74:	4013      	ands	r3, r2
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <TIM_TI3_SetConfig+0x7c>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	021a      	lsls	r2, r3, #8
 8002e88:	23a0      	movs	r3, #160	; 0xa0
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	621a      	str	r2, [r3, #32]
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	fffffeff 	.word	0xfffffeff
 8002eac:	fffff5ff 	.word	0xfffff5ff

08002eb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <TIM_TI4_SetConfig+0x7c>)
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <TIM_TI4_SetConfig+0x80>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <TIM_TI4_SetConfig+0x84>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	031b      	lsls	r3, r3, #12
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <TIM_TI4_SetConfig+0x88>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	031a      	lsls	r2, r3, #12
 8002f0a:	23a0      	movs	r3, #160	; 0xa0
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	4013      	ands	r3, r2
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b006      	add	sp, #24
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	ffffefff 	.word	0xffffefff
 8002f30:	fffffcff 	.word	0xfffffcff
 8002f34:	ffff0fff 	.word	0xffff0fff
 8002f38:	ffff5fff 	.word	0xffff5fff

08002f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	221f      	movs	r2, #31
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2201      	movs	r2, #1
 8002f50:	409a      	lsls	r2, r3
 8002f52:	0013      	movs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	43d2      	mvns	r2, r2
 8002f5e:	401a      	ands	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	211f      	movs	r1, #31
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4099      	lsls	r1, r3
 8002f72:	000b      	movs	r3, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b006      	add	sp, #24
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <HAL_TIMEx_PWMN_Start+0x22>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2242      	movs	r2, #66	; 0x42
 8002f98:	5c9b      	ldrb	r3, [r3, r2]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	1e5a      	subs	r2, r3, #1
 8002fa0:	4193      	sbcs	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e01f      	b.n	8002fe6 <HAL_TIMEx_PWMN_Start+0x62>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d108      	bne.n	8002fbe <HAL_TIMEx_PWMN_Start+0x3a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2243      	movs	r2, #67	; 0x43
 8002fb0:	5c9b      	ldrb	r3, [r3, r2]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	4193      	sbcs	r3, r2
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e013      	b.n	8002fe6 <HAL_TIMEx_PWMN_Start+0x62>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d108      	bne.n	8002fd6 <HAL_TIMEx_PWMN_Start+0x52>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2244      	movs	r2, #68	; 0x44
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	4193      	sbcs	r3, r2
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e007      	b.n	8002fe6 <HAL_TIMEx_PWMN_Start+0x62>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2245      	movs	r2, #69	; 0x45
 8002fda:	5c9b      	ldrb	r3, [r3, r2]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	4193      	sbcs	r3, r2
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e056      	b.n	800309c <HAL_TIMEx_PWMN_Start+0x118>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIMEx_PWMN_Start+0x7a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2242      	movs	r2, #66	; 0x42
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	5499      	strb	r1, [r3, r2]
 8002ffc:	e013      	b.n	8003026 <HAL_TIMEx_PWMN_Start+0xa2>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIMEx_PWMN_Start+0x8a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2243      	movs	r2, #67	; 0x43
 8003008:	2102      	movs	r1, #2
 800300a:	5499      	strb	r1, [r3, r2]
 800300c:	e00b      	b.n	8003026 <HAL_TIMEx_PWMN_Start+0xa2>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIMEx_PWMN_Start+0x9a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2244      	movs	r2, #68	; 0x44
 8003018:	2102      	movs	r1, #2
 800301a:	5499      	strb	r1, [r3, r2]
 800301c:	e003      	b.n	8003026 <HAL_TIMEx_PWMN_Start+0xa2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2245      	movs	r2, #69	; 0x45
 8003022:	2102      	movs	r1, #2
 8003024:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	2204      	movs	r2, #4
 800302e:	0018      	movs	r0, r3
 8003030:	f000 f8f2 	bl	8003218 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	0209      	lsls	r1, r1, #8
 8003042:	430a      	orrs	r2, r1
 8003044:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <HAL_TIMEx_PWMN_Start+0x120>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00a      	beq.n	8003066 <HAL_TIMEx_PWMN_Start+0xe2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	05db      	lsls	r3, r3, #23
 8003058:	429a      	cmp	r2, r3
 800305a:	d004      	beq.n	8003066 <HAL_TIMEx_PWMN_Start+0xe2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <HAL_TIMEx_PWMN_Start+0x124>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d111      	bne.n	800308a <HAL_TIMEx_PWMN_Start+0x106>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2207      	movs	r2, #7
 800306e:	4013      	ands	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d010      	beq.n	800309a <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	e007      	b.n	800309a <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400

080030ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	223c      	movs	r2, #60	; 0x3c
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e042      	b.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	223c      	movs	r2, #60	; 0x3c
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	223d      	movs	r2, #61	; 0x3d
 80030d0:	2102      	movs	r1, #2
 80030d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2270      	movs	r2, #112	; 0x70
 80030e8:	4393      	bics	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00a      	beq.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	05db      	lsls	r3, r3, #23
 8003110:	429a      	cmp	r2, r3
 8003112:	d004      	beq.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10c      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	4393      	bics	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4313      	orrs	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	223d      	movs	r2, #61	; 0x3d
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	223c      	movs	r2, #60	; 0x3c
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b004      	add	sp, #16
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400

0800315c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	223c      	movs	r2, #60	; 0x3c
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003174:	2302      	movs	r3, #2
 8003176:	e03e      	b.n	80031f6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	223c      	movs	r2, #60	; 0x3c
 800317c:	2101      	movs	r1, #1
 800317e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	22ff      	movs	r2, #255	; 0xff
 8003184:	4393      	bics	r3, r2
 8003186:	001a      	movs	r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003194:	401a      	ands	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80031a2:	401a      	ands	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80031b0:	401a      	ands	r2, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80031be:	401a      	ands	r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80031cc:	401a      	ands	r2, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80031da:	401a      	ands	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	223c      	movs	r2, #60	; 0x3c
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b004      	add	sp, #16
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	fffffcff 	.word	0xfffffcff
 8003204:	fffffbff 	.word	0xfffffbff
 8003208:	fffff7ff 	.word	0xfffff7ff
 800320c:	ffffefff 	.word	0xffffefff
 8003210:	ffffdfff 	.word	0xffffdfff
 8003214:	ffffbfff 	.word	0xffffbfff

08003218 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	221f      	movs	r2, #31
 8003228:	4013      	ands	r3, r2
 800322a:	2204      	movs	r2, #4
 800322c:	409a      	lsls	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	43d2      	mvns	r2, r2
 800323a:	401a      	ands	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	211f      	movs	r1, #31
 8003248:	400b      	ands	r3, r1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4099      	lsls	r1, r3
 800324e:	000b      	movs	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b006      	add	sp, #24
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e044      	b.n	80032fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2274      	movs	r2, #116	; 0x74
 800327e:	2100      	movs	r1, #0
 8003280:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f7fd fc31 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2224      	movs	r2, #36	; 0x24
 800328e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	438a      	bics	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 f8da 	bl	800345c <UART_SetConfig>
 80032a8:	0003      	movs	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e024      	b.n	80032fc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f9f7 	bl	80036b0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	490d      	ldr	r1, [pc, #52]	; (8003304 <HAL_UART_Init+0xa4>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	212a      	movs	r1, #42	; 0x2a
 80032de:	438a      	bics	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 fa8f 	bl	8003818 <UART_CheckIdleState>
 80032fa:	0003      	movs	r3, r0
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	ffffb7ff 	.word	0xffffb7ff

08003308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331c:	2b20      	cmp	r3, #32
 800331e:	d000      	beq.n	8003322 <HAL_UART_Transmit+0x1a>
 8003320:	e096      	b.n	8003450 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_UART_Transmit+0x28>
 8003328:	1dbb      	adds	r3, r7, #6
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e08e      	b.n	8003452 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	015b      	lsls	r3, r3, #5
 800333c:	429a      	cmp	r2, r3
 800333e:	d109      	bne.n	8003354 <HAL_UART_Transmit+0x4c>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2201      	movs	r2, #1
 800334c:	4013      	ands	r3, r2
 800334e:	d001      	beq.n	8003354 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e07e      	b.n	8003452 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2274      	movs	r2, #116	; 0x74
 8003358:	5c9b      	ldrb	r3, [r3, r2]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_UART_Transmit+0x5a>
 800335e:	2302      	movs	r3, #2
 8003360:	e077      	b.n	8003452 <HAL_UART_Transmit+0x14a>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2274      	movs	r2, #116	; 0x74
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	2100      	movs	r1, #0
 8003370:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2221      	movs	r2, #33	; 0x21
 8003376:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003378:	f7fd fcb4 	bl	8000ce4 <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1dba      	adds	r2, r7, #6
 8003384:	2150      	movs	r1, #80	; 0x50
 8003386:	8812      	ldrh	r2, [r2, #0]
 8003388:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1dba      	adds	r2, r7, #6
 800338e:	2152      	movs	r1, #82	; 0x52
 8003390:	8812      	ldrh	r2, [r2, #0]
 8003392:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	015b      	lsls	r3, r3, #5
 800339c:	429a      	cmp	r2, r3
 800339e:	d108      	bne.n	80033b2 <HAL_UART_Transmit+0xaa>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	e003      	b.n	80033ba <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2274      	movs	r2, #116	; 0x74
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80033c2:	e02d      	b.n	8003420 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	0013      	movs	r3, r2
 80033ce:	2200      	movs	r2, #0
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	f000 fa69 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d001      	beq.n	80033de <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e039      	b.n	8003452 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	881a      	ldrh	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	05d2      	lsls	r2, r2, #23
 80033ee:	0dd2      	lsrs	r2, r2, #23
 80033f0:	b292      	uxth	r2, r2
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	3302      	adds	r3, #2
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e008      	b.n	800340e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b292      	uxth	r2, r2
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	3301      	adds	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2252      	movs	r2, #82	; 0x52
 8003412:	5a9b      	ldrh	r3, [r3, r2]
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b299      	uxth	r1, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2252      	movs	r2, #82	; 0x52
 800341e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2252      	movs	r2, #82	; 0x52
 8003424:	5a9b      	ldrh	r3, [r3, r2]
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1cb      	bne.n	80033c4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	0013      	movs	r3, r2
 8003436:	2200      	movs	r2, #0
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	f000 fa35 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e005      	b.n	8003452 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b008      	add	sp, #32
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003464:	231e      	movs	r3, #30
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a84      	ldr	r2, [pc, #528]	; (800369c <UART_SetConfig+0x240>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a7f      	ldr	r2, [pc, #508]	; (80036a0 <UART_SetConfig+0x244>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a76      	ldr	r2, [pc, #472]	; (80036a4 <UART_SetConfig+0x248>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d8:	4b73      	ldr	r3, [pc, #460]	; (80036a8 <UART_SetConfig+0x24c>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	2203      	movs	r2, #3
 80034de:	4013      	ands	r3, r2
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d00d      	beq.n	8003500 <UART_SetConfig+0xa4>
 80034e4:	d81b      	bhi.n	800351e <UART_SetConfig+0xc2>
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d014      	beq.n	8003514 <UART_SetConfig+0xb8>
 80034ea:	d818      	bhi.n	800351e <UART_SetConfig+0xc2>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <UART_SetConfig+0x9a>
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d00a      	beq.n	800350a <UART_SetConfig+0xae>
 80034f4:	e013      	b.n	800351e <UART_SetConfig+0xc2>
 80034f6:	231f      	movs	r3, #31
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e012      	b.n	8003526 <UART_SetConfig+0xca>
 8003500:	231f      	movs	r3, #31
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2202      	movs	r2, #2
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e00d      	b.n	8003526 <UART_SetConfig+0xca>
 800350a:	231f      	movs	r3, #31
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2204      	movs	r2, #4
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e008      	b.n	8003526 <UART_SetConfig+0xca>
 8003514:	231f      	movs	r3, #31
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2208      	movs	r2, #8
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e003      	b.n	8003526 <UART_SetConfig+0xca>
 800351e:	231f      	movs	r3, #31
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	2210      	movs	r2, #16
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	429a      	cmp	r2, r3
 8003532:	d15d      	bne.n	80035f0 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003534:	231f      	movs	r3, #31
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d015      	beq.n	800356a <UART_SetConfig+0x10e>
 800353e:	dc18      	bgt.n	8003572 <UART_SetConfig+0x116>
 8003540:	2b04      	cmp	r3, #4
 8003542:	d00d      	beq.n	8003560 <UART_SetConfig+0x104>
 8003544:	dc15      	bgt.n	8003572 <UART_SetConfig+0x116>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <UART_SetConfig+0xf4>
 800354a:	2b02      	cmp	r3, #2
 800354c:	d005      	beq.n	800355a <UART_SetConfig+0xfe>
 800354e:	e010      	b.n	8003572 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7fe fde6 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8003554:	0003      	movs	r3, r0
 8003556:	61bb      	str	r3, [r7, #24]
        break;
 8003558:	e012      	b.n	8003580 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800355a:	4b54      	ldr	r3, [pc, #336]	; (80036ac <UART_SetConfig+0x250>)
 800355c:	61bb      	str	r3, [r7, #24]
        break;
 800355e:	e00f      	b.n	8003580 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003560:	f7fe fd70 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8003564:	0003      	movs	r3, r0
 8003566:	61bb      	str	r3, [r7, #24]
        break;
 8003568:	e00a      	b.n	8003580 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	61bb      	str	r3, [r7, #24]
        break;
 8003570:	e006      	b.n	8003580 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003576:	231e      	movs	r3, #30
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
        break;
 800357e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d100      	bne.n	8003588 <UART_SetConfig+0x12c>
 8003586:	e07b      	b.n	8003680 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	005a      	lsls	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	18d2      	adds	r2, r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0019      	movs	r1, r3
 800359a:	0010      	movs	r0, r2
 800359c:	f7fc fdb4 	bl	8000108 <__udivsi3>
 80035a0:	0003      	movs	r3, r0
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d91c      	bls.n	80035e6 <UART_SetConfig+0x18a>
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	025b      	lsls	r3, r3, #9
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d217      	bcs.n	80035e6 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	200e      	movs	r0, #14
 80035bc:	183b      	adds	r3, r7, r0
 80035be:	210f      	movs	r1, #15
 80035c0:	438a      	bics	r2, r1
 80035c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2207      	movs	r2, #7
 80035cc:	4013      	ands	r3, r2
 80035ce:	b299      	uxth	r1, r3
 80035d0:	183b      	adds	r3, r7, r0
 80035d2:	183a      	adds	r2, r7, r0
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	183a      	adds	r2, r7, r0
 80035e0:	8812      	ldrh	r2, [r2, #0]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e04c      	b.n	8003680 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80035e6:	231e      	movs	r3, #30
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e047      	b.n	8003680 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035f0:	231f      	movs	r3, #31
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d015      	beq.n	8003626 <UART_SetConfig+0x1ca>
 80035fa:	dc18      	bgt.n	800362e <UART_SetConfig+0x1d2>
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d00d      	beq.n	800361c <UART_SetConfig+0x1c0>
 8003600:	dc15      	bgt.n	800362e <UART_SetConfig+0x1d2>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <UART_SetConfig+0x1b0>
 8003606:	2b02      	cmp	r3, #2
 8003608:	d005      	beq.n	8003616 <UART_SetConfig+0x1ba>
 800360a:	e010      	b.n	800362e <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7fe fd88 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8003610:	0003      	movs	r3, r0
 8003612:	61bb      	str	r3, [r7, #24]
        break;
 8003614:	e012      	b.n	800363c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003616:	4b25      	ldr	r3, [pc, #148]	; (80036ac <UART_SetConfig+0x250>)
 8003618:	61bb      	str	r3, [r7, #24]
        break;
 800361a:	e00f      	b.n	800363c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361c:	f7fe fd12 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8003620:	0003      	movs	r3, r0
 8003622:	61bb      	str	r3, [r7, #24]
        break;
 8003624:	e00a      	b.n	800363c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	61bb      	str	r3, [r7, #24]
        break;
 800362c:	e006      	b.n	800363c <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003632:	231e      	movs	r3, #30
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
        break;
 800363a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01e      	beq.n	8003680 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	085a      	lsrs	r2, r3, #1
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	18d2      	adds	r2, r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0019      	movs	r1, r3
 8003652:	0010      	movs	r0, r2
 8003654:	f7fc fd58 	bl	8000108 <__udivsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	b29b      	uxth	r3, r3
 800365c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d909      	bls.n	8003678 <UART_SetConfig+0x21c>
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	429a      	cmp	r2, r3
 800366c:	d204      	bcs.n	8003678 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	e003      	b.n	8003680 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003678:	231e      	movs	r3, #30
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800368c:	231e      	movs	r3, #30
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b008      	add	sp, #32
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	ffff69f3 	.word	0xffff69f3
 80036a0:	ffffcfff 	.word	0xffffcfff
 80036a4:	fffff4ff 	.word	0xfffff4ff
 80036a8:	40021000 	.word	0x40021000
 80036ac:	007a1200 	.word	0x007a1200

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	d00b      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a4a      	ldr	r2, [pc, #296]	; (80037f4 <UART_AdvFeatureConfig+0x144>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2202      	movs	r2, #2
 80036e0:	4013      	ands	r3, r2
 80036e2:	d00b      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <UART_AdvFeatureConfig+0x148>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	0019      	movs	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2204      	movs	r2, #4
 8003702:	4013      	ands	r3, r2
 8003704:	d00b      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a3b      	ldr	r2, [pc, #236]	; (80037fc <UART_AdvFeatureConfig+0x14c>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2208      	movs	r2, #8
 8003724:	4013      	ands	r3, r2
 8003726:	d00b      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a34      	ldr	r2, [pc, #208]	; (8003800 <UART_AdvFeatureConfig+0x150>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2210      	movs	r2, #16
 8003746:	4013      	ands	r3, r2
 8003748:	d00b      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <UART_AdvFeatureConfig+0x154>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2220      	movs	r2, #32
 8003768:	4013      	ands	r3, r2
 800376a:	d00b      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4a25      	ldr	r2, [pc, #148]	; (8003808 <UART_AdvFeatureConfig+0x158>)
 8003774:	4013      	ands	r3, r2
 8003776:	0019      	movs	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2240      	movs	r2, #64	; 0x40
 800378a:	4013      	ands	r3, r2
 800378c:	d01d      	beq.n	80037ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <UART_AdvFeatureConfig+0x15c>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	035b      	lsls	r3, r3, #13
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d10b      	bne.n	80037ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a15      	ldr	r2, [pc, #84]	; (8003810 <UART_AdvFeatureConfig+0x160>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <UART_AdvFeatureConfig+0x164>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  }
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	fffdffff 	.word	0xfffdffff
 80037f8:	fffeffff 	.word	0xfffeffff
 80037fc:	fffbffff 	.word	0xfffbffff
 8003800:	ffff7fff 	.word	0xffff7fff
 8003804:	ffffefff 	.word	0xffffefff
 8003808:	ffffdfff 	.word	0xffffdfff
 800380c:	ffefffff 	.word	0xffefffff
 8003810:	ff9fffff 	.word	0xff9fffff
 8003814:	fff7ffff 	.word	0xfff7ffff

08003818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	2100      	movs	r1, #0
 8003826:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003828:	f7fd fa5c 	bl	8000ce4 <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2208      	movs	r2, #8
 8003838:	4013      	ands	r3, r2
 800383a:	2b08      	cmp	r3, #8
 800383c:	d10c      	bne.n	8003858 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	0391      	lsls	r1, r2, #14
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <UART_CheckIdleState+0x8c>)
 8003848:	9200      	str	r2, [sp, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	f000 f82c 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d001      	beq.n	8003858 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e021      	b.n	800389c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2204      	movs	r2, #4
 8003860:	4013      	ands	r3, r2
 8003862:	2b04      	cmp	r3, #4
 8003864:	d10c      	bne.n	8003880 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	03d1      	lsls	r1, r2, #15
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <UART_CheckIdleState+0x8c>)
 8003870:	9200      	str	r2, [sp, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	f000 f818 	bl	80038a8 <UART_WaitOnFlagUntilTimeout>
 8003878:	1e03      	subs	r3, r0, #0
 800387a:	d001      	beq.n	8003880 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e00d      	b.n	800389c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2274      	movs	r2, #116	; 0x74
 8003896:	2100      	movs	r1, #0
 8003898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b004      	add	sp, #16
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	01ffffff 	.word	0x01ffffff

080038a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b094      	sub	sp, #80	; 0x50
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	1dfb      	adds	r3, r7, #7
 80038b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b8:	e0a3      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038bc:	3301      	adds	r3, #1
 80038be:	d100      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80038c0:	e09f      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fd fa0f 	bl	8000ce4 <HAL_GetTick>
 80038c6:	0002      	movs	r2, r0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d13d      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e0:	647b      	str	r3, [r7, #68]	; 0x44
 80038e2:	2301      	movs	r3, #1
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	494c      	ldr	r1, [pc, #304]	; (8003a2c <UART_WaitOnFlagUntilTimeout+0x184>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390a:	f3ef 8310 	mrs	r3, PRIMASK
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	643b      	str	r3, [r7, #64]	; 0x40
 8003914:	2301      	movs	r3, #1
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2101      	movs	r1, #1
 800392c:	438a      	bics	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2274      	movs	r2, #116	; 0x74
 800394c:	2100      	movs	r1, #0
 800394e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e067      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d050      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	401a      	ands	r2, r3
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	429a      	cmp	r2, r3
 8003972:	d146      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397e:	f3ef 8310 	mrs	r3, PRIMASK
 8003982:	613b      	str	r3, [r7, #16]
  return(result);
 8003984:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f383 8810 	msr	PRIMASK, r3
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4923      	ldr	r1, [pc, #140]	; (8003a2c <UART_WaitOnFlagUntilTimeout+0x184>)
 80039a0:	400a      	ands	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b0:	f3ef 8310 	mrs	r3, PRIMASK
 80039b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80039b6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ba:	2301      	movs	r3, #1
 80039bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2101      	movs	r1, #1
 80039d2:	438a      	bics	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	2120      	movs	r1, #32
 80039f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2274      	movs	r2, #116	; 0x74
 80039fa:	2100      	movs	r1, #0
 80039fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e010      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	425a      	negs	r2, r3
 8003a12:	4153      	adcs	r3, r2
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	001a      	movs	r2, r3
 8003a18:	1dfb      	adds	r3, r7, #7
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d100      	bne.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003a20:	e74b      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b014      	add	sp, #80	; 0x50
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	fffffe5f 	.word	0xfffffe5f

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	2600      	movs	r6, #0
 8003a34:	4d0c      	ldr	r5, [pc, #48]	; (8003a68 <__libc_init_array+0x38>)
 8003a36:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a38:	1b64      	subs	r4, r4, r5
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	2600      	movs	r6, #0
 8003a42:	f000 f821 	bl	8003a88 <_init>
 8003a46:	4d0a      	ldr	r5, [pc, #40]	; (8003a70 <__libc_init_array+0x40>)
 8003a48:	4c0a      	ldr	r4, [pc, #40]	; (8003a74 <__libc_init_array+0x44>)
 8003a4a:	1b64      	subs	r4, r4, r5
 8003a4c:	10a4      	asrs	r4, r4, #2
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	00b3      	lsls	r3, r6, #2
 8003a56:	58eb      	ldr	r3, [r5, r3]
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	00b3      	lsls	r3, r6, #2
 8003a60:	58eb      	ldr	r3, [r5, r3]
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08003afc 	.word	0x08003afc
 8003a6c:	08003afc 	.word	0x08003afc
 8003a70:	08003afc 	.word	0x08003afc
 8003a74:	08003b00 	.word	0x08003b00

08003a78 <memset>:
 8003a78:	0003      	movs	r3, r0
 8003a7a:	1882      	adds	r2, r0, r2
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d100      	bne.n	8003a82 <memset+0xa>
 8003a80:	4770      	bx	lr
 8003a82:	7019      	strb	r1, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	e7f9      	b.n	8003a7c <memset+0x4>

08003a88 <_init>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr

08003a94 <_fini>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr

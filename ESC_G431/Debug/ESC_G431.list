
ESC_G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08004a98  08004a98  00014a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005060  08005060  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005060  08005060  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005060  08005060  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  080050d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080050d8  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7f4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002285  00000000  00000000  0002d894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000307e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020022  00000000  00000000  000313a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0e9  00000000  00000000  000513ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7ba8  00000000  00000000  0005f4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013705b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003780  00000000  00000000  001370ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a7c 	.word	0x08004a7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08004a7c 	.word	0x08004a7c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <TIM3_IRQHandler>:

volatile float pre_pos = 0.0, position = 0, rpm = 0, power = 0;
volatile uint8_t motor_mode = 0;

//FOC Loop
void TIM3_IRQHandler(void) {
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	static int16_t cnt, pre_cnt;
	static float diff;
	if(TIM3->SR & 0x1){
 8000c24:	4b6e      	ldr	r3, [pc, #440]	; (8000de0 <TIM3_IRQHandler+0x1c0>)
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 80d1 	beq.w	8000dd4 <TIM3_IRQHandler+0x1b4>
		TIM3->SR &= ~(0x1);
 8000c32:	4b6b      	ldr	r3, [pc, #428]	; (8000de0 <TIM3_IRQHandler+0x1c0>)
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	4a6a      	ldr	r2, [pc, #424]	; (8000de0 <TIM3_IRQHandler+0x1c0>)
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	6113      	str	r3, [r2, #16]

		pre_cnt = cnt;
 8000c3e:	4b69      	ldr	r3, [pc, #420]	; (8000de4 <TIM3_IRQHandler+0x1c4>)
 8000c40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c44:	4b68      	ldr	r3, [pc, #416]	; (8000de8 <TIM3_IRQHandler+0x1c8>)
 8000c46:	801a      	strh	r2, [r3, #0]
		cnt = -TIM8->CNT;
 8000c48:	4b68      	ldr	r3, [pc, #416]	; (8000dec <TIM3_IRQHandler+0x1cc>)
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	425b      	negs	r3, r3
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	4b63      	ldr	r3, [pc, #396]	; (8000de4 <TIM3_IRQHandler+0x1c4>)
 8000c56:	801a      	strh	r2, [r3, #0]
//		if(diff > ENCODER_RES/2) {
//			diff -= ENCODER_RES;
//		} else if(diff < -ENCODER_RES/2) {
//			diff += ENCODER_RES;
//		}
		diff = ((float)cnt - (float)pre_cnt) / ENCODER_RES * 10000.0f * 60.0f;
 8000c58:	4b62      	ldr	r3, [pc, #392]	; (8000de4 <TIM3_IRQHandler+0x1c4>)
 8000c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c66:	4b60      	ldr	r3, [pc, #384]	; (8000de8 <TIM3_IRQHandler+0x1c8>)
 8000c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6c:	ee07 3a90 	vmov	s15, r3
 8000c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c78:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8000df0 <TIM3_IRQHandler+0x1d0>
 8000c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c80:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000df4 <TIM3_IRQHandler+0x1d4>
 8000c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c88:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000df8 <TIM3_IRQHandler+0x1d8>
 8000c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c90:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <TIM3_IRQHandler+0x1dc>)
 8000c92:	edc3 7a00 	vstr	s15, [r3]
		if(fabs(diff) > 10000) {
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <TIM3_IRQHandler+0x1dc>)
 8000c98:	edd3 7a00 	vldr	s15, [r3]
 8000c9c:	eef0 7ae7 	vabs.f32	s15, s15
 8000ca0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8000df4 <TIM3_IRQHandler+0x1d4>
 8000ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cac:	dd03      	ble.n	8000cb6 <TIM3_IRQHandler+0x96>
			diff = rpm;
 8000cae:	4b54      	ldr	r3, [pc, #336]	; (8000e00 <TIM3_IRQHandler+0x1e0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a52      	ldr	r2, [pc, #328]	; (8000dfc <TIM3_IRQHandler+0x1dc>)
 8000cb4:	6013      	str	r3, [r2, #0]
		}
		rpm = RPM_LPF * rpm + (1.0-RPM_LPF) * diff;
 8000cb6:	4b52      	ldr	r3, [pc, #328]	; (8000e00 <TIM3_IRQHandler+0x1e0>)
 8000cb8:	edd3 7a00 	vldr	s15, [r3]
 8000cbc:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000e04 <TIM3_IRQHandler+0x1e4>
 8000cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc4:	ee17 0a90 	vmov	r0, s15
 8000cc8:	f7ff fc0a 	bl	80004e0 <__aeabi_f2d>
 8000ccc:	4604      	mov	r4, r0
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <TIM3_IRQHandler+0x1dc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fc03 	bl	80004e0 <__aeabi_f2d>
 8000cda:	a33f      	add	r3, pc, #252	; (adr r3, 8000dd8 <TIM3_IRQHandler+0x1b8>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fc56 	bl	8000590 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	f7ff fa9a 	bl	8000224 <__adddf3>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff ff42 	bl	8000b80 <__aeabi_d2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <TIM3_IRQHandler+0x1e0>)
 8000d00:	6013      	str	r3, [r2, #0]

		pre_pos = position;
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a41      	ldr	r2, [pc, #260]	; (8000e0c <TIM3_IRQHandler+0x1ec>)
 8000d08:	6013      	str	r3, [r2, #0]
		position = (float)cnt * 360.0f / ENCODER_RES  - MOTOR_ZERO_ANGLE;
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <TIM3_IRQHandler+0x1c4>)
 8000d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d18:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000e10 <TIM3_IRQHandler+0x1f0>
 8000d1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d20:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000df0 <TIM3_IRQHandler+0x1d0>
 8000d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d28:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8000d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d32:	edc3 7a00 	vstr	s15, [r3]
		while(position < 0.0) {
 8000d36:	e012      	b.n	8000d5e <TIM3_IRQHandler+0x13e>
			position += 360.0;
 8000d38:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fbcf 	bl	80004e0 <__aeabi_f2d>
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <TIM3_IRQHandler+0x1f4>)
 8000d48:	f7ff fa6c 	bl	8000224 <__adddf3>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff ff14 	bl	8000b80 <__aeabi_d2f>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d5c:	6013      	str	r3, [r2, #0]
		while(position < 0.0) {
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6c:	d4e4      	bmi.n	8000d38 <TIM3_IRQHandler+0x118>
		}
		while(position > 360.0) {
 8000d6e:	e012      	b.n	8000d96 <TIM3_IRQHandler+0x176>
			position -= 360.0;
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fbb3 	bl	80004e0 <__aeabi_f2d>
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <TIM3_IRQHandler+0x1f4>)
 8000d80:	f7ff fa4e 	bl	8000220 <__aeabi_dsub>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4610      	mov	r0, r2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fef8 	bl	8000b80 <__aeabi_d2f>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d94:	6013      	str	r3, [r2, #0]
		while(position > 360.0) {
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000e10 <TIM3_IRQHandler+0x1f0>
 8000da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da8:	dce2      	bgt.n	8000d70 <TIM3_IRQHandler+0x150>
		}

		if(motor_mode) {
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <TIM3_IRQHandler+0x1f8>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00f      	beq.n	8000dd4 <TIM3_IRQHandler+0x1b4>
			setPhaseVoltage(power, position * POLE_PAIRS);
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <TIM3_IRQHandler+0x1fc>)
 8000db6:	ed93 7a00 	vldr	s14, [r3]
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <TIM3_IRQHandler+0x1e8>)
 8000dbc:	edd3 7a00 	vldr	s15, [r3]
 8000dc0:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000dc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dc8:	eef0 0a67 	vmov.f32	s1, s15
 8000dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8000dd0:	f000 f826 	bl	8000e20 <setPhaseVoltage>
		}
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	3f847ae0 	.word	0x3f847ae0
 8000de0:	40000400 	.word	0x40000400
 8000de4:	2000009e 	.word	0x2000009e
 8000de8:	200000a0 	.word	0x200000a0
 8000dec:	40013400 	.word	0x40013400
 8000df0:	46000000 	.word	0x46000000
 8000df4:	461c4000 	.word	0x461c4000
 8000df8:	42700000 	.word	0x42700000
 8000dfc:	200000a4 	.word	0x200000a4
 8000e00:	20000094 	.word	0x20000094
 8000e04:	3f7d70a4 	.word	0x3f7d70a4
 8000e08:	20000090 	.word	0x20000090
 8000e0c:	2000008c 	.word	0x2000008c
 8000e10:	43b40000 	.word	0x43b40000
 8000e14:	40768000 	.word	0x40768000
 8000e18:	2000009c 	.word	0x2000009c
 8000e1c:	20000098 	.word	0x20000098

08000e20 <setPhaseVoltage>:

inline void setPhaseVoltage(float p, float angle_el) {
 8000e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e2c:	edc7 0a00 	vstr	s1, [r7]
    static float pwm_u, pwm_v, pwm_w;

    p = p < -1.0 ? -1.0 : p > 1.0 ? 1.0 : p;
 8000e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	d501      	bpl.n	8000e46 <setPhaseVoltage+0x26>
 8000e42:	4bbf      	ldr	r3, [pc, #764]	; (8001140 <setPhaseVoltage+0x320>)
 8000e44:	e00c      	b.n	8000e60 <setPhaseVoltage+0x40>
 8000e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e56:	dd02      	ble.n	8000e5e <setPhaseVoltage+0x3e>
 8000e58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000e5c:	e000      	b.n	8000e60 <setPhaseVoltage+0x40>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	607b      	str	r3, [r7, #4]
    p = -p;
 8000e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e66:	eef1 7a67 	vneg.f32	s15, s15
 8000e6a:	edc7 7a01 	vstr	s15, [r7, #4]

	static int index;

	if(p < 0) {
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	d50e      	bpl.n	8000e9a <setPhaseVoltage+0x7a>
		angle_el -= PHASE_DIFF;
 8000e7c:	edd7 7a00 	vldr	s15, [r7]
 8000e80:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8001144 <setPhaseVoltage+0x324>
 8000e84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e88:	edc7 7a00 	vstr	s15, [r7]
		p = -p;
 8000e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e90:	eef1 7a67 	vneg.f32	s15, s15
 8000e94:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e98:	e007      	b.n	8000eaa <setPhaseVoltage+0x8a>
	} else {
		angle_el += PHASE_DIFF;
 8000e9a:	edd7 7a00 	vldr	s15, [r7]
 8000e9e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001144 <setPhaseVoltage+0x324>
 8000ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ea6:	edc7 7a00 	vstr	s15, [r7]
	}

	angle_el = fmod(angle_el, 360.0);
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f7ff fb18 	bl	80004e0 <__aeabi_f2d>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 8001138 <setPhaseVoltage+0x318>
 8000eb8:	ec43 2b10 	vmov	d0, r2, r3
 8000ebc:	f003 fc98 	bl	80047f0 <fmod>
 8000ec0:	ec53 2b10 	vmov	r2, r3, d0
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fe5a 	bl	8000b80 <__aeabi_d2f>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	603b      	str	r3, [r7, #0]
	if(angle_el < 0) {
 8000ed0:	edd7 7a00 	vldr	s15, [r7]
 8000ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	d507      	bpl.n	8000eee <setPhaseVoltage+0xce>
		angle_el += 360.0;
 8000ede:	edd7 7a00 	vldr	s15, [r7]
 8000ee2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001148 <setPhaseVoltage+0x328>
 8000ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eea:	edc7 7a00 	vstr	s15, [r7]
	}

	index = angle_el;
 8000eee:	edd7 7a00 	vldr	s15, [r7]
 8000ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef6:	ee17 2a90 	vmov	r2, s15
 8000efa:	4b94      	ldr	r3, [pc, #592]	; (800114c <setPhaseVoltage+0x32c>)
 8000efc:	601a      	str	r2, [r3, #0]
	index = (index < 0.0) | (index >= SVPWM_SIZE) ? 0 : index;
 8000efe:	4b93      	ldr	r3, [pc, #588]	; (800114c <setPhaseVoltage+0x32c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	0fdb      	lsrs	r3, r3, #31
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b90      	ldr	r3, [pc, #576]	; (800114c <setPhaseVoltage+0x32c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f240 1167 	movw	r1, #359	; 0x167
 8000f10:	428b      	cmp	r3, r1
 8000f12:	bfd4      	ite	le
 8000f14:	2301      	movle	r3, #1
 8000f16:	2300      	movgt	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <setPhaseVoltage+0x108>
 8000f22:	4b8a      	ldr	r3, [pc, #552]	; (800114c <setPhaseVoltage+0x32c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	e000      	b.n	8000f2a <setPhaseVoltage+0x10a>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4a88      	ldr	r2, [pc, #544]	; (800114c <setPhaseVoltage+0x32c>)
 8000f2c:	6013      	str	r3, [r2, #0]

	pwm_u = (float)SVPWM_table[index] * p;
 8000f2e:	4b87      	ldr	r3, [pc, #540]	; (800114c <setPhaseVoltage+0x32c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a87      	ldr	r2, [pc, #540]	; (8001150 <setPhaseVoltage+0x330>)
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	ed93 7a00 	vldr	s14, [r3]
 8000f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f44:	4b83      	ldr	r3, [pc, #524]	; (8001154 <setPhaseVoltage+0x334>)
 8000f46:	edc3 7a00 	vstr	s15, [r3]

	index = (index + SVPWM_INCREMENT) % SVPWM_SIZE;
 8000f4a:	4b80      	ldr	r3, [pc, #512]	; (800114c <setPhaseVoltage+0x32c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3378      	adds	r3, #120	; 0x78
 8000f50:	4a81      	ldr	r2, [pc, #516]	; (8001158 <setPhaseVoltage+0x338>)
 8000f52:	fb82 1203 	smull	r1, r2, r2, r3
 8000f56:	441a      	add	r2, r3
 8000f58:	1211      	asrs	r1, r2, #8
 8000f5a:	17da      	asrs	r2, r3, #31
 8000f5c:	1a8a      	subs	r2, r1, r2
 8000f5e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000f62:	fb01 f202 	mul.w	r2, r1, r2
 8000f66:	1a9a      	subs	r2, r3, r2
 8000f68:	4b78      	ldr	r3, [pc, #480]	; (800114c <setPhaseVoltage+0x32c>)
 8000f6a:	601a      	str	r2, [r3, #0]
	pwm_v = (float)SVPWM_table[index] * p;
 8000f6c:	4b77      	ldr	r3, [pc, #476]	; (800114c <setPhaseVoltage+0x32c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a77      	ldr	r2, [pc, #476]	; (8001150 <setPhaseVoltage+0x330>)
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	ed93 7a00 	vldr	s14, [r3]
 8000f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f82:	4b76      	ldr	r3, [pc, #472]	; (800115c <setPhaseVoltage+0x33c>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]

	index = (index + SVPWM_INCREMENT) % SVPWM_SIZE;
 8000f88:	4b70      	ldr	r3, [pc, #448]	; (800114c <setPhaseVoltage+0x32c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3378      	adds	r3, #120	; 0x78
 8000f8e:	4a72      	ldr	r2, [pc, #456]	; (8001158 <setPhaseVoltage+0x338>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	441a      	add	r2, r3
 8000f96:	1211      	asrs	r1, r2, #8
 8000f98:	17da      	asrs	r2, r3, #31
 8000f9a:	1a8a      	subs	r2, r1, r2
 8000f9c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000fa0:	fb01 f202 	mul.w	r2, r1, r2
 8000fa4:	1a9a      	subs	r2, r3, r2
 8000fa6:	4b69      	ldr	r3, [pc, #420]	; (800114c <setPhaseVoltage+0x32c>)
 8000fa8:	601a      	str	r2, [r3, #0]
	pwm_w = (float)SVPWM_table[index] * p;
 8000faa:	4b68      	ldr	r3, [pc, #416]	; (800114c <setPhaseVoltage+0x32c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a68      	ldr	r2, [pc, #416]	; (8001150 <setPhaseVoltage+0x330>)
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	ed93 7a00 	vldr	s14, [r3]
 8000fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	4b67      	ldr	r3, [pc, #412]	; (8001160 <setPhaseVoltage+0x340>)
 8000fc2:	edc3 7a00 	vstr	s15, [r3]

	static float center, Umin, Umax;
	center = MAX_PWM / 2.0;
 8000fc6:	4b67      	ldr	r3, [pc, #412]	; (8001164 <setPhaseVoltage+0x344>)
 8000fc8:	4a67      	ldr	r2, [pc, #412]	; (8001168 <setPhaseVoltage+0x348>)
 8000fca:	601a      	str	r2, [r3, #0]
	Umin = fmin(pwm_u, fmin(pwm_v, pwm_w));
 8000fcc:	4b61      	ldr	r3, [pc, #388]	; (8001154 <setPhaseVoltage+0x334>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa85 	bl	80004e0 <__aeabi_f2d>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
 8000fda:	4b60      	ldr	r3, [pc, #384]	; (800115c <setPhaseVoltage+0x33c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fa7e 	bl	80004e0 <__aeabi_f2d>
 8000fe4:	4680      	mov	r8, r0
 8000fe6:	4689      	mov	r9, r1
 8000fe8:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <setPhaseVoltage+0x340>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa77 	bl	80004e0 <__aeabi_f2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	ec43 2b11 	vmov	d1, r2, r3
 8000ffa:	ec49 8b10 	vmov	d0, r8, r9
 8000ffe:	f003 fba6 	bl	800474e <fmin>
 8001002:	eeb0 7a40 	vmov.f32	s14, s0
 8001006:	eef0 7a60 	vmov.f32	s15, s1
 800100a:	eeb0 1a47 	vmov.f32	s2, s14
 800100e:	eef0 1a67 	vmov.f32	s3, s15
 8001012:	ec45 4b10 	vmov	d0, r4, r5
 8001016:	f003 fb9a 	bl	800474e <fmin>
 800101a:	ec53 2b10 	vmov	r2, r3, d0
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdad 	bl	8000b80 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	4a50      	ldr	r2, [pc, #320]	; (800116c <setPhaseVoltage+0x34c>)
 800102a:	6013      	str	r3, [r2, #0]
	Umax = fmax(pwm_u, fmax(pwm_v, pwm_w));
 800102c:	4b49      	ldr	r3, [pc, #292]	; (8001154 <setPhaseVoltage+0x334>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa55 	bl	80004e0 <__aeabi_f2d>
 8001036:	4604      	mov	r4, r0
 8001038:	460d      	mov	r5, r1
 800103a:	4b48      	ldr	r3, [pc, #288]	; (800115c <setPhaseVoltage+0x33c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa4e 	bl	80004e0 <__aeabi_f2d>
 8001044:	4680      	mov	r8, r0
 8001046:	4689      	mov	r9, r1
 8001048:	4b45      	ldr	r3, [pc, #276]	; (8001160 <setPhaseVoltage+0x340>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa47 	bl	80004e0 <__aeabi_f2d>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	ec43 2b11 	vmov	d1, r2, r3
 800105a:	ec49 8b10 	vmov	d0, r8, r9
 800105e:	f003 fb4f 	bl	8004700 <fmax>
 8001062:	eeb0 7a40 	vmov.f32	s14, s0
 8001066:	eef0 7a60 	vmov.f32	s15, s1
 800106a:	eeb0 1a47 	vmov.f32	s2, s14
 800106e:	eef0 1a67 	vmov.f32	s3, s15
 8001072:	ec45 4b10 	vmov	d0, r4, r5
 8001076:	f003 fb43 	bl	8004700 <fmax>
 800107a:	ec53 2b10 	vmov	r2, r3, d0
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd7d 	bl	8000b80 <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a39      	ldr	r2, [pc, #228]	; (8001170 <setPhaseVoltage+0x350>)
 800108a:	6013      	str	r3, [r2, #0]
	center -= (Umax+Umin) / 2;
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <setPhaseVoltage+0x344>)
 800108e:	ed93 7a00 	vldr	s14, [r3]
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <setPhaseVoltage+0x350>)
 8001094:	edd3 6a00 	vldr	s13, [r3]
 8001098:	4b34      	ldr	r3, [pc, #208]	; (800116c <setPhaseVoltage+0x34c>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010a2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80010a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <setPhaseVoltage+0x344>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
	pwm_u += center;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <setPhaseVoltage+0x334>)
 80010b6:	ed93 7a00 	vldr	s14, [r3]
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <setPhaseVoltage+0x344>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <setPhaseVoltage+0x334>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
	pwm_v += center;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <setPhaseVoltage+0x33c>)
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <setPhaseVoltage+0x344>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <setPhaseVoltage+0x33c>)
 80010dc:	edc3 7a00 	vstr	s15, [r3]
	pwm_w += center;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <setPhaseVoltage+0x340>)
 80010e2:	ed93 7a00 	vldr	s14, [r3]
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <setPhaseVoltage+0x344>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <setPhaseVoltage+0x340>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]

	set_motor_pwm(pwm_u, pwm_v, pwm_w);
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <setPhaseVoltage+0x334>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001100:	ee17 3a90 	vmov	r3, s15
 8001104:	b29b      	uxth	r3, r3
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <setPhaseVoltage+0x33c>)
 8001108:	edd2 7a00 	vldr	s15, [r2]
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	b291      	uxth	r1, r2
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <setPhaseVoltage+0x340>)
 8001118:	edd2 7a00 	vldr	s15, [r2]
 800111c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001120:	ee17 2a90 	vmov	r2, s15
 8001124:	b292      	uxth	r2, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f824 	bl	8001174 <set_motor_pwm>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001136:	bf00      	nop
 8001138:	00000000 	.word	0x00000000
 800113c:	40768000 	.word	0x40768000
 8001140:	bf800000 	.word	0xbf800000
 8001144:	42b40000 	.word	0x42b40000
 8001148:	43b40000 	.word	0x43b40000
 800114c:	200000a8 	.word	0x200000a8
 8001150:	08004a9c 	.word	0x08004a9c
 8001154:	200000ac 	.word	0x200000ac
 8001158:	b60b60b7 	.word	0xb60b60b7
 800115c:	200000b0 	.word	0x200000b0
 8001160:	200000b4 	.word	0x200000b4
 8001164:	200000b8 	.word	0x200000b8
 8001168:	44dac000 	.word	0x44dac000
 800116c:	200000bc 	.word	0x200000bc
 8001170:	200000c0 	.word	0x200000c0

08001174 <set_motor_pwm>:
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}

void set_motor_pwm(uint16_t u, uint16_t v, uint16_t w) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
 800117e:	460b      	mov	r3, r1
 8001180:	80bb      	strh	r3, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	807b      	strh	r3, [r7, #2]
	u = u < 0 ? 0 : u;
	u = u > MAX_PWM ? MAX_PWM : u;
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	f640 52ac 	movw	r2, #3500	; 0xdac
 800118c:	4293      	cmp	r3, r2
 800118e:	d80c      	bhi.n	80011aa <set_motor_pwm+0x36>
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f992 	bl	80004bc <__aeabi_i2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fcce 	bl	8000b40 <__aeabi_d2uiz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	e001      	b.n	80011ae <set_motor_pwm+0x3a>
 80011aa:	f640 53ac 	movw	r3, #3500	; 0xdac
 80011ae:	80fb      	strh	r3, [r7, #6]

	v = v < 0 ? 0 : v;
	v = v > MAX_PWM ? MAX_PWM : v;
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d80c      	bhi.n	80011d4 <set_motor_pwm+0x60>
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f97d 	bl	80004bc <__aeabi_i2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fcb9 	bl	8000b40 <__aeabi_d2uiz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	e001      	b.n	80011d8 <set_motor_pwm+0x64>
 80011d4:	f640 53ac 	movw	r3, #3500	; 0xdac
 80011d8:	80bb      	strh	r3, [r7, #4]

	w = w < 0 ? 0 : w;
	w = w > MAX_PWM ? MAX_PWM : w;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	f640 52ac 	movw	r2, #3500	; 0xdac
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d80c      	bhi.n	80011fe <set_motor_pwm+0x8a>
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f968 	bl	80004bc <__aeabi_i2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fca4 	bl	8000b40 <__aeabi_d2uiz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	e001      	b.n	8001202 <set_motor_pwm+0x8e>
 80011fe:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001202:	807b      	strh	r3, [r7, #2]

	TIM1->CCR1 = u;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <set_motor_pwm+0xac>)
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = v;
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <set_motor_pwm+0xac>)
 800120c:	88bb      	ldrh	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = w;
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <set_motor_pwm+0xac>)
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40012c00 	.word	0x40012c00

08001224 <UART_init>:
#include "UART.h"
#include "main.h"

void UART_init(float freq) {
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	ed87 0a01 	vstr	s0, [r7, #4]
    RCC->APB1ENR1 |= 1 << 17;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <UART_init+0xd8>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a32      	ldr	r2, [pc, #200]	; (80012fc <UART_init+0xd8>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	6593      	str	r3, [r2, #88]	; 0x58

    //PB3 - TX2
    GPIOB->AFR[0] |= 0b0111 << 12;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <UART_init+0xdc>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a30      	ldr	r2, [pc, #192]	; (8001300 <UART_init+0xdc>)
 8001240:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001244:	6213      	str	r3, [r2, #32]
    GPIOB->MODER &= ~(1<<6);
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <UART_init+0xdc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <UART_init+0xdc>)
 800124c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001250:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 1<<7;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <UART_init+0xdc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <UART_init+0xdc>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6013      	str	r3, [r2, #0]

    //PB4 - RX2
    GPIOB->AFR[0] |= 0b0111 << 16;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <UART_init+0xdc>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a27      	ldr	r2, [pc, #156]	; (8001300 <UART_init+0xdc>)
 8001264:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001268:	6213      	str	r3, [r2, #32]
    GPIOB->MODER &= ~(1<<8);
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <UART_init+0xdc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a24      	ldr	r2, [pc, #144]	; (8001300 <UART_init+0xdc>)
 8001270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001274:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 1<<9;
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <UART_init+0xdc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <UART_init+0xdc>)
 800127c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001280:	6013      	str	r3, [r2, #0]

    USART2->CR1 &= ~(1);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <UART_init+0xe0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <UART_init+0xe0>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]
    USART2->CR1 = 0x00000000;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <UART_init+0xe0>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
    USART2->CR1 |= 1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <UART_init+0xe0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <UART_init+0xe0>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]
    USART2->CR2 = 0x00000000;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <UART_init+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
    USART2->CR3 = 0x00000000;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <UART_init+0xe0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]

    float f = 170000000.0 / freq;
 80012ac:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001308 <UART_init+0xe4>
 80012b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]
	USART2->BRR = (uint32_t)f;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <UART_init+0xe0>)
 80012be:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c6:	ee17 2a90 	vmov	r2, s15
 80012ca:	60da      	str	r2, [r3, #12]
    USART2->PRESC &= ~(0b1111);
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <UART_init+0xe0>)
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <UART_init+0xe0>)
 80012d2:	f023 030f 	bic.w	r3, r3, #15
 80012d6:	62d3      	str	r3, [r2, #44]	; 0x2c

    //Enable UART
    USART2->CR1 |= 1<<2;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <UART_init+0xe0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a09      	ldr	r2, [pc, #36]	; (8001304 <UART_init+0xe0>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= 1<<3;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <UART_init+0xe0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <UART_init+0xe0>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000400 	.word	0x48000400
 8001304:	40004400 	.word	0x40004400
 8001308:	4d221fe8 	.word	0x4d221fe8

0800130c <UART_send>:

void UART_send(uint8_t ch) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
    while((USART2->ISR & (1 << 7)) == 0);
 8001316:	bf00      	nop
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <UART_send+0x2c>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f9      	beq.n	8001318 <UART_send+0xc>
	USART2->TDR = ch;
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <UART_send+0x2c>)
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	6293      	str	r3, [r2, #40]	; 0x28
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40004400 	.word	0x40004400

0800133c <UART_send_str>:

void UART_send_str(char str[]) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    int i;
    for(i = 0; str[i] != '\0'; i++) {
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e009      	b.n	800135e <UART_send_str+0x22>
        UART_send(str[i]);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ffda 	bl	800130c <UART_send>
    for(i = 0; str[i] != '\0'; i++) {
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1ef      	bne.n	800134a <UART_send_str+0xe>
    }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <UART_write_float>:
    for(; tens > 0; tens /= 10) {
        UART_send(((a / tens) % 10) + 48);
    }
}

void UART_write_float(double a, unsigned char right) {
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0b02 	vstr	d0, [r7, #8]
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
    unsigned char i;
    long int tens;

    if(a < 0) {
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800138e:	f7ff fb71 	bl	8000a74 <__aeabi_dcmplt>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <UART_write_float+0x36>
        a *= (-1);
 8001398:	68bc      	ldr	r4, [r7, #8]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013a0:	e9c7 4502 	strd	r4, r5, [r7, #8]
        UART_send('-');
 80013a4:	202d      	movs	r0, #45	; 0x2d
 80013a6:	f7ff ffb1 	bl	800130c <UART_send>
    } 
    //else UART_send('+');
    
    if(a >= 1.0) {
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <UART_write_float+0x158>)
 80013b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013b4:	f7ff fb72 	bl	8000a9c <__aeabi_dcmpge>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d04a      	beq.n	8001454 <UART_write_float+0xe0>
        for(tens = 1; tens <= a; tens *= 10);
 80013be:	2301      	movs	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	e005      	b.n	80013d0 <UART_write_float+0x5c>
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	6938      	ldr	r0, [r7, #16]
 80013d2:	f7ff f873 	bl	80004bc <__aeabi_i2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013de:	f7ff fb5d 	bl	8000a9c <__aeabi_dcmpge>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ed      	bne.n	80013c4 <UART_write_float+0x50>
        tens /= 10;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4a39      	ldr	r2, [pc, #228]	; (80014d0 <UART_write_float+0x15c>)
 80013ec:	fb82 1203 	smull	r1, r2, r2, r3
 80013f0:	1092      	asrs	r2, r2, #2
 80013f2:	17db      	asrs	r3, r3, #31
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	613b      	str	r3, [r7, #16]
        for(; tens > 0; tens /= 10)
 80013f8:	e028      	b.n	800144c <UART_write_float+0xd8>
            UART_send(((long int)(a / tens) % 10) + 48);
 80013fa:	6938      	ldr	r0, [r7, #16]
 80013fc:	f7ff f85e 	bl	80004bc <__aeabi_i2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001408:	f7ff f9ec 	bl	80007e4 <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fb6c 	bl	8000af0 <__aeabi_d2iz>
 8001418:	4602      	mov	r2, r0
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <UART_write_float+0x15c>)
 800141c:	fb83 1302 	smull	r1, r3, r3, r2
 8001420:	1099      	asrs	r1, r3, #2
 8001422:	17d3      	asrs	r3, r2, #31
 8001424:	1ac9      	subs	r1, r1, r3
 8001426:	460b      	mov	r3, r1
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	1ad1      	subs	r1, r2, r3
 8001430:	b2cb      	uxtb	r3, r1
 8001432:	3330      	adds	r3, #48	; 0x30
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff68 	bl	800130c <UART_send>
        for(; tens > 0; tens /= 10)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <UART_write_float+0x15c>)
 8001440:	fb82 1203 	smull	r1, r2, r2, r3
 8001444:	1092      	asrs	r2, r2, #2
 8001446:	17db      	asrs	r3, r3, #31
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	dcd3      	bgt.n	80013fa <UART_write_float+0x86>
 8001452:	e002      	b.n	800145a <UART_write_float+0xe6>
    } else {
        UART_send('0');
 8001454:	2030      	movs	r0, #48	; 0x30
 8001456:	f7ff ff59 	bl	800130c <UART_send>
    }

    UART_send('.');
 800145a:	202e      	movs	r0, #46	; 0x2e
 800145c:	f7ff ff56 	bl	800130c <UART_send>
    for(i = 0, tens = 10; i < right; i++, tens *= 10) {
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
 8001464:	230a      	movs	r3, #10
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	e027      	b.n	80014ba <UART_write_float+0x146>
        UART_send(((long int)(a * tens) % 10) + 48);
 800146a:	6938      	ldr	r0, [r7, #16]
 800146c:	f7ff f826 	bl	80004bc <__aeabi_i2d>
 8001470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001474:	f7ff f88c 	bl	8000590 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb36 	bl	8000af0 <__aeabi_d2iz>
 8001484:	4602      	mov	r2, r0
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <UART_write_float+0x15c>)
 8001488:	fb83 1302 	smull	r1, r3, r3, r2
 800148c:	1099      	asrs	r1, r3, #2
 800148e:	17d3      	asrs	r3, r2, #31
 8001490:	1ac9      	subs	r1, r1, r3
 8001492:	460b      	mov	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	1ad1      	subs	r1, r2, r3
 800149c:	b2cb      	uxtb	r3, r1
 800149e:	3330      	adds	r3, #48	; 0x30
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff32 	bl	800130c <UART_send>
    for(i = 0, tens = 10; i < right; i++, tens *= 10) {
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	3301      	adds	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	7dfa      	ldrb	r2, [r7, #23]
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3d3      	bcc.n	800146a <UART_write_float+0xf6>
    }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}
 80014cc:	3ff00000 	.word	0x3ff00000
 80014d0:	66666667 	.word	0x66666667
 80014d4:	00000000 	.word	0x00000000

080014d8 <main>:

void bemf_rising_U() {

}

int main(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	HAL_Init();
 80014de:	f000 fdf2 	bl	80020c6 <HAL_Init>

	SystemClock_Config();
 80014e2:	f000 fb85 	bl	8001bf0 <SystemClock_Config>

	GPIO_init();
 80014e6:	f000 f8d5 	bl	8001694 <GPIO_init>

//	MX_COMP1_Init();
//	MX_COMP2_Init();

	GPIOA->MODER |= 0b11111111111111;
 80014ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014f4:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80014f8:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80014fc:	6013      	str	r3, [r2, #0]
//	COMP1->CSR = 0;
	COMP1->CSR &= ~(0b11111111 << 16);
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <main+0x110>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a39      	ldr	r2, [pc, #228]	; (80015e8 <main+0x110>)
 8001504:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001508:	6013      	str	r3, [r2, #0]
//	COMP1->CSR |= (0b1 << 16);
//	COMP1->CSR |= (0b111 << 15);
	COMP1->CSR &= ~(1 << 8);
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <main+0x110>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <main+0x110>)
 8001510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]
	COMP1->CSR |= (0b111 << 4);
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <main+0x110>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a33      	ldr	r2, [pc, #204]	; (80015e8 <main+0x110>)
 800151c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001520:	6013      	str	r3, [r2, #0]
	COMP1->CSR |= 0b1;
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <main+0x110>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a30      	ldr	r2, [pc, #192]	; (80015e8 <main+0x110>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

	TIM1_init();
 800152e:	f000 f903 	bl	8001738 <TIM1_init>
	TIM2_init();
 8001532:	f000 fa1b 	bl	800196c <TIM2_init>
	TIM3_init();
 8001536:	f000 fa95 	bl	8001a64 <TIM3_init>

	MX_ADC1_Init();
 800153a:	f000 fba5 	bl	8001c88 <MX_ADC1_Init>
	MX_ADC2_Init();
 800153e:	f000 fc1b 	bl	8001d78 <MX_ADC2_Init>

	TIM8_init();
 8001542:	f000 fad7 	bl	8001af4 <TIM8_init>
	UART_init(115200);
 8001546:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80015ec <main+0x114>
 800154a:	f7ff fe6b 	bl	8001224 <UART_init>

	TIM3_on();
 800154e:	f000 f8e3 	bl	8001718 <TIM3_on>

//	setPhaseVoltage(0.05, 0.0);

	uint8_t i = 0, j = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	2300      	movs	r3, #0
 8001558:	71bb      	strb	r3, [r7, #6]

	delay_ms(5000);
 800155a:	f241 3088 	movw	r0, #5000	; 0x1388
 800155e:	f000 fa57 	bl	8001a10 <delay_ms>
	power = 0.1;
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <main+0x118>)
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <main+0x11c>)
 8001566:	601a      	str	r2, [r3, #0]
	motor_mode = 1;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <main+0x120>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]

	while(1) {
//		UART_write_float(position, 2);
//		UART_send_str(", ");
		UART_write_float(position, 2);
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <main+0x124>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffb4 	bl	80004e0 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	2002      	movs	r0, #2
 800157e:	ec43 2b10 	vmov	d0, r2, r3
 8001582:	f7ff fef7 	bl	8001374 <UART_write_float>
		UART_send_str("\n");
 8001586:	481e      	ldr	r0, [pc, #120]	; (8001600 <main+0x128>)
 8001588:	f7ff fed8 	bl	800133c <UART_send_str>
		delay_ms(10);
 800158c:	200a      	movs	r0, #10
 800158e:	f000 fa3f 	bl	8001a10 <delay_ms>
		if(power < 0.3){
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <main+0x118>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffa2 	bl	80004e0 <__aeabi_f2d>
 800159c:	a30e      	add	r3, pc, #56	; (adr r3, 80015d8 <main+0x100>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7ff fa67 	bl	8000a74 <__aeabi_dcmplt>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d012      	beq.n	80015d2 <main+0xfa>
			power  += 0.001;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <main+0x118>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff95 	bl	80004e0 <__aeabi_f2d>
 80015b6:	a30a      	add	r3, pc, #40	; (adr r3, 80015e0 <main+0x108>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7fe fe32 	bl	8000224 <__adddf3>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fada 	bl	8000b80 <__aeabi_d2f>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <main+0x118>)
 80015d0:	6013      	str	r3, [r2, #0]
		UART_write_float(position, 2);
 80015d2:	e7cc      	b.n	800156e <main+0x96>
 80015d4:	f3af 8000 	nop.w
 80015d8:	33333333 	.word	0x33333333
 80015dc:	3fd33333 	.word	0x3fd33333
 80015e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015e4:	3f50624d 	.word	0x3f50624d
 80015e8:	40010200 	.word	0x40010200
 80015ec:	47e10000 	.word	0x47e10000
 80015f0:	20000098 	.word	0x20000098
 80015f4:	3dcccccd 	.word	0x3dcccccd
 80015f8:	2000009c 	.word	0x2000009c
 80015fc:	20000090 	.word	0x20000090
 8001600:	08004a98 	.word	0x08004a98

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <GPIO_init>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

void GPIO_init() {
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 0b1111111;
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <GPIO_init+0x7c>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <GPIO_init+0x7c>)
 800169e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80016a2:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->OTYPER &= ~(1<<3);
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <GPIO_init+0x80>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <GPIO_init+0x80>)
 80016aa:	f023 0308 	bic.w	r3, r3, #8
 80016ae:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(1<<4);
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <GPIO_init+0x80>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <GPIO_init+0x80>)
 80016b6:	f023 0310 	bic.w	r3, r3, #16
 80016ba:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (1<<7);
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <GPIO_init+0x80>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <GPIO_init+0x80>)
 80016c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<9);
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <GPIO_init+0x80>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a11      	ldr	r2, [pc, #68]	; (8001714 <GPIO_init+0x80>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6093      	str	r3, [r2, #8]

	GPIOB->MODER |= 1<<6;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <GPIO_init+0x80>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <GPIO_init+0x80>)
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <GPIO_init+0x80>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <GPIO_init+0x80>)
 80016e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <GPIO_init+0x80>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <GPIO_init+0x80>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <GPIO_init+0x80>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a05      	ldr	r2, [pc, #20]	; (8001714 <GPIO_init+0x80>)
 80016fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	48000400 	.word	0x48000400

08001718 <TIM3_on>:

void TIM2_on() {
	TIM2->CR1 |= 1;
}

void TIM3_on() {
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 1;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <TIM3_on+0x1c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <TIM3_on+0x1c>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40000400 	.word	0x40000400

08001738 <TIM1_init>:
	TIM8->CR1 &= ~1;
}

//---------------------

void TIM1_init() {
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= 1 << 11;
 800173c:	4b87      	ldr	r3, [pc, #540]	; (800195c <TIM1_init+0x224>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	4a86      	ldr	r2, [pc, #536]	; (800195c <TIM1_init+0x224>)
 8001742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001746:	6613      	str	r3, [r2, #96]	; 0x60

    //PA[8] - 1P
    GPIOA->AFR[1] |= 0b0110;
 8001748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001752:	f043 0306 	orr.w	r3, r3, #6
 8001756:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 16);
 8001758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 17;
 8001768:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001776:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 16;
 8001778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6093      	str	r3, [r2, #8]

    //PA[7] - 1N
    GPIOA->AFR[0] |= 0b0110 << 28;
 8001788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001792:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001796:	6213      	str	r3, [r2, #32]
	GPIOA->MODER &= ~(1 << 14);
 8001798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 15;
 80017a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 14;
 80017b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6093      	str	r3, [r2, #8]

    //PA[9] - 2P
    GPIOA->AFR[1] |= 0b0110 << 4;
 80017c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017d6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 18);
 80017d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 19;
 80017e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017f6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 18;
 80017f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6093      	str	r3, [r2, #8]

    //PB[0] - 2N
    GPIOB->AFR[0] |= 0b0110;
 8001808:	4b55      	ldr	r3, [pc, #340]	; (8001960 <TIM1_init+0x228>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <TIM1_init+0x228>)
 800180e:	f043 0306 	orr.w	r3, r3, #6
 8001812:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~1;
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <TIM1_init+0x228>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <TIM1_init+0x228>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1 << 1;
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <TIM1_init+0x228>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <TIM1_init+0x228>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= 0b11;
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <TIM1_init+0x228>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <TIM1_init+0x228>)
 8001832:	f043 0303 	orr.w	r3, r3, #3
 8001836:	6093      	str	r3, [r2, #8]

    //PA[10] - 3P
    GPIOA->AFR[1] |= 0b0110 << 8;
 8001838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001842:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001846:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 20);
 8001848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001856:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 21;
 8001858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001866:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 20;
 8001868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6093      	str	r3, [r2, #8]

    //PF[0] - 3N
    GPIOF->AFR[0] |= 0b0110;
 8001878:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <TIM1_init+0x22c>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a39      	ldr	r2, [pc, #228]	; (8001964 <TIM1_init+0x22c>)
 800187e:	f043 0306 	orr.w	r3, r3, #6
 8001882:	6213      	str	r3, [r2, #32]
	GPIOF->MODER &= ~1;
 8001884:	4b37      	ldr	r3, [pc, #220]	; (8001964 <TIM1_init+0x22c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a36      	ldr	r2, [pc, #216]	; (8001964 <TIM1_init+0x22c>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= 1 << 1;
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <TIM1_init+0x22c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a33      	ldr	r2, [pc, #204]	; (8001964 <TIM1_init+0x22c>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= 0b11;
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <TIM1_init+0x22c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <TIM1_init+0x22c>)
 80018a2:	f043 0303 	orr.w	r3, r3, #3
 80018a6:	6093      	str	r3, [r2, #8]

    TIM1->CR1 = 0;
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <TIM1_init+0x230>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
    TIM1->CR2 = 0;
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <TIM1_init+0x230>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]

    TIM1->CR1 |= 1 << 7; //Auto-preload enable    
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <TIM1_init+0x230>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <TIM1_init+0x230>)
 80018ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018be:	6013      	str	r3, [r2, #0]
    TIM1->CR1 |= 1 << 5; //Center-aligned mode 1
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <TIM1_init+0x230>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <TIM1_init+0x230>)
 80018c6:	f043 0320 	orr.w	r3, r3, #32
 80018ca:	6013      	str	r3, [r2, #0]

    TIM1->CCMR1 = 0;
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <TIM1_init+0x230>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
    TIM1->CCMR1 |= 0b110 << 12;
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <TIM1_init+0x230>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	4a24      	ldr	r2, [pc, #144]	; (8001968 <TIM1_init+0x230>)
 80018d8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80018dc:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= 0b110 << 4;
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <TIM1_init+0x230>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	4a21      	ldr	r2, [pc, #132]	; (8001968 <TIM1_init+0x230>)
 80018e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018e8:	6193      	str	r3, [r2, #24]

    TIM1->CCMR2 = 0;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <TIM1_init+0x230>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
    TIM1->CCMR2 |= 0b110 << 4;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <TIM1_init+0x230>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a1c      	ldr	r2, [pc, #112]	; (8001968 <TIM1_init+0x230>)
 80018f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018fa:	61d3      	str	r3, [r2, #28]

    TIM1->ARR = 3500;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <TIM1_init+0x230>)
 80018fe:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC = 0;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <TIM1_init+0x230>)
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	; 0x28

    TIM1->CNT = 0;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <TIM1_init+0x230>)
 800190c:	2200      	movs	r2, #0
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

    TIM1->CCER = 0;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <TIM1_init+0x230>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= 0b010101010101; //enable outputs
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <TIM1_init+0x230>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <TIM1_init+0x230>)
 800191c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8001920:	f043 0305 	orr.w	r3, r3, #5
 8001924:	6213      	str	r3, [r2, #32]

	TIM1->CCR1 = 0;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <TIM1_init+0x230>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <TIM1_init+0x230>)
 800192e:	2200      	movs	r2, #0
 8001930:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <TIM1_init+0x230>)
 8001934:	2200      	movs	r2, #0
 8001936:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM1->BDTR |= 1 << 15;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <TIM1_init+0x230>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <TIM1_init+0x230>)
 800193e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001942:	6453      	str	r3, [r2, #68]	; 0x44
    TIM1->CR1 |= 1;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <TIM1_init+0x230>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <TIM1_init+0x230>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	48000400 	.word	0x48000400
 8001964:	48001400 	.word	0x48001400
 8001968:	40012c00 	.word	0x40012c00

0800196c <TIM2_init>:

void TIM2_init() {
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1;
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <TIM2_init+0x98>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <TIM2_init+0x98>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6593      	str	r3, [r2, #88]	; 0x58

    TIM2->CR1 = 0;
 800197e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
    TIM2->CR2 = 0;
 8001986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]

    TIM2->ARR |= 0xFFFFF;
 800198e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001998:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800199c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80019a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    float freq = 10000;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <TIM2_init+0x9c>)
 80019a4:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 80019a6:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001a0c <TIM2_init+0xa0>
 80019aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80019ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b2:	edc7 7a00 	vstr	s15, [r7]
    // TIM2->ARR |= ((uint32_t)f & 0x000FFFFF);
    // TIM2->ARR = (uint32_t)f;
    TIM2->ARR |= 0xFFFFF;
 80019b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80019c4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80019c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM2->PSC = (uint16_t)f - 1;
 80019ca:	edd7 7a00 	vldr	s15, [r7]
 80019ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019de:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->CNT = 0;
 80019e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

    TIM2->EGR |= 1;
 80019e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6153      	str	r3, [r2, #20]

    // TIM2->CR1 |= 1;
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000
 8001a08:	461c4000 	.word	0x461c4000
 8001a0c:	4d221fe8 	.word	0x4d221fe8

08001a10 <delay_ms>:

void delay_ms(uint16_t d) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 8001a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= 1;
 8001a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6013      	str	r3, [r2, #0]
	while(TIM2->CNT < d*10);
 8001a32:	bf00      	nop
 8001a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a3a:	88fa      	ldrh	r2, [r7, #6]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d3f5      	bcc.n	8001a34 <delay_ms+0x24>
	TIM2->CR1 &= ~1;
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <TIM3_init>:


void TIM3_init() {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 1;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <TIM3_init+0x80>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <TIM3_init+0x80>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58

    TIM3->CR1 = 0;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <TIM3_init+0x84>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
    TIM3->CR2 = 0;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <TIM3_init+0x84>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]

    TIM3->CR1 |= 1 << 7;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <TIM3_init+0x84>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <TIM3_init+0x84>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6013      	str	r3, [r2, #0]

    float freq = 10000;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <TIM3_init+0x88>)
 8001a90:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 8001a92:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001af0 <TIM3_init+0x8c>
 8001a96:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9e:	edc7 7a00 	vstr	s15, [r7]
    TIM3->ARR = (uint16_t)f;
 8001aa2:	edd7 7a00 	vldr	s15, [r7]
 8001aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <TIM3_init+0x84>)
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 0;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <TIM3_init+0x84>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28

    TIM3->CNT = 0;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <TIM3_init+0x84>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24

    TIM3->DIER |= 1;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <TIM3_init+0x84>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <TIM3_init+0x84>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	60d3      	str	r3, [r2, #12]
//    TIM3->CR1 |= 1;
    NVIC_SetPriority(TIM3_IRQn, 2);
 8001acc:	2102      	movs	r1, #2
 8001ace:	201d      	movs	r0, #29
 8001ad0:	f7ff fdb6 	bl	8001640 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 8001ad4:	201d      	movs	r0, #29
 8001ad6:	f7ff fd95 	bl	8001604 <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	461c4000 	.word	0x461c4000
 8001af0:	4d221fe8 	.word	0x4d221fe8

08001af4 <TIM8_init>:

void TIM8_init() {
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 1 << 13;
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <TIM8_init+0xf0>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	4a39      	ldr	r2, [pc, #228]	; (8001be4 <TIM8_init+0xf0>)
 8001afe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b02:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2ENR |= 0b1111111;
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <TIM8_init+0xf0>)
 8001b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b08:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <TIM8_init+0xf0>)
 8001b0a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8001b0e:	6613      	str	r3, [r2, #96]	; 0x60

	//PA15 - TIM8_CH1
	GPIOA->AFR[1] |= 0b0010 << 28;
 8001b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b1e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1<<30);
 8001b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b2e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1<<31;
 8001b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b3e:	6013      	str	r3, [r2, #0]

	//PB8 - TIM8_CH2
	GPIOB->AFR[1] |= 0b1010;
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <TIM8_init+0xf4>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <TIM8_init+0xf4>)
 8001b46:	f043 030a 	orr.w	r3, r3, #10
 8001b4a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~(1<<16);
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <TIM8_init+0xf4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <TIM8_init+0xf4>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<17;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <TIM8_init+0xf4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <TIM8_init+0xf4>)
 8001b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b62:	6013      	str	r3, [r2, #0]

	//PB6 <> TIM8_ETR
	GPIOB->AFR[0] |= 0b0110 << 24;
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <TIM8_init+0xf4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <TIM8_init+0xf4>)
 8001b6a:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8001b6e:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~(1<<12);
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <TIM8_init+0xf4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <TIM8_init+0xf4>)
 8001b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b7a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<13;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <TIM8_init+0xf4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <TIM8_init+0xf4>)
 8001b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b86:	6013      	str	r3, [r2, #0]

    TIM8->CR1 = 0;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <TIM8_init+0xf8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

    TIM8->CR2 = 0;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <TIM8_init+0xf8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
    TIM8->SMCR = 0b0011;
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <TIM8_init+0xf8>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	609a      	str	r2, [r3, #8]
    TIM8->CCMR1 |= 0b01 << 8;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <TIM8_init+0xf8>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <TIM8_init+0xf8>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6193      	str	r3, [r2, #24]
    TIM8->CCMR1 |= 0b01;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <TIM8_init+0xf8>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <TIM8_init+0xf8>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6193      	str	r3, [r2, #24]
    TIM8->ECR = 1;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <TIM8_init+0xf8>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	659a      	str	r2, [r3, #88]	; 0x58

    TIM8->ARR |= 0xFFFFF;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <TIM8_init+0xf8>)
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <TIM8_init+0xf8>)
 8001bbe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001bc2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM8->CNT = 0;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <TIM8_init+0xf8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

    TIM8->CR1 |= 1;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <TIM8_init+0xf8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a06      	ldr	r2, [pc, #24]	; (8001bec <TIM8_init+0xf8>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6013      	str	r3, [r2, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48000400 	.word	0x48000400
 8001bec:	40013400 	.word	0x40013400

08001bf0 <SystemClock_Config>:

void SystemClock_Config(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b094      	sub	sp, #80	; 0x50
 8001bf4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0318 	add.w	r3, r7, #24
 8001bfa:	2238      	movs	r2, #56	; 0x38
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fd76 	bl	80046f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f001 fdb8 	bl	8003788 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c26:	2302      	movs	r3, #2
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 21;
 8001c32:	2315      	movs	r3, #21
 8001c34:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c36:	2302      	movs	r3, #2
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fe42 	bl	80038d0 <HAL_RCC_OscConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SystemClock_Config+0x66>
	{
	Error_Handler();
 8001c52:	f000 f8f7 	bl	8001e44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c56:	230f      	movs	r3, #15
 8001c58:	607b      	str	r3, [r7, #4]
	                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 f946 	bl	8003f00 <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0x8e>
	{
	Error_Handler();
 8001c7a:	f000 f8e3 	bl	8001e44 <Error_Handler>
	}
}
 8001c7e:	bf00      	nop
 8001c80:	3750      	adds	r7, #80	; 0x50
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <MX_ADC1_Init>:

void MX_ADC1_Init(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fd25 	bl	80046f0 <memset>

	hadc1.Instance = ADC1;
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001ca8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cac:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cb4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d10:	4817      	ldr	r0, [pc, #92]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001d12:	f000 fc23 	bl	800255c <HAL_ADC_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ADC1_Init+0x98>
	{
	Error_Handler();
 8001d1c:	f000 f892 	bl	8001e44 <Error_Handler>
	}

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4811      	ldr	r0, [pc, #68]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001d2c:	f001 f9b6 	bl	800309c <HAL_ADCEx_MultiModeConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_ADC1_Init+0xb2>
	{
	Error_Handler();
 8001d36:	f000 f885 	bl	8001e44 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_ADC1_Init+0xec>)
 8001d3c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d3e:	2306      	movs	r3, #6
 8001d40:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d46:	237f      	movs	r3, #127	; 0x7f
 8001d48:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4806      	ldr	r0, [pc, #24]	; (8001d70 <MX_ADC1_Init+0xe8>)
 8001d58:	f000 fd8a 	bl	8002870 <HAL_ADC_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_ADC1_Init+0xde>
	{
	Error_Handler();
 8001d62:	f000 f86f 	bl	8001e44 <Error_Handler>
	}
}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	; 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000c4 	.word	0x200000c4
 8001d74:	0c900008 	.word	0x0c900008

08001d78 <MX_ADC2_Init>:

void MX_ADC2_Init(void) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	463b      	mov	r3, r7
 8001d80:	2220      	movs	r2, #32
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fcb3 	bl	80046f0 <memset>

	hadc2.Instance = ADC2;
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	; (8001e3c <MX_ADC2_Init+0xc4>)
 8001d8e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001d92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d96:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001db2:	2204      	movs	r2, #4
 8001db4:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if(HAL_ADC_Init(&hadc2) != HAL_OK)
 8001df2:	4811      	ldr	r0, [pc, #68]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001df4:	f000 fbb2 	bl	800255c <HAL_ADC_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_ADC2_Init+0x8a>
	{
	Error_Handler();
 8001dfe:	f000 f821 	bl	8001e44 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_ADC2_Init+0xc8>)
 8001e04:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e06:	2306      	movs	r3, #6
 8001e08:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e0e:	237f      	movs	r3, #127	; 0x7f
 8001e10:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e12:	2304      	movs	r3, #4
 8001e14:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
	if(HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <MX_ADC2_Init+0xc0>)
 8001e20:	f000 fd26 	bl	8002870 <HAL_ADC_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_ADC2_Init+0xb6>
	{
	Error_Handler();
 8001e2a:	f000 f80b 	bl	8001e44 <Error_Handler>
	}
}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000130 	.word	0x20000130
 8001e3c:	50000100 	.word	0x50000100
 8001e40:	0c900008 	.word	0x0c900008

08001e44 <Error_Handler>:
	Error_Handler();
	}
}

void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>
	...

08001e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_MspInit+0x44>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_MspInit+0x44>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6613      	str	r3, [r2, #96]	; 0x60
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_MspInit+0x44>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_MspInit+0x44>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_MspInit+0x44>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_MspInit+0x44>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b09c      	sub	sp, #112	; 0x70
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	2244      	movs	r2, #68	; 0x44
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fc19 	bl	80046f0 <memset>
  if(hadc->Instance==ADC1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec6:	d13e      	bne.n	8001f46 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ecc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ece:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ed2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 f9f5 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ee4:	f7ff ffae 	bl	8001e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_ADC_MspInit+0x13c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	4a39      	ldr	r2, [pc, #228]	; (8001fd4 <HAL_ADC_MspInit+0x13c>)
 8001ef0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_ADC_MspInit+0x13c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10b      	bne.n	8001f12 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f001 faa0 	bl	8003484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f44:	e042      	b.n	8001fcc <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_ADC_MspInit+0x144>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d13d      	bne.n	8001fcc <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f5a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 f9b1 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001f6c:	f7ff ff6a 	bl	8001e44 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_ADC_MspInit+0x13c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_ADC_MspInit+0x13c>)
 8001f78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_ADC_MspInit+0x13c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10b      	bne.n	8001f9a <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_ADC_MspInit+0x140>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fb2:	2340      	movs	r3, #64	; 0x40
 8001fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc8:	f001 fa5c 	bl	8003484 <HAL_GPIO_Init>
}
 8001fcc:	bf00      	nop
 8001fce:	3770      	adds	r7, #112	; 0x70
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200001e4 	.word	0x200001e4
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	50000100 	.word	0x50000100

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202c:	f000 f89e 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <COMP1_2_3_IRQHandler+0x14>)
 800203a:	f001 f8f9 	bl	8003230 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 800203e:	4803      	ldr	r0, [pc, #12]	; (800204c <COMP1_2_3_IRQHandler+0x18>)
 8002040:	f001 f8f6 	bl	8003230 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000019c 	.word	0x2000019c
 800204c:	200001c0 	.word	0x200001c0

08002050 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <SystemInit+0x20>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <SystemInit+0x20>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002076:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800207a:	490e      	ldr	r1, [pc, #56]	; (80020b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <LoopForever+0xe>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002090:	4c0b      	ldr	r4, [pc, #44]	; (80020c0 <LoopForever+0x16>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800209e:	f7ff ffd7 	bl	8002050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a2:	f002 fb01 	bl	80046a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020a6:	f7ff fa17 	bl	80014d8 <main>

080020aa <LoopForever>:

LoopForever:
    b LoopForever
 80020aa:	e7fe      	b.n	80020aa <LoopForever>
  ldr   r0, =_estack
 80020ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020b8:	08005068 	.word	0x08005068
  ldr r2, =_sbss
 80020bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020c0:	200001ec 	.word	0x200001ec

080020c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC1_2_IRQHandler>

080020c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f001 f9a5 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020d6:	200f      	movs	r0, #15
 80020d8:	f000 f80e 	bl	80020f8 <HAL_InitTick>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	e001      	b.n	80020ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020e8:	f7ff feb2 	bl	8001e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020ec:	79fb      	ldrb	r3, [r7, #7]

}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_InitTick+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d022      	beq.n	8002152 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_InitTick+0x6c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_InitTick+0x68>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002118:	fbb1 f3f3 	udiv	r3, r1, r3
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f001 f9a2 	bl	800346a <HAL_SYSTICK_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10f      	bne.n	800214c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	d809      	bhi.n	8002146 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002132:	2200      	movs	r2, #0
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	f04f 30ff 	mov.w	r0, #4294967295
 800213a:	f001 f97c 	bl	8003436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_InitTick+0x70>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e007      	b.n	8002156 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e004      	b.n	8002156 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e001      	b.n	8002156 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000008 	.word	0x20000008
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x1c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_IncTick+0x20>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4413      	add	r3, r2
 800217a:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_IncTick+0x1c>)
 800217c:	6013      	str	r3, [r2, #0]
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	200001e8 	.word	0x200001e8
 800218c:	20000008 	.word	0x20000008

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	200001e8 	.word	0x200001e8

080021a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <LL_ADC_SetOffset+0x44>)
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	4313      	orrs	r3, r2
 8002240:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	03fff000 	.word	0x03fff000

08002258 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3360      	adds	r3, #96	; 0x60
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b087      	sub	sp, #28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3360      	adds	r3, #96	; 0x60
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	431a      	orrs	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3360      	adds	r3, #96	; 0x60
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	615a      	str	r2, [r3, #20]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3330      	adds	r3, #48	; 0x30
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	4413      	add	r3, r2
 800236a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	211f      	movs	r1, #31
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	f003 011f 	and.w	r1, r3, #31
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	431a      	orrs	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3314      	adds	r3, #20
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	0e5b      	lsrs	r3, r3, #25
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	4413      	add	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	0d1b      	lsrs	r3, r3, #20
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2107      	movs	r1, #7
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	401a      	ands	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	0d1b      	lsrs	r3, r3, #20
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10a      	bne.n	8002426 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002424:	e00a      	b.n	800243c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002432:	43db      	mvns	r3, r3
 8002434:	401a      	ands	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	407f0000 	.word	0x407f0000

0800244c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800245c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6093      	str	r3, [r2, #8]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002484:	d101      	bne.n	800248a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024d4:	d101      	bne.n	80024da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <LL_ADC_IsEnabled+0x18>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <LL_ADC_IsEnabled+0x1a>
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b04      	cmp	r3, #4
 8002520:	d101      	bne.n	8002526 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b08      	cmp	r3, #8
 8002546:	d101      	bne.n	800254c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e177      	b.n	8002866 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fc87 	bl	8001e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff67 	bl	8002470 <LL_ADC_IsDeepPowerDownEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff4d 	bl	800244c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff82 	bl	80024c0 <LL_ADC_IsInternalRegulatorEnabled>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d115      	bne.n	80025ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff66 	bl	8002498 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025cc:	4b9c      	ldr	r3, [pc, #624]	; (8002840 <HAL_ADC_Init+0x2e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	4a9c      	ldr	r2, [pc, #624]	; (8002844 <HAL_ADC_Init+0x2e8>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	3301      	adds	r3, #1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff64 	bl	80024c0 <LL_ADC_IsInternalRegulatorEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff75 	bl	800250e <LL_ADC_REG_IsConversionOngoing>
 8002624:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 8110 	bne.w	8002854 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 810c 	bne.w	8002854 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002644:	f043 0202 	orr.w	r2, r3, #2
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff49 	bl	80024e8 <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800265c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002660:	f7ff ff42 	bl	80024e8 <LL_ADC_IsEnabled>
 8002664:	4604      	mov	r4, r0
 8002666:	4878      	ldr	r0, [pc, #480]	; (8002848 <HAL_ADC_Init+0x2ec>)
 8002668:	f7ff ff3e 	bl	80024e8 <LL_ADC_IsEnabled>
 800266c:	4603      	mov	r3, r0
 800266e:	4323      	orrs	r3, r4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	4874      	ldr	r0, [pc, #464]	; (800284c <HAL_ADC_Init+0x2f0>)
 800267c:	f7ff fd94 	bl	80021a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7f5b      	ldrb	r3, [r3, #29]
 8002684:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800268a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002690:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002696:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d106      	bne.n	80026bc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	045b      	lsls	r3, r3, #17
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_ADC_Init+0x2f4>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	69b9      	ldr	r1, [r7, #24]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff01 	bl	800250e <LL_ADC_REG_IsConversionOngoing>
 800270c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff0e 	bl	8002534 <LL_ADC_INJ_IsConversionOngoing>
 8002718:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d16d      	bne.n	80027fc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d16a      	bne.n	80027fc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800272a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002732:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002742:	f023 0302 	bic.w	r3, r3, #2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	69b9      	ldr	r1, [r7, #24]
 800274c:	430b      	orrs	r3, r1
 800274e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002766:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002770:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6911      	ldr	r1, [r2, #16]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	430b      	orrs	r3, r1
 8002782:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002786:	e013      	b.n	80027b0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002796:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d118      	bne.n	80027ec <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027dc:	430a      	orrs	r2, r1
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e007      	b.n	80027fc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10c      	bne.n	800281e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f023 010f 	bic.w	r1, r3, #15
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
 800281c:	e007      	b.n	800282e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 020f 	bic.w	r2, r2, #15
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	65da      	str	r2, [r3, #92]	; 0x5c
 800283e:	e011      	b.n	8002864 <HAL_ADC_Init+0x308>
 8002840:	20000000 	.word	0x20000000
 8002844:	053e2d63 	.word	0x053e2d63
 8002848:	50000100 	.word	0x50000100
 800284c:	50000300 	.word	0x50000300
 8002850:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	f043 0210 	orr.w	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002864:	7ffb      	ldrb	r3, [r7, #31]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop

08002870 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0b6      	sub	sp, #216	; 0xd8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x22>
 800288e:	2302      	movs	r3, #2
 8002890:	e3c8      	b.n	8003024 <HAL_ADC_ConfigChannel+0x7b4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fe35 	bl	800250e <LL_ADC_REG_IsConversionOngoing>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 83ad 	bne.w	8003006 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f7ff fd47 	bl	800234c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fe23 	bl	800250e <LL_ADC_REG_IsConversionOngoing>
 80028c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fe2f 	bl	8002534 <LL_ADC_INJ_IsConversionOngoing>
 80028d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 81d9 	bne.w	8002c96 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 81d4 	bne.w	8002c96 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f6:	d10f      	bne.n	8002918 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2200      	movs	r2, #0
 8002902:	4619      	mov	r1, r3
 8002904:	f7ff fd4e 	bl	80023a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fd08 	bl	8002326 <LL_ADC_SetSamplingTimeCommonConfig>
 8002916:	e00e      	b.n	8002936 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	461a      	mov	r2, r3
 8002926:	f7ff fd3d 	bl	80023a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fcf8 	bl	8002326 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d022      	beq.n	800299e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6919      	ldr	r1, [r3, #16]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002968:	f7ff fc52 	bl	8002210 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6919      	ldr	r1, [r3, #16]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	461a      	mov	r2, r3
 800297a:	f7ff fc9e 	bl	80022ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6919      	ldr	r1, [r3, #16]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	7f1b      	ldrb	r3, [r3, #28]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x124>
 800298e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002992:	e000      	b.n	8002996 <HAL_ADC_ConfigChannel+0x126>
 8002994:	2300      	movs	r3, #0
 8002996:	461a      	mov	r2, r3
 8002998:	f7ff fcaa 	bl	80022f0 <LL_ADC_SetOffsetSaturation>
 800299c:	e17b      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fc57 	bl	8002258 <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x15a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fc4c 	bl	8002258 <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	e01e      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x198>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fc41 	bl	8002258 <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e004      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80029fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1b0>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	e018      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1e2>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e004      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002a48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d106      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fc10 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fbf4 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x220>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fbe9 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 021f 	and.w	r2, r3, #31
 8002a8e:	e01e      	b.n	8002ace <HAL_ADC_ConfigChannel+0x25e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fbde 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x276>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	e018      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x2a8>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e004      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d106      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fbad 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fb91 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x2e6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fb86 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	e01e      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x324>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fb7b 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e004      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x33c>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	e016      	b.n	8002bda <HAL_ADC_ConfigChannel+0x36a>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e004      	b.n	8002bda <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d106      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2102      	movs	r1, #2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fb4c 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2103      	movs	r1, #3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fb30 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x3a8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2103      	movs	r1, #3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fb25 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	e017      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x3d8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fb1a 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c32:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x3f0>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	e011      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x414>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d106      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2103      	movs	r1, #3
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff faf7 	bl	8002284 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fc24 	bl	80024e8 <LL_ADC_IsEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 8140 	bne.w	8002f28 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f7ff fba1 	bl	80023fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a8f      	ldr	r2, [pc, #572]	; (8002efc <HAL_ADC_ConfigChannel+0x68c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f040 8131 	bne.w	8002f28 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x47e>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2b09      	cmp	r3, #9
 8002ce4:	bf94      	ite	ls
 8002ce6:	2301      	movls	r3, #1
 8002ce8:	2300      	movhi	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e019      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x4b2>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cfe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e003      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d079      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x4d2>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	3301      	adds	r3, #1
 8002d3a:	069b      	lsls	r3, r3, #26
 8002d3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d40:	e015      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x4fe>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	069b      	lsls	r3, r3, #26
 8002d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x51e>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	3301      	adds	r3, #1
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	e017      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x54e>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002da6:	2320      	movs	r3, #32
 8002da8:	e003      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	ea42 0103 	orr.w	r1, r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x574>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	051b      	lsls	r3, r3, #20
 8002de2:	e018      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x5a6>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f003 021f 	and.w	r2, r3, #31
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e16:	430b      	orrs	r3, r1
 8002e18:	e081      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d107      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x5c6>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	069b      	lsls	r3, r3, #26
 8002e30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e34:	e015      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x5f2>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x612>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0e9b      	lsrs	r3, r3, #26
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	e017      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x642>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	ea42 0103 	orr.w	r1, r2, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x66e>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f003 021f 	and.w	r2, r3, #31
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b1e      	subs	r3, #30
 8002ed6:	051b      	lsls	r3, r3, #20
 8002ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002edc:	e01e      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x6ac>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	613b      	str	r3, [r7, #16]
  return result;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	e006      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x698>
 8002efa:	bf00      	nop
 8002efc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f003 021f 	and.w	r2, r3, #31
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	3b1e      	subs	r3, #30
 8002f16:	051b      	lsls	r3, r3, #20
 8002f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	6892      	ldr	r2, [r2, #8]
 8002f22:	4619      	mov	r1, r3
 8002f24:	f7ff fa3e 	bl	80023a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b3f      	ldr	r3, [pc, #252]	; (800302c <HAL_ADC_ConfigChannel+0x7bc>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d071      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f34:	483e      	ldr	r0, [pc, #248]	; (8003030 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f36:	f7ff f95d 	bl	80021f4 <LL_ADC_GetCommonPathInternalCh>
 8002f3a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x6e2>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d127      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d121      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f66:	d157      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f70:	4619      	mov	r1, r3
 8002f72:	482f      	ldr	r0, [pc, #188]	; (8003030 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f74:	f7ff f92b 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_ADC_ConfigChannel+0x7cc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	4a30      	ldr	r2, [pc, #192]	; (8003040 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f92:	e002      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fa0:	e03a      	b.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a27      	ldr	r2, [pc, #156]	; (8003044 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d113      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x764>
 8002fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a22      	ldr	r2, [pc, #136]	; (8003048 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02a      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4818      	ldr	r0, [pc, #96]	; (8003030 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fce:	f7ff f8fe 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fd2:	e021      	b.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_ADC_ConfigChannel+0x7dc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d11c      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d011      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	480c      	ldr	r0, [pc, #48]	; (8003030 <HAL_ADC_ConfigChannel+0x7c0>)
 8003000:	f7ff f8e5 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
 8003004:	e008      	b.n	8003018 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003020:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003024:	4618      	mov	r0, r3
 8003026:	37d8      	adds	r7, #216	; 0xd8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	80080000 	.word	0x80080000
 8003030:	50000300 	.word	0x50000300
 8003034:	c3210000 	.word	0xc3210000
 8003038:	90c00010 	.word	0x90c00010
 800303c:	20000000 	.word	0x20000000
 8003040:	053e2d63 	.word	0x053e2d63
 8003044:	c7520000 	.word	0xc7520000
 8003048:	50000100 	.word	0x50000100
 800304c:	cb840000 	.word	0xcb840000

08003050 <LL_ADC_IsEnabled>:
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <LL_ADC_IsEnabled+0x18>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <LL_ADC_IsEnabled+0x1a>
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_ADC_REG_IsConversionOngoing>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d101      	bne.n	800308e <LL_ADC_REG_IsConversionOngoing+0x18>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b0a1      	sub	sp, #132	; 0x84
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e08b      	b.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030c2:	2300      	movs	r3, #0
 80030c4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80030c6:	2300      	movs	r3, #0
 80030c8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d2:	d102      	bne.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030d4:	4b41      	ldr	r3, [pc, #260]	; (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	e001      	b.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e06a      	b.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ffb9 	bl	8003076 <LL_ADC_REG_IsConversionOngoing>
 8003104:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ffb3 	bl	8003076 <LL_ADC_REG_IsConversionOngoing>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d14c      	bne.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003118:	2b00      	cmp	r3, #0
 800311a:	d149      	bne.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800311c:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800311e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d028      	beq.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800313a:	035b      	lsls	r3, r3, #13
 800313c:	430b      	orrs	r3, r1
 800313e:	431a      	orrs	r2, r3
 8003140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003142:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003144:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003148:	f7ff ff82 	bl	8003050 <LL_ADC_IsEnabled>
 800314c:	4604      	mov	r4, r0
 800314e:	4823      	ldr	r0, [pc, #140]	; (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003150:	f7ff ff7e 	bl	8003050 <LL_ADC_IsEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	4323      	orrs	r3, r4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d133      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800315c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003164:	f023 030f 	bic.w	r3, r3, #15
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	6811      	ldr	r1, [r2, #0]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	6892      	ldr	r2, [r2, #8]
 8003170:	430a      	orrs	r2, r1
 8003172:	431a      	orrs	r2, r3
 8003174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003176:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003178:	e024      	b.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800317a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003184:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003186:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800318a:	f7ff ff61 	bl	8003050 <LL_ADC_IsEnabled>
 800318e:	4604      	mov	r4, r0
 8003190:	4812      	ldr	r0, [pc, #72]	; (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003192:	f7ff ff5d 	bl	8003050 <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	4323      	orrs	r3, r4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d112      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031a6:	f023 030f 	bic.w	r3, r3, #15
 80031aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80031ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ae:	e009      	b.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80031c2:	e000      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3784      	adds	r7, #132	; 0x84
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	bf00      	nop
 80031dc:	50000100 	.word	0x50000100
 80031e0:	50000300 	.word	0x50000300

080031e4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4013      	ands	r3, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d101      	bne.n	80031fe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40010400 	.word	0x40010400

08003210 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6153      	str	r3, [r2, #20]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_COMP_IRQHandler+0x6c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d012      	beq.n	8003268 <HAL_COMP_IRQHandler+0x38>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <HAL_COMP_IRQHandler+0x70>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00a      	beq.n	8003262 <HAL_COMP_IRQHandler+0x32>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <HAL_COMP_IRQHandler+0x74>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d102      	bne.n	800325c <HAL_COMP_IRQHandler+0x2c>
 8003256:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800325a:	e007      	b.n	800326c <HAL_COMP_IRQHandler+0x3c>
 800325c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003260:	e004      	b.n	800326c <HAL_COMP_IRQHandler+0x3c>
 8003262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003266:	e001      	b.n	800326c <HAL_COMP_IRQHandler+0x3c>
 8003268:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800326c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8003272:	68b8      	ldr	r0, [r7, #8]
 8003274:	f7ff ffb6 	bl	80031e4 <LL_EXTI_IsActiveFlag_0_31>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800327e:	2301      	movs	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if(tmp_comp_exti_flag_set != 0UL)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_COMP_IRQHandler+0x64>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003288:	68b8      	ldr	r0, [r7, #8]
 800328a:	f7ff ffc1 	bl	8003210 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f80a 	bl	80032a8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40010200 	.word	0x40010200
 80032a0:	40010204 	.word	0x40010204
 80032a4:	40010208 	.word	0x40010208

080032a8 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <__NVIC_SetPriorityGrouping>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_GetPriorityGrouping>:
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_SetPriority>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f1c3 0307 	rsb	r3, r3, #7
 800338e:	2b04      	cmp	r3, #4
 8003390:	bf28      	it	cs
 8003392:	2304      	movcs	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <NVIC_EncodePriority+0x30>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3b03      	subs	r3, #3
 80033a2:	e000      	b.n	80033a6 <NVIC_EncodePriority+0x32>
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	4313      	orrs	r3, r2
         );
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f7ff ff8e 	bl	8003320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff47 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003444:	f7ff ff5e 	bl	8003304 <__NVIC_GetPriorityGrouping>
 8003448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	f7ff ff90 	bl	8003374 <NVIC_EncodePriority>
 8003454:	4602      	mov	r2, r0
 8003456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff5f 	bl	8003320 <__NVIC_SetPriority>
}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffb2 	bl	80033dc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003492:	e15a      	b.n	800374a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 814c 	beq.w	8003744 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d005      	beq.n	80034c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d130      	bne.n	8003526 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034fa:	2201      	movs	r2, #1
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	f003 0201 	and.w	r2, r3, #1
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b03      	cmp	r3, #3
 8003530:	d017      	beq.n	8003562 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d123      	bne.n	80035b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	08da      	lsrs	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3208      	adds	r2, #8
 8003576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	08da      	lsrs	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3208      	adds	r2, #8
 80035b0:	6939      	ldr	r1, [r7, #16]
 80035b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f8:	4b5b      	ldr	r3, [pc, #364]	; (8003768 <HAL_GPIO_Init+0x2e4>)
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	4a5a      	ldr	r2, [pc, #360]	; (8003768 <HAL_GPIO_Init+0x2e4>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6613      	str	r3, [r2, #96]	; 0x60
 8003604:	4b58      	ldr	r3, [pc, #352]	; (8003768 <HAL_GPIO_Init+0x2e4>)
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003610:	4a56      	ldr	r2, [pc, #344]	; (800376c <HAL_GPIO_Init+0x2e8>)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800363a:	d01f      	beq.n	800367c <HAL_GPIO_Init+0x1f8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a4c      	ldr	r2, [pc, #304]	; (8003770 <HAL_GPIO_Init+0x2ec>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d019      	beq.n	8003678 <HAL_GPIO_Init+0x1f4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a4b      	ldr	r2, [pc, #300]	; (8003774 <HAL_GPIO_Init+0x2f0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_GPIO_Init+0x1f0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a4a      	ldr	r2, [pc, #296]	; (8003778 <HAL_GPIO_Init+0x2f4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00d      	beq.n	8003670 <HAL_GPIO_Init+0x1ec>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a49      	ldr	r2, [pc, #292]	; (800377c <HAL_GPIO_Init+0x2f8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <HAL_GPIO_Init+0x1e8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a48      	ldr	r2, [pc, #288]	; (8003780 <HAL_GPIO_Init+0x2fc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_GPIO_Init+0x1e4>
 8003664:	2305      	movs	r3, #5
 8003666:	e00a      	b.n	800367e <HAL_GPIO_Init+0x1fa>
 8003668:	2306      	movs	r3, #6
 800366a:	e008      	b.n	800367e <HAL_GPIO_Init+0x1fa>
 800366c:	2304      	movs	r3, #4
 800366e:	e006      	b.n	800367e <HAL_GPIO_Init+0x1fa>
 8003670:	2303      	movs	r3, #3
 8003672:	e004      	b.n	800367e <HAL_GPIO_Init+0x1fa>
 8003674:	2302      	movs	r3, #2
 8003676:	e002      	b.n	800367e <HAL_GPIO_Init+0x1fa>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_GPIO_Init+0x1fa>
 800367c:	2300      	movs	r3, #0
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	f002 0203 	and.w	r2, r2, #3
 8003684:	0092      	lsls	r2, r2, #2
 8003686:	4093      	lsls	r3, r2
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800368e:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_GPIO_Init+0x2e8>)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	3302      	adds	r3, #2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <HAL_GPIO_Init+0x300>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036c0:	4a30      	ldr	r2, [pc, #192]	; (8003784 <HAL_GPIO_Init+0x300>)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036c6:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <HAL_GPIO_Init+0x300>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ea:	4a26      	ldr	r2, [pc, #152]	; (8003784 <HAL_GPIO_Init+0x300>)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_GPIO_Init+0x300>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_GPIO_Init+0x300>)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HAL_GPIO_Init+0x300>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	43db      	mvns	r3, r3
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_GPIO_Init+0x300>)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3301      	adds	r3, #1
 8003748:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	f47f ae9d 	bne.w	8003494 <HAL_GPIO_Init+0x10>
  }
}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40021000 	.word	0x40021000
 800376c:	40010000 	.word	0x40010000
 8003770:	48000400 	.word	0x48000400
 8003774:	48000800 	.word	0x48000800
 8003778:	48000c00 	.word	0x48000c00
 800377c:	48001000 	.word	0x48001000
 8003780:	48001400 	.word	0x48001400
 8003784:	40010400 	.word	0x40010400

08003788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d141      	bne.n	800381a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003796:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d131      	bne.n	8003808 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037a4:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037aa:	4a46      	ldr	r2, [pc, #280]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b4:	4b43      	ldr	r3, [pc, #268]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037bc:	4a41      	ldr	r2, [pc, #260]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037c4:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2232      	movs	r2, #50	; 0x32
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	4a3f      	ldr	r2, [pc, #252]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	0c9b      	lsrs	r3, r3, #18
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037da:	e002      	b.n	80037e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3b01      	subs	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e2:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ee:	d102      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f2      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f6:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d158      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e057      	b.n	80038b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003808:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800380e:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003818:	e04d      	b.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003820:	d141      	bne.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382e:	d131      	bne.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003836:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003840:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800384e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2232      	movs	r2, #50	; 0x32
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	0c9b      	lsrs	r3, r3, #18
 8003862:	3301      	adds	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003866:	e002      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3b01      	subs	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387a:	d102      	bne.n	8003882 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f2      	bne.n	8003868 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388e:	d112      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e011      	b.n	80038b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038a4:	e007      	b.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40007000 	.word	0x40007000
 80038c8:	20000000 	.word	0x20000000
 80038cc:	431bde83 	.word	0x431bde83

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e306      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d075      	beq.n	80039da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b97      	ldr	r3, [pc, #604]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f8:	4b94      	ldr	r3, [pc, #592]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d102      	bne.n	800390e <HAL_RCC_OscConfig+0x3e>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d002      	beq.n	8003914 <HAL_RCC_OscConfig+0x44>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <HAL_RCC_OscConfig+0x108>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d157      	bne.n	80039d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e2e1      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x74>
 8003936:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a84      	ldr	r2, [pc, #528]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b7f      	ldr	r3, [pc, #508]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7e      	ldr	r2, [pc, #504]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b7c      	ldr	r3, [pc, #496]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7b      	ldr	r2, [pc, #492]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003968:	4b78      	ldr	r3, [pc, #480]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a77      	ldr	r2, [pc, #476]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b75      	ldr	r3, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fc02 	bl	8002190 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe fbfe 	bl	8002190 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e2a6      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xc0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fbee 	bl	8002190 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe fbea 	bl	8002190 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e292      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ca:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0xe8>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d075      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e6:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f0:	4b56      	ldr	r3, [pc, #344]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_OscConfig+0x136>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_OscConfig+0x13c>
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d11f      	bne.n	8003a4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x154>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e265      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	4946      	ldr	r1, [pc, #280]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a38:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fb5b 	bl	80020f8 <HAL_InitTick>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d043      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e251      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d023      	beq.n	8003a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a54:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe fb96 	bl	8002190 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a68:	f7fe fb92 	bl	8002190 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e23a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a7a:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	492d      	ldr	r1, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 8003a9a:	e01a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fb72 	bl	8002190 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fb6e 	bl	8002190 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e216      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x1e0>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d041      	beq.n	8003b62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aec:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fe fb4b 	bl	8002190 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fe fb47 	bl	8002190 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1ef      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ef      	beq.n	8003afe <HAL_RCC_OscConfig+0x22e>
 8003b1e:	e020      	b.n	8003b62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fe fb2e 	bl	8002190 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b36:	e00d      	b.n	8003b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fe fb2a 	bl	8002190 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d906      	bls.n	8003b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1d2      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b54:	4b8c      	ldr	r3, [pc, #560]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ea      	bne.n	8003b38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80a6 	beq.w	8003cbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b70:	2300      	movs	r3, #0
 8003b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b74:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2b4>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x2b6>
 8003b84:	2300      	movs	r3, #0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6593      	str	r3, [r2, #88]	; 0x58
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba6:	4b79      	ldr	r3, [pc, #484]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb2:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a75      	ldr	r2, [pc, #468]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe fae7 	bl	8002190 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe fae3 	bl	8002190 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e18b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b6c      	ldr	r3, [pc, #432]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d108      	bne.n	8003bfe <HAL_RCC_OscConfig+0x32e>
 8003bec:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	4a65      	ldr	r2, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfc:	e024      	b.n	8003c48 <HAL_RCC_OscConfig+0x378>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d110      	bne.n	8003c28 <HAL_RCC_OscConfig+0x358>
 8003c06:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	4a5e      	ldr	r2, [pc, #376]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c16:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c26:	e00f      	b.n	8003c48 <HAL_RCC_OscConfig+0x378>
 8003c28:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a52      	ldr	r2, [pc, #328]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fe fa9e 	bl	8002190 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fe fa9a 	bl	8002190 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e140      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6e:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ed      	beq.n	8003c58 <HAL_RCC_OscConfig+0x388>
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fe fa87 	bl	8002190 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe fa83 	bl	8002190 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e129      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9c:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ed      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003caa:	7ffb      	ldrb	r3, [r7, #31]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fa56 	bl	8002190 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce8:	f7fe fa52 	bl	8002190 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0fa      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ef      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x418>
 8003d08:	e01b      	b.n	8003d42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d10:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fa39 	bl	8002190 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d22:	f7fe fa35 	bl	8002190 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0dd      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d34:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ef      	bne.n	8003d22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80d1 	beq.w	8003eee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	f000 808b 	beq.w	8003e70 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d15e      	bne.n	8003e20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fe fa0f 	bl	8002190 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d74:	e00c      	b.n	8003d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fe fa0b 	bl	8002190 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d905      	bls.n	8003d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0b3      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d90:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ec      	bne.n	8003d76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9c:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	4b56      	ldr	r3, [pc, #344]	; (8003efc <HAL_RCC_OscConfig+0x62c>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6a11      	ldr	r1, [r2, #32]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dac:	3a01      	subs	r2, #1
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003db6:	0212      	lsls	r2, r2, #8
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dbe:	0852      	lsrs	r2, r2, #1
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	0552      	lsls	r2, r2, #21
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dca:	0852      	lsrs	r2, r2, #1
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	0652      	lsls	r2, r2, #25
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dd6:	06d2      	lsls	r2, r2, #27
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	4947      	ldr	r1, [pc, #284]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de0:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a44      	ldr	r2, [pc, #272]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dec:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe f9ca 	bl	8002190 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe f9c6 	bl	8002190 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e06e      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x530>
 8003e1e:	e066      	b.n	8003eee <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e2c:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e38:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a2e      	ldr	r2, [pc, #184]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e3e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe f9a2 	bl	8002190 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe f99e 	bl	8002190 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e046      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x580>
 8003e6e:	e03e      	b.n	8003eee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e039      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_RCC_OscConfig+0x628>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d12c      	bne.n	8003eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d123      	bne.n	8003eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d11b      	bne.n	8003eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d113      	bne.n	8003eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	019f800c 	.word	0x019f800c

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e11e      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f18:	4b91      	ldr	r3, [pc, #580]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d910      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b8e      	ldr	r3, [pc, #568]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 020f 	bic.w	r2, r3, #15
 8003f2e:	498c      	ldr	r1, [pc, #560]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b8a      	ldr	r3, [pc, #552]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e106      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d073      	beq.n	800403c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d129      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5c:	4b81      	ldr	r3, [pc, #516]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0f4      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f6c:	f000 f966 	bl	800423c <RCC_GetSysClockFreqFromPLLSource>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4a7c      	ldr	r2, [pc, #496]	; (8004168 <HAL_RCC_ClockConfig+0x268>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d93f      	bls.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f7a:	4b7a      	ldr	r3, [pc, #488]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d033      	beq.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12f      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f9a:	4b72      	ldr	r3, [pc, #456]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa2:	4a70      	ldr	r2, [pc, #448]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e024      	b.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0c6      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc8:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0be      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fd8:	f000 f8ce 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4a61      	ldr	r2, [pc, #388]	; (8004168 <HAL_RCC_ClockConfig+0x268>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d909      	bls.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fee:	4a5d      	ldr	r2, [pc, #372]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4957      	ldr	r1, [pc, #348]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400c:	f7fe f8c0 	bl	8002190 <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fe f8bc 	bl	8002190 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e095      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800405a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800405e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800406c:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004074:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800407a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4936      	ldr	r1, [pc, #216]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
 800408e:	e008      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b80      	cmp	r3, #128	; 0x80
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4a32      	ldr	r2, [pc, #200]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800409c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a2:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d21d      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b0:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 020f 	bic.w	r2, r3, #15
 80040b8:	4929      	ldr	r1, [pc, #164]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040c0:	f7fe f866 	bl	8002190 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fe f862 	bl	8002190 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e03b      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1ed      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4917      	ldr	r1, [pc, #92]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490f      	ldr	r1, [pc, #60]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800412a:	f000 f825 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490c      	ldr	r1, [pc, #48]	; (800416c <HAL_RCC_ClockConfig+0x26c>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	fa22 f303 	lsr.w	r3, r2, r3
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x270>)
 8004148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x274>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd ffd2 	bl	80020f8 <HAL_InitTick>
 8004154:	4603      	mov	r3, r0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
 8004168:	04c4b400 	.word	0x04c4b400
 800416c:	0800503c 	.word	0x0800503c
 8004170:	20000000 	.word	0x20000000
 8004174:	20000004 	.word	0x20000004

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b04      	cmp	r3, #4
 8004188:	d102      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800418a:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <HAL_RCC_GetSysClockFreq+0xbc>)
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	e047      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d102      	bne.n	80041a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_RCC_GetSysClockFreq+0xc0>)
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e03e      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041a2:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d136      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	3301      	adds	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d10c      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d6:	68d2      	ldr	r2, [r2, #12]
 80041d8:	0a12      	lsrs	r2, r2, #8
 80041da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	617b      	str	r3, [r7, #20]
      break;
 80041e4:	e00c      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f0:	68d2      	ldr	r2, [r2, #12]
 80041f2:	0a12      	lsrs	r2, r2, #8
 80041f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
      break;
 80041fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0e5b      	lsrs	r3, r3, #25
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	3301      	adds	r3, #1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e001      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004220:	693b      	ldr	r3, [r7, #16]
}
 8004222:	4618      	mov	r0, r3
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	00f42400 	.word	0x00f42400
 8004238:	007a1200 	.word	0x007a1200

0800423c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d10c      	bne.n	800427a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004260:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800426a:	68d2      	ldr	r2, [r2, #12]
 800426c:	0a12      	lsrs	r2, r2, #8
 800426e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
    break;
 8004278:	e00c      	b.n	8004294 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	0a12      	lsrs	r2, r2, #8
 8004288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
    break;
 8004292:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0e5b      	lsrs	r3, r3, #25
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042ae:	687b      	ldr	r3, [r7, #4]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40021000 	.word	0x40021000
 80042c0:	007a1200 	.word	0x007a1200
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042d0:	2300      	movs	r3, #0
 80042d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d4:	2300      	movs	r3, #0
 80042d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8098 	beq.w	8004416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430e:	2301      	movs	r3, #1
 8004310:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004312:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a39      	ldr	r2, [pc, #228]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800431e:	f7fd ff37 	bl	8002190 <HAL_GetTick>
 8004322:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004324:	e009      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fd ff33 	bl	8002190 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d902      	bls.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	74fb      	strb	r3, [r7, #19]
        break;
 8004338:	e005      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ef      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d159      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800434c:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004356:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	d019      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fd fef3 	bl	8002190 <HAL_GetTick>
 80043aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ac:	e00b      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fd feef 	bl	8002190 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d902      	bls.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	74fb      	strb	r3, [r7, #19]
            break;
 80043c4:	e006      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ec      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043f0:	e008      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043f2:	7cfb      	ldrb	r3, [r7, #19]
 80043f4:	74bb      	strb	r3, [r7, #18]
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004404:	7c7b      	ldrb	r3, [r7, #17]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4ba6      	ldr	r3, [pc, #664]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	4aa5      	ldr	r2, [pc, #660]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004422:	4ba0      	ldr	r3, [pc, #640]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 0203 	bic.w	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	499c      	ldr	r1, [pc, #624]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004444:	4b97      	ldr	r3, [pc, #604]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 020c 	bic.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4994      	ldr	r1, [pc, #592]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004466:	4b8f      	ldr	r3, [pc, #572]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	498b      	ldr	r1, [pc, #556]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004488:	4b86      	ldr	r3, [pc, #536]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4983      	ldr	r1, [pc, #524]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044aa:	4b7e      	ldr	r3, [pc, #504]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	497a      	ldr	r1, [pc, #488]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044cc:	4b75      	ldr	r3, [pc, #468]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	4972      	ldr	r1, [pc, #456]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ee:	4b6d      	ldr	r3, [pc, #436]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4969      	ldr	r1, [pc, #420]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004510:	4b64      	ldr	r3, [pc, #400]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4961      	ldr	r1, [pc, #388]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004532:	4b5c      	ldr	r3, [pc, #368]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4958      	ldr	r1, [pc, #352]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	4950      	ldr	r1, [pc, #320]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d105      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800458c:	4b45      	ldr	r3, [pc, #276]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	4942      	ldr	r1, [pc, #264]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ac:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a3c      	ldr	r2, [pc, #240]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045c4:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4934      	ldr	r1, [pc, #208]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e2:	d105      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e4:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045fc:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	4926      	ldr	r1, [pc, #152]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461a:	d105      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a20      	ldr	r2, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004626:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	4918      	ldr	r1, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	490a      	ldr	r1, [pc, #40]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004696:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004698:	7cbb      	ldrb	r3, [r7, #18]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000

080046a8 <__libc_init_array>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4d0d      	ldr	r5, [pc, #52]	; (80046e0 <__libc_init_array+0x38>)
 80046ac:	4c0d      	ldr	r4, [pc, #52]	; (80046e4 <__libc_init_array+0x3c>)
 80046ae:	1b64      	subs	r4, r4, r5
 80046b0:	10a4      	asrs	r4, r4, #2
 80046b2:	2600      	movs	r6, #0
 80046b4:	42a6      	cmp	r6, r4
 80046b6:	d109      	bne.n	80046cc <__libc_init_array+0x24>
 80046b8:	4d0b      	ldr	r5, [pc, #44]	; (80046e8 <__libc_init_array+0x40>)
 80046ba:	4c0c      	ldr	r4, [pc, #48]	; (80046ec <__libc_init_array+0x44>)
 80046bc:	f000 f9de 	bl	8004a7c <_init>
 80046c0:	1b64      	subs	r4, r4, r5
 80046c2:	10a4      	asrs	r4, r4, #2
 80046c4:	2600      	movs	r6, #0
 80046c6:	42a6      	cmp	r6, r4
 80046c8:	d105      	bne.n	80046d6 <__libc_init_array+0x2e>
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d0:	4798      	blx	r3
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7ee      	b.n	80046b4 <__libc_init_array+0xc>
 80046d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046da:	4798      	blx	r3
 80046dc:	3601      	adds	r6, #1
 80046de:	e7f2      	b.n	80046c6 <__libc_init_array+0x1e>
 80046e0:	08005060 	.word	0x08005060
 80046e4:	08005060 	.word	0x08005060
 80046e8:	08005060 	.word	0x08005060
 80046ec:	08005064 	.word	0x08005064

080046f0 <memset>:
 80046f0:	4402      	add	r2, r0
 80046f2:	4603      	mov	r3, r0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d100      	bne.n	80046fa <memset+0xa>
 80046f8:	4770      	bx	lr
 80046fa:	f803 1b01 	strb.w	r1, [r3], #1
 80046fe:	e7f9      	b.n	80046f4 <memset+0x4>

08004700 <fmax>:
 8004700:	b508      	push	{r3, lr}
 8004702:	ed2d 8b04 	vpush	{d8-d9}
 8004706:	eeb0 8a40 	vmov.f32	s16, s0
 800470a:	eef0 8a60 	vmov.f32	s17, s1
 800470e:	eeb0 9a41 	vmov.f32	s18, s2
 8004712:	eef0 9a61 	vmov.f32	s19, s3
 8004716:	f000 f841 	bl	800479c <__fpclassifyd>
 800471a:	b168      	cbz	r0, 8004738 <fmax+0x38>
 800471c:	eeb0 0a49 	vmov.f32	s0, s18
 8004720:	eef0 0a69 	vmov.f32	s1, s19
 8004724:	f000 f83a 	bl	800479c <__fpclassifyd>
 8004728:	b150      	cbz	r0, 8004740 <fmax+0x40>
 800472a:	ec53 2b19 	vmov	r2, r3, d9
 800472e:	ec51 0b18 	vmov	r0, r1, d8
 8004732:	f7fc f9bd 	bl	8000ab0 <__aeabi_dcmpgt>
 8004736:	b918      	cbnz	r0, 8004740 <fmax+0x40>
 8004738:	eeb0 8a49 	vmov.f32	s16, s18
 800473c:	eef0 8a69 	vmov.f32	s17, s19
 8004740:	eeb0 0a48 	vmov.f32	s0, s16
 8004744:	eef0 0a68 	vmov.f32	s1, s17
 8004748:	ecbd 8b04 	vpop	{d8-d9}
 800474c:	bd08      	pop	{r3, pc}

0800474e <fmin>:
 800474e:	b508      	push	{r3, lr}
 8004750:	ed2d 8b04 	vpush	{d8-d9}
 8004754:	eeb0 8a40 	vmov.f32	s16, s0
 8004758:	eef0 8a60 	vmov.f32	s17, s1
 800475c:	eeb0 9a41 	vmov.f32	s18, s2
 8004760:	eef0 9a61 	vmov.f32	s19, s3
 8004764:	f000 f81a 	bl	800479c <__fpclassifyd>
 8004768:	b168      	cbz	r0, 8004786 <fmin+0x38>
 800476a:	eeb0 0a49 	vmov.f32	s0, s18
 800476e:	eef0 0a69 	vmov.f32	s1, s19
 8004772:	f000 f813 	bl	800479c <__fpclassifyd>
 8004776:	b150      	cbz	r0, 800478e <fmin+0x40>
 8004778:	ec53 2b19 	vmov	r2, r3, d9
 800477c:	ec51 0b18 	vmov	r0, r1, d8
 8004780:	f7fc f978 	bl	8000a74 <__aeabi_dcmplt>
 8004784:	b918      	cbnz	r0, 800478e <fmin+0x40>
 8004786:	eeb0 8a49 	vmov.f32	s16, s18
 800478a:	eef0 8a69 	vmov.f32	s17, s19
 800478e:	eeb0 0a48 	vmov.f32	s0, s16
 8004792:	eef0 0a68 	vmov.f32	s1, s17
 8004796:	ecbd 8b04 	vpop	{d8-d9}
 800479a:	bd08      	pop	{r3, pc}

0800479c <__fpclassifyd>:
 800479c:	ec51 0b10 	vmov	r0, r1, d0
 80047a0:	b510      	push	{r4, lr}
 80047a2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80047a6:	460b      	mov	r3, r1
 80047a8:	d019      	beq.n	80047de <__fpclassifyd+0x42>
 80047aa:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80047ae:	490e      	ldr	r1, [pc, #56]	; (80047e8 <__fpclassifyd+0x4c>)
 80047b0:	428a      	cmp	r2, r1
 80047b2:	d90e      	bls.n	80047d2 <__fpclassifyd+0x36>
 80047b4:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80047b8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80047bc:	428a      	cmp	r2, r1
 80047be:	d908      	bls.n	80047d2 <__fpclassifyd+0x36>
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <__fpclassifyd+0x50>)
 80047c2:	4213      	tst	r3, r2
 80047c4:	d007      	beq.n	80047d6 <__fpclassifyd+0x3a>
 80047c6:	4294      	cmp	r4, r2
 80047c8:	d107      	bne.n	80047da <__fpclassifyd+0x3e>
 80047ca:	fab0 f080 	clz	r0, r0
 80047ce:	0940      	lsrs	r0, r0, #5
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	2004      	movs	r0, #4
 80047d4:	e7fc      	b.n	80047d0 <__fpclassifyd+0x34>
 80047d6:	2003      	movs	r0, #3
 80047d8:	e7fa      	b.n	80047d0 <__fpclassifyd+0x34>
 80047da:	2000      	movs	r0, #0
 80047dc:	e7f8      	b.n	80047d0 <__fpclassifyd+0x34>
 80047de:	2800      	cmp	r0, #0
 80047e0:	d1ee      	bne.n	80047c0 <__fpclassifyd+0x24>
 80047e2:	2002      	movs	r0, #2
 80047e4:	e7f4      	b.n	80047d0 <__fpclassifyd+0x34>
 80047e6:	bf00      	nop
 80047e8:	7fdfffff 	.word	0x7fdfffff
 80047ec:	7ff00000 	.word	0x7ff00000

080047f0 <fmod>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	ed2d 8b02 	vpush	{d8}
 80047f6:	ec57 6b10 	vmov	r6, r7, d0
 80047fa:	ec55 4b11 	vmov	r4, r5, d1
 80047fe:	f000 f825 	bl	800484c <__ieee754_fmod>
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	4630      	mov	r0, r6
 8004808:	4639      	mov	r1, r7
 800480a:	eeb0 8a40 	vmov.f32	s16, s0
 800480e:	eef0 8a60 	vmov.f32	s17, s1
 8004812:	f7fc f957 	bl	8000ac4 <__aeabi_dcmpun>
 8004816:	b990      	cbnz	r0, 800483e <fmod+0x4e>
 8004818:	2200      	movs	r2, #0
 800481a:	2300      	movs	r3, #0
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fc f91e 	bl	8000a60 <__aeabi_dcmpeq>
 8004824:	b158      	cbz	r0, 800483e <fmod+0x4e>
 8004826:	f000 f923 	bl	8004a70 <__errno>
 800482a:	2321      	movs	r3, #33	; 0x21
 800482c:	6003      	str	r3, [r0, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	2300      	movs	r3, #0
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	f7fb ffd5 	bl	80007e4 <__aeabi_ddiv>
 800483a:	ec41 0b18 	vmov	d8, r0, r1
 800483e:	eeb0 0a48 	vmov.f32	s0, s16
 8004842:	eef0 0a68 	vmov.f32	s1, s17
 8004846:	ecbd 8b02 	vpop	{d8}
 800484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800484c <__ieee754_fmod>:
 800484c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	ec53 2b11 	vmov	r2, r3, d1
 8004854:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8004858:	ea5e 0402 	orrs.w	r4, lr, r2
 800485c:	ec51 0b10 	vmov	r0, r1, d0
 8004860:	ee11 7a10 	vmov	r7, s2
 8004864:	ee11 ca10 	vmov	ip, s2
 8004868:	461e      	mov	r6, r3
 800486a:	d00d      	beq.n	8004888 <__ieee754_fmod+0x3c>
 800486c:	4c7a      	ldr	r4, [pc, #488]	; (8004a58 <__ieee754_fmod+0x20c>)
 800486e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8004872:	45a0      	cmp	r8, r4
 8004874:	4689      	mov	r9, r1
 8004876:	dc07      	bgt.n	8004888 <__ieee754_fmod+0x3c>
 8004878:	4254      	negs	r4, r2
 800487a:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8004a64 <__ieee754_fmod+0x218>
 800487e:	4314      	orrs	r4, r2
 8004880:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8004884:	455c      	cmp	r4, fp
 8004886:	d909      	bls.n	800489c <__ieee754_fmod+0x50>
 8004888:	f7fb fe82 	bl	8000590 <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	f7fb ffa8 	bl	80007e4 <__aeabi_ddiv>
 8004894:	ec41 0b10 	vmov	d0, r0, r1
 8004898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489c:	45f0      	cmp	r8, lr
 800489e:	ee10 aa10 	vmov	sl, s0
 80048a2:	ee10 4a10 	vmov	r4, s0
 80048a6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80048aa:	dc09      	bgt.n	80048c0 <__ieee754_fmod+0x74>
 80048ac:	dbf2      	blt.n	8004894 <__ieee754_fmod+0x48>
 80048ae:	4290      	cmp	r0, r2
 80048b0:	d3f0      	bcc.n	8004894 <__ieee754_fmod+0x48>
 80048b2:	d105      	bne.n	80048c0 <__ieee754_fmod+0x74>
 80048b4:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <__ieee754_fmod+0x210>)
 80048b6:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 80048ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80048be:	e7e9      	b.n	8004894 <__ieee754_fmod+0x48>
 80048c0:	ea19 0f0b 	tst.w	r9, fp
 80048c4:	d14a      	bne.n	800495c <__ieee754_fmod+0x110>
 80048c6:	f1b8 0f00 	cmp.w	r8, #0
 80048ca:	d13f      	bne.n	800494c <__ieee754_fmod+0x100>
 80048cc:	4964      	ldr	r1, [pc, #400]	; (8004a60 <__ieee754_fmod+0x214>)
 80048ce:	4653      	mov	r3, sl
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dc38      	bgt.n	8004946 <__ieee754_fmod+0xfa>
 80048d4:	4b63      	ldr	r3, [pc, #396]	; (8004a64 <__ieee754_fmod+0x218>)
 80048d6:	4033      	ands	r3, r6
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d14f      	bne.n	800497c <__ieee754_fmod+0x130>
 80048dc:	f1be 0f00 	cmp.w	lr, #0
 80048e0:	d144      	bne.n	800496c <__ieee754_fmod+0x120>
 80048e2:	4a5f      	ldr	r2, [pc, #380]	; (8004a60 <__ieee754_fmod+0x214>)
 80048e4:	463b      	mov	r3, r7
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	dc3d      	bgt.n	8004966 <__ieee754_fmod+0x11a>
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <__ieee754_fmod+0x21c>)
 80048ec:	4299      	cmp	r1, r3
 80048ee:	db4a      	blt.n	8004986 <__ieee754_fmod+0x13a>
 80048f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f8:	485b      	ldr	r0, [pc, #364]	; (8004a68 <__ieee754_fmod+0x21c>)
 80048fa:	4282      	cmp	r2, r0
 80048fc:	db57      	blt.n	80049ae <__ieee754_fmod+0x162>
 80048fe:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8004902:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8004906:	1a89      	subs	r1, r1, r2
 8004908:	1b98      	subs	r0, r3, r6
 800490a:	eba4 070c 	sub.w	r7, r4, ip
 800490e:	2900      	cmp	r1, #0
 8004910:	d164      	bne.n	80049dc <__ieee754_fmod+0x190>
 8004912:	4564      	cmp	r4, ip
 8004914:	bf38      	it	cc
 8004916:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800491a:	2800      	cmp	r0, #0
 800491c:	bfa4      	itt	ge
 800491e:	463c      	movge	r4, r7
 8004920:	4603      	movge	r3, r0
 8004922:	ea53 0104 	orrs.w	r1, r3, r4
 8004926:	d0c5      	beq.n	80048b4 <__ieee754_fmod+0x68>
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	db6b      	blt.n	8004a06 <__ieee754_fmod+0x1ba>
 800492e:	494e      	ldr	r1, [pc, #312]	; (8004a68 <__ieee754_fmod+0x21c>)
 8004930:	428a      	cmp	r2, r1
 8004932:	db6e      	blt.n	8004a12 <__ieee754_fmod+0x1c6>
 8004934:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004938:	431d      	orrs	r5, r3
 800493a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800493e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8004942:	4620      	mov	r0, r4
 8004944:	e7a6      	b.n	8004894 <__ieee754_fmod+0x48>
 8004946:	3901      	subs	r1, #1
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	e7c1      	b.n	80048d0 <__ieee754_fmod+0x84>
 800494c:	4946      	ldr	r1, [pc, #280]	; (8004a68 <__ieee754_fmod+0x21c>)
 800494e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8004952:	2b00      	cmp	r3, #0
 8004954:	ddbe      	ble.n	80048d4 <__ieee754_fmod+0x88>
 8004956:	3901      	subs	r1, #1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	e7fa      	b.n	8004952 <__ieee754_fmod+0x106>
 800495c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8004960:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004964:	e7b6      	b.n	80048d4 <__ieee754_fmod+0x88>
 8004966:	3a01      	subs	r2, #1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	e7bc      	b.n	80048e6 <__ieee754_fmod+0x9a>
 800496c:	4a3e      	ldr	r2, [pc, #248]	; (8004a68 <__ieee754_fmod+0x21c>)
 800496e:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8004972:	2b00      	cmp	r3, #0
 8004974:	ddb9      	ble.n	80048ea <__ieee754_fmod+0x9e>
 8004976:	3a01      	subs	r2, #1
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	e7fa      	b.n	8004972 <__ieee754_fmod+0x126>
 800497c:	ea4f 522e 	mov.w	r2, lr, asr #20
 8004980:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004984:	e7b1      	b.n	80048ea <__ieee754_fmod+0x9e>
 8004986:	1a5c      	subs	r4, r3, r1
 8004988:	2c1f      	cmp	r4, #31
 800498a:	dc0a      	bgt.n	80049a2 <__ieee754_fmod+0x156>
 800498c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8004990:	fa08 f804 	lsl.w	r8, r8, r4
 8004994:	fa2a f303 	lsr.w	r3, sl, r3
 8004998:	ea43 0308 	orr.w	r3, r3, r8
 800499c:	fa0a f404 	lsl.w	r4, sl, r4
 80049a0:	e7aa      	b.n	80048f8 <__ieee754_fmod+0xac>
 80049a2:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <__ieee754_fmod+0x220>)
 80049a4:	1a5b      	subs	r3, r3, r1
 80049a6:	fa0a f303 	lsl.w	r3, sl, r3
 80049aa:	2400      	movs	r4, #0
 80049ac:	e7a4      	b.n	80048f8 <__ieee754_fmod+0xac>
 80049ae:	eba0 0c02 	sub.w	ip, r0, r2
 80049b2:	f1bc 0f1f 	cmp.w	ip, #31
 80049b6:	dc0a      	bgt.n	80049ce <__ieee754_fmod+0x182>
 80049b8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80049bc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80049c0:	fa27 f606 	lsr.w	r6, r7, r6
 80049c4:	ea46 060e 	orr.w	r6, r6, lr
 80049c8:	fa07 fc0c 	lsl.w	ip, r7, ip
 80049cc:	e79b      	b.n	8004906 <__ieee754_fmod+0xba>
 80049ce:	4e27      	ldr	r6, [pc, #156]	; (8004a6c <__ieee754_fmod+0x220>)
 80049d0:	1ab6      	subs	r6, r6, r2
 80049d2:	fa07 f606 	lsl.w	r6, r7, r6
 80049d6:	f04f 0c00 	mov.w	ip, #0
 80049da:	e794      	b.n	8004906 <__ieee754_fmod+0xba>
 80049dc:	4564      	cmp	r4, ip
 80049de:	bf38      	it	cc
 80049e0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80049e4:	2800      	cmp	r0, #0
 80049e6:	da05      	bge.n	80049f4 <__ieee754_fmod+0x1a8>
 80049e8:	0fe0      	lsrs	r0, r4, #31
 80049ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80049ee:	0064      	lsls	r4, r4, #1
 80049f0:	3901      	subs	r1, #1
 80049f2:	e789      	b.n	8004908 <__ieee754_fmod+0xbc>
 80049f4:	ea50 0307 	orrs.w	r3, r0, r7
 80049f8:	f43f af5c 	beq.w	80048b4 <__ieee754_fmod+0x68>
 80049fc:	0ffb      	lsrs	r3, r7, #31
 80049fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004a02:	007c      	lsls	r4, r7, #1
 8004a04:	e7f4      	b.n	80049f0 <__ieee754_fmod+0x1a4>
 8004a06:	0fe1      	lsrs	r1, r4, #31
 8004a08:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004a0c:	0064      	lsls	r4, r4, #1
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	e78a      	b.n	8004928 <__ieee754_fmod+0xdc>
 8004a12:	1a89      	subs	r1, r1, r2
 8004a14:	2914      	cmp	r1, #20
 8004a16:	dc0a      	bgt.n	8004a2e <__ieee754_fmod+0x1e2>
 8004a18:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8004a1c:	fa03 f202 	lsl.w	r2, r3, r2
 8004a20:	40cc      	lsrs	r4, r1
 8004a22:	4322      	orrs	r2, r4
 8004a24:	410b      	asrs	r3, r1
 8004a26:	ea43 0105 	orr.w	r1, r3, r5
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	e732      	b.n	8004894 <__ieee754_fmod+0x48>
 8004a2e:	291f      	cmp	r1, #31
 8004a30:	dc07      	bgt.n	8004a42 <__ieee754_fmod+0x1f6>
 8004a32:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8004a36:	40cc      	lsrs	r4, r1
 8004a38:	fa03 f202 	lsl.w	r2, r3, r2
 8004a3c:	4322      	orrs	r2, r4
 8004a3e:	462b      	mov	r3, r5
 8004a40:	e7f1      	b.n	8004a26 <__ieee754_fmod+0x1da>
 8004a42:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8004a46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004a4a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8004a4e:	32e2      	adds	r2, #226	; 0xe2
 8004a50:	fa43 f202 	asr.w	r2, r3, r2
 8004a54:	e7f3      	b.n	8004a3e <__ieee754_fmod+0x1f2>
 8004a56:	bf00      	nop
 8004a58:	7fefffff 	.word	0x7fefffff
 8004a5c:	08005050 	.word	0x08005050
 8004a60:	fffffbed 	.word	0xfffffbed
 8004a64:	7ff00000 	.word	0x7ff00000
 8004a68:	fffffc02 	.word	0xfffffc02
 8004a6c:	fffffbe2 	.word	0xfffffbe2

08004a70 <__errno>:
 8004a70:	4b01      	ldr	r3, [pc, #4]	; (8004a78 <__errno+0x8>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr

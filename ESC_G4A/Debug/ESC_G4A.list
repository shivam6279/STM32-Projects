
ESC_G4A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cbc  08004cbc  00020b94  2**0
                  CONTENTS
  4 .ARM          00000000  08004cbc  08004cbc  00020b94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cbc  08004cbc  00020b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b94  20000000  08004cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000b94  08005858  00020b94  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  08005858  00020cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020b94  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccb0  00000000  00000000  00020bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002071  00000000  00000000  0002d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00030500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002001e  00000000  00000000  00031020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d823  00000000  00000000  0005103e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7af6  00000000  00000000  0005e861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f4  00000000  00000000  001363a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000b94 	.word	0x20000b94
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004c94 	.word	0x08004c94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000b98 	.word	0x20000b98
 8000214:	08004c94 	.word	0x08004c94

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	0000      	movs	r0, r0
	...

08000a58 <TIM3_IRQHandler>:
volatile uint8_t current_phase = 1;
volatile float phase_timing = 0;
volatile uint8_t zero_crossing_flag = 0;

//FOC Loop
void TIM3_IRQHandler(void) {
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	static int32_t cnt, pre_cnt;
	static float diff;
	if(TIM3->SR & 0x1){
 8000a5c:	4b70      	ldr	r3, [pc, #448]	; (8000c20 <TIM3_IRQHandler+0x1c8>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f000 80d2 	beq.w	8000c0e <TIM3_IRQHandler+0x1b6>
		TIM3->SR &= ~(0x1);
 8000a6a:	4b6d      	ldr	r3, [pc, #436]	; (8000c20 <TIM3_IRQHandler+0x1c8>)
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	4a6c      	ldr	r2, [pc, #432]	; (8000c20 <TIM3_IRQHandler+0x1c8>)
 8000a70:	f023 0301 	bic.w	r3, r3, #1
 8000a74:	6113      	str	r3, [r2, #16]

//		GPIOB->BSRR |= 1 << 3;

		pre_cnt = cnt;
 8000a76:	4b6b      	ldr	r3, [pc, #428]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a6b      	ldr	r2, [pc, #428]	; (8000c28 <TIM3_IRQHandler+0x1d0>)
 8000a7c:	6013      	str	r3, [r2, #0]
		cnt = -(int16_t)TIM8->CNT;
 8000a7e:	4b6b      	ldr	r3, [pc, #428]	; (8000c2c <TIM3_IRQHandler+0x1d4>)
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	425b      	negs	r3, r3
 8000a86:	4a67      	ldr	r2, [pc, #412]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000a88:	6013      	str	r3, [r2, #0]
		cnt -= motor_zero_offset;
 8000a8a:	4b66      	ldr	r3, [pc, #408]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <TIM3_IRQHandler+0x1d8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a63      	ldr	r2, [pc, #396]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000a96:	6013      	str	r3, [r2, #0]
		if(cnt < 0) {
 8000a98:	4b62      	ldr	r3, [pc, #392]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	da05      	bge.n	8000aac <TIM3_IRQHandler+0x54>
			cnt += ENCODER_RES;
 8000aa0:	4b60      	ldr	r3, [pc, #384]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000aa8:	4a5e      	ldr	r2, [pc, #376]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000aaa:	6013      	str	r3, [r2, #0]
		}
		cnt = cnt % ENCODER_RES;
 8000aac:	4b5d      	ldr	r3, [pc, #372]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	425a      	negs	r2, r3
 8000ab2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ab6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000aba:	bf58      	it	pl
 8000abc:	4253      	negpl	r3, r2
 8000abe:	4a59      	ldr	r2, [pc, #356]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000ac0:	6013      	str	r3, [r2, #0]
//		cnt &= 0x7FFF;

		if(diff > ENCODER_RES/2) {
 8000ac2:	4b5c      	ldr	r3, [pc, #368]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000ac4:	edd3 7a00 	vldr	s15, [r3]
 8000ac8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000c38 <TIM3_IRQHandler+0x1e0>
 8000acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	dd0a      	ble.n	8000aec <TIM3_IRQHandler+0x94>
			diff -= ENCODER_RES;
 8000ad6:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000ad8:	edd3 7a00 	vldr	s15, [r3]
 8000adc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000c3c <TIM3_IRQHandler+0x1e4>
 8000ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ae4:	4b53      	ldr	r3, [pc, #332]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000ae6:	edc3 7a00 	vstr	s15, [r3]
 8000aea:	e013      	b.n	8000b14 <TIM3_IRQHandler+0xbc>
		} else if(diff < -ENCODER_RES/2) {
 8000aec:	4b51      	ldr	r3, [pc, #324]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000aee:	edd3 7a00 	vldr	s15, [r3]
 8000af2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000c40 <TIM3_IRQHandler+0x1e8>
 8000af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	d509      	bpl.n	8000b14 <TIM3_IRQHandler+0xbc>
			diff += ENCODER_RES;
 8000b00:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000c3c <TIM3_IRQHandler+0x1e4>
 8000b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b0e:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]
		}
		diff = ((float)cnt - (float)pre_cnt) / ENCODER_RES * 50000.0f * 60.0f;
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b20:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <TIM3_IRQHandler+0x1d0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b30:	eddf 6a42 	vldr	s13, [pc, #264]	; 8000c3c <TIM3_IRQHandler+0x1e4>
 8000b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b38:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000c44 <TIM3_IRQHandler+0x1ec>
 8000b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b40:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000c48 <TIM3_IRQHandler+0x1f0>
 8000b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b48:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000b4a:	edc3 7a00 	vstr	s15, [r3]
		if(fabs(diff) > 10000) {
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000b50:	edd3 7a00 	vldr	s15, [r3]
 8000b54:	eef0 7ae7 	vabs.f32	s15, s15
 8000b58:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000c4c <TIM3_IRQHandler+0x1f4>
 8000b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b64:	dd03      	ble.n	8000b6e <TIM3_IRQHandler+0x116>
			diff = rpm;
 8000b66:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <TIM3_IRQHandler+0x1f8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000b6c:	6013      	str	r3, [r2, #0]
		}
		rpm = RPM_LPF * rpm + (1.0-RPM_LPF) * diff;
 8000b6e:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <TIM3_IRQHandler+0x1f8>)
 8000b70:	edd3 7a00 	vldr	s15, [r3]
 8000b74:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000c54 <TIM3_IRQHandler+0x1fc>
 8000b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7c:	ee17 0a90 	vmov	r0, s15
 8000b80:	f7ff fcae 	bl	80004e0 <__aeabi_f2d>
 8000b84:	4604      	mov	r4, r0
 8000b86:	460d      	mov	r5, r1
 8000b88:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <TIM3_IRQHandler+0x1dc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fca7 	bl	80004e0 <__aeabi_f2d>
 8000b92:	a321      	add	r3, pc, #132	; (adr r3, 8000c18 <TIM3_IRQHandler+0x1c0>)
 8000b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b98:	f7ff fcfa 	bl	8000590 <__aeabi_dmul>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	f7ff fb3e 	bl	8000224 <__adddf3>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4610      	mov	r0, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff ff00 	bl	80009b4 <__aeabi_d2f>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <TIM3_IRQHandler+0x1f8>)
 8000bb8:	6013      	str	r3, [r2, #0]

		position = (float)cnt * 360.0f / ENCODER_RES;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <TIM3_IRQHandler+0x1cc>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000c58 <TIM3_IRQHandler+0x200>
 8000bca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bce:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000c3c <TIM3_IRQHandler+0x1e4>
 8000bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <TIM3_IRQHandler+0x204>)
 8000bd8:	edc3 7a00 	vstr	s15, [r3]

		if(motor_mode) {
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <TIM3_IRQHandler+0x208>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d013      	beq.n	8000c0e <TIM3_IRQHandler+0x1b6>
			setPhaseVoltage(power, position * POLE_PAIRS + PHASE_DIFF);
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <TIM3_IRQHandler+0x20c>)
 8000be8:	ed93 7a00 	vldr	s14, [r3]
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <TIM3_IRQHandler+0x204>)
 8000bee:	edd3 7a00 	vldr	s15, [r3]
 8000bf2:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000bf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bfa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000c68 <TIM3_IRQHandler+0x210>
 8000bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c02:	eef0 0a67 	vmov.f32	s1, s15
 8000c06:	eeb0 0a47 	vmov.f32	s0, s14
 8000c0a:	f000 f8b9 	bl	8000d80 <setPhaseVoltage>
		}

//		GPIOB->BSRR |= 1 << 19;
	}
}
 8000c0e:	bf00      	nop
 8000c10:	bdb0      	pop	{r4, r5, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	f3af 8000 	nop.w
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	3f847ae0 	.word	0x3f847ae0
 8000c20:	40000400 	.word	0x40000400
 8000c24:	20000bc8 	.word	0x20000bc8
 8000c28:	20000bcc 	.word	0x20000bcc
 8000c2c:	40013400 	.word	0x40013400
 8000c30:	20000b40 	.word	0x20000b40
 8000c34:	20000bd0 	.word	0x20000bd0
 8000c38:	46000000 	.word	0x46000000
 8000c3c:	46800000 	.word	0x46800000
 8000c40:	c6000000 	.word	0xc6000000
 8000c44:	47435000 	.word	0x47435000
 8000c48:	42700000 	.word	0x42700000
 8000c4c:	461c4000 	.word	0x461c4000
 8000c50:	20000bb4 	.word	0x20000bb4
 8000c54:	3f7d70a4 	.word	0x3f7d70a4
 8000c58:	43b40000 	.word	0x43b40000
 8000c5c:	20000bb0 	.word	0x20000bb0
 8000c60:	20000bbc 	.word	0x20000bbc
 8000c64:	20000bb8 	.word	0x20000bb8
 8000c68:	42b40000 	.word	0x42b40000
 8000c6c:	00000000 	.word	0x00000000

08000c70 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	if(TIM1->SR & 1 << 4){
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <TIM1_CC_IRQHandler+0xd0>)
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d053      	beq.n	8000d28 <TIM1_CC_IRQHandler+0xb8>
		TIM1->SR &= ~(1 << 4);
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <TIM1_CC_IRQHandler+0xd0>)
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <TIM1_CC_IRQHandler+0xd0>)
 8000c86:	f023 0310 	bic.w	r3, r3, #16
 8000c8a:	6113      	str	r3, [r2, #16]
		if(get_COMP_value(current_phase) && TIM2->CNT > 25) {
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <TIM1_CC_IRQHandler+0xd4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fbde 	bl	8001454 <get_COMP_value>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d044      	beq.n	8000d28 <TIM1_CC_IRQHandler+0xb8>
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	2b19      	cmp	r3, #25
 8000ca6:	d93f      	bls.n	8000d28 <TIM1_CC_IRQHandler+0xb8>
//			phase_timing = TIM2->CNT;
			phase_timing = 0.9 * phase_timing + 0.1 * (float)TIM2->CNT;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <TIM1_CC_IRQHandler+0xd8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc17 	bl	80004e0 <__aeabi_f2d>
 8000cb2:	a31f      	add	r3, pc, #124	; (adr r3, 8000d30 <TIM1_CC_IRQHandler+0xc0>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f7ff fc6a 	bl	8000590 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4614      	mov	r4, r2
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd2:	ee17 0a90 	vmov	r0, s15
 8000cd6:	f7ff fc03 	bl	80004e0 <__aeabi_f2d>
 8000cda:	a317      	add	r3, pc, #92	; (adr r3, 8000d38 <TIM1_CC_IRQHandler+0xc8>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fc56 	bl	8000590 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	f7ff fa9a 	bl	8000224 <__adddf3>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fe5c 	bl	80009b4 <__aeabi_d2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <TIM1_CC_IRQHandler+0xd8>)
 8000d00:	6013      	str	r3, [r2, #0]

			zero_crossing_flag = 1;
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <TIM1_CC_IRQHandler+0xdc>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]

			GPIOB->BSRR |= 1 << 3;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <TIM1_CC_IRQHandler+0xe0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <TIM1_CC_IRQHandler+0xe0>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]

			TIM2->CNT = 0;
 8000d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
//			TIM2-> ARR = phase_timing;
//			TIM2->DIER |= 1;

			TIM1->DIER &= ~(1 << 4);
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <TIM1_CC_IRQHandler+0xd0>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <TIM1_CC_IRQHandler+0xd0>)
 8000d22:	f023 0310 	bic.w	r3, r3, #16
 8000d26:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8000d28:	bf00      	nop
 8000d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d2c:	f3af 8000 	nop.w
 8000d30:	cccccccd 	.word	0xcccccccd
 8000d34:	3feccccc 	.word	0x3feccccc
 8000d38:	9999999a 	.word	0x9999999a
 8000d3c:	3fb99999 	.word	0x3fb99999
 8000d40:	40012c00 	.word	0x40012c00
 8000d44:	20000b44 	.word	0x20000b44
 8000d48:	20000bc0 	.word	0x20000bc0
 8000d4c:	20000bc4 	.word	0x20000bc4
 8000d50:	48000400 	.word	0x48000400

08000d54 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	if(TIM2->SR & 0x1){
 8000d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <TIM2_IRQHandler+0x22>
		TIM2->SR &= ~(0x1);
 8000d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	6113      	str	r3, [r2, #16]

//		current_phase = ((++current_phase - 1) % 6 + 1);
	}
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <setPhaseVoltage>:

inline void setPhaseVoltage(float p, float angle_el) {
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d8a:	edc7 0a00 	vstr	s1, [r7]
    static float pwm_u, pwm_v, pwm_w;

    p = p < -1.0 ? -1.0 : p > 1.0 ? 1.0 : p;
 8000d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	d501      	bpl.n	8000da4 <setPhaseVoltage+0x24>
 8000da0:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <setPhaseVoltage+0x248>)
 8000da2:	e00c      	b.n	8000dbe <setPhaseVoltage+0x3e>
 8000da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	dd02      	ble.n	8000dbc <setPhaseVoltage+0x3c>
 8000db6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000dba:	e000      	b.n	8000dbe <setPhaseVoltage+0x3e>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	607b      	str	r3, [r7, #4]
//    p = -p;

	static int index;

	if(p < 0) {
 8000dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	d50d      	bpl.n	8000dea <setPhaseVoltage+0x6a>
		angle_el += 180;
 8000dce:	edd7 7a00 	vldr	s15, [r7]
 8000dd2:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8000fcc <setPhaseVoltage+0x24c>
 8000dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dda:	edc7 7a00 	vstr	s15, [r7]
		p = -p;
 8000dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de2:	eef1 7a67 	vneg.f32	s15, s15
 8000de6:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	angle_el *= 2;
 8000dea:	edd7 7a00 	vldr	s15, [r7]
 8000dee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000df2:	edc7 7a00 	vstr	s15, [r7]
	index = angle_el;
 8000df6:	edd7 7a00 	vldr	s15, [r7]
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 2a90 	vmov	r2, s15
 8000e02:	4b73      	ldr	r3, [pc, #460]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000e04:	601a      	str	r2, [r3, #0]
	index = index % 720;
 8000e06:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a72      	ldr	r2, [pc, #456]	; (8000fd4 <setPhaseVoltage+0x254>)
 8000e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e10:	441a      	add	r2, r3
 8000e12:	1251      	asrs	r1, r2, #9
 8000e14:	17da      	asrs	r2, r3, #31
 8000e16:	1a8a      	subs	r2, r1, r2
 8000e18:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000e1c:	fb01 f202 	mul.w	r2, r1, r2
 8000e20:	1a9a      	subs	r2, r3, r2
 8000e22:	4b6b      	ldr	r3, [pc, #428]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000e24:	601a      	str	r2, [r3, #0]
//	index = angle_el;
//	index = (index < 0.0) | (index >= SVPWM_SIZE) ? 0 : index;



	pwm_u = 0.5 * SVPWM_table[index] * p;
 8000e26:	4b6a      	ldr	r3, [pc, #424]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a6b      	ldr	r2, [pc, #428]	; (8000fd8 <setPhaseVoltage+0x258>)
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb54 	bl	80004e0 <__aeabi_f2d>
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <setPhaseVoltage+0x25c>)
 8000e3e:	f7ff fba7 	bl	8000590 <__aeabi_dmul>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4614      	mov	r4, r2
 8000e48:	461d      	mov	r5, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fb48 	bl	80004e0 <__aeabi_f2d>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4620      	mov	r0, r4
 8000e56:	4629      	mov	r1, r5
 8000e58:	f7ff fb9a 	bl	8000590 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fda6 	bl	80009b4 <__aeabi_d2f>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4a5d      	ldr	r2, [pc, #372]	; (8000fe0 <setPhaseVoltage+0x260>)
 8000e6c:	6013      	str	r3, [r2, #0]

	index = (index + SVPWM_INCREMENT) % SVPWM_SIZE;
 8000e6e:	4b58      	ldr	r3, [pc, #352]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	33f0      	adds	r3, #240	; 0xf0
 8000e74:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <setPhaseVoltage+0x254>)
 8000e76:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7a:	441a      	add	r2, r3
 8000e7c:	1251      	asrs	r1, r2, #9
 8000e7e:	17da      	asrs	r2, r3, #31
 8000e80:	1a8a      	subs	r2, r1, r2
 8000e82:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000e86:	fb01 f202 	mul.w	r2, r1, r2
 8000e8a:	1a9a      	subs	r2, r3, r2
 8000e8c:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000e8e:	601a      	str	r2, [r3, #0]
	pwm_v = 0.5 * SVPWM_table[index] * p;
 8000e90:	4b4f      	ldr	r3, [pc, #316]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <setPhaseVoltage+0x258>)
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fb1f 	bl	80004e0 <__aeabi_f2d>
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <setPhaseVoltage+0x25c>)
 8000ea8:	f7ff fb72 	bl	8000590 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4614      	mov	r4, r2
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fb13 	bl	80004e0 <__aeabi_f2d>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	f7ff fb65 	bl	8000590 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff fd71 	bl	80009b4 <__aeabi_d2f>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <setPhaseVoltage+0x264>)
 8000ed6:	6013      	str	r3, [r2, #0]

	index = (index + SVPWM_INCREMENT) % SVPWM_SIZE;
 8000ed8:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	33f0      	adds	r3, #240	; 0xf0
 8000ede:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <setPhaseVoltage+0x254>)
 8000ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee4:	441a      	add	r2, r3
 8000ee6:	1251      	asrs	r1, r2, #9
 8000ee8:	17da      	asrs	r2, r3, #31
 8000eea:	1a8a      	subs	r2, r1, r2
 8000eec:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000ef0:	fb01 f202 	mul.w	r2, r1, r2
 8000ef4:	1a9a      	subs	r2, r3, r2
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000ef8:	601a      	str	r2, [r3, #0]
	pwm_w = 0.5 * SVPWM_table[index] * p;
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <setPhaseVoltage+0x250>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <setPhaseVoltage+0x258>)
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff faea 	bl	80004e0 <__aeabi_f2d>
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <setPhaseVoltage+0x25c>)
 8000f12:	f7ff fb3d 	bl	8000590 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fade 	bl	80004e0 <__aeabi_f2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff fb30 	bl	8000590 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3c 	bl	80009b4 <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <setPhaseVoltage+0x268>)
 8000f40:	6013      	str	r3, [r2, #0]

	static float center;
	center = MAX_PWM / 2.0;
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <setPhaseVoltage+0x26c>)
 8000f44:	4a2a      	ldr	r2, [pc, #168]	; (8000ff0 <setPhaseVoltage+0x270>)
 8000f46:	601a      	str	r2, [r3, #0]
//	static float Umin, Umax;
//	Umin = fmin(pwm_u, fmin(pwm_v, pwm_w));
//	Umax = fmax(pwm_u, fmax(pwm_v, pwm_w));
//	center -= (Umax+Umin) / 2;
	pwm_u += center;
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <setPhaseVoltage+0x260>)
 8000f4a:	ed93 7a00 	vldr	s14, [r3]
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <setPhaseVoltage+0x26c>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <setPhaseVoltage+0x260>)
 8000f5a:	edc3 7a00 	vstr	s15, [r3]
	pwm_v += center;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <setPhaseVoltage+0x264>)
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <setPhaseVoltage+0x26c>)
 8000f66:	edd3 7a00 	vldr	s15, [r3]
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <setPhaseVoltage+0x264>)
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	pwm_w += center;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <setPhaseVoltage+0x268>)
 8000f76:	ed93 7a00 	vldr	s14, [r3]
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <setPhaseVoltage+0x26c>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <setPhaseVoltage+0x268>)
 8000f86:	edc3 7a00 	vstr	s15, [r3]

	set_motor_pwm(pwm_u, pwm_v, pwm_w);
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <setPhaseVoltage+0x260>)
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f94:	ee17 3a90 	vmov	r3, s15
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <setPhaseVoltage+0x264>)
 8000f9c:	edd2 7a00 	vldr	s15, [r2]
 8000fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa4:	ee17 2a90 	vmov	r2, s15
 8000fa8:	b291      	uxth	r1, r2
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <setPhaseVoltage+0x268>)
 8000fac:	edd2 7a00 	vldr	s15, [r2]
 8000fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb4:	ee17 2a90 	vmov	r2, s15
 8000fb8:	b292      	uxth	r2, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fa8e 	bl	80014dc <set_motor_pwm>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc8:	bf800000 	.word	0xbf800000
 8000fcc:	43340000 	.word	0x43340000
 8000fd0:	20000bd4 	.word	0x20000bd4
 8000fd4:	b60b60b7 	.word	0xb60b60b7
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	3fe00000 	.word	0x3fe00000
 8000fe0:	20000bd8 	.word	0x20000bd8
 8000fe4:	20000bdc 	.word	0x20000bdc
 8000fe8:	20000be0 	.word	0x20000be0
 8000fec:	20000be4 	.word	0x20000be4
 8000ff0:	43dac000 	.word	0x43dac000

08000ff4 <BLDC_phase>:

void BLDC_phase(unsigned char phase, float p) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	ed87 0a00 	vstr	s0, [r7]
 8001000:	71fb      	strb	r3, [r7, #7]
	if(phase == 1) {
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d12a      	bne.n	800105e <BLDC_phase+0x6a>
		TIM1->CCER |= TIM_CCER_CC1NP;
 8001008:	4b8a      	ldr	r3, [pc, #552]	; (8001234 <BLDC_phase+0x240>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a89      	ldr	r2, [pc, #548]	; (8001234 <BLDC_phase+0x240>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8001014:	4b87      	ldr	r3, [pc, #540]	; (8001234 <BLDC_phase+0x240>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a86      	ldr	r2, [pc, #536]	; (8001234 <BLDC_phase+0x240>)
 800101a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800101e:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8001020:	4b84      	ldr	r3, [pc, #528]	; (8001234 <BLDC_phase+0x240>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a83      	ldr	r2, [pc, #524]	; (8001234 <BLDC_phase+0x240>)
 8001026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800102a:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 800102c:	4b81      	ldr	r3, [pc, #516]	; (8001234 <BLDC_phase+0x240>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a80      	ldr	r2, [pc, #512]	; (8001234 <BLDC_phase+0x240>)
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8001038:	4b7e      	ldr	r3, [pc, #504]	; (8001234 <BLDC_phase+0x240>)
 800103a:	2200      	movs	r2, #0
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p * MAX_PWM;
 800103e:	edd7 7a00 	vldr	s15, [r7]
 8001042:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001238 <BLDC_phase+0x244>
 8001046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104a:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <BLDC_phase+0x240>)
 800104c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001050:	ee17 2a90 	vmov	r2, s15
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001056:	4b77      	ldr	r3, [pc, #476]	; (8001234 <BLDC_phase+0x240>)
 8001058:	2200      	movs	r2, #0
 800105a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->EGR |= TIM_EGR_COMG;
		TIM1->CCR1 = p * MAX_PWM;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 800105c:	e0e4      	b.n	8001228 <BLDC_phase+0x234>
	} else if(phase == 2) {
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d12a      	bne.n	80010ba <BLDC_phase+0xc6>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <BLDC_phase+0x240>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	4a72      	ldr	r2, [pc, #456]	; (8001234 <BLDC_phase+0x240>)
 800106a:	f023 0308 	bic.w	r3, r3, #8
 800106e:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8001070:	4b70      	ldr	r3, [pc, #448]	; (8001234 <BLDC_phase+0x240>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a6f      	ldr	r2, [pc, #444]	; (8001234 <BLDC_phase+0x240>)
 8001076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800107a:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 800107c:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <BLDC_phase+0x240>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a6c      	ldr	r2, [pc, #432]	; (8001234 <BLDC_phase+0x240>)
 8001082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001086:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <BLDC_phase+0x240>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	4a69      	ldr	r2, [pc, #420]	; (8001234 <BLDC_phase+0x240>)
 800108e:	f043 0320 	orr.w	r3, r3, #32
 8001092:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8001094:	4b67      	ldr	r3, [pc, #412]	; (8001234 <BLDC_phase+0x240>)
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p * MAX_PWM;
 800109a:	edd7 7a00 	vldr	s15, [r7]
 800109e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001238 <BLDC_phase+0x244>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	4b63      	ldr	r3, [pc, #396]	; (8001234 <BLDC_phase+0x240>)
 80010a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <BLDC_phase+0x240>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010b8:	e0b6      	b.n	8001228 <BLDC_phase+0x234>
	} else if(phase == 3) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d12a      	bne.n	8001116 <BLDC_phase+0x122>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80010c0:	4b5c      	ldr	r3, [pc, #368]	; (8001234 <BLDC_phase+0x240>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a5b      	ldr	r2, [pc, #364]	; (8001234 <BLDC_phase+0x240>)
 80010c6:	f023 0308 	bic.w	r3, r3, #8
 80010ca:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 80010cc:	4b59      	ldr	r3, [pc, #356]	; (8001234 <BLDC_phase+0x240>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a58      	ldr	r2, [pc, #352]	; (8001234 <BLDC_phase+0x240>)
 80010d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d6:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80010d8:	4b56      	ldr	r3, [pc, #344]	; (8001234 <BLDC_phase+0x240>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a55      	ldr	r2, [pc, #340]	; (8001234 <BLDC_phase+0x240>)
 80010de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010e2:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80010e4:	4b53      	ldr	r3, [pc, #332]	; (8001234 <BLDC_phase+0x240>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <BLDC_phase+0x240>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 80010f0:	4b50      	ldr	r3, [pc, #320]	; (8001234 <BLDC_phase+0x240>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80010f6:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <BLDC_phase+0x240>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = p * MAX_PWM;
 80010fc:	edd7 7a00 	vldr	s15, [r7]
 8001100:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001238 <BLDC_phase+0x244>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <BLDC_phase+0x240>)
 800110a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110e:	ee17 2a90 	vmov	r2, s15
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001114:	e088      	b.n	8001228 <BLDC_phase+0x234>
	} else if(phase == 4) {
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d12a      	bne.n	8001172 <BLDC_phase+0x17e>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 800111c:	4b45      	ldr	r3, [pc, #276]	; (8001234 <BLDC_phase+0x240>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a44      	ldr	r2, [pc, #272]	; (8001234 <BLDC_phase+0x240>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8001128:	4b42      	ldr	r3, [pc, #264]	; (8001234 <BLDC_phase+0x240>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a41      	ldr	r2, [pc, #260]	; (8001234 <BLDC_phase+0x240>)
 800112e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001132:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8001134:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <BLDC_phase+0x240>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4a3e      	ldr	r2, [pc, #248]	; (8001234 <BLDC_phase+0x240>)
 800113a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800113e:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <BLDC_phase+0x240>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	4a3b      	ldr	r2, [pc, #236]	; (8001234 <BLDC_phase+0x240>)
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 800114c:	4b39      	ldr	r3, [pc, #228]	; (8001234 <BLDC_phase+0x240>)
 800114e:	2200      	movs	r2, #0
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <BLDC_phase+0x240>)
 8001154:	2200      	movs	r2, #0
 8001156:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p * MAX_PWM;
 8001158:	edd7 7a00 	vldr	s15, [r7]
 800115c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001238 <BLDC_phase+0x244>
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	4b33      	ldr	r3, [pc, #204]	; (8001234 <BLDC_phase+0x240>)
 8001166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116a:	ee17 2a90 	vmov	r2, s15
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001170:	e05a      	b.n	8001228 <BLDC_phase+0x234>
	} else if(phase == 5) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d12a      	bne.n	80011ce <BLDC_phase+0x1da>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <BLDC_phase+0x240>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <BLDC_phase+0x240>)
 800117e:	f023 0308 	bic.w	r3, r3, #8
 8001182:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <BLDC_phase+0x240>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <BLDC_phase+0x240>)
 800118a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800118e:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <BLDC_phase+0x240>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <BLDC_phase+0x240>)
 8001196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119a:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <BLDC_phase+0x240>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	4a24      	ldr	r2, [pc, #144]	; (8001234 <BLDC_phase+0x240>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p * MAX_PWM;
 80011a8:	edd7 7a00 	vldr	s15, [r7]
 80011ac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001238 <BLDC_phase+0x244>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <BLDC_phase+0x240>)
 80011b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ba:	ee17 2a90 	vmov	r2, s15
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <BLDC_phase+0x240>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <BLDC_phase+0x240>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011cc:	e02c      	b.n	8001228 <BLDC_phase+0x234>
	} else if(phase == 6) {
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d129      	bne.n	8001228 <BLDC_phase+0x234>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <BLDC_phase+0x240>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <BLDC_phase+0x240>)
 80011da:	f023 0308 	bic.w	r3, r3, #8
 80011de:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <BLDC_phase+0x240>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a13      	ldr	r2, [pc, #76]	; (8001234 <BLDC_phase+0x240>)
 80011e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ea:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <BLDC_phase+0x240>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a10      	ldr	r2, [pc, #64]	; (8001234 <BLDC_phase+0x240>)
 80011f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011f6:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <BLDC_phase+0x240>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <BLDC_phase+0x240>)
 80011fe:	f043 0320 	orr.w	r3, r3, #32
 8001202:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p * MAX_PWM;
 8001204:	edd7 7a00 	vldr	s15, [r7]
 8001208:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001238 <BLDC_phase+0x244>
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <BLDC_phase+0x240>)
 8001212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001216:	ee17 2a90 	vmov	r2, s15
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <BLDC_phase+0x240>)
 800121e:	2200      	movs	r2, #0
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <BLDC_phase+0x240>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40012c00 	.word	0x40012c00
 8001238:	445ac000 	.word	0x445ac000

0800123c <BEMF_phase>:

void BEMF_phase(uint8_t phase) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	COMP1->CSR &= ~1;
 8001246:	4b80      	ldr	r3, [pc, #512]	; (8001448 <BEMF_phase+0x20c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7f      	ldr	r2, [pc, #508]	; (8001448 <BEMF_phase+0x20c>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6013      	str	r3, [r2, #0]
	COMP2->CSR &= ~1;
 8001252:	4b7e      	ldr	r3, [pc, #504]	; (800144c <BEMF_phase+0x210>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7d      	ldr	r2, [pc, #500]	; (800144c <BEMF_phase+0x210>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6013      	str	r3, [r2, #0]

	// W falling
	if(phase == 1) {
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d11e      	bne.n	80012a2 <BEMF_phase+0x66>
		EXTI->IMR1 &= ~(1 << 21);
 8001264:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <BEMF_phase+0x214>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a79      	ldr	r2, [pc, #484]	; (8001450 <BEMF_phase+0x214>)
 800126a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800126e:	6013      	str	r3, [r2, #0]
		EXTI->IMR1 |= 1 << 22;
 8001270:	4b77      	ldr	r3, [pc, #476]	; (8001450 <BEMF_phase+0x214>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a76      	ldr	r2, [pc, #472]	; (8001450 <BEMF_phase+0x214>)
 8001276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127a:	6013      	str	r3, [r2, #0]

		EXTI->RTSR1 &= ~(1 << 22);
 800127c:	4b74      	ldr	r3, [pc, #464]	; (8001450 <BEMF_phase+0x214>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a73      	ldr	r2, [pc, #460]	; (8001450 <BEMF_phase+0x214>)
 8001282:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001286:	6093      	str	r3, [r2, #8]
		EXTI->FTSR1 |= 1 << 22;
 8001288:	4b71      	ldr	r3, [pc, #452]	; (8001450 <BEMF_phase+0x214>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	4a70      	ldr	r2, [pc, #448]	; (8001450 <BEMF_phase+0x214>)
 800128e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001292:	60d3      	str	r3, [r2, #12]

		COMP2->CSR |= 0b1;
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <BEMF_phase+0x210>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a6c      	ldr	r2, [pc, #432]	; (800144c <BEMF_phase+0x210>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]
		EXTI->RTSR1 |= 1 << 21;
		EXTI->FTSR1 &= ~(1 << 21);

		COMP1->CSR |= 0b1;
	}
}
 80012a0:	e0cc      	b.n	800143c <BEMF_phase+0x200>
	else if(phase == 2) {
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d124      	bne.n	80012f2 <BEMF_phase+0xb6>
		EXTI->IMR1 |= 1 << 21;
 80012a8:	4b69      	ldr	r3, [pc, #420]	; (8001450 <BEMF_phase+0x214>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a68      	ldr	r2, [pc, #416]	; (8001450 <BEMF_phase+0x214>)
 80012ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b2:	6013      	str	r3, [r2, #0]
		EXTI->IMR1 &= ~(1 << 22);
 80012b4:	4b66      	ldr	r3, [pc, #408]	; (8001450 <BEMF_phase+0x214>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a65      	ldr	r2, [pc, #404]	; (8001450 <BEMF_phase+0x214>)
 80012ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012be:	6013      	str	r3, [r2, #0]
		COMP1->CSR |= (0b111 << 4);
 80012c0:	4b61      	ldr	r3, [pc, #388]	; (8001448 <BEMF_phase+0x20c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a60      	ldr	r2, [pc, #384]	; (8001448 <BEMF_phase+0x20c>)
 80012c6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80012ca:	6013      	str	r3, [r2, #0]
		EXTI->RTSR1 |= 1 << 21;
 80012cc:	4b60      	ldr	r3, [pc, #384]	; (8001450 <BEMF_phase+0x214>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <BEMF_phase+0x214>)
 80012d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d6:	6093      	str	r3, [r2, #8]
		EXTI->FTSR1 &= ~(1 << 21);
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <BEMF_phase+0x214>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a5c      	ldr	r2, [pc, #368]	; (8001450 <BEMF_phase+0x214>)
 80012de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012e2:	60d3      	str	r3, [r2, #12]
		COMP1->CSR |= 0b1;
 80012e4:	4b58      	ldr	r3, [pc, #352]	; (8001448 <BEMF_phase+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a57      	ldr	r2, [pc, #348]	; (8001448 <BEMF_phase+0x20c>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	e0a4      	b.n	800143c <BEMF_phase+0x200>
	else if(phase == 3) {
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d12a      	bne.n	800134e <BEMF_phase+0x112>
		EXTI->IMR1 |= 1 << 21;
 80012f8:	4b55      	ldr	r3, [pc, #340]	; (8001450 <BEMF_phase+0x214>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a54      	ldr	r2, [pc, #336]	; (8001450 <BEMF_phase+0x214>)
 80012fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001302:	6013      	str	r3, [r2, #0]
		EXTI->IMR1 &= ~(1 << 22);
 8001304:	4b52      	ldr	r3, [pc, #328]	; (8001450 <BEMF_phase+0x214>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <BEMF_phase+0x214>)
 800130a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800130e:	6013      	str	r3, [r2, #0]
		COMP1->CSR |= (0b110 << 4);
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <BEMF_phase+0x20c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <BEMF_phase+0x20c>)
 8001316:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800131a:	6013      	str	r3, [r2, #0]
		COMP1->CSR &= ~(0b001 << 4);
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <BEMF_phase+0x20c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a49      	ldr	r2, [pc, #292]	; (8001448 <BEMF_phase+0x20c>)
 8001322:	f023 0310 	bic.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
		EXTI->RTSR1 &= ~(1 << 21);
 8001328:	4b49      	ldr	r3, [pc, #292]	; (8001450 <BEMF_phase+0x214>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <BEMF_phase+0x214>)
 800132e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001332:	6093      	str	r3, [r2, #8]
		EXTI->FTSR1 |= 1 << 21;
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <BEMF_phase+0x214>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a45      	ldr	r2, [pc, #276]	; (8001450 <BEMF_phase+0x214>)
 800133a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133e:	60d3      	str	r3, [r2, #12]
		COMP1->CSR |= 0b1;
 8001340:	4b41      	ldr	r3, [pc, #260]	; (8001448 <BEMF_phase+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a40      	ldr	r2, [pc, #256]	; (8001448 <BEMF_phase+0x20c>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	e076      	b.n	800143c <BEMF_phase+0x200>
	else if(phase == 4) {
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d11e      	bne.n	8001392 <BEMF_phase+0x156>
		EXTI->IMR1 &= ~(1 << 21);
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <BEMF_phase+0x214>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a3d      	ldr	r2, [pc, #244]	; (8001450 <BEMF_phase+0x214>)
 800135a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800135e:	6013      	str	r3, [r2, #0]
		EXTI->IMR1 |= 1 << 22;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <BEMF_phase+0x214>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <BEMF_phase+0x214>)
 8001366:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800136a:	6013      	str	r3, [r2, #0]
		EXTI->RTSR1 |= 1 << 22;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <BEMF_phase+0x214>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a37      	ldr	r2, [pc, #220]	; (8001450 <BEMF_phase+0x214>)
 8001372:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001376:	6093      	str	r3, [r2, #8]
		EXTI->FTSR1 &= ~(1 << 22);
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <BEMF_phase+0x214>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a34      	ldr	r2, [pc, #208]	; (8001450 <BEMF_phase+0x214>)
 800137e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001382:	60d3      	str	r3, [r2, #12]
		COMP2->CSR |= 0b1;
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <BEMF_phase+0x210>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a30      	ldr	r2, [pc, #192]	; (800144c <BEMF_phase+0x210>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	e054      	b.n	800143c <BEMF_phase+0x200>
	else if(phase == 5) {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d124      	bne.n	80013e2 <BEMF_phase+0x1a6>
		EXTI->IMR1 |= 1 << 21;
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <BEMF_phase+0x214>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <BEMF_phase+0x214>)
 800139e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a2:	6013      	str	r3, [r2, #0]
		EXTI->IMR1 &= ~(1 << 22);
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <BEMF_phase+0x214>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <BEMF_phase+0x214>)
 80013aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013ae:	6013      	str	r3, [r2, #0]
		COMP1->CSR |= (0b111 << 4);
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <BEMF_phase+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a24      	ldr	r2, [pc, #144]	; (8001448 <BEMF_phase+0x20c>)
 80013b6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80013ba:	6013      	str	r3, [r2, #0]
		EXTI->RTSR1 &= ~(1 << 21);
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <BEMF_phase+0x214>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4a23      	ldr	r2, [pc, #140]	; (8001450 <BEMF_phase+0x214>)
 80013c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013c6:	6093      	str	r3, [r2, #8]
		EXTI->FTSR1 |= 1 << 21;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <BEMF_phase+0x214>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <BEMF_phase+0x214>)
 80013ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d2:	60d3      	str	r3, [r2, #12]
		COMP1->CSR |= 0b1;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <BEMF_phase+0x20c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <BEMF_phase+0x20c>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	e02c      	b.n	800143c <BEMF_phase+0x200>
	else if(phase == 6) {
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d129      	bne.n	800143c <BEMF_phase+0x200>
		EXTI->IMR1 |= 1 << 21;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <BEMF_phase+0x214>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <BEMF_phase+0x214>)
 80013ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f2:	6013      	str	r3, [r2, #0]
		EXTI->IMR1 &= ~(1 << 22);
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <BEMF_phase+0x214>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <BEMF_phase+0x214>)
 80013fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013fe:	6013      	str	r3, [r2, #0]
		COMP1->CSR |= (0b110 << 4);
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <BEMF_phase+0x20c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <BEMF_phase+0x20c>)
 8001406:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800140a:	6013      	str	r3, [r2, #0]
		COMP1->CSR &= ~(0b001 << 4);
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <BEMF_phase+0x20c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <BEMF_phase+0x20c>)
 8001412:	f023 0310 	bic.w	r3, r3, #16
 8001416:	6013      	str	r3, [r2, #0]
		EXTI->RTSR1 |= 1 << 21;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <BEMF_phase+0x214>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <BEMF_phase+0x214>)
 800141e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001422:	6093      	str	r3, [r2, #8]
		EXTI->FTSR1 &= ~(1 << 21);
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <BEMF_phase+0x214>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a09      	ldr	r2, [pc, #36]	; (8001450 <BEMF_phase+0x214>)
 800142a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800142e:	60d3      	str	r3, [r2, #12]
		COMP1->CSR |= 0b1;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <BEMF_phase+0x20c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <BEMF_phase+0x20c>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40010200 	.word	0x40010200
 800144c:	40010204 	.word	0x40010204
 8001450:	40010400 	.word	0x40010400

08001454 <get_COMP_value>:

uint8_t get_COMP_value(uint8_t phase) {
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	uint32_t t;
	if(phase == 1) {
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d104      	bne.n	800146e <get_COMP_value+0x1a>
		t = ~COMP2->CSR;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <get_COMP_value+0x80>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	43db      	mvns	r3, r3
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e026      	b.n	80014bc <get_COMP_value+0x68>
	} else if(phase == 2) {
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d104      	bne.n	800147e <get_COMP_value+0x2a>
		t = ~COMP1->CSR;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <get_COMP_value+0x84>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	43db      	mvns	r3, r3
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e01e      	b.n	80014bc <get_COMP_value+0x68>
	} else if(phase == 3) {
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d103      	bne.n	800148c <get_COMP_value+0x38>
		t = COMP1->CSR;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <get_COMP_value+0x84>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e017      	b.n	80014bc <get_COMP_value+0x68>
	} else if(phase == 4) {
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d103      	bne.n	800149a <get_COMP_value+0x46>
		t = COMP2->CSR;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <get_COMP_value+0x80>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e010      	b.n	80014bc <get_COMP_value+0x68>
	} else if(phase == 5) {
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d103      	bne.n	80014a8 <get_COMP_value+0x54>
		t = COMP1->CSR;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <get_COMP_value+0x84>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e009      	b.n	80014bc <get_COMP_value+0x68>
	} else if(phase == 6) {
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d104      	bne.n	80014b8 <get_COMP_value+0x64>
		t = ~COMP1->CSR;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <get_COMP_value+0x84>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e001      	b.n	80014bc <get_COMP_value+0x68>
	} else {
		return 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e005      	b.n	80014c8 <get_COMP_value+0x74>
	}
	return (t >> 30) & 1;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	0f9b      	lsrs	r3, r3, #30
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40010204 	.word	0x40010204
 80014d8:	40010200 	.word	0x40010200

080014dc <set_motor_pwm>:

void set_motor_pwm(uint16_t u, uint16_t v, uint16_t w) {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
 80014e6:	460b      	mov	r3, r1
 80014e8:	80bb      	strh	r3, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	807b      	strh	r3, [r7, #2]
	u = u < 0 ? 0 : u;
	u = u > MAX_PWM ? MAX_PWM : u;
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80015a8 <set_motor_pwm+0xcc>
 80014fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	dd02      	ble.n	800150c <set_motor_pwm+0x30>
 8001506:	f240 336b 	movw	r3, #875	; 0x36b
 800150a:	e009      	b.n	8001520 <set_motor_pwm+0x44>
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800151a:	ee17 3a90 	vmov	r3, s15
 800151e:	b29b      	uxth	r3, r3
 8001520:	80fb      	strh	r3, [r7, #6]

	v = v < 0 ? 0 : v;
	v = v > MAX_PWM ? MAX_PWM : v;
 8001522:	88bb      	ldrh	r3, [r7, #4]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80015a8 <set_motor_pwm+0xcc>
 8001530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	dd02      	ble.n	8001540 <set_motor_pwm+0x64>
 800153a:	f240 336b 	movw	r3, #875	; 0x36b
 800153e:	e009      	b.n	8001554 <set_motor_pwm+0x78>
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154e:	ee17 3a90 	vmov	r3, s15
 8001552:	b29b      	uxth	r3, r3
 8001554:	80bb      	strh	r3, [r7, #4]

	w = w < 0 ? 0 : w;
	w = w > MAX_PWM ? MAX_PWM : w;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001560:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80015a8 <set_motor_pwm+0xcc>
 8001564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	dd02      	ble.n	8001574 <set_motor_pwm+0x98>
 800156e:	f240 336b 	movw	r3, #875	; 0x36b
 8001572:	e009      	b.n	8001588 <set_motor_pwm+0xac>
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001582:	ee17 3a90 	vmov	r3, s15
 8001586:	b29b      	uxth	r3, r3
 8001588:	807b      	strh	r3, [r7, #2]

	TIM1->CCR1 = u;
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <set_motor_pwm+0xd0>)
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = v;
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <set_motor_pwm+0xd0>)
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = w;
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <set_motor_pwm+0xd0>)
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	445ac000 	.word	0x445ac000
 80015ac:	40012c00 	.word	0x40012c00

080015b0 <motor_on>:

void motor_on() {
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	TIM1->CCER &= ~TIM_CCER_CC1NP;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <motor_on+0x34>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <motor_on+0x34>)
 80015ba:	f023 0308 	bic.w	r3, r3, #8
 80015be:	6213      	str	r3, [r2, #32]
	TIM1->CCER &= ~TIM_CCER_CC2NP;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <motor_on+0x34>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <motor_on+0x34>)
 80015c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ca:	6213      	str	r3, [r2, #32]
	TIM1->CCER &= ~TIM_CCER_CC3NP;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <motor_on+0x34>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <motor_on+0x34>)
 80015d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015d6:	6213      	str	r3, [r2, #32]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40012c00 	.word	0x40012c00

080015e8 <motor_off>:

void motor_off() {
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	TIM1->CCER |= TIM_CCER_CC1NP;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <motor_off+0x44>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <motor_off+0x44>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2NP;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <motor_off+0x44>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <motor_off+0x44>)
 80015fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001602:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3NP;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <motor_off+0x44>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <motor_off+0x44>)
 800160a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160e:	6213      	str	r3, [r2, #32]
	TIM1->CCR1 = 0;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <motor_off+0x44>)
 8001612:	2200      	movs	r2, #0
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <motor_off+0x44>)
 8001618:	2200      	movs	r2, #0
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <motor_off+0x44>)
 800161e:	2200      	movs	r2, #0
 8001620:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40012c00 	.word	0x40012c00

08001630 <main>:
//	} else if((EXTI->PR1 >> 22) & 1) {
//		EXTI->PR1 |= 1 << 22;
//	}
//}

int main(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	HAL_Init();
 8001636:	f001 f87c 	bl	8002732 <HAL_Init>

	SystemClock_Config();
 800163a:	f000 fd69 	bl	8002110 <SystemClock_Config>

	GPIO_init();
 800163e:	f000 f931 	bl	80018a4 <GPIO_init>

	TIM1_init();	//PWM timer - 24/48/96 khz
 8001642:	f000 f9b9 	bl	80019b8 <TIM1_init>
	TIM6_init();	//Delay timer - 1 khz
 8001646:	f000 fbbd 	bl	8001dc4 <TIM6_init>
	TIM3_init();	//FOC timer - 25 khz
 800164a:	f000 fb31 	bl	8001cb0 <TIM3_init>
	TIM4_init();	//Audio timer
 800164e:	f000 fb77 	bl	8001d40 <TIM4_init>
	TIM2_init();
 8001652:	f000 faed 	bl	8001c30 <TIM2_init>

	COMP_init();
 8001656:	f000 fcd1 	bl	8001ffc <COMP_init>
	MX_ADC1_Init();
 800165a:	f000 fda5 	bl	80021a8 <MX_ADC1_Init>
	MX_ADC2_Init();
 800165e:	f000 fe1b 	bl	8002298 <MX_ADC2_Init>

	TIM8_init();	//Encoder
 8001662:	f000 fc4d 	bl	8001f00 <TIM8_init>
//	UART_init(115200);

//	TIM3_on();

	play_music();
 8001666:	f000 ffc3 	bl	80025f0 <play_music>
	delay_ms(500);
 800166a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166e:	f000 fbeb 	bl	8001e48 <delay_ms>

	TIM2_on();
 8001672:	f000 f971 	bl	8001958 <TIM2_on>

	motor_on();
 8001676:	f7ff ff9b 	bl	80015b0 <motor_on>
//
//		delay_ms(interval_ms);
//		i++;
//		j++;
//	}
	TIM1->CCR4 = 0;
 800167a:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <main+0x1c8>)
 800167c:	2200      	movs	r2, #0
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->DIER |= 1 << 4;
 8001680:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <main+0x1c8>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a5c      	ldr	r2, [pc, #368]	; (80017f8 <main+0x1c8>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	60d3      	str	r3, [r2, #12]
	float p = 0.1;
 800168c:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <main+0x1cc>)
 800168e:	607b      	str	r3, [r7, #4]

	uint16_t k = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	807b      	strh	r3, [r7, #2]

	while(1) {
//		setPhaseVoltage(0.05, (current_phase - 1)*60);
		BLDC_phase(current_phase, p);
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <main+0x1d0>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	ed97 0a01 	vldr	s0, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fca8 	bl	8000ff4 <BLDC_phase>
		BEMF_phase(current_phase);
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <main+0x1d0>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fdc6 	bl	800123c <BEMF_phase>

		GPIOB->BSRR |= 1 << 19;
 80016b0:	4b54      	ldr	r3, [pc, #336]	; (8001804 <main+0x1d4>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a53      	ldr	r2, [pc, #332]	; (8001804 <main+0x1d4>)
 80016b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ba:	6193      	str	r3, [r2, #24]

//		TIM2->CR1 |= 1;
		TIM2->CNT = 0;
 80016bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
//		TIM2->DIER &= ~(1 << 4);
//
		TIM1->DIER |= 1 << 4;
 80016c4:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <main+0x1c8>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <main+0x1c8>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	60d3      	str	r3, [r2, #12]

		delay_us(2000);
 80016d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016d4:	f000 fbe8 	bl	8001ea8 <delay_us>

		current_phase++;
 80016d8:	4b49      	ldr	r3, [pc, #292]	; (8001800 <main+0x1d0>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <main+0x1d0>)
 80016e4:	701a      	strb	r2, [r3, #0]
		current_phase = (current_phase - 1) % 6 + 1;
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <main+0x1d0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	1e5a      	subs	r2, r3, #1
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <main+0x1d8>)
 80016f0:	fb83 3102 	smull	r3, r1, r3, r2
 80016f4:	17d3      	asrs	r3, r2, #31
 80016f6:	1ac9      	subs	r1, r1, r3
 80016f8:	460b      	mov	r3, r1
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	440b      	add	r3, r1
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	1ad1      	subs	r1, r2, r3
 8001702:	b2cb      	uxtb	r3, r1
 8001704:	3301      	adds	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <main+0x1d0>)
 800170a:	701a      	strb	r2, [r3, #0]

		if(k++ > 3000) {
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	807a      	strh	r2, [r7, #2]
 8001712:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001716:	4293      	cmp	r3, r2
 8001718:	d9bc      	bls.n	8001694 <main+0x64>
			break;
		}
	}

	while(1) {
		BLDC_phase(current_phase, p);
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <main+0x1d0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	ed97 0a01 	vldr	s0, [r7, #4]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fc65 	bl	8000ff4 <BLDC_phase>
		BEMF_phase(current_phase);
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <main+0x1d0>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fd83 	bl	800123c <BEMF_phase>

		GPIOB->BSRR |= 1 << 19;
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <main+0x1d4>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <main+0x1d4>)
 800173c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001740:	6193      	str	r3, [r2, #24]
//		TIM2->CR1 |= 1;
		TIM2->CNT = 0;
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
//		TIM2->DIER &= ~(1 << 4);

		zero_crossing_flag = 0;
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <main+0x1dc>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
		TIM1->DIER |= 1 << 4;
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <main+0x1c8>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <main+0x1c8>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	60d3      	str	r3, [r2, #12]

		while(zero_crossing_flag == 0);
 800175c:	bf00      	nop
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <main+0x1dc>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0fa      	beq.n	800175e <main+0x12e>
		while(TIM2->CNT < phase_timing);
 8001768:	bf00      	nop
 800176a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <main+0x1e0>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d4f0      	bmi.n	800176a <main+0x13a>

		current_phase++;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <main+0x1d0>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <main+0x1d0>)
 8001794:	701a      	strb	r2, [r3, #0]
		current_phase = (current_phase - 1) % 6 + 1;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <main+0x1d0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <main+0x1d8>)
 80017a0:	fb83 3102 	smull	r3, r1, r3, r2
 80017a4:	17d3      	asrs	r3, r2, #31
 80017a6:	1ac9      	subs	r1, r1, r3
 80017a8:	460b      	mov	r3, r1
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	440b      	add	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	1ad1      	subs	r1, r2, r3
 80017b2:	b2cb      	uxtb	r3, r1
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <main+0x1d0>)
 80017ba:	701a      	strb	r2, [r3, #0]

		if(p < 0.5) {
 80017bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d50f      	bpl.n	80017ee <main+0x1be>
			p += 0.00001;
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7fe fe86 	bl	80004e0 <__aeabi_f2d>
 80017d4:	a306      	add	r3, pc, #24	; (adr r3, 80017f0 <main+0x1c0>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe fd23 	bl	8000224 <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f8e5 	bl	80009b4 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	607b      	str	r3, [r7, #4]
		BLDC_phase(current_phase, p);
 80017ee:	e794      	b.n	800171a <main+0xea>
 80017f0:	88e368f1 	.word	0x88e368f1
 80017f4:	3ee4f8b5 	.word	0x3ee4f8b5
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	3dcccccd 	.word	0x3dcccccd
 8001800:	20000b44 	.word	0x20000b44
 8001804:	48000400 	.word	0x48000400
 8001808:	2aaaaaab 	.word	0x2aaaaaab
 800180c:	20000bc4 	.word	0x20000bc4
 8001810:	20000bc0 	.word	0x20000bc0

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <GPIO_init>:
#include <math.h>

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void GPIO_init() {
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 0b1111111;
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <GPIO_init+0xac>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	4a28      	ldr	r2, [pc, #160]	; (8001950 <GPIO_init+0xac>)
 80018ae:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->OTYPER &= ~(1<<3);
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <GPIO_init+0xb0>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a26      	ldr	r2, [pc, #152]	; (8001954 <GPIO_init+0xb0>)
 80018ba:	f023 0308 	bic.w	r3, r3, #8
 80018be:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(1<<4);
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <GPIO_init+0xb0>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <GPIO_init+0xb0>)
 80018c6:	f023 0310 	bic.w	r3, r3, #16
 80018ca:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (1<<7);
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <GPIO_init+0xb0>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a20      	ldr	r2, [pc, #128]	; (8001954 <GPIO_init+0xb0>)
 80018d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<9);
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <GPIO_init+0xb0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <GPIO_init+0xb0>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6093      	str	r3, [r2, #8]

	GPIOB->MODER |= 1<<6;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <GPIO_init+0xb0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <GPIO_init+0xb0>)
 80018ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <GPIO_init+0xb0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <GPIO_init+0xb0>)
 80018f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018fa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <GPIO_init+0xb0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <GPIO_init+0xb0>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <GPIO_init+0xb0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <GPIO_init+0xb0>)
 800190e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= 1<<6;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <GPIO_init+0xb0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <GPIO_init+0xb0>)
 800191a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <GPIO_init+0xb0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <GPIO_init+0xb0>)
 8001926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800192a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <GPIO_init+0xb0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a08      	ldr	r2, [pc, #32]	; (8001954 <GPIO_init+0xb0>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <GPIO_init+0xb0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <GPIO_init+0xb0>)
 800193e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <TIM2_on>:

void TIM1_on() {
	TIM1->CR1 |= 1;
}

void TIM2_on() {
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 1;
 800195c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <TIM4_on>:

void TIM3_on() {
	TIM3->CR1 |= 1;
}

void TIM4_on() {
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 1;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <TIM4_on+0x1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <TIM4_on+0x1c>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40000800 	.word	0x40000800

08001998 <TIM4_off>:

void TIM3_off() {
	TIM3->CR1 &= ~1;
}

void TIM4_off() {
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~1;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <TIM4_off+0x1c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <TIM4_off+0x1c>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40000800 	.word	0x40000800

080019b8 <TIM1_init>:
	TIM8->CR1 &= ~1;
}

//---------------------

void TIM1_init() {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= 1 << 11;
 80019bc:	4b98      	ldr	r3, [pc, #608]	; (8001c20 <TIM1_init+0x268>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c0:	4a97      	ldr	r2, [pc, #604]	; (8001c20 <TIM1_init+0x268>)
 80019c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c6:	6613      	str	r3, [r2, #96]	; 0x60

    //PA[8] - 1P
    GPIOA->AFR[1] |= 0b0110;
 80019c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019d2:	f043 0306 	orr.w	r3, r3, #6
 80019d6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 16);
 80019d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 17;
 80019e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 16;
 80019f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6093      	str	r3, [r2, #8]

    //PA[7] - 1N
    GPIOA->AFR[0] |= 0b0110 << 28;
 8001a08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a12:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001a16:	6213      	str	r3, [r2, #32]
	GPIOA->MODER &= ~(1 << 14);
 8001a18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a26:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 15;
 8001a28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a36:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 14;
 8001a38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6093      	str	r3, [r2, #8]

    //PA[9] - 2P
    GPIOA->AFR[1] |= 0b0110 << 4;
 8001a48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a56:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 18);
 8001a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 19;
 8001a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a76:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 18;
 8001a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6093      	str	r3, [r2, #8]

    //PB[0] - 2N
    GPIOB->AFR[0] |= 0b0110;
 8001a88:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <TIM1_init+0x26c>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a65      	ldr	r2, [pc, #404]	; (8001c24 <TIM1_init+0x26c>)
 8001a8e:	f043 0306 	orr.w	r3, r3, #6
 8001a92:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~1;
 8001a94:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <TIM1_init+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a62      	ldr	r2, [pc, #392]	; (8001c24 <TIM1_init+0x26c>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1 << 1;
 8001aa0:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <TIM1_init+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5f      	ldr	r2, [pc, #380]	; (8001c24 <TIM1_init+0x26c>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= 0b11;
 8001aac:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <TIM1_init+0x26c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <TIM1_init+0x26c>)
 8001ab2:	f043 0303 	orr.w	r3, r3, #3
 8001ab6:	6093      	str	r3, [r2, #8]

    //PA[10] - 3P
    GPIOA->AFR[1] |= 0b0110 << 8;
 8001ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ac2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001ac6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 20);
 8001ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ad2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ad6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 21;
 8001ad8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 20;
 8001ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6093      	str	r3, [r2, #8]

    //PF[0] - 3N
    GPIOF->AFR[0] |= 0b0110;
 8001af8:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <TIM1_init+0x270>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <TIM1_init+0x270>)
 8001afe:	f043 0306 	orr.w	r3, r3, #6
 8001b02:	6213      	str	r3, [r2, #32]
	GPIOF->MODER &= ~1;
 8001b04:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <TIM1_init+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a47      	ldr	r2, [pc, #284]	; (8001c28 <TIM1_init+0x270>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= 1 << 1;
 8001b10:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <TIM1_init+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <TIM1_init+0x270>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= 0b11;
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <TIM1_init+0x270>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a41      	ldr	r2, [pc, #260]	; (8001c28 <TIM1_init+0x270>)
 8001b22:	f043 0303 	orr.w	r3, r3, #3
 8001b26:	6093      	str	r3, [r2, #8]

    TIM1->CR1 = 0;
 8001b28:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <TIM1_init+0x274>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
    TIM1->CR2 = 0;
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <TIM1_init+0x274>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]

    TIM1->CR1 |= 1 << 7; //Auto-preload enable    
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <TIM1_init+0x274>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <TIM1_init+0x274>)
 8001b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3e:	6013      	str	r3, [r2, #0]
//    TIM1->CR1 |= 0b01 << 5; //Center-aligned mode 1
    TIM1->CR1 |= 0b10 << 5; //Center-aligned mode 2
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <TIM1_init+0x274>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a39      	ldr	r2, [pc, #228]	; (8001c2c <TIM1_init+0x274>)
 8001b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4a:	6013      	str	r3, [r2, #0]

    TIM1->CCMR1 = 0;
 8001b4c:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <TIM1_init+0x274>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
    TIM1->CCMR1 |= 0b110 << 12;
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <TIM1_init+0x274>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	4a35      	ldr	r2, [pc, #212]	; (8001c2c <TIM1_init+0x274>)
 8001b58:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001b5c:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= 0b110 << 4;
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <TIM1_init+0x274>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <TIM1_init+0x274>)
 8001b64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b68:	6193      	str	r3, [r2, #24]

    TIM1->CCMR2 = 0;
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <TIM1_init+0x274>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    TIM1->CCMR2 |= 0b110 << 4;
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <TIM1_init+0x274>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <TIM1_init+0x274>)
 8001b76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b7a:	61d3      	str	r3, [r2, #28]

    TIM1->CCMR2 = 0;
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <TIM1_init+0x274>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= 0b110 << 4;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <TIM1_init+0x274>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <TIM1_init+0x274>)
 8001b88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b8c:	61d3      	str	r3, [r2, #28]

    TIM1->ARR = MAX_PWM;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <TIM1_init+0x274>)
 8001b90:	f240 326b 	movw	r2, #875	; 0x36b
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC = 0;
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <TIM1_init+0x274>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28

    TIM1->CNT = 0;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <TIM1_init+0x274>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

    TIM1->CCER = 0;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <TIM1_init+0x274>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= 0b010101010101; //enable outputs
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <TIM1_init+0x274>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <TIM1_init+0x274>)
 8001bae:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8001bb2:	f043 0305 	orr.w	r3, r3, #5
 8001bb6:	6213      	str	r3, [r2, #32]

	TIM1->CCER |= TIM_CCER_CC1NP;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <TIM1_init+0x274>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <TIM1_init+0x274>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2NP;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <TIM1_init+0x274>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <TIM1_init+0x274>)
 8001bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bce:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3NP;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <TIM1_init+0x274>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <TIM1_init+0x274>)
 8001bd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bda:	6213      	str	r3, [r2, #32]
	TIM1->CCR1 = 0;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <TIM1_init+0x274>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <TIM1_init+0x274>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <TIM1_init+0x274>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c

	//OC4
//	TIM1->CCMR2 |= 0b001 << 12;
//	TIM1->CCER |= 1 << 16;
	TIM1->CCR4 = 0;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <TIM1_init+0x274>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
//    TIM1->CCMR3 = 0;
//	TIM1->CCMR3 |= 0b110 << 4;
//	TIM1->CCER |= 1 << 16;
//	TIM1->CCR5 = 0;

	TIM1->BDTR |= 1 << 15;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <TIM1_init+0x274>)
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <TIM1_init+0x274>)
 8001bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfe:	6453      	str	r3, [r2, #68]	; 0x44

	NVIC_SetPriority(TIM1_CC_IRQn, 2);
 8001c00:	2102      	movs	r1, #2
 8001c02:	201b      	movs	r0, #27
 8001c04:	f7ff fe24 	bl	8001850 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c08:	201b      	movs	r0, #27
 8001c0a:	f7ff fe03 	bl	8001814 <__NVIC_EnableIRQ>

    TIM1->CR1 |= 1;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <TIM1_init+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <TIM1_init+0x274>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	48001400 	.word	0x48001400
 8001c2c:	40012c00 	.word	0x40012c00

08001c30 <TIM2_init>:

void TIM2_init() {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <TIM2_init+0x7c>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <TIM2_init+0x7c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6593      	str	r3, [r2, #88]	; 0x58

    TIM2->CR1 = 0;
 8001c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    TIM2->CR2 = 0;
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]

    TIM2->CR1 |= 1 << 7;
 8001c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5e:	6013      	str	r3, [r2, #0]

    TIM2->ARR = 1000;
 8001c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC = 170 - 1;
 8001c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c6e:	22a9      	movs	r2, #169	; 0xa9
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->CNT = 0;
 8001c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

    TIM2->EGR |= 1;
 8001c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6153      	str	r3, [r2, #20]

    TIM2->DIER |= 1;
 8001c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 3);
 8001c9a:	2103      	movs	r1, #3
 8001c9c:	201c      	movs	r0, #28
 8001c9e:	f7ff fdd7 	bl	8001850 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8001ca2:	201c      	movs	r0, #28
 8001ca4:	f7ff fdb6 	bl	8001814 <__NVIC_EnableIRQ>

//	TIM2->CR1 |= 1;
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000

08001cb0 <TIM3_init>:

void TIM3_init() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 1;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <TIM3_init+0x80>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <TIM3_init+0x80>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58

    TIM3->CR1 = 0;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <TIM3_init+0x84>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    TIM3->CR2 = 0;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <TIM3_init+0x84>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]

    TIM3->CR1 |= 1 << 7;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <TIM3_init+0x84>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <TIM3_init+0x84>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd8:	6013      	str	r3, [r2, #0]

    float freq = 50000;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <TIM3_init+0x88>)
 8001cdc:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 8001cde:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001d3c <TIM3_init+0x8c>
 8001ce2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cea:	edc7 7a00 	vstr	s15, [r7]
    TIM3->ARR = (uint16_t)f;
 8001cee:	edd7 7a00 	vldr	s15, [r7]
 8001cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf6:	ee17 3a90 	vmov	r3, s15
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <TIM3_init+0x84>)
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 0;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <TIM3_init+0x84>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28

    TIM3->CNT = 0;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <TIM3_init+0x84>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

    TIM3->DIER |= 1;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <TIM3_init+0x84>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <TIM3_init+0x84>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	60d3      	str	r3, [r2, #12]
//    TIM3->CR1 |= 1;
    NVIC_SetPriority(TIM3_IRQn, 2);
 8001d18:	2102      	movs	r1, #2
 8001d1a:	201d      	movs	r0, #29
 8001d1c:	f7ff fd98 	bl	8001850 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 8001d20:	201d      	movs	r0, #29
 8001d22:	f7ff fd77 	bl	8001814 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	47435000 	.word	0x47435000
 8001d3c:	4d221fe8 	.word	0x4d221fe8

08001d40 <TIM4_init>:

void TIM4_init() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 2;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <TIM4_init+0x7c>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <TIM4_init+0x7c>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58

    TIM4->CR1 = 0;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <TIM4_init+0x80>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    TIM4->CR2 = 0;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <TIM4_init+0x80>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]

    TIM4->CR1 |= 1 << 7;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <TIM4_init+0x80>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <TIM4_init+0x80>)
 8001d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d66:	6013      	str	r3, [r2, #0]

    TIM4->ARR |= 0xFFFFF;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <TIM4_init+0x80>)
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <TIM4_init+0x80>)
 8001d6e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001d72:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001d76:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM4->PSC = 0;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <TIM4_init+0x80>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28

    TIM4->CNT = 0;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <TIM4_init+0x80>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

    TIM4->EGR |= 1;
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <TIM4_init+0x80>)
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <TIM4_init+0x80>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6153      	str	r3, [r2, #20]

    TIM4->DIER |= 1;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <TIM4_init+0x80>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <TIM4_init+0x80>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	60d3      	str	r3, [r2, #12]

    TIM4->SR &= ~(0x1);
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <TIM4_init+0x80>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <TIM4_init+0x80>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6113      	str	r3, [r2, #16]

    // TIM4->CR1 |= 1;
    NVIC_SetPriority(TIM4_IRQn, 5);
 8001da8:	2105      	movs	r1, #5
 8001daa:	201e      	movs	r0, #30
 8001dac:	f7ff fd50 	bl	8001850 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn);
 8001db0:	201e      	movs	r0, #30
 8001db2:	f7ff fd2f 	bl	8001814 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <TIM6_init>:

void TIM6_init() {
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 4;
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <TIM6_init+0x74>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <TIM6_init+0x74>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58

    TIM6->CR1 = 0;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <TIM6_init+0x78>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
    TIM6->CR2 = 0;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <TIM6_init+0x78>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]

    float freq = 10000;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <TIM6_init+0x7c>)
 8001de4:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 8001de6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001e44 <TIM6_init+0x80>
 8001dea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df2:	edc7 7a00 	vstr	s15, [r7]
    // TIM6->ARR |= ((uint32_t)f & 0x000FFFFF);
    // TIM6->ARR = (uint32_t)f;
    TIM6->ARR |= 0xFFFFF;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <TIM6_init+0x78>)
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <TIM6_init+0x78>)
 8001dfc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e00:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e04:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM6->PSC = (uint16_t)f - 1;
 8001e06:	edd7 7a00 	vldr	s15, [r7]
 8001e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e0e:	ee17 3a90 	vmov	r3, s15
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <TIM6_init+0x78>)
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28

    TIM6->CNT = 0;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <TIM6_init+0x78>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

    TIM6->EGR |= 1;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <TIM6_init+0x78>)
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <TIM6_init+0x78>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6153      	str	r3, [r2, #20]

    // TIM6->CR1 |= 1;
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40001000 	.word	0x40001000
 8001e40:	461c4000 	.word	0x461c4000
 8001e44:	4d221fe8 	.word	0x4d221fe8

08001e48 <delay_ms>:

void delay_ms(uint16_t d) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
	TIM6->CNT = 0;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <delay_ms+0x5c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = 17000 - 1;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <delay_ms+0x5c>)
 8001e5a:	f244 2267 	movw	r2, #16999	; 0x4267
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->EGR |= 1;
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <delay_ms+0x5c>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <delay_ms+0x5c>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= 1;
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <delay_ms+0x5c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <delay_ms+0x5c>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6013      	str	r3, [r2, #0]
	while(TIM6->CNT < d*10);
 8001e78:	bf00      	nop
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <delay_ms+0x5c>)
 8001e7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4299      	cmp	r1, r3
 8001e8a:	d3f6      	bcc.n	8001e7a <delay_ms+0x32>
	TIM6->CR1 &= ~1;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <delay_ms+0x5c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <delay_ms+0x5c>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40001000 	.word	0x40001000

08001ea8 <delay_us>:

void delay_us(uint16_t d) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
	TIM6->CNT = 0;
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <delay_us+0x54>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = 170 - 1;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <delay_us+0x54>)
 8001eba:	22a9      	movs	r2, #169	; 0xa9
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->EGR |= 1;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <delay_us+0x54>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <delay_us+0x54>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= 1;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <delay_us+0x54>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <delay_us+0x54>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6013      	str	r3, [r2, #0]
	while(TIM6->CNT < d);
 8001ed6:	bf00      	nop
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <delay_us+0x54>)
 8001eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3fa      	bcc.n	8001ed8 <delay_us+0x30>
	TIM6->CR1 &= ~1;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <delay_us+0x54>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <delay_us+0x54>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6013      	str	r3, [r2, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40001000 	.word	0x40001000

08001f00 <TIM8_init>:

void TIM8_init() {
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 1 << 13;
 8001f04:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <TIM8_init+0xf0>)
 8001f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f08:	4a39      	ldr	r2, [pc, #228]	; (8001ff0 <TIM8_init+0xf0>)
 8001f0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f0e:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2ENR |= 0b1111111;
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <TIM8_init+0xf0>)
 8001f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f14:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <TIM8_init+0xf0>)
 8001f16:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8001f1a:	6613      	str	r3, [r2, #96]	; 0x60

	//PA15 - TIM8_CH1
	GPIOA->AFR[1] |= 0b0010 << 28;
 8001f1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f2a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1<<30);
 8001f2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f3a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1<<31;
 8001f3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f4a:	6013      	str	r3, [r2, #0]

	//PB8 - TIM8_CH2
	GPIOB->AFR[1] |= 0b1010;
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <TIM8_init+0xf4>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <TIM8_init+0xf4>)
 8001f52:	f043 030a 	orr.w	r3, r3, #10
 8001f56:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~(1<<16);
 8001f58:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <TIM8_init+0xf4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <TIM8_init+0xf4>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<17;
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <TIM8_init+0xf4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <TIM8_init+0xf4>)
 8001f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6e:	6013      	str	r3, [r2, #0]

	//PB6 <> TIM8_ETR
	GPIOB->AFR[0] |= 0b0110 << 24;
 8001f70:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <TIM8_init+0xf4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <TIM8_init+0xf4>)
 8001f76:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8001f7a:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~(1<<12);
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <TIM8_init+0xf4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <TIM8_init+0xf4>)
 8001f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f86:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<13;
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <TIM8_init+0xf4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <TIM8_init+0xf4>)
 8001f8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f92:	6013      	str	r3, [r2, #0]

    TIM8->CR1 = 0;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <TIM8_init+0xf8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

    TIM8->CR2 = 0;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <TIM8_init+0xf8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
    TIM8->SMCR = 0b0011;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <TIM8_init+0xf8>)
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	609a      	str	r2, [r3, #8]
    TIM8->CCMR1 |= 0b01 << 8;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <TIM8_init+0xf8>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <TIM8_init+0xf8>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6193      	str	r3, [r2, #24]
    TIM8->CCMR1 |= 0b01;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <TIM8_init+0xf8>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <TIM8_init+0xf8>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6193      	str	r3, [r2, #24]
    TIM8->ECR = 1;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <TIM8_init+0xf8>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58

    TIM8->ARR |= 0xFFFFF;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <TIM8_init+0xf8>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <TIM8_init+0xf8>)
 8001fca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001fce:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM8->CNT = 0;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <TIM8_init+0xf8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

    TIM8->CR1 |= 1;
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <TIM8_init+0xf8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <TIM8_init+0xf8>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	40013400 	.word	0x40013400

08001ffc <COMP_init>:

//---------------------------------------------------

void COMP_init() {
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	//PA0 - U - COMP1_INM
	GPIOA->MODER |= 0b11;
 8002000:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800200a:	f043 0303 	orr.w	r3, r3, #3
 800200e:	6013      	str	r3, [r2, #0]

	//PA1 - X - COMP1_INP
	GPIOA->MODER |= 0b11 << 2;
 8002010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800201a:	f043 030c 	orr.w	r3, r3, #12
 800201e:	6013      	str	r3, [r2, #0]

	//PA3 - W - COMP2_INP
	GPIOA->MODER |= 0b11 << 6;
 8002020:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800202a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800202e:	6013      	str	r3, [r2, #0]

	//PA4 - V - COMP1_INM
	GPIOA->MODER |= 0b11 << 8;
 8002030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800203a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800203e:	6013      	str	r3, [r2, #0]

	//PA5 - X - COMP2_INM
	GPIOA->MODER |= 0b11 << 10;
 8002040:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800204a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800204e:	6013      	str	r3, [r2, #0]


	COMP1->CSR |= (0b111 << 16);
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <COMP_init+0x108>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <COMP_init+0x108>)
 8002056:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800205a:	6013      	str	r3, [r2, #0]
	COMP1->CSR &= ~(0b1 << 8);	//Set COMP1_INP - PA1 (X)
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <COMP_init+0x108>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <COMP_init+0x108>)
 8002062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]
	COMP1->CSR |= (0b111 << 4);	//Set COMP1_INM - PA0 (U)
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <COMP_init+0x108>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a25      	ldr	r2, [pc, #148]	; (8002104 <COMP_init+0x108>)
 800206e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002072:	6013      	str	r3, [r2, #0]
//	COMP1->CSR |= (0b001 << 19);

	COMP2->CSR |= (0b111 << 16);
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <COMP_init+0x10c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <COMP_init+0x10c>)
 800207a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800207e:	6013      	str	r3, [r2, #0]
	COMP2->CSR |= 0b1 << 8;		//Set COMP2_INP - PA3 (W)
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <COMP_init+0x10c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a20      	ldr	r2, [pc, #128]	; (8002108 <COMP_init+0x10c>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
	COMP2->CSR |= (0b110 << 4);	//Set COMP2_INM - PA5 (X)
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <COMP_init+0x10c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <COMP_init+0x10c>)
 8002092:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002096:	6013      	str	r3, [r2, #0]
//	COMP2->CSR |= (0b001 << 19);

	//EXTI Interrupt masks
	EXTI->IMR1 |= 1 << 21;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <COMP_init+0x110>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <COMP_init+0x110>)
 800209e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a2:	6013      	str	r3, [r2, #0]
	EXTI->IMR1 |= 1 << 22;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <COMP_init+0x110>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <COMP_init+0x110>)
 80020aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ae:	6013      	str	r3, [r2, #0]

	EXTI->RTSR1 |= 1 << 21;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <COMP_init+0x110>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a15      	ldr	r2, [pc, #84]	; (800210c <COMP_init+0x110>)
 80020b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ba:	6093      	str	r3, [r2, #8]
	EXTI->RTSR1 |= 1 << 22;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <COMP_init+0x110>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a12      	ldr	r2, [pc, #72]	; (800210c <COMP_init+0x110>)
 80020c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c6:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 |= 1 << 21;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <COMP_init+0x110>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <COMP_init+0x110>)
 80020ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d2:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR1 |= 1 << 22;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <COMP_init+0x110>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a0c      	ldr	r2, [pc, #48]	; (800210c <COMP_init+0x110>)
 80020da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020de:	60d3      	str	r3, [r2, #12]

//    NVIC_SetPriority(COMP1_2_3_IRQn, 5);
//    NVIC_EnableIRQ(COMP1_2_3_IRQn);

    //Enable COMPs
    COMP1->CSR |= 0b1;
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <COMP_init+0x108>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <COMP_init+0x108>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6013      	str	r3, [r2, #0]
	COMP2->CSR |= 0b1;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <COMP_init+0x10c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <COMP_init+0x10c>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40010200 	.word	0x40010200
 8002108:	40010204 	.word	0x40010204
 800210c:	40010400 	.word	0x40010400

08002110 <SystemClock_Config>:

void SystemClock_Config(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b094      	sub	sp, #80	; 0x50
 8002114:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	2238      	movs	r2, #56	; 0x38
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f002 fdb0 	bl	8004c84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002132:	2000      	movs	r0, #0
 8002134:	f001 fdf2 	bl	8003d1c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002138:	2302      	movs	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800213c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002146:	2302      	movs	r3, #2
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800214a:	2302      	movs	r3, #2
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800214e:	2301      	movs	r3, #1
 8002150:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 21;
 8002152:	2315      	movs	r3, #21
 8002154:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002156:	2302      	movs	r3, #2
 8002158:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800215a:	2302      	movs	r3, #2
 800215c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800215e:	2302      	movs	r3, #2
 8002160:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fe7c 	bl	8003e64 <HAL_RCC_OscConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0x66>
	{
	Error_Handler();
 8002172:	f000 f8f7 	bl	8002364 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002176:	230f      	movs	r3, #15
 8002178:	607b      	str	r3, [r7, #4]
	                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217a:	2303      	movs	r3, #3
 800217c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2104      	movs	r1, #4
 800218e:	4618      	mov	r0, r3
 8002190:	f002 f980 	bl	8004494 <HAL_RCC_ClockConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SystemClock_Config+0x8e>
	{
	Error_Handler();
 800219a:	f000 f8e3 	bl	8002364 <Error_Handler>
	}
}
 800219e:	bf00      	nop
 80021a0:	3750      	adds	r7, #80	; 0x50
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <MX_ADC1_Init>:

void MX_ADC1_Init(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2220      	movs	r2, #32
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 fd5f 	bl	8004c84 <memset>

	hadc1.Instance = ADC1;
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80021cc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021d4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <MX_ADC1_Init+0xe8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <MX_ADC1_Init+0xe8>)
 8002202:	2201      	movs	r2, #1
 8002204:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <MX_ADC1_Init+0xe8>)
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <MX_ADC1_Init+0xe8>)
 8002210:	2200      	movs	r2, #0
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <MX_ADC1_Init+0xe8>)
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_ADC1_Init+0xe8>)
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_ADC1_Init+0xe8>)
 8002224:	2200      	movs	r2, #0
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <MX_ADC1_Init+0xe8>)
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002230:	4817      	ldr	r0, [pc, #92]	; (8002290 <MX_ADC1_Init+0xe8>)
 8002232:	f000 fcc9 	bl	8002bc8 <HAL_ADC_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_ADC1_Init+0x98>
	{
	Error_Handler();
 800223c:	f000 f892 	bl	8002364 <Error_Handler>
	}

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	4619      	mov	r1, r3
 800224a:	4811      	ldr	r0, [pc, #68]	; (8002290 <MX_ADC1_Init+0xe8>)
 800224c:	f001 fa5c 	bl	8003708 <HAL_ADCEx_MultiModeConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_ADC1_Init+0xb2>
	{
	Error_Handler();
 8002256:	f000 f885 	bl	8002364 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_ADC1_Init+0xec>)
 800225c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800225e:	2306      	movs	r3, #6
 8002260:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002266:	237f      	movs	r3, #127	; 0x7f
 8002268:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800226a:	2304      	movs	r3, #4
 800226c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <MX_ADC1_Init+0xe8>)
 8002278:	f000 fe30 	bl	8002edc <HAL_ADC_ConfigChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_ADC1_Init+0xde>
	{
	Error_Handler();
 8002282:	f000 f86f 	bl	8002364 <Error_Handler>
	}
}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000be8 	.word	0x20000be8
 8002294:	0c900008 	.word	0x0c900008

08002298 <MX_ADC2_Init>:

void MX_ADC2_Init(void) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800229e:	463b      	mov	r3, r7
 80022a0:	2220      	movs	r2, #32
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fced 	bl	8004c84 <memset>

	hadc2.Instance = ADC2;
 80022aa:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022ac:	4a2b      	ldr	r2, [pc, #172]	; (800235c <MX_ADC2_Init+0xc4>)
 80022ae:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022b6:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022d2:	2204      	movs	r2, #4
 80022d4:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_ADC2_Init+0xc0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_ADC2_Init+0xc0>)
 8002306:	2200      	movs	r2, #0
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <MX_ADC2_Init+0xc0>)
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if(HAL_ADC_Init(&hadc2) != HAL_OK)
 8002312:	4811      	ldr	r0, [pc, #68]	; (8002358 <MX_ADC2_Init+0xc0>)
 8002314:	f000 fc58 	bl	8002bc8 <HAL_ADC_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_ADC2_Init+0x8a>
	{
	Error_Handler();
 800231e:	f000 f821 	bl	8002364 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_ADC2_Init+0xc8>)
 8002324:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002326:	2306      	movs	r3, #6
 8002328:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800232e:	237f      	movs	r3, #127	; 0x7f
 8002330:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002332:	2304      	movs	r3, #4
 8002334:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
	if(HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800233a:	463b      	mov	r3, r7
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <MX_ADC2_Init+0xc0>)
 8002340:	f000 fdcc 	bl	8002edc <HAL_ADC_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_ADC2_Init+0xb6>
	{
	Error_Handler();
 800234a:	f000 f80b 	bl	8002364 <Error_Handler>
	}
}
 800234e:	bf00      	nop
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000c54 	.word	0x20000c54
 800235c:	50000100 	.word	0x50000100
 8002360:	0c900008 	.word	0x0c900008

08002364 <Error_Handler>:

void Error_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236c:	e7fe      	b.n	800236c <Error_Handler+0x8>
	...

08002370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_MspInit+0x44>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_MspInit+0x44>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6613      	str	r3, [r2, #96]	; 0x60
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_MspInit+0x44>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_MspInit+0x44>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_MspInit+0x44>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	; 0x58
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_MspInit+0x44>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09c      	sub	sp, #112	; 0x70
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	2244      	movs	r2, #68	; 0x44
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fc53 	bl	8004c84 <memset>
  if(hadc->Instance==ADC1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e6:	d13e      	bne.n	8002466 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80023ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80023f2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 fa2f 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002404:	f7ff ffae 	bl	8002364 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_ADC_MspInit+0x13c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <HAL_ADC_MspInit+0x13c>)
 8002410:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_ADC_MspInit+0x13c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10b      	bne.n	8002432 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800241a:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 8002420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4a30      	ldr	r2, [pc, #192]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800244a:	2304      	movs	r3, #4
 800244c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244e:	2303      	movs	r3, #3
 8002450:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002460:	f001 fada 	bl	8003a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002464:	e042      	b.n	80024ec <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a24      	ldr	r2, [pc, #144]	; (80024fc <HAL_ADC_MspInit+0x144>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d13d      	bne.n	80024ec <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002474:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002476:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800247a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	4618      	mov	r0, r3
 8002482:	f002 f9eb 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 800248c:	f7ff ff6a 	bl	8002364 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002490:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_ADC_MspInit+0x13c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <HAL_ADC_MspInit+0x13c>)
 8002498:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_ADC_MspInit+0x13c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10b      	bne.n	80024ba <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 80024a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_ADC_MspInit+0x140>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d2:	2340      	movs	r3, #64	; 0x40
 80024d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d6:	2303      	movs	r3, #3
 80024d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024e2:	4619      	mov	r1, r3
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f001 fa96 	bl	8003a18 <HAL_GPIO_Init>
}
 80024ec:	bf00      	nop
 80024ee:	3770      	adds	r7, #112	; 0x70
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000cc0 	.word	0x20000cc0
 80024f8:	40021000 	.word	0x40021000
 80024fc:	50000100 	.word	0x50000100

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <NMI_Handler+0x4>

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>

0800251e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f000 f944 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <SystemInit+0x20>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <SystemInit+0x20>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <TIM4_IRQHandler>:
#define B6	B5 * 2

static float music_tones[] = {D5, F5, D5, C5, A4, 0, A4};
static float music_delays[] = {600, 600, 600, 600, 1000, 200, 400, 0};

void TIM4_IRQHandler(void) {
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	static uint8_t phase = 1;
	if(TIM4->SR & 0x1){
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <TIM4_IRQHandler+0x40>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <TIM4_IRQHandler+0x3c>
		TIM4->SR &= ~(0x1);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <TIM4_IRQHandler+0x40>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <TIM4_IRQHandler+0x40>)
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	6113      	str	r3, [r2, #16]
		BLDC_phase(phase + 1, TONE_POWER);
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <TIM4_IRQHandler+0x44>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80025c0 <TIM4_IRQHandler+0x48>
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fd27 	bl	8000ff4 <BLDC_phase>
//		setPhaseVoltage(0.15, phase*90);
		phase ^= 1;
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <TIM4_IRQHandler+0x44>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <TIM4_IRQHandler+0x44>)
 80025b2:	701a      	strb	r2, [r3, #0]
	}
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40000800 	.word	0x40000800
 80025bc:	20000b88 	.word	0x20000b88
 80025c0:	3d99999a 	.word	0x3d99999a

080025c4 <play_tone>:

void play_tone(float tone) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	ed87 0a01 	vstr	s0, [r7, #4]
	motor_on();
 80025ce:	f7fe ffef 	bl	80015b0 <motor_on>
	TIM4_on();
 80025d2:	f7ff f9d1 	bl	8001978 <TIM4_on>
	TIM4_update_freq(tone*2);
 80025d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	f000 f857 	bl	8002694 <TIM4_update_freq>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <play_music>:

void play_music() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	80fb      	strh	r3, [r7, #6]
	motor_on();
 80025fa:	f7fe ffd9 	bl	80015b0 <motor_on>
	TIM4_on();
 80025fe:	f7ff f9bb 	bl	8001978 <TIM4_on>
	do {
		if(music_tones[i] < 0.5) {
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <play_music+0x8c>)
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	d502      	bpl.n	8002622 <play_music+0x32>
			tone_off();
 800261c:	f000 f832 	bl	8002684 <tone_off>
 8002620:	e009      	b.n	8002636 <play_music+0x46>
		} else {
			play_tone(music_tones[i]);
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <play_music+0x8c>)
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb0 0a67 	vmov.f32	s0, s15
 8002632:	f7ff ffc7 	bl	80025c4 <play_tone>
		}
		delay_ms(music_delays[i]);
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4a11      	ldr	r2, [pc, #68]	; (8002680 <play_music+0x90>)
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002646:	ee17 3a90 	vmov	r3, s15
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fbfb 	bl	8001e48 <delay_ms>
		i++;
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	3301      	adds	r3, #1
 8002656:	80fb      	strh	r3, [r7, #6]
	}while(music_delays[i] != 0);
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <play_music+0x90>)
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	d1c9      	bne.n	8002602 <play_music+0x12>
	tone_off();
 800266e:	f000 f809 	bl	8002684 <tone_off>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000b4c 	.word	0x20000b4c
 8002680:	20000b68 	.word	0x20000b68

08002684 <tone_off>:

void tone_off() {
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	TIM4_off();
 8002688:	f7ff f986 	bl	8001998 <TIM4_off>
	motor_off();
 800268c:	f7fe ffac 	bl	80015e8 <motor_off>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}

08002694 <TIM4_update_freq>:

void TIM4_update_freq(float freq) {
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint32_t flag = TIM4->CR1 & 0b10;
//	TIM4->CR1 &= ~(1 << 1);

    float f = (float)(SYSCLK_FREQ/100) / freq;
 800269e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80026d8 <TIM4_update_freq+0x44>
 80026a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80026a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026aa:	edc7 7a03 	vstr	s15, [r7, #12]
    // TIM4->ARR |= ((uint32_t)f & 0x000FFFFF);
    TIM4->ARR = (uint32_t)f;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <TIM4_update_freq+0x48>)
 80026b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b8:	ee17 2a90 	vmov	r2, s15
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC = 100 - 1;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <TIM4_update_freq+0x48>)
 80026c0:	2263      	movs	r2, #99	; 0x63
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28

    TIM4->CNT = 0;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <TIM4_update_freq+0x48>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

//    TIM4->CR1 |= flag << 1;
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	49cf8500 	.word	0x49cf8500
 80026dc:	40000800 	.word	0x40000800

080026e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e0:	480d      	ldr	r0, [pc, #52]	; (8002718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopForever+0x6>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopForever+0xe>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopForever+0x16>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800270a:	f7ff ff23 	bl	8002554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f002 fa95 	bl	8004c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002712:	f7fe ff8d 	bl	8001630 <main>

08002716 <LoopForever>:

LoopForever:
    b LoopForever
 8002716:	e7fe      	b.n	8002716 <LoopForever>
  ldr   r0, =_estack
 8002718:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	20000b94 	.word	0x20000b94
  ldr r2, =_sidata
 8002724:	08004cc4 	.word	0x08004cc4
  ldr r2, =_sbss
 8002728:	20000b94 	.word	0x20000b94
  ldr r4, =_ebss
 800272c:	20000cc8 	.word	0x20000cc8

08002730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC1_2_IRQHandler>

08002732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f001 f939 	bl	80039b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002742:	200f      	movs	r0, #15
 8002744:	f000 f80e 	bl	8002764 <HAL_InitTick>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	71fb      	strb	r3, [r7, #7]
 8002752:	e001      	b.n	8002758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002754:	f7ff fe0c 	bl	8002370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002758:	79fb      	ldrb	r3, [r7, #7]

}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_InitTick+0x68>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d022      	beq.n	80027be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_InitTick+0x6c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_InitTick+0x68>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002784:	fbb1 f3f3 	udiv	r3, r1, r3
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	4618      	mov	r0, r3
 800278e:	f001 f936 	bl	80039fe <HAL_SYSTICK_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10f      	bne.n	80027b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	d809      	bhi.n	80027b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279e:	2200      	movs	r2, #0
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	f04f 30ff 	mov.w	r0, #4294967295
 80027a6:	f001 f910 	bl	80039ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_InitTick+0x70>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e007      	b.n	80027c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e004      	b.n	80027c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e001      	b.n	80027c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000b90 	.word	0x20000b90
 80027d0:	20000b48 	.word	0x20000b48
 80027d4:	20000b8c 	.word	0x20000b8c

080027d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_IncTick+0x1c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x20>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <HAL_IncTick+0x1c>)
 80027e8:	6013      	str	r3, [r2, #0]
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	20000cc4 	.word	0x20000cc4
 80027f8:	20000b90 	.word	0x20000b90

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000cc4 	.word	0x20000cc4

08002814 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	609a      	str	r2, [r3, #8]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3360      	adds	r3, #96	; 0x60
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <LL_ADC_SetOffset+0x44>)
 800289e:	4013      	ands	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	03fff000 	.word	0x03fff000

080028c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	461a      	mov	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	3360      	adds	r3, #96	; 0x60
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	431a      	orrs	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	431a      	orrs	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	615a      	str	r2, [r3, #20]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3330      	adds	r3, #48	; 0x30
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	4413      	add	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	211f      	movs	r1, #31
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 011f 	and.w	r1, r3, #31
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	431a      	orrs	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3314      	adds	r3, #20
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0e5b      	lsrs	r3, r3, #25
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	0d1b      	lsrs	r3, r3, #20
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2107      	movs	r1, #7
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	401a      	ands	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0d1b      	lsrs	r3, r3, #20
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	431a      	orrs	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10a      	bne.n	8002a92 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	407f0000 	.word	0x407f0000

08002ab8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6093      	str	r3, [r2, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <LL_ADC_IsEnabled+0x18>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <LL_ADC_IsEnabled+0x1a>
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d101      	bne.n	8002b92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d101      	bne.n	8002bb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e177      	b.n	8002ed2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fbe1 	bl	80023b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff67 	bl	8002adc <LL_ADC_IsDeepPowerDownEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff4d 	bl	8002ab8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff82 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d115      	bne.n	8002c5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff66 	bl	8002b04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c38:	4b9c      	ldr	r3, [pc, #624]	; (8002eac <HAL_ADC_Init+0x2e4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	4a9c      	ldr	r2, [pc, #624]	; (8002eb0 <HAL_ADC_Init+0x2e8>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c4c:	e002      	b.n	8002c54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f9      	bne.n	8002c4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff64 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff75 	bl	8002b7a <LL_ADC_REG_IsConversionOngoing>
 8002c90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 8110 	bne.w	8002ec0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 810c 	bne.w	8002ec0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cb0:	f043 0202 	orr.w	r2, r3, #2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff49 	bl	8002b54 <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d111      	bne.n	8002cec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ccc:	f7ff ff42 	bl	8002b54 <LL_ADC_IsEnabled>
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	4878      	ldr	r0, [pc, #480]	; (8002eb4 <HAL_ADC_Init+0x2ec>)
 8002cd4:	f7ff ff3e 	bl	8002b54 <LL_ADC_IsEnabled>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4323      	orrs	r3, r4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4874      	ldr	r0, [pc, #464]	; (8002eb8 <HAL_ADC_Init+0x2f0>)
 8002ce8:	f7ff fd94 	bl	8002814 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7f5b      	ldrb	r3, [r3, #29]
 8002cf0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002cfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d106      	bne.n	8002d28 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	045b      	lsls	r3, r3, #17
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <HAL_ADC_Init+0x2f4>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	69b9      	ldr	r1, [r7, #24]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff01 	bl	8002b7a <LL_ADC_REG_IsConversionOngoing>
 8002d78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff0e 	bl	8002ba0 <LL_ADC_INJ_IsConversionOngoing>
 8002d84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d16d      	bne.n	8002e68 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d16a      	bne.n	8002e68 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dae:	f023 0302 	bic.w	r3, r3, #2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d017      	beq.n	8002df4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ddc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002de0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6911      	ldr	r1, [r2, #16]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002df2:	e013      	b.n	8002e1c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d118      	bne.n	8002e58 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	e007      	b.n	8002e68 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10c      	bne.n	8002e8a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f023 010f 	bic.w	r1, r3, #15
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
 8002e88:	e007      	b.n	8002e9a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 020f 	bic.w	r2, r2, #15
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eaa:	e011      	b.n	8002ed0 <HAL_ADC_Init+0x308>
 8002eac:	20000b48 	.word	0x20000b48
 8002eb0:	053e2d63 	.word	0x053e2d63
 8002eb4:	50000100 	.word	0x50000100
 8002eb8:	50000300 	.word	0x50000300
 8002ebc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f043 0210 	orr.w	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ed0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}
 8002eda:	bf00      	nop

08002edc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b0b6      	sub	sp, #216	; 0xd8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x22>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e3c8      	b.n	8003690 <HAL_ADC_ConfigChannel+0x7b4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fe35 	bl	8002b7a <LL_ADC_REG_IsConversionOngoing>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 83ad 	bne.w	8003672 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	f7ff fd47 	bl	80029b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fe23 	bl	8002b7a <LL_ADC_REG_IsConversionOngoing>
 8002f34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe2f 	bl	8002ba0 <LL_ADC_INJ_IsConversionOngoing>
 8002f42:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 81d9 	bne.w	8003302 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 81d4 	bne.w	8003302 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f62:	d10f      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7ff fd4e 	bl	8002a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fd08 	bl	8002992 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f82:	e00e      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f7ff fd3d 	bl	8002a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fcf8 	bl	8002992 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d022      	beq.n	800300a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6919      	ldr	r1, [r3, #16]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fd4:	f7ff fc52 	bl	800287c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6919      	ldr	r1, [r3, #16]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f7ff fc9e 	bl	8002926 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6919      	ldr	r1, [r3, #16]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	7f1b      	ldrb	r3, [r3, #28]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x124>
 8002ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ffe:	e000      	b.n	8003002 <HAL_ADC_ConfigChannel+0x126>
 8003000:	2300      	movs	r3, #0
 8003002:	461a      	mov	r2, r3
 8003004:	f7ff fcaa 	bl	800295c <LL_ADC_SetOffsetSaturation>
 8003008:	e17b      	b.n	8003302 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fc57 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x15a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fc4c 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 800302c:	4603      	mov	r3, r0
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	e01e      	b.n	8003074 <HAL_ADC_ConfigChannel+0x198>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fc41 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800305c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e004      	b.n	8003072 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1b0>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	e018      	b.n	80030be <HAL_ADC_ConfigChannel+0x1e2>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80030b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030be:	429a      	cmp	r2, r3
 80030c0:	d106      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fc10 	bl	80028f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fbf4 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x220>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fbe9 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	e01e      	b.n	800313a <HAL_ADC_ConfigChannel+0x25e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fbde 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800311a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800311e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e004      	b.n	8003138 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800312e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x276>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	e018      	b.n	8003184 <HAL_ADC_ConfigChannel+0x2a8>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003166:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800316a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800316e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e004      	b.n	8003184 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800317a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2200      	movs	r2, #0
 800318e:	2101      	movs	r1, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fbad 	bl	80028f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fb91 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x2e6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2102      	movs	r1, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fb86 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	e01e      	b.n	8003200 <HAL_ADC_ConfigChannel+0x324>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2102      	movs	r1, #2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fb7b 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e004      	b.n	80031fe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80031f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x33c>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	e016      	b.n	8003246 <HAL_ADC_ConfigChannel+0x36a>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800322a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e004      	b.n	8003246 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800323c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003246:	429a      	cmp	r2, r3
 8003248:	d106      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fb4c 	bl	80028f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2103      	movs	r1, #3
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fb30 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003264:	4603      	mov	r3, r0
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x3a8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2103      	movs	r1, #3
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fb25 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 800327a:	4603      	mov	r3, r0
 800327c:	0e9b      	lsrs	r3, r3, #26
 800327e:	f003 021f 	and.w	r2, r3, #31
 8003282:	e017      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x3d8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2103      	movs	r1, #3
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fb1a 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003290:	4603      	mov	r3, r0
 8003292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800329c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e003      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80032aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x3f0>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	e011      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x414>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80032e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d106      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2103      	movs	r1, #3
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff faf7 	bl	80028f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fc24 	bl	8002b54 <LL_ADC_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 8140 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	461a      	mov	r2, r3
 8003322:	f7ff fba1 	bl	8002a68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a8f      	ldr	r2, [pc, #572]	; (8003568 <HAL_ADC_ConfigChannel+0x68c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	f040 8131 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_ADC_ConfigChannel+0x47e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0e9b      	lsrs	r3, r3, #26
 8003348:	3301      	adds	r3, #1
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2b09      	cmp	r3, #9
 8003350:	bf94      	ite	ls
 8003352:	2301      	movls	r3, #1
 8003354:	2300      	movhi	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	e019      	b.n	800338e <HAL_ADC_ConfigChannel+0x4b2>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800336c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003372:	2320      	movs	r3, #32
 8003374:	e003      	b.n	800337e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2b09      	cmp	r3, #9
 8003386:	bf94      	ite	ls
 8003388:	2301      	movls	r3, #1
 800338a:	2300      	movhi	r3, #0
 800338c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338e:	2b00      	cmp	r3, #0
 8003390:	d079      	beq.n	8003486 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x4d2>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	3301      	adds	r3, #1
 80033a6:	069b      	lsls	r3, r3, #26
 80033a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ac:	e015      	b.n	80033da <HAL_ADC_ConfigChannel+0x4fe>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033be:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80033ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	069b      	lsls	r3, r3, #26
 80033d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x51e>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	0e9b      	lsrs	r3, r3, #26
 80033ec:	3301      	adds	r3, #1
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2101      	movs	r1, #1
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	e017      	b.n	800342a <HAL_ADC_ConfigChannel+0x54e>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003412:	2320      	movs	r3, #32
 8003414:	e003      	b.n	800341e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	ea42 0103 	orr.w	r1, r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x574>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	3301      	adds	r3, #1
 8003442:	f003 021f 	and.w	r2, r3, #31
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	051b      	lsls	r3, r3, #20
 800344e:	e018      	b.n	8003482 <HAL_ADC_ConfigChannel+0x5a6>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003468:	2320      	movs	r3, #32
 800346a:	e003      	b.n	8003474 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	3301      	adds	r3, #1
 8003476:	f003 021f 	and.w	r2, r3, #31
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003482:	430b      	orrs	r3, r1
 8003484:	e081      	b.n	800358a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d107      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x5c6>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0e9b      	lsrs	r3, r3, #26
 8003498:	3301      	adds	r3, #1
 800349a:	069b      	lsls	r3, r3, #26
 800349c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a0:	e015      	b.n	80034ce <HAL_ADC_ConfigChannel+0x5f2>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	069b      	lsls	r3, r3, #26
 80034ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x612>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	3301      	adds	r3, #1
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	e017      	b.n	800351e <HAL_ADC_ConfigChannel+0x642>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	61fb      	str	r3, [r7, #28]
  return result;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003506:	2320      	movs	r3, #32
 8003508:	e003      	b.n	8003512 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	ea42 0103 	orr.w	r1, r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_ADC_ConfigChannel+0x66e>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	3301      	adds	r3, #1
 8003536:	f003 021f 	and.w	r2, r3, #31
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	3b1e      	subs	r3, #30
 8003542:	051b      	lsls	r3, r3, #20
 8003544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003548:	e01e      	b.n	8003588 <HAL_ADC_ConfigChannel+0x6ac>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	613b      	str	r3, [r7, #16]
  return result;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003562:	2320      	movs	r3, #32
 8003564:	e006      	b.n	8003574 <HAL_ADC_ConfigChannel+0x698>
 8003566:	bf00      	nop
 8003568:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	f003 021f 	and.w	r2, r3, #31
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	3b1e      	subs	r3, #30
 8003582:	051b      	lsls	r3, r3, #20
 8003584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003588:	430b      	orrs	r3, r1
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	4619      	mov	r1, r3
 8003590:	f7ff fa3e 	bl	8002a10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b3f      	ldr	r3, [pc, #252]	; (8003698 <HAL_ADC_ConfigChannel+0x7bc>)
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d071      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a0:	483e      	ldr	r0, [pc, #248]	; (800369c <HAL_ADC_ConfigChannel+0x7c0>)
 80035a2:	f7ff f95d 	bl	8002860 <LL_ADC_GetCommonPathInternalCh>
 80035a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_ADC_ConfigChannel+0x6e2>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d127      	bne.n	800360e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d121      	bne.n	800360e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d2:	d157      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035dc:	4619      	mov	r1, r3
 80035de:	482f      	ldr	r0, [pc, #188]	; (800369c <HAL_ADC_ConfigChannel+0x7c0>)
 80035e0:	f7ff f92b 	bl	800283a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e4:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	4a30      	ldr	r2, [pc, #192]	; (80036ac <HAL_ADC_ConfigChannel+0x7d0>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035fe:	e002      	b.n	8003606 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3b01      	subs	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f9      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800360c:	e03a      	b.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d113      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x764>
 8003618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02a      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	4619      	mov	r1, r3
 8003638:	4818      	ldr	r0, [pc, #96]	; (800369c <HAL_ADC_ConfigChannel+0x7c0>)
 800363a:	f7ff f8fe 	bl	800283a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800363e:	e021      	b.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d11c      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800364a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d011      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003668:	4619      	mov	r1, r3
 800366a:	480c      	ldr	r0, [pc, #48]	; (800369c <HAL_ADC_ConfigChannel+0x7c0>)
 800366c:	f7ff f8e5 	bl	800283a <LL_ADC_SetCommonPathInternalCh>
 8003670:	e008      	b.n	8003684 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800368c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003690:	4618      	mov	r0, r3
 8003692:	37d8      	adds	r7, #216	; 0xd8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	80080000 	.word	0x80080000
 800369c:	50000300 	.word	0x50000300
 80036a0:	c3210000 	.word	0xc3210000
 80036a4:	90c00010 	.word	0x90c00010
 80036a8:	20000b48 	.word	0x20000b48
 80036ac:	053e2d63 	.word	0x053e2d63
 80036b0:	c7520000 	.word	0xc7520000
 80036b4:	50000100 	.word	0x50000100
 80036b8:	cb840000 	.word	0xcb840000

080036bc <LL_ADC_IsEnabled>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <LL_ADC_IsEnabled+0x18>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <LL_ADC_IsEnabled+0x1a>
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d101      	bne.n	80036fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b0a1      	sub	sp, #132	; 0x84
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003722:	2302      	movs	r3, #2
 8003724:	e08b      	b.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800372e:	2300      	movs	r3, #0
 8003730:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003732:	2300      	movs	r3, #0
 8003734:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800373e:	d102      	bne.n	8003746 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003740:	4b41      	ldr	r3, [pc, #260]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	e001      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e06a      	b.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ffb9 	bl	80036e2 <LL_ADC_REG_IsConversionOngoing>
 8003770:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ffb3 	bl	80036e2 <LL_ADC_REG_IsConversionOngoing>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d14c      	bne.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003784:	2b00      	cmp	r3, #0
 8003786:	d149      	bne.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800378a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d028      	beq.n	80037e6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037a6:	035b      	lsls	r3, r3, #13
 80037a8:	430b      	orrs	r3, r1
 80037aa:	431a      	orrs	r2, r3
 80037ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037b4:	f7ff ff82 	bl	80036bc <LL_ADC_IsEnabled>
 80037b8:	4604      	mov	r4, r0
 80037ba:	4823      	ldr	r0, [pc, #140]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80037bc:	f7ff ff7e 	bl	80036bc <LL_ADC_IsEnabled>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4323      	orrs	r3, r4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d133      	bne.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037d0:	f023 030f 	bic.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	6811      	ldr	r1, [r2, #0]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	6892      	ldr	r2, [r2, #8]
 80037dc:	430a      	orrs	r2, r1
 80037de:	431a      	orrs	r2, r3
 80037e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037e4:	e024      	b.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037f6:	f7ff ff61 	bl	80036bc <LL_ADC_IsEnabled>
 80037fa:	4604      	mov	r4, r0
 80037fc:	4812      	ldr	r0, [pc, #72]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80037fe:	f7ff ff5d 	bl	80036bc <LL_ADC_IsEnabled>
 8003802:	4603      	mov	r3, r0
 8003804:	4323      	orrs	r3, r4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d112      	bne.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003812:	f023 030f 	bic.w	r3, r3, #15
 8003816:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003818:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800381a:	e009      	b.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800382e:	e000      	b.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003830:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800383a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800383e:	4618      	mov	r0, r3
 8003840:	3784      	adds	r7, #132	; 0x84
 8003842:	46bd      	mov	sp, r7
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	bf00      	nop
 8003848:	50000100 	.word	0x50000100
 800384c:	50000300 	.word	0x50000300

08003850 <__NVIC_SetPriorityGrouping>:
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60d3      	str	r3, [r2, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_GetPriorityGrouping>:
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <__NVIC_GetPriorityGrouping+0x18>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0307 	and.w	r3, r3, #7
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_SetPriority>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003980:	d301      	bcc.n	8003986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003982:	2301      	movs	r3, #1
 8003984:	e00f      	b.n	80039a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <SysTick_Config+0x40>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398e:	210f      	movs	r1, #15
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	f7ff ff8e 	bl	80038b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <SysTick_Config+0x40>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <SysTick_Config+0x40>)
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	e000e010 	.word	0xe000e010

080039b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff47 	bl	8003850 <__NVIC_SetPriorityGrouping>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039d8:	f7ff ff5e 	bl	8003898 <__NVIC_GetPriorityGrouping>
 80039dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	6978      	ldr	r0, [r7, #20]
 80039e4:	f7ff ff90 	bl	8003908 <NVIC_EncodePriority>
 80039e8:	4602      	mov	r2, r0
 80039ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff5f 	bl	80038b4 <__NVIC_SetPriority>
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ffb2 	bl	8003970 <SysTick_Config>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a26:	e15a      	b.n	8003cde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 814c 	beq.w	8003cd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d005      	beq.n	8003a58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d130      	bne.n	8003aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a8e:	2201      	movs	r2, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 0201 	and.w	r2, r3, #1
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d017      	beq.n	8003af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d123      	bne.n	8003b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	6939      	ldr	r1, [r7, #16]
 8003b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80a6 	beq.w	8003cd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8c:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_GPIO_Init+0x2e4>)
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	4a5a      	ldr	r2, [pc, #360]	; (8003cfc <HAL_GPIO_Init+0x2e4>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6613      	str	r3, [r2, #96]	; 0x60
 8003b98:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <HAL_GPIO_Init+0x2e4>)
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba4:	4a56      	ldr	r2, [pc, #344]	; (8003d00 <HAL_GPIO_Init+0x2e8>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	3302      	adds	r3, #2
 8003bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	220f      	movs	r2, #15
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bce:	d01f      	beq.n	8003c10 <HAL_GPIO_Init+0x1f8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a4c      	ldr	r2, [pc, #304]	; (8003d04 <HAL_GPIO_Init+0x2ec>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d019      	beq.n	8003c0c <HAL_GPIO_Init+0x1f4>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <HAL_GPIO_Init+0x2f0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <HAL_GPIO_Init+0x1f0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a4a      	ldr	r2, [pc, #296]	; (8003d0c <HAL_GPIO_Init+0x2f4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00d      	beq.n	8003c04 <HAL_GPIO_Init+0x1ec>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a49      	ldr	r2, [pc, #292]	; (8003d10 <HAL_GPIO_Init+0x2f8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <HAL_GPIO_Init+0x1e8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a48      	ldr	r2, [pc, #288]	; (8003d14 <HAL_GPIO_Init+0x2fc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_GPIO_Init+0x1e4>
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	e00a      	b.n	8003c12 <HAL_GPIO_Init+0x1fa>
 8003bfc:	2306      	movs	r3, #6
 8003bfe:	e008      	b.n	8003c12 <HAL_GPIO_Init+0x1fa>
 8003c00:	2304      	movs	r3, #4
 8003c02:	e006      	b.n	8003c12 <HAL_GPIO_Init+0x1fa>
 8003c04:	2303      	movs	r3, #3
 8003c06:	e004      	b.n	8003c12 <HAL_GPIO_Init+0x1fa>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e002      	b.n	8003c12 <HAL_GPIO_Init+0x1fa>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_GPIO_Init+0x1fa>
 8003c10:	2300      	movs	r3, #0
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	f002 0203 	and.w	r2, r2, #3
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	4093      	lsls	r3, r2
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c22:	4937      	ldr	r1, [pc, #220]	; (8003d00 <HAL_GPIO_Init+0x2e8>)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c54:	4a30      	ldr	r2, [pc, #192]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7e:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cd2:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <HAL_GPIO_Init+0x300>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f ae9d 	bne.w	8003a28 <HAL_GPIO_Init+0x10>
  }
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010000 	.word	0x40010000
 8003d04:	48000400 	.word	0x48000400
 8003d08:	48000800 	.word	0x48000800
 8003d0c:	48000c00 	.word	0x48000c00
 8003d10:	48001000 	.word	0x48001000
 8003d14:	48001400 	.word	0x48001400
 8003d18:	40010400 	.word	0x40010400

08003d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d141      	bne.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d2a:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d131      	bne.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d38:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3e:	4a46      	ldr	r2, [pc, #280]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d50:	4a41      	ldr	r2, [pc, #260]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2232      	movs	r2, #50	; 0x32
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	0c9b      	lsrs	r3, r3, #18
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6e:	e002      	b.n	8003d76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d76:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d82:	d102      	bne.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f2      	bne.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d8a:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d158      	bne.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e057      	b.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d9c:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da2:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dac:	e04d      	b.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db4:	d141      	bne.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003db6:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d131      	bne.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dca:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ddc:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2232      	movs	r2, #50	; 0x32
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	0c9b      	lsrs	r3, r3, #18
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfa:	e002      	b.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d102      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f2      	bne.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	d112      	bne.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e011      	b.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e38:	e007      	b.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e42:	4a05      	ldr	r2, [pc, #20]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	20000b48 	.word	0x20000b48
 8003e60:	431bde83 	.word	0x431bde83

08003e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e306      	b.n	8004484 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d075      	beq.n	8003f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e82:	4b97      	ldr	r3, [pc, #604]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e8c:	4b94      	ldr	r3, [pc, #592]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d102      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3e>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x44>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	4b8d      	ldr	r3, [pc, #564]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05b      	beq.n	8003f6c <HAL_RCC_OscConfig+0x108>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d157      	bne.n	8003f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e2e1      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x74>
 8003eca:	4b85      	ldr	r3, [pc, #532]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a84      	ldr	r2, [pc, #528]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e01d      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x98>
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7e      	ldr	r2, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b7c      	ldr	r3, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7b      	ldr	r2, [pc, #492]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003efc:	4b78      	ldr	r3, [pc, #480]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a77      	ldr	r2, [pc, #476]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b75      	ldr	r3, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a74      	ldr	r2, [pc, #464]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fc6e 	bl	80027fc <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fe fc6a 	bl	80027fc <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e2a6      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0xc0>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe fc5a 	bl	80027fc <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe fc56 	bl	80027fc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e292      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5e:	4b60      	ldr	r3, [pc, #384]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0xe8>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d075      	beq.n	8004066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	d102      	bne.n	8003f9a <HAL_RCC_OscConfig+0x136>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d002      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x13c>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d11f      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa0:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x154>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e265      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	4946      	ldr	r1, [pc, #280]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fcc:	4b45      	ldr	r3, [pc, #276]	; (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fbc7 	bl	8002764 <HAL_InitTick>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d043      	beq.n	8004064 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e251      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d023      	beq.n	8004030 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe8:	4b3d      	ldr	r3, [pc, #244]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3c      	ldr	r2, [pc, #240]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fc02 	bl	80027fc <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffc:	f7fe fbfe 	bl	80027fc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e23a      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400e:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	492d      	ldr	r1, [pc, #180]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	e01a      	b.n	8004066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8004036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fbde 	bl	80027fc <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe fbda 	bl	80027fc <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e216      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004056:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1e0>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d041      	beq.n	80040f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407a:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004080:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fe fbb7 	bl	80027fc <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7fe fbb3 	bl	80027fc <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1ef      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ef      	beq.n	8004092 <HAL_RCC_OscConfig+0x22e>
 80040b2:	e020      	b.n	80040f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fe fb9a 	bl	80027fc <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ca:	e00d      	b.n	80040e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040cc:	f7fe fb96 	bl	80027fc <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d906      	bls.n	80040e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1d2      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	20000b8c 	.word	0x20000b8c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e8:	4b8c      	ldr	r3, [pc, #560]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ea      	bne.n	80040cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a6 	beq.w	8004250 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004108:	4b84      	ldr	r3, [pc, #528]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_OscConfig+0x2b4>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x2b6>
 8004118:	2300      	movs	r3, #0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	4b7f      	ldr	r3, [pc, #508]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	4a7e      	ldr	r2, [pc, #504]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004128:	6593      	str	r3, [r2, #88]	; 0x58
 800412a:	4b7c      	ldr	r3, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004136:	2301      	movs	r3, #1
 8004138:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413a:	4b79      	ldr	r3, [pc, #484]	; (8004320 <HAL_RCC_OscConfig+0x4bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d118      	bne.n	8004178 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004146:	4b76      	ldr	r3, [pc, #472]	; (8004320 <HAL_RCC_OscConfig+0x4bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a75      	ldr	r2, [pc, #468]	; (8004320 <HAL_RCC_OscConfig+0x4bc>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004152:	f7fe fb53 	bl	80027fc <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fe fb4f 	bl	80027fc <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e18b      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416c:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <HAL_RCC_OscConfig+0x4bc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d108      	bne.n	8004192 <HAL_RCC_OscConfig+0x32e>
 8004180:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004190:	e024      	b.n	80041dc <HAL_RCC_OscConfig+0x378>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b05      	cmp	r3, #5
 8004198:	d110      	bne.n	80041bc <HAL_RCC_OscConfig+0x358>
 800419a:	4b60      	ldr	r3, [pc, #384]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	4a5e      	ldr	r2, [pc, #376]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041aa:	4b5c      	ldr	r3, [pc, #368]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	4a5a      	ldr	r2, [pc, #360]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ba:	e00f      	b.n	80041dc <HAL_RCC_OscConfig+0x378>
 80041bc:	4b57      	ldr	r3, [pc, #348]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	4a56      	ldr	r2, [pc, #344]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041cc:	4b53      	ldr	r3, [pc, #332]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	4a52      	ldr	r2, [pc, #328]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fe fb0a 	bl	80027fc <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fe fb06 	bl	80027fc <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e140      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	4b46      	ldr	r3, [pc, #280]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ed      	beq.n	80041ec <HAL_RCC_OscConfig+0x388>
 8004210:	e015      	b.n	800423e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fe faf3 	bl	80027fc <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421a:	f7fe faef 	bl	80027fc <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e129      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004230:	4b3a      	ldr	r3, [pc, #232]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1ed      	bne.n	800421a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800423e:	7ffb      	ldrb	r3, [r7, #31]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b35      	ldr	r3, [pc, #212]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a34      	ldr	r2, [pc, #208]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01c      	beq.n	800429e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004264:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426a:	4a2c      	ldr	r2, [pc, #176]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fac2 	bl	80027fc <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800427c:	f7fe fabe 	bl	80027fc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0fa      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428e:	4b23      	ldr	r3, [pc, #140]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <HAL_RCC_OscConfig+0x418>
 800429c:	e01b      	b.n	80042d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800429e:	4b1f      	ldr	r3, [pc, #124]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fe faa5 	bl	80027fc <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b6:	f7fe faa1 	bl	80027fc <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0dd      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ef      	bne.n	80042b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80d1 	beq.w	8004482 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	f000 808b 	beq.w	8004404 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d15e      	bne.n	80043b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fe fa7b 	bl	80027fc <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	e00c      	b.n	8004324 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430a:	f7fe fa77 	bl	80027fc <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d905      	bls.n	8004324 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0b3      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_OscConfig+0x628>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ec      	bne.n	800430a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <HAL_RCC_OscConfig+0x628>)
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	4b56      	ldr	r3, [pc, #344]	; (8004490 <HAL_RCC_OscConfig+0x62c>)
 8004336:	4013      	ands	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6a11      	ldr	r1, [r2, #32]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004340:	3a01      	subs	r2, #1
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800434a:	0212      	lsls	r2, r2, #8
 800434c:	4311      	orrs	r1, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004352:	0852      	lsrs	r2, r2, #1
 8004354:	3a01      	subs	r2, #1
 8004356:	0552      	lsls	r2, r2, #21
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800435e:	0852      	lsrs	r2, r2, #1
 8004360:	3a01      	subs	r2, #1
 8004362:	0652      	lsls	r2, r2, #25
 8004364:	4311      	orrs	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800436a:	06d2      	lsls	r2, r2, #27
 800436c:	430a      	orrs	r2, r1
 800436e:	4947      	ldr	r1, [pc, #284]	; (800448c <HAL_RCC_OscConfig+0x628>)
 8004370:	4313      	orrs	r3, r2
 8004372:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004374:	4b45      	ldr	r3, [pc, #276]	; (800448c <HAL_RCC_OscConfig+0x628>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a44      	ldr	r2, [pc, #272]	; (800448c <HAL_RCC_OscConfig+0x628>)
 800437a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004380:	4b42      	ldr	r3, [pc, #264]	; (800448c <HAL_RCC_OscConfig+0x628>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a41      	ldr	r2, [pc, #260]	; (800448c <HAL_RCC_OscConfig+0x628>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe fa36 	bl	80027fc <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fe fa32 	bl	80027fc <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e06e      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	4b39      	ldr	r3, [pc, #228]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x530>
 80043b2:	e066      	b.n	8004482 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a34      	ldr	r2, [pc, #208]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043c0:	4b32      	ldr	r3, [pc, #200]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a31      	ldr	r2, [pc, #196]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043cc:	4b2f      	ldr	r3, [pc, #188]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a2e      	ldr	r2, [pc, #184]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fe fa0e 	bl	80027fc <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fe fa0a 	bl	80027fc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e046      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	4b25      	ldr	r3, [pc, #148]	; (800448c <HAL_RCC_OscConfig+0x628>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x580>
 8004402:	e03e      	b.n	8004482 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e039      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004410:	4b1e      	ldr	r3, [pc, #120]	; (800448c <HAL_RCC_OscConfig+0x628>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	429a      	cmp	r2, r3
 8004422:	d12c      	bne.n	800447e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	3b01      	subs	r3, #1
 8004430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d123      	bne.n	800447e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d11b      	bne.n	800447e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d113      	bne.n	800447e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d109      	bne.n	800447e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	019f800c 	.word	0x019f800c

08004494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e11e      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ac:	4b91      	ldr	r3, [pc, #580]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d910      	bls.n	80044dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b8e      	ldr	r3, [pc, #568]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 020f 	bic.w	r2, r3, #15
 80044c2:	498c      	ldr	r1, [pc, #560]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b8a      	ldr	r3, [pc, #552]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e106      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d073      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d129      	bne.n	8004544 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f0:	4b81      	ldr	r3, [pc, #516]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0f4      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004500:	f000 f966 	bl	80047d0 <RCC_GetSysClockFreqFromPLLSource>
 8004504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4a7c      	ldr	r2, [pc, #496]	; (80046fc <HAL_RCC_ClockConfig+0x268>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d93f      	bls.n	800458e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800450e:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004522:	2b00      	cmp	r3, #0
 8004524:	d033      	beq.n	800458e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800452a:	2b00      	cmp	r3, #0
 800452c:	d12f      	bne.n	800458e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800452e:	4b72      	ldr	r3, [pc, #456]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004536:	4a70      	ldr	r2, [pc, #448]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e024      	b.n	800458e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d107      	bne.n	800455c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454c:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0c6      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455c:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0be      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800456c:	f000 f8ce 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8004570:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4a61      	ldr	r2, [pc, #388]	; (80046fc <HAL_RCC_ClockConfig+0x268>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d909      	bls.n	800458e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800457a:	4b5f      	ldr	r3, [pc, #380]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004582:	4a5d      	ldr	r2, [pc, #372]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800458e:	4b5a      	ldr	r3, [pc, #360]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4957      	ldr	r1, [pc, #348]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fe f92c 	bl	80027fc <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fe f928 	bl	80027fc <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e095      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	4b4e      	ldr	r3, [pc, #312]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 020c 	and.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d1eb      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d023      	beq.n	8004624 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a42      	ldr	r2, [pc, #264]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004608:	4a3b      	ldr	r2, [pc, #236]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800460a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800460e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004610:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4936      	ldr	r1, [pc, #216]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
 8004622:	e008      	b.n	8004636 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d105      	bne.n	8004636 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800462a:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 8004630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004634:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d21d      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004644:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 020f 	bic.w	r2, r3, #15
 800464c:	4929      	ldr	r1, [pc, #164]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004654:	f7fe f8d2 	bl	80027fc <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fe f8ce 	bl	80027fc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e03b      	b.n	80046ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_RCC_ClockConfig+0x260>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d1ed      	bne.n	800465c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4917      	ldr	r1, [pc, #92]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	490f      	ldr	r1, [pc, #60]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046be:	f000 f825 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490c      	ldr	r1, [pc, #48]	; (8004700 <HAL_RCC_ClockConfig+0x26c>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x270>)
 80046dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x274>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe f83e 	bl	8002764 <HAL_InitTick>
 80046e8:	4603      	mov	r3, r0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40022000 	.word	0x40022000
 80046f8:	40021000 	.word	0x40021000
 80046fc:	04c4b400 	.word	0x04c4b400
 8004700:	08004cac 	.word	0x08004cac
 8004704:	20000b48 	.word	0x20000b48
 8004708:	20000b8c 	.word	0x20000b8c

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004712:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b04      	cmp	r3, #4
 800471c:	d102      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e047      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004724:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b08      	cmp	r3, #8
 800472e:	d102      	bne.n	8004736 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	e03e      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b0c      	cmp	r3, #12
 8004740:	d136      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	3301      	adds	r3, #1
 8004758:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d10c      	bne.n	800477a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004760:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476a:	68d2      	ldr	r2, [r2, #12]
 800476c:	0a12      	lsrs	r2, r2, #8
 800476e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	617b      	str	r3, [r7, #20]
      break;
 8004778:	e00c      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004784:	68d2      	ldr	r2, [r2, #12]
 8004786:	0a12      	lsrs	r2, r2, #8
 8004788:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]
      break;
 8004792:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0e5b      	lsrs	r3, r3, #25
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	3301      	adds	r3, #1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e001      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047b4:	693b      	ldr	r3, [r7, #16]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	007a1200 	.word	0x007a1200

080047d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d10c      	bne.n	800480e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047fe:	68d2      	ldr	r2, [r2, #12]
 8004800:	0a12      	lsrs	r2, r2, #8
 8004802:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	617b      	str	r3, [r7, #20]
    break;
 800480c:	e00c      	b.n	8004828 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800480e:	4a12      	ldr	r2, [pc, #72]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004818:	68d2      	ldr	r2, [r2, #12]
 800481a:	0a12      	lsrs	r2, r2, #8
 800481c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
    break;
 8004826:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0e5b      	lsrs	r3, r3, #25
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	3301      	adds	r3, #1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004842:	687b      	ldr	r3, [r7, #4]
}
 8004844:	4618      	mov	r0, r3
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40021000 	.word	0x40021000
 8004854:	007a1200 	.word	0x007a1200
 8004858:	00f42400 	.word	0x00f42400

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004864:	2300      	movs	r3, #0
 8004866:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004868:	2300      	movs	r3, #0
 800486a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8098 	beq.w	80049aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487a:	2300      	movs	r3, #0
 800487c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487e:	4b43      	ldr	r3, [pc, #268]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10d      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	4b40      	ldr	r3, [pc, #256]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	4a3f      	ldr	r2, [pc, #252]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6593      	str	r3, [r2, #88]	; 0x58
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a2:	2301      	movs	r3, #1
 80048a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a6:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a39      	ldr	r2, [pc, #228]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b2:	f7fd ffa3 	bl	80027fc <HAL_GetTick>
 80048b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b8:	e009      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fd ff9f 	bl	80027fc <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d902      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	74fb      	strb	r3, [r7, #19]
        break;
 80048cc:	e005      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ef      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d159      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e0:	4b2a      	ldr	r3, [pc, #168]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01e      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d019      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048fc:	4b23      	ldr	r3, [pc, #140]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004906:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004918:	4b1c      	ldr	r3, [pc, #112]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	4a1b      	ldr	r2, [pc, #108]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd ff5f 	bl	80027fc <HAL_GetTick>
 800493e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004940:	e00b      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fd ff5b 	bl	80027fc <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d902      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	74fb      	strb	r3, [r7, #19]
            break;
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495a:	4b0c      	ldr	r3, [pc, #48]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ec      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	74bb      	strb	r3, [r7, #18]
 800498a:	e005      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800498c:	40021000 	.word	0x40021000
 8004990:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004998:	7c7b      	ldrb	r3, [r7, #17]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d105      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499e:	4ba6      	ldr	r3, [pc, #664]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	4aa5      	ldr	r2, [pc, #660]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049b6:	4ba0      	ldr	r3, [pc, #640]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f023 0203 	bic.w	r2, r3, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	499c      	ldr	r1, [pc, #624]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049d8:	4b97      	ldr	r3, [pc, #604]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f023 020c 	bic.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4994      	ldr	r1, [pc, #592]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049fa:	4b8f      	ldr	r3, [pc, #572]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	498b      	ldr	r1, [pc, #556]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a1c:	4b86      	ldr	r3, [pc, #536]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	4983      	ldr	r1, [pc, #524]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a3e:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	497a      	ldr	r1, [pc, #488]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a60:	4b75      	ldr	r3, [pc, #468]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	4972      	ldr	r1, [pc, #456]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a82:	4b6d      	ldr	r3, [pc, #436]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4969      	ldr	r1, [pc, #420]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aa4:	4b64      	ldr	r3, [pc, #400]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4961      	ldr	r1, [pc, #388]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ac6:	4b5c      	ldr	r3, [pc, #368]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	4958      	ldr	r1, [pc, #352]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d015      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ae8:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	4950      	ldr	r1, [pc, #320]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b06:	d105      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a4a      	ldr	r2, [pc, #296]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b20:	4b45      	ldr	r3, [pc, #276]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4942      	ldr	r1, [pc, #264]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b40:	4b3d      	ldr	r3, [pc, #244]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a3c      	ldr	r2, [pc, #240]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b58:	4b37      	ldr	r3, [pc, #220]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	4934      	ldr	r1, [pc, #208]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b76:	d105      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b78:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a2e      	ldr	r2, [pc, #184]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b90:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	4926      	ldr	r1, [pc, #152]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb0:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a20      	ldr	r2, [pc, #128]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	4918      	ldr	r1, [pc, #96]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be8:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a12      	ldr	r2, [pc, #72]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c00:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	490a      	ldr	r1, [pc, #40]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000

08004c3c <__libc_init_array>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	4d0d      	ldr	r5, [pc, #52]	; (8004c74 <__libc_init_array+0x38>)
 8004c40:	4c0d      	ldr	r4, [pc, #52]	; (8004c78 <__libc_init_array+0x3c>)
 8004c42:	1b64      	subs	r4, r4, r5
 8004c44:	10a4      	asrs	r4, r4, #2
 8004c46:	2600      	movs	r6, #0
 8004c48:	42a6      	cmp	r6, r4
 8004c4a:	d109      	bne.n	8004c60 <__libc_init_array+0x24>
 8004c4c:	4d0b      	ldr	r5, [pc, #44]	; (8004c7c <__libc_init_array+0x40>)
 8004c4e:	4c0c      	ldr	r4, [pc, #48]	; (8004c80 <__libc_init_array+0x44>)
 8004c50:	f000 f820 	bl	8004c94 <_init>
 8004c54:	1b64      	subs	r4, r4, r5
 8004c56:	10a4      	asrs	r4, r4, #2
 8004c58:	2600      	movs	r6, #0
 8004c5a:	42a6      	cmp	r6, r4
 8004c5c:	d105      	bne.n	8004c6a <__libc_init_array+0x2e>
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c64:	4798      	blx	r3
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7ee      	b.n	8004c48 <__libc_init_array+0xc>
 8004c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6e:	4798      	blx	r3
 8004c70:	3601      	adds	r6, #1
 8004c72:	e7f2      	b.n	8004c5a <__libc_init_array+0x1e>
 8004c74:	08004cbc 	.word	0x08004cbc
 8004c78:	08004cbc 	.word	0x08004cbc
 8004c7c:	08004cbc 	.word	0x08004cbc
 8004c80:	08004cc0 	.word	0x08004cc0

08004c84 <memset>:
 8004c84:	4402      	add	r2, r0
 8004c86:	4603      	mov	r3, r0
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d100      	bne.n	8004c8e <memset+0xa>
 8004c8c:	4770      	bx	lr
 8004c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c92:	e7f9      	b.n	8004c88 <memset+0x4>

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr

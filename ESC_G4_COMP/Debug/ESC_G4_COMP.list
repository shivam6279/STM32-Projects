
ESC_G4_COMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800689c  0800689c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800689c  0800689c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800689c  0800689c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000505c  20000070  08006914  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050cc  08006914  000250cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016321  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254e  00000000  00000000  000363c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00038910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00039c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7c0  00000000  00000000  0003aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015750  00000000  00000000  0005a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8f74  00000000  00000000  0006fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148d3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005770  00000000  00000000  00148d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006838 	.word	0x08006838

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006838 	.word	0x08006838

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <HAL_ADC_ConvCpltCallback>:
  * @retval int
  */
volatile uint16_t adc_uvw[5000], adc_x[5000], i_1 = 0, i_2 = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1 && i_1 < 5000) {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002d0:	d10e      	bne.n	80002f0 <HAL_ADC_ConvCpltCallback+0x30>
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <HAL_ADC_ConvCpltCallback+0x60>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80002dc:	4293      	cmp	r3, r2
 80002de:	d807      	bhi.n	80002f0 <HAL_ADC_ConvCpltCallback+0x30>
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
    	adc_uvw[0] = HAL_ADC_GetValue(&hadc1);
 80002e0:	4810      	ldr	r0, [pc, #64]	; (8000324 <HAL_ADC_ConvCpltCallback+0x64>)
 80002e2:	f001 ff17 	bl	8002114 <HAL_ADC_GetValue>
 80002e6:	4603      	mov	r3, r0
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <HAL_ADC_ConvCpltCallback+0x68>)
 80002ec:	801a      	strh	r2, [r3, #0]
    } else if(hadc->Instance == ADC2 && i_2 < 5000) {
		adc_x[0] = HAL_ADC_GetValue(&hadc2);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	}
}
 80002ee:	e012      	b.n	8000316 <HAL_ADC_ConvCpltCallback+0x56>
    } else if(hadc->Instance == ADC2 && i_2 < 5000) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <HAL_ADC_ConvCpltCallback+0x6c>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d10d      	bne.n	8000316 <HAL_ADC_ConvCpltCallback+0x56>
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <HAL_ADC_ConvCpltCallback+0x70>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	f241 3287 	movw	r2, #4999	; 0x1387
 8000304:	4293      	cmp	r3, r2
 8000306:	d806      	bhi.n	8000316 <HAL_ADC_ConvCpltCallback+0x56>
		adc_x[0] = HAL_ADC_GetValue(&hadc2);
 8000308:	480a      	ldr	r0, [pc, #40]	; (8000334 <HAL_ADC_ConvCpltCallback+0x74>)
 800030a:	f001 ff03 	bl	8002114 <HAL_ADC_GetValue>
 800030e:	4603      	mov	r3, r0
 8000310:	b29a      	uxth	r2, r3
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_ADC_ConvCpltCallback+0x78>)
 8000314:	801a      	strh	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200050ac 	.word	0x200050ac
 8000324:	2000008c 	.word	0x2000008c
 8000328:	2000028c 	.word	0x2000028c
 800032c:	50000100 	.word	0x50000100
 8000330:	200050ae 	.word	0x200050ae
 8000334:	200000f8 	.word	0x200000f8
 8000338:	2000299c 	.word	0x2000299c

0800033c <ADC_Select_CH>:

void ADC_Select_CH(unsigned char ch)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	ADC1->CR &= ~ADC_CR_ADEN;
 8000346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000350:	f023 0301 	bic.w	r3, r3, #1
 8000354:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 &= 0xFFFFF83F;
 8000356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000360:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= ch << ADC_SQR1_SQ1_Pos ;
 8000366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	79fa      	ldrb	r2, [r7, #7]
 800036e:	0192      	lsls	r2, r2, #6
 8000370:	4611      	mov	r1, r2
 8000372:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000376:	430b      	orrs	r3, r1
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->CR |= ADC_CR_ADEN;
 800037a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6093      	str	r3, [r2, #8]
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <main>:

int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b0a4      	sub	sp, #144	; 0x90
 800039c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800039e:	f001 f948 	bl	8001632 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003a2:	f000 fc1f 	bl	8000be4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003a6:	f000 fe9f 	bl	80010e8 <MX_GPIO_Init>
	MX_ADC1_Init();
 80003aa:	f000 fc67 	bl	8000c7c <MX_ADC1_Init>
	MX_ADC2_Init();
 80003ae:	f000 fcd1 	bl	8000d54 <MX_ADC2_Init>
	MX_TIM1_Init();
 80003b2:	f000 fd37 	bl	8000e24 <MX_TIM1_Init>
	MX_TIM2_Init();
 80003b6:	f000 fe23 	bl	8001000 <MX_TIM2_Init>
//	MX_USART2_UART_Init();

//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003ba:	2100      	movs	r1, #0
 80003bc:	4892      	ldr	r0, [pc, #584]	; (8000608 <main+0x270>)
 80003be:	f004 fa21 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80003c2:	2100      	movs	r1, #0
 80003c4:	4890      	ldr	r0, [pc, #576]	; (8000608 <main+0x270>)
 80003c6:	f005 f9ed 	bl	80057a4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003ca:	2104      	movs	r1, #4
 80003cc:	488e      	ldr	r0, [pc, #568]	; (8000608 <main+0x270>)
 80003ce:	f004 fa19 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80003d2:	2104      	movs	r1, #4
 80003d4:	488c      	ldr	r0, [pc, #560]	; (8000608 <main+0x270>)
 80003d6:	f005 f9e5 	bl	80057a4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80003da:	2108      	movs	r1, #8
 80003dc:	488a      	ldr	r0, [pc, #552]	; (8000608 <main+0x270>)
 80003de:	f004 fa11 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80003e2:	2108      	movs	r1, #8
 80003e4:	4888      	ldr	r0, [pc, #544]	; (8000608 <main+0x270>)
 80003e6:	f005 f9dd 	bl	80057a4 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80003ea:	210c      	movs	r1, #12
 80003ec:	4886      	ldr	r0, [pc, #536]	; (8000608 <main+0x270>)
 80003ee:	f004 f8a7 	bl	8004540 <HAL_TIM_OC_Start>

	HAL_TIM_Base_Start(&htim1);
 80003f2:	4885      	ldr	r0, [pc, #532]	; (8000608 <main+0x270>)
 80003f4:	f003 ffe0 	bl	80043b8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 80003f8:	4884      	ldr	r0, [pc, #528]	; (800060c <main+0x274>)
 80003fa:	f003 ffdd 	bl	80043b8 <HAL_TIM_Base_Start>
//	HAL_TIM_Base_Start(&htim6);

	ADC_Select_CH(1);
 80003fe:	2001      	movs	r0, #1
 8000400:	f7ff ff9c 	bl	800033c <ADC_Select_CH>
//		c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val2[0], val1[0], val1[1], val2[1]);
//		HAL_UART_Transmit(&huart2, temp, c, 100);
//		HAL_Delay(2);
//	}

	TIM1->CCR4 = 50;
 8000404:	4b82      	ldr	r3, [pc, #520]	; (8000610 <main+0x278>)
 8000406:	2232      	movs	r2, #50	; 0x32
 8000408:	641a      	str	r2, [r3, #64]	; 0x40
//	TIM1->CCR1 = 1000;
//	TIM1->CCR2 = 1000;
//	TIM1->CCR3 = 1000;
//	while(1);

	TIM1->CCER |= TIM_CCER_CC1NP;
 800040a:	4b81      	ldr	r3, [pc, #516]	; (8000610 <main+0x278>)
 800040c:	6a1b      	ldr	r3, [r3, #32]
 800040e:	4a80      	ldr	r2, [pc, #512]	; (8000610 <main+0x278>)
 8000410:	f043 0308 	orr.w	r3, r3, #8
 8000414:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2NP;
 8000416:	4b7e      	ldr	r3, [pc, #504]	; (8000610 <main+0x278>)
 8000418:	6a1b      	ldr	r3, [r3, #32]
 800041a:	4a7d      	ldr	r2, [pc, #500]	; (8000610 <main+0x278>)
 800041c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000420:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3NP;
 8000422:	4b7b      	ldr	r3, [pc, #492]	; (8000610 <main+0x278>)
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	4a7a      	ldr	r2, [pc, #488]	; (8000610 <main+0x278>)
 8000428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800042c:	6213      	str	r3, [r2, #32]
	TIM1->EGR |= TIM_EGR_COMG;
 800042e:	4b78      	ldr	r3, [pc, #480]	; (8000610 <main+0x278>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a77      	ldr	r2, [pc, #476]	; (8000610 <main+0x278>)
 8000434:	f043 0320 	orr.w	r3, r3, #32
 8000438:	6153      	str	r3, [r2, #20]
	TIM1->CCR1 = 0;
 800043a:	4b75      	ldr	r3, [pc, #468]	; (8000610 <main+0x278>)
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000440:	4b73      	ldr	r3, [pc, #460]	; (8000610 <main+0x278>)
 8000442:	2200      	movs	r2, #0
 8000444:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000446:	4b72      	ldr	r3, [pc, #456]	; (8000610 <main+0x278>)
 8000448:	2200      	movs	r2, #0
 800044a:	63da      	str	r2, [r3, #60]	; 0x3c
	for(i = 0 ; i < 5000; i++) {
 800044c:	2300      	movs	r3, #0
 800044e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000452:	e00f      	b.n	8000474 <main+0xdc>
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8000454:	4b6d      	ldr	r3, [pc, #436]	; (800060c <main+0x274>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2200      	movs	r2, #0
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 1000);
 800045c:	bf00      	nop
 800045e:	4b6b      	ldr	r3, [pc, #428]	; (800060c <main+0x274>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000468:	d3f9      	bcc.n	800045e <main+0xc6>
	for(i = 0 ; i < 5000; i++) {
 800046a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800046e:	3301      	adds	r3, #1
 8000470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000478:	f241 3287 	movw	r2, #4999	; 0x1387
 800047c:	4293      	cmp	r3, r2
 800047e:	d9e9      	bls.n	8000454 <main+0xbc>
	}

 	unsigned int p = 3500, p_adc_limit = 5000, c = 0, d = 0, t = 1500, tt = 100, tim_temp = 0, max_time = 50000;
 8000480:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000488:	f241 3388 	movw	r3, #5000	; 0x1388
 800048c:	677b      	str	r3, [r7, #116]	; 0x74
 800048e:	2300      	movs	r3, #0
 8000490:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000492:	2300      	movs	r3, #0
 8000494:	67bb      	str	r3, [r7, #120]	; 0x78
 8000496:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800049a:	673b      	str	r3, [r7, #112]	; 0x70
 800049c:	2364      	movs	r3, #100	; 0x64
 800049e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80004a0:	2300      	movs	r3, #0
 80004a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80004a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80004a8:	667b      	str	r3, [r7, #100]	; 0x64
 	while (1) {
 		ADC_Select_CH(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff ff46 	bl	800033c <ADC_Select_CH>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 80004b0:	4b57      	ldr	r3, [pc, #348]	; (8000610 <main+0x278>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a56      	ldr	r2, [pc, #344]	; (8000610 <main+0x278>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 80004bc:	4b54      	ldr	r3, [pc, #336]	; (8000610 <main+0x278>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a53      	ldr	r2, [pc, #332]	; (8000610 <main+0x278>)
 80004c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004c6:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80004c8:	4b51      	ldr	r3, [pc, #324]	; (8000610 <main+0x278>)
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	4a50      	ldr	r2, [pc, #320]	; (8000610 <main+0x278>)
 80004ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004d2:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80004d4:	4b4e      	ldr	r3, [pc, #312]	; (8000610 <main+0x278>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a4d      	ldr	r2, [pc, #308]	; (8000610 <main+0x278>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80004e0:	4b4b      	ldr	r3, [pc, #300]	; (8000610 <main+0x278>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = p;
 80004e6:	4a4a      	ldr	r2, [pc, #296]	; (8000610 <main+0x278>)
 80004e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004ec:	6393      	str	r3, [r2, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80004ee:	4b48      	ldr	r3, [pc, #288]	; (8000610 <main+0x278>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	63da      	str	r2, [r3, #60]	; 0x3c
 		TIM1->CCR4 = 3400;
 80004f4:	4b46      	ldr	r3, [pc, #280]	; (8000610 <main+0x278>)
 80004f6:	f640 5248 	movw	r2, #3400	; 0xd48
 80004fa:	641a      	str	r2, [r3, #64]	; 0x40

 		if(!d) {
 80004fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d10b      	bne.n	800051a <main+0x182>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8000502:	4b42      	ldr	r3, [pc, #264]	; (800060c <main+0x274>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 800050a:	bf00      	nop
 800050c:	4b3f      	ldr	r3, [pc, #252]	; (800060c <main+0x274>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000512:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000514:	429a      	cmp	r2, r3
 8000516:	d8f9      	bhi.n	800050c <main+0x174>
 8000518:	e042      	b.n	80005a0 <main+0x208>
 		} else {
			__HAL_TIM_SET_COUNTER(&htim2,0);
 800051a:	4b3c      	ldr	r3, [pc, #240]	; (800060c <main+0x274>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < tt);
 8000522:	bf00      	nop
 8000524:	4b39      	ldr	r3, [pc, #228]	; (800060c <main+0x274>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800052c:	429a      	cmp	r2, r3
 800052e:	d8f9      	bhi.n	8000524 <main+0x18c>
			if(p < p_adc_limit) {
 8000530:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000536:	429a      	cmp	r2, r3
 8000538:	d20f      	bcs.n	800055a <main+0x1c2>
				while(adc_uvw[0] > adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 800053a:	bf00      	nop
 800053c:	4b35      	ldr	r3, [pc, #212]	; (8000614 <main+0x27c>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b35      	ldr	r3, [pc, #212]	; (8000618 <main+0x280>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	b29b      	uxth	r3, r3
 8000548:	429a      	cmp	r2, r3
 800054a:	d914      	bls.n	8000576 <main+0x1de>
 800054c:	4b2f      	ldr	r3, [pc, #188]	; (800060c <main+0x274>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000552:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000554:	429a      	cmp	r2, r3
 8000556:	d8f1      	bhi.n	800053c <main+0x1a4>
 8000558:	e00d      	b.n	8000576 <main+0x1de>
			} else {
				while(adc_uvw[0] > 1732 && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 800055a:	bf00      	nop
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <main+0x27c>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8000566:	4293      	cmp	r3, r2
 8000568:	d905      	bls.n	8000576 <main+0x1de>
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <main+0x274>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000570:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000572:	429a      	cmp	r2, r3
 8000574:	d8f2      	bhi.n	800055c <main+0x1c4>
			}
			if(__HAL_TIM_GET_COUNTER(&htim2) < max_time) {
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <main+0x274>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800057e:	429a      	cmp	r2, r3
 8000580:	d90e      	bls.n	80005a0 <main+0x208>
				tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <main+0x274>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000588:	66bb      	str	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COUNTER(&htim2,0);
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <main+0x274>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
				while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 8000592:	bf00      	nop
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <main+0x274>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800059c:	429a      	cmp	r2, r3
 800059e:	d8f9      	bhi.n	8000594 <main+0x1fc>
			}
		}

		ADC_Select_CH(4);
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff fecb 	bl	800033c <ADC_Select_CH>
 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <main+0x278>)
 80005a8:	6a1b      	ldr	r3, [r3, #32]
 80005aa:	4a19      	ldr	r2, [pc, #100]	; (8000610 <main+0x278>)
 80005ac:	f023 0308 	bic.w	r3, r3, #8
 80005b0:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <main+0x278>)
 80005b4:	6a1b      	ldr	r3, [r3, #32]
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <main+0x278>)
 80005b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005bc:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC3NP;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <main+0x278>)
 80005c0:	6a1b      	ldr	r3, [r3, #32]
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <main+0x278>)
 80005c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c8:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0x278>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0x278>)
 80005d0:	f043 0320 	orr.w	r3, r3, #32
 80005d4:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <main+0x278>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = p;
 80005dc:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <main+0x278>)
 80005de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005e2:	6393      	str	r3, [r2, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <main+0x278>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	63da      	str	r2, [r3, #60]	; 0x3c

 		if(!d) {
 80005ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d115      	bne.n	800061c <main+0x284>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <main+0x274>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80005f8:	bf00      	nop
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <main+0x274>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000602:	429a      	cmp	r2, r3
 8000604:	d8f9      	bhi.n	80005fa <main+0x262>
 8000606:	e04c      	b.n	80006a2 <main+0x30a>
 8000608:	20000164 	.word	0x20000164
 800060c:	200001b0 	.word	0x200001b0
 8000610:	40012c00 	.word	0x40012c00
 8000614:	2000028c 	.word	0x2000028c
 8000618:	2000299c 	.word	0x2000299c
 		} else {
			__HAL_TIM_SET_COUNTER(&htim2,0);
 800061c:	4b86      	ldr	r3, [pc, #536]	; (8000838 <main+0x4a0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < tt);
 8000624:	bf00      	nop
 8000626:	4b84      	ldr	r3, [pc, #528]	; (8000838 <main+0x4a0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800062e:	429a      	cmp	r2, r3
 8000630:	d8f9      	bhi.n	8000626 <main+0x28e>
			if(p < p_adc_limit) {
 8000632:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000638:	429a      	cmp	r2, r3
 800063a:	d20f      	bcs.n	800065c <main+0x2c4>
				while(adc_uvw[0] < adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 800063c:	bf00      	nop
 800063e:	4b7f      	ldr	r3, [pc, #508]	; (800083c <main+0x4a4>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	b29a      	uxth	r2, r3
 8000644:	4b7e      	ldr	r3, [pc, #504]	; (8000840 <main+0x4a8>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	429a      	cmp	r2, r3
 800064c:	d214      	bcs.n	8000678 <main+0x2e0>
 800064e:	4b7a      	ldr	r3, [pc, #488]	; (8000838 <main+0x4a0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000656:	429a      	cmp	r2, r3
 8000658:	d8f1      	bhi.n	800063e <main+0x2a6>
 800065a:	e00d      	b.n	8000678 <main+0x2e0>
			} else {
				while(adc_uvw[0] < 1732 && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 800065c:	bf00      	nop
 800065e:	4b77      	ldr	r3, [pc, #476]	; (800083c <main+0x4a4>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	f240 62c3 	movw	r2, #1731	; 0x6c3
 8000668:	4293      	cmp	r3, r2
 800066a:	d805      	bhi.n	8000678 <main+0x2e0>
 800066c:	4b72      	ldr	r3, [pc, #456]	; (8000838 <main+0x4a0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000672:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000674:	429a      	cmp	r2, r3
 8000676:	d8f2      	bhi.n	800065e <main+0x2c6>
			}
			if(__HAL_TIM_GET_COUNTER(&htim2) < max_time) {
 8000678:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <main+0x4a0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000680:	429a      	cmp	r2, r3
 8000682:	d90e      	bls.n	80006a2 <main+0x30a>
				tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 8000684:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <main+0x4a0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	66bb      	str	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COUNTER(&htim2,0);
 800068c:	4b6a      	ldr	r3, [pc, #424]	; (8000838 <main+0x4a0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
				while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 8000694:	bf00      	nop
 8000696:	4b68      	ldr	r3, [pc, #416]	; (8000838 <main+0x4a0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800069e:	429a      	cmp	r2, r3
 80006a0:	d8f9      	bhi.n	8000696 <main+0x2fe>
			}
		}

		ADC_Select_CH(2);
 80006a2:	2002      	movs	r0, #2
 80006a4:	f7ff fe4a 	bl	800033c <ADC_Select_CH>
 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80006a8:	4b66      	ldr	r3, [pc, #408]	; (8000844 <main+0x4ac>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	4a65      	ldr	r2, [pc, #404]	; (8000844 <main+0x4ac>)
 80006ae:	f023 0308 	bic.w	r3, r3, #8
 80006b2:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC2NP;
 80006b4:	4b63      	ldr	r3, [pc, #396]	; (8000844 <main+0x4ac>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a62      	ldr	r2, [pc, #392]	; (8000844 <main+0x4ac>)
 80006ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006be:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80006c0:	4b60      	ldr	r3, [pc, #384]	; (8000844 <main+0x4ac>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4a5f      	ldr	r2, [pc, #380]	; (8000844 <main+0x4ac>)
 80006c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006ca:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80006cc:	4b5d      	ldr	r3, [pc, #372]	; (8000844 <main+0x4ac>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <main+0x4ac>)
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80006d8:	4b5a      	ldr	r3, [pc, #360]	; (8000844 <main+0x4ac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80006de:	4b59      	ldr	r3, [pc, #356]	; (8000844 <main+0x4ac>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 80006e4:	4a57      	ldr	r2, [pc, #348]	; (8000844 <main+0x4ac>)
 80006e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006ea:	63d3      	str	r3, [r2, #60]	; 0x3c

 		if(!d) {
 80006ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10b      	bne.n	800070a <main+0x372>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80006f2:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x4a0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80006fa:	bf00      	nop
 80006fc:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <main+0x4a0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f9      	bhi.n	80006fc <main+0x364>
 8000708:	e042      	b.n	8000790 <main+0x3f8>
 		} else {
			__HAL_TIM_SET_COUNTER(&htim2,0);
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <main+0x4a0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < tt);
 8000712:	bf00      	nop
 8000714:	4b48      	ldr	r3, [pc, #288]	; (8000838 <main+0x4a0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800071c:	429a      	cmp	r2, r3
 800071e:	d8f9      	bhi.n	8000714 <main+0x37c>
			if(p < p_adc_limit) {
 8000720:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000726:	429a      	cmp	r2, r3
 8000728:	d20f      	bcs.n	800074a <main+0x3b2>
				while(adc_uvw[0] > adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 800072a:	bf00      	nop
 800072c:	4b43      	ldr	r3, [pc, #268]	; (800083c <main+0x4a4>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <main+0x4a8>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	429a      	cmp	r2, r3
 800073a:	d914      	bls.n	8000766 <main+0x3ce>
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <main+0x4a0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000744:	429a      	cmp	r2, r3
 8000746:	d8f1      	bhi.n	800072c <main+0x394>
 8000748:	e00d      	b.n	8000766 <main+0x3ce>
			} else {
				while(adc_uvw[0] > 1732 && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 800074a:	bf00      	nop
 800074c:	4b3b      	ldr	r3, [pc, #236]	; (800083c <main+0x4a4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b29b      	uxth	r3, r3
 8000752:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8000756:	4293      	cmp	r3, r2
 8000758:	d905      	bls.n	8000766 <main+0x3ce>
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <main+0x4a0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000760:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000762:	429a      	cmp	r2, r3
 8000764:	d8f2      	bhi.n	800074c <main+0x3b4>
			}
			if(__HAL_TIM_GET_COUNTER(&htim2) < max_time) {
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <main+0x4a0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800076e:	429a      	cmp	r2, r3
 8000770:	d90e      	bls.n	8000790 <main+0x3f8>
				tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <main+0x4a0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COUNTER(&htim2,0);
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <main+0x4a0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
				while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 8000782:	bf00      	nop
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <main+0x4a0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800078c:	429a      	cmp	r2, r3
 800078e:	d8f9      	bhi.n	8000784 <main+0x3ec>
			}
		}

 		ADC_Select_CH(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff fdd3 	bl	800033c <ADC_Select_CH>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <main+0x4ac>)
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	4a2a      	ldr	r2, [pc, #168]	; (8000844 <main+0x4ac>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <main+0x4ac>)
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	4a27      	ldr	r2, [pc, #156]	; (8000844 <main+0x4ac>)
 80007a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007ac:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <main+0x4ac>)
 80007b0:	6a1b      	ldr	r3, [r3, #32]
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <main+0x4ac>)
 80007b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007b8:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <main+0x4ac>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a21      	ldr	r2, [pc, #132]	; (8000844 <main+0x4ac>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <main+0x4ac>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <main+0x4ac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <main+0x4ac>)
 80007d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007d8:	63d3      	str	r3, [r2, #60]	; 0x3c

 		if(!d) {
 80007da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <main+0x460>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <main+0x4a0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80007e8:	bf00      	nop
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <main+0x4a0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8f9      	bhi.n	80007ea <main+0x452>
 80007f6:	e04a      	b.n	800088e <main+0x4f6>
 		} else {
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <main+0x4a0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < tt);
 8000800:	bf00      	nop
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <main+0x4a0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800080a:	429a      	cmp	r2, r3
 800080c:	d8f9      	bhi.n	8000802 <main+0x46a>
			if(p < p_adc_limit) {
 800080e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000814:	429a      	cmp	r2, r3
 8000816:	d217      	bcs.n	8000848 <main+0x4b0>
				while(adc_uvw[0] < adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 8000818:	bf00      	nop
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <main+0x4a4>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <main+0x4a8>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	b29b      	uxth	r3, r3
 8000826:	429a      	cmp	r2, r3
 8000828:	d21c      	bcs.n	8000864 <main+0x4cc>
 800082a:	4b03      	ldr	r3, [pc, #12]	; (8000838 <main+0x4a0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000830:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000832:	429a      	cmp	r2, r3
 8000834:	d8f1      	bhi.n	800081a <main+0x482>
 8000836:	e015      	b.n	8000864 <main+0x4cc>
 8000838:	200001b0 	.word	0x200001b0
 800083c:	2000028c 	.word	0x2000028c
 8000840:	2000299c 	.word	0x2000299c
 8000844:	40012c00 	.word	0x40012c00
			} else {
				while(adc_uvw[0] < 1732 && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 8000848:	bf00      	nop
 800084a:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <main+0x68c>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b29b      	uxth	r3, r3
 8000850:	f240 62c3 	movw	r2, #1731	; 0x6c3
 8000854:	4293      	cmp	r3, r2
 8000856:	d805      	bhi.n	8000864 <main+0x4cc>
 8000858:	4b73      	ldr	r3, [pc, #460]	; (8000a28 <main+0x690>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000860:	429a      	cmp	r2, r3
 8000862:	d8f2      	bhi.n	800084a <main+0x4b2>
			}
			if(__HAL_TIM_GET_COUNTER(&htim2) < max_time) {
 8000864:	4b70      	ldr	r3, [pc, #448]	; (8000a28 <main+0x690>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800086c:	429a      	cmp	r2, r3
 800086e:	d90e      	bls.n	800088e <main+0x4f6>
				tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 8000870:	4b6d      	ldr	r3, [pc, #436]	; (8000a28 <main+0x690>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	66bb      	str	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8000878:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <main+0x690>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
				while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 8000880:	bf00      	nop
 8000882:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <main+0x690>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000888:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800088a:	429a      	cmp	r2, r3
 800088c:	d8f9      	bhi.n	8000882 <main+0x4ea>
			}
		}

		ADC_Select_CH(4);
 800088e:	2004      	movs	r0, #4
 8000890:	f7ff fd54 	bl	800033c <ADC_Select_CH>
 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000894:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <main+0x694>)
 8000896:	6a1b      	ldr	r3, [r3, #32]
 8000898:	4a64      	ldr	r2, [pc, #400]	; (8000a2c <main+0x694>)
 800089a:	f023 0308 	bic.w	r3, r3, #8
 800089e:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 80008a0:	4b62      	ldr	r3, [pc, #392]	; (8000a2c <main+0x694>)
 80008a2:	6a1b      	ldr	r3, [r3, #32]
 80008a4:	4a61      	ldr	r2, [pc, #388]	; (8000a2c <main+0x694>)
 80008a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008aa:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC3NP;
 80008ac:	4b5f      	ldr	r3, [pc, #380]	; (8000a2c <main+0x694>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	4a5e      	ldr	r2, [pc, #376]	; (8000a2c <main+0x694>)
 80008b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b6:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80008b8:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <main+0x694>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a5b      	ldr	r2, [pc, #364]	; (8000a2c <main+0x694>)
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = p;
 80008c4:	4a59      	ldr	r2, [pc, #356]	; (8000a2c <main+0x694>)
 80008c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008ca:	6353      	str	r3, [r2, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80008cc:	4b57      	ldr	r3, [pc, #348]	; (8000a2c <main+0x694>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80008d2:	4b56      	ldr	r3, [pc, #344]	; (8000a2c <main+0x694>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	63da      	str	r2, [r3, #60]	; 0x3c

 		if(!d) {
 80008d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10b      	bne.n	80008f6 <main+0x55e>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80008de:	4b52      	ldr	r3, [pc, #328]	; (8000a28 <main+0x690>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80008e6:	bf00      	nop
 80008e8:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <main+0x690>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f9      	bhi.n	80008e8 <main+0x550>
 80008f4:	e042      	b.n	800097c <main+0x5e4>
 		} else {
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80008f6:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <main+0x690>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < tt);
 80008fe:	bf00      	nop
 8000900:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <main+0x690>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000908:	429a      	cmp	r2, r3
 800090a:	d8f9      	bhi.n	8000900 <main+0x568>
			if(p < p_adc_limit) {
 800090c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000912:	429a      	cmp	r2, r3
 8000914:	d20f      	bcs.n	8000936 <main+0x59e>
				while(adc_uvw[0] > adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 8000916:	bf00      	nop
 8000918:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <main+0x68c>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <main+0x698>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	429a      	cmp	r2, r3
 8000926:	d914      	bls.n	8000952 <main+0x5ba>
 8000928:	4b3f      	ldr	r3, [pc, #252]	; (8000a28 <main+0x690>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f1      	bhi.n	8000918 <main+0x580>
 8000934:	e00d      	b.n	8000952 <main+0x5ba>
			} else {
				while(adc_uvw[0] > 1732 && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 8000936:	bf00      	nop
 8000938:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <main+0x68c>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b29b      	uxth	r3, r3
 800093e:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8000942:	4293      	cmp	r3, r2
 8000944:	d905      	bls.n	8000952 <main+0x5ba>
 8000946:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <main+0x690>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800094e:	429a      	cmp	r2, r3
 8000950:	d8f2      	bhi.n	8000938 <main+0x5a0>
			}
			if(__HAL_TIM_GET_COUNTER(&htim2) < max_time) {
 8000952:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <main+0x690>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000958:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800095a:	429a      	cmp	r2, r3
 800095c:	d90e      	bls.n	800097c <main+0x5e4>
				tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <main+0x690>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <main+0x690>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
				while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 800096e:	bf00      	nop
 8000970:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <main+0x690>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f9      	bhi.n	8000970 <main+0x5d8>
			}
		}

		ADC_Select_CH(2);
 800097c:	2002      	movs	r0, #2
 800097e:	f7ff fcdd 	bl	800033c <ADC_Select_CH>
 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <main+0x694>)
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <main+0x694>)
 8000988:	f023 0308 	bic.w	r3, r3, #8
 800098c:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC2NP;
 800098e:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <main+0x694>)
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <main+0x694>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <main+0x694>)
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <main+0x694>)
 80009a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009a4:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <main+0x694>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <main+0x694>)
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = p;
 80009b2:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <main+0x694>)
 80009b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80009b8:	6353      	str	r3, [r2, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <main+0x694>)
 80009bc:	2200      	movs	r2, #0
 80009be:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <main+0x694>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	63da      	str	r2, [r3, #60]	; 0x3c

 		if(!d) {
 80009c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10b      	bne.n	80009e4 <main+0x64c>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <main+0x690>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80009d4:	bf00      	nop
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <main+0x690>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80009de:	429a      	cmp	r2, r3
 80009e0:	d8f9      	bhi.n	80009d6 <main+0x63e>
 80009e2:	e04a      	b.n	8000a7a <main+0x6e2>
		} else {
 			__HAL_TIM_SET_COUNTER(&htim2,0);
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <main+0x690>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
 			while (__HAL_TIM_GET_COUNTER(&htim2) < tt);
 80009ec:	bf00      	nop
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <main+0x690>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d8f9      	bhi.n	80009ee <main+0x656>
 			if(p < p_adc_limit) {
 80009fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80009fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d217      	bcs.n	8000a34 <main+0x69c>
				while(adc_uvw[0] < adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 8000a04:	bf00      	nop
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <main+0x68c>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <main+0x698>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d21c      	bcs.n	8000a50 <main+0x6b8>
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <main+0x690>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d8f1      	bhi.n	8000a06 <main+0x66e>
 8000a22:	e015      	b.n	8000a50 <main+0x6b8>
 8000a24:	2000028c 	.word	0x2000028c
 8000a28:	200001b0 	.word	0x200001b0
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	2000299c 	.word	0x2000299c
			} else {
				while(adc_uvw[0] < 1732 && __HAL_TIM_GET_COUNTER(&htim2) < max_time);
 8000a34:	bf00      	nop
 8000a36:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <main+0x820>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	f240 62c3 	movw	r2, #1731	; 0x6c3
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d805      	bhi.n	8000a50 <main+0x6b8>
 8000a44:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <main+0x824>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d8f2      	bhi.n	8000a36 <main+0x69e>
			}
 			if(__HAL_TIM_GET_COUNTER(&htim2) < max_time) {
 8000a50:	4b5a      	ldr	r3, [pc, #360]	; (8000bbc <main+0x824>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d90e      	bls.n	8000a7a <main+0x6e2>
				tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 8000a5c:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <main+0x824>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a62:	66bb      	str	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8000a64:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <main+0x824>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
				while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 8000a6c:	bf00      	nop
 8000a6e:	4b53      	ldr	r3, [pc, #332]	; (8000bbc <main+0x824>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8f9      	bhi.n	8000a6e <main+0x6d6>
//			HAL_ADC_Stop_IT(&hadc1);
//			HAL_ADC_Stop_IT(&hadc2);
//			break;
//		}

		if(d == 0) {
 8000a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d108      	bne.n	8000a92 <main+0x6fa>
			if(++c >= 500) {
 8000a80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a82:	3301      	adds	r3, #1
 8000a84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a8c:	d301      	bcc.n	8000a92 <main+0x6fa>
				d = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	67bb      	str	r3, [r7, #120]	; 0x78
			}
		}

		if(d == 1) {
 8000a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d109      	bne.n	8000aac <main+0x714>
			HAL_ADC_Start_IT(&hadc1);
 8000a98:	4849      	ldr	r0, [pc, #292]	; (8000bc0 <main+0x828>)
 8000a9a:	f001 fa09 	bl	8001eb0 <HAL_ADC_Start_IT>
			HAL_ADC_Start_IT(&hadc2);
 8000a9e:	4849      	ldr	r0, [pc, #292]	; (8000bc4 <main+0x82c>)
 8000aa0:	f001 fa06 	bl	8001eb0 <HAL_ADC_Start_IT>
			d++;
 8000aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8000aaa:	e01c      	b.n	8000ae6 <main+0x74e>
//			p = 1000;
		} else if(d > 1) {
 8000aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d919      	bls.n	8000ae6 <main+0x74e>
			d++;
 8000ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	67bb      	str	r3, [r7, #120]	; 0x78
			if(d % 300 == 0 && p <= 3000) {
 8000ab8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <main+0x830>)
 8000abc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac0:	095b      	lsrs	r3, r3, #5
 8000ac2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ac6:	fb01 f303 	mul.w	r3, r1, r3
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10a      	bne.n	8000ae6 <main+0x74e>
 8000ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ad4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d804      	bhi.n	8000ae6 <main+0x74e>
				p += 50;
 8000adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ae0:	3332      	adds	r3, #50	; 0x32
 8000ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}
		}

		if(i_1 >= 5000 || i_2 >= 5000) {
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <main+0x834>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f241 3287 	movw	r2, #4999	; 0x1387
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d807      	bhi.n	8000b04 <main+0x76c>
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <main+0x838>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	f241 3287 	movw	r2, #4999	; 0x1387
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d800      	bhi.n	8000b04 <main+0x76c>
 		ADC_Select_CH(1);
 8000b02:	e4d2      	b.n	80004aa <main+0x112>
			break;
		}
 	}
 	TIM1->CCER |= TIM_CCER_CC1NP;
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <main+0x83c>)
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	4a32      	ldr	r2, [pc, #200]	; (8000bd4 <main+0x83c>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6213      	str	r3, [r2, #32]
 	TIM1->CCER |= TIM_CCER_CC2NP;
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <main+0x83c>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <main+0x83c>)
 8000b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1a:	6213      	str	r3, [r2, #32]
 	TIM1->CCER |= TIM_CCER_CC3NP;
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <main+0x83c>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4a2c      	ldr	r2, [pc, #176]	; (8000bd4 <main+0x83c>)
 8000b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b26:	6213      	str	r3, [r2, #32]
	TIM1->EGR |= TIM_EGR_COMG;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <main+0x83c>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <main+0x83c>)
 8000b2e:	f043 0320 	orr.w	r3, r3, #32
 8000b32:	6153      	str	r3, [r2, #20]
	TIM1->CCR1 = 0;
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <main+0x83c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <main+0x83c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <main+0x83c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	63da      	str	r2, [r3, #60]	; 0x3c
	for(i = 0; i < i_1; i++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b4c:	e02b      	b.n	8000ba6 <main+0x80e>
		c = snprintf(temp, sizeof(temp),"%d, %d\n", adc_uvw[i], adc_x[i]);
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <main+0x820>)
 8000b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <main+0x840>)
 8000b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4638      	mov	r0, r7
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <main+0x844>)
 8000b70:	2164      	movs	r1, #100	; 0x64
 8000b72:	f005 f9df 	bl	8005f34 <sniprintf>
 8000b76:	4603      	mov	r3, r0
 8000b78:	67fb      	str	r3, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart2, temp, c, 100);
 8000b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4639      	mov	r1, r7
 8000b80:	2364      	movs	r3, #100	; 0x64
 8000b82:	4817      	ldr	r0, [pc, #92]	; (8000be0 <main+0x848>)
 8000b84:	f005 f845 	bl	8005c12 <HAL_UART_Transmit>
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <main+0x824>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 100);
 8000b90:	bf00      	nop
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <main+0x824>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b98:	2b63      	cmp	r3, #99	; 0x63
 8000b9a:	d9fa      	bls.n	8000b92 <main+0x7fa>
	for(i = 0; i < i_1; i++) {
 8000b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <main+0x834>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d3cb      	bcc.n	8000b4e <main+0x7b6>
	}
	while(1);
 8000bb6:	e7fe      	b.n	8000bb6 <main+0x81e>
 8000bb8:	2000028c 	.word	0x2000028c
 8000bbc:	200001b0 	.word	0x200001b0
 8000bc0:	2000008c 	.word	0x2000008c
 8000bc4:	200000f8 	.word	0x200000f8
 8000bc8:	1b4e81b5 	.word	0x1b4e81b5
 8000bcc:	200050ac 	.word	0x200050ac
 8000bd0:	200050ae 	.word	0x200050ae
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	2000299c 	.word	0x2000299c
 8000bdc:	08006850 	.word	0x08006850
 8000be0:	200001fc 	.word	0x200001fc

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2238      	movs	r2, #56	; 0x38
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f005 f996 	bl	8005f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f002 fbee 	bl	80033e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000c26:	2315      	movs	r3, #21
 8000c28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 fc78 	bl	8003530 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c46:	f000 fa99 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2104      	movs	r1, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 ff7c 	bl	8003b60 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c6e:	f000 fa85 	bl	800117c <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3750      	adds	r7, #80	; 0x50
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2220      	movs	r2, #32
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 f945 	bl	8005f24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000c9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ca0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000ca4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000ce4:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cec:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000d0a:	f000 ff47 	bl	8001b9c <HAL_ADC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000d14:	f000 fa32 	bl	800117c <Error_Handler>
//    Error_Handler();
//  }
//
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_ADC1_Init+0xd4>)
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d24:	237f      	movs	r3, #127	; 0x7f
 8000d26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_ADC1_Init+0xd0>)
 8000d36:	f001 fc29 	bl	800258c <HAL_ADC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d40:	f000 fa1c 	bl	800117c <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000008c 	.word	0x2000008c
 8000d50:	04300002 	.word	0x04300002

08000d54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f005 f8df 	bl	8005f24 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d68:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <MX_ADC2_Init+0xc8>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000dae:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000db6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000dd4:	f000 fee2 	bl	8001b9c <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000dde:	f000 f9cd 	bl	800117c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_ADC2_Init+0xcc>)
 8000de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de6:	2306      	movs	r3, #6
 8000de8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dee:	237f      	movs	r3, #127	; 0x7f
 8000df0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df2:	2304      	movs	r3, #4
 8000df4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_ADC2_Init+0xc4>)
 8000e00:	f001 fbc4 	bl	800258c <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e0a:	f000 f9b7 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000f8 	.word	0x200000f8
 8000e1c:	50000100 	.word	0x50000100
 8000e20:	47520000 	.word	0x47520000

08000e24 <MX_TIM1_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b09c      	sub	sp, #112	; 0x70
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 f860 	bl	8005f24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e64:	4b64      	ldr	r3, [pc, #400]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e66:	4a65      	ldr	r2, [pc, #404]	; (8000ffc <MX_TIM1_Init+0x1d8>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e6a:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode =TIM_COUNTERMODE_CENTERALIGNED1 ;
 8000e70:	4b61      	ldr	r3, [pc, #388]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3500;
 8000e76:	4b60      	ldr	r3, [pc, #384]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e78:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000e7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e84:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8a:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e90:	4859      	ldr	r0, [pc, #356]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000e92:	f003 fa39 	bl	8004308 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e9c:	f000 f96e 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4852      	ldr	r0, [pc, #328]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000eae:	f003 ff37 	bl	8004d20 <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000eb8:	f000 f960 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ebc:	484e      	ldr	r0, [pc, #312]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000ebe:	f003 fc3f 	bl	8004740 <HAL_TIM_PWM_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ec8:	f000 f958 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ecc:	484a      	ldr	r0, [pc, #296]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000ece:	f003 fad5 	bl	800447c <HAL_TIM_OC_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000ed8:	f000 f950 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000edc:	2370      	movs	r3, #112	; 0x70
 8000ede:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ee8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eec:	4619      	mov	r1, r3
 8000eee:	4842      	ldr	r0, [pc, #264]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000ef0:	f004 fd0c 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000efa:	f000 f93f 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efe:	2360      	movs	r3, #96	; 0x60
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f06:	2300      	movs	r3, #0
 8000f08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4835      	ldr	r0, [pc, #212]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000f24:	f003 fde8 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000f2e:	f000 f925 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f36:	2204      	movs	r2, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482f      	ldr	r0, [pc, #188]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000f3c:	f003 fddc 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000f46:	f000 f919 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f4e:	2208      	movs	r2, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	4829      	ldr	r0, [pc, #164]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000f54:	f003 fdd0 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000f5e:	f000 f90d 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f62:	2330      	movs	r3, #48	; 0x30
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f6e:	220c      	movs	r2, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	4821      	ldr	r0, [pc, #132]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000f74:	f003 fd46 	bl	8004a04 <HAL_TIM_OC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8000f7e:	f000 f8fd 	bl	800117c <Error_Handler>
  }
  HAL_TIMEx_OC_ConfigPulseOnCompare(&htim1, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000f88:	f004 fde2 	bl	8005b50 <HAL_TIMEx_OC_ConfigPulseOnCompare>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	69da      	ldr	r2, [r3, #28]
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f9a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8000fa8:	2332      	movs	r3, #50	; 0x32
 8000faa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000fda:	f004 fd19 	bl	8005a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x1c4>
  {
    Error_Handler();
 8000fe4:	f000 f8ca 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <MX_TIM1_Init+0x1d4>)
 8000fea:	f000 fa05 	bl	80013f8 <HAL_TIM_MspPostInit>

}
 8000fee:	bf00      	nop
 8000ff0:	3770      	adds	r7, #112	; 0x70
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000164 	.word	0x20000164
 8000ffc:	40012c00 	.word	0x40012c00

08001000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <MX_TIM2_Init+0xe4>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <MX_TIM2_Init+0xe4>)
 800103c:	22aa      	movs	r2, #170	; 0xaa
 800103e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_TIM2_Init+0xe4>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_TIM2_Init+0xe4>)
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <MX_TIM2_Init+0xe4>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_TIM2_Init+0xe4>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	4822      	ldr	r0, [pc, #136]	; (80010e4 <MX_TIM2_Init+0xe4>)
 800105c:	f003 f954 	bl	8004308 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001066:	f000 f889 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001074:	4619      	mov	r1, r3
 8001076:	481b      	ldr	r0, [pc, #108]	; (80010e4 <MX_TIM2_Init+0xe4>)
 8001078:	f003 fe52 	bl	8004d20 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001082:	f000 f87b 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001086:	4817      	ldr	r0, [pc, #92]	; (80010e4 <MX_TIM2_Init+0xe4>)
 8001088:	f003 fb5a 	bl	8004740 <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001092:	f000 f873 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <MX_TIM2_Init+0xe4>)
 80010a6:	f004 fc31 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010b0:	f000 f864 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM2_Init+0xe4>)
 80010cc:	f003 fd14 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010d6:	f000 f851 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3738      	adds	r7, #56	; 0x38
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001b0 	.word	0x200001b0

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_GPIO_Init+0x8c>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <MX_GPIO_Init+0x8c>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_GPIO_Init+0x8c>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_GPIO_Init+0x8c>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <MX_GPIO_Init+0x8c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_GPIO_Init+0x8c>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_GPIO_Init+0x8c>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <MX_GPIO_Init+0x8c>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_GPIO_Init+0x8c>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2110      	movs	r1, #16
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0x90>)
 800114c:	f002 f934 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001150:	2310      	movs	r3, #16
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_GPIO_Init+0x90>)
 8001168:	f001 ffa4 	bl	80030b4 <HAL_GPIO_Init>

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	48000400 	.word	0x48000400

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09e      	sub	sp, #120	; 0x78
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	2244      	movs	r2, #68	; 0x44
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fe97 	bl	8005f24 <memset>
  if(hadc->Instance==ADC1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011fe:	d146      	bne.n	800128e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001204:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001206:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800120a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fe89 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800121c:	f7ff ffae 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001220:	4b4e      	ldr	r3, [pc, #312]	; (800135c <HAL_ADC_MspInit+0x18c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_ADC_MspInit+0x18c>)
 8001228:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800122a:	4b4c      	ldr	r3, [pc, #304]	; (800135c <HAL_ADC_MspInit+0x18c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10b      	bne.n	800124a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_ADC_MspInit+0x190>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_ADC_MspInit+0x190>)
 8001238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <HAL_ADC_MspInit+0x190>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <HAL_ADC_MspInit+0x190>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a44      	ldr	r2, [pc, #272]	; (8001360 <HAL_ADC_MspInit+0x190>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <HAL_ADC_MspInit+0x190>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001262:	230b      	movs	r3, #11
 8001264:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f001 ff1c 	bl	80030b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2012      	movs	r0, #18
 8001282:	f001 fee2 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001286:	2012      	movs	r0, #18
 8001288:	f001 fef9 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800128c:	e062      	b.n	8001354 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a34      	ldr	r2, [pc, #208]	; (8001364 <HAL_ADC_MspInit+0x194>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d15d      	bne.n	8001354 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800129e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fe3d 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80012b4:	f7ff ff62 	bl	800117c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <HAL_ADC_MspInit+0x18c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a27      	ldr	r2, [pc, #156]	; (800135c <HAL_ADC_MspInit+0x18c>)
 80012c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_ADC_MspInit+0x18c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10b      	bne.n	80012e2 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_ADC_MspInit+0x190>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a24      	ldr	r2, [pc, #144]	; (8001360 <HAL_ADC_MspInit+0x190>)
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_ADC_MspInit+0x190>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_ADC_MspInit+0x190>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <HAL_ADC_MspInit+0x190>)
 80012e8:	f043 0320 	orr.w	r3, r3, #32
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_ADC_MspInit+0x190>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_ADC_MspInit+0x190>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_ADC_MspInit+0x190>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_ADC_MspInit+0x190>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001312:	2302      	movs	r3, #2
 8001314:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800131e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001322:	4619      	mov	r1, r3
 8001324:	4810      	ldr	r0, [pc, #64]	; (8001368 <HAL_ADC_MspInit+0x198>)
 8001326:	f001 fec5 	bl	80030b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800132a:	2370      	movs	r3, #112	; 0x70
 800132c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001340:	f001 feb8 	bl	80030b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2012      	movs	r0, #18
 800134a:	f001 fe7e 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800134e:	2012      	movs	r0, #18
 8001350:	f001 fe95 	bl	800307e <HAL_NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3778      	adds	r7, #120	; 0x78
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200050b0 	.word	0x200050b0
 8001360:	40021000 	.word	0x40021000
 8001364:	50000100 	.word	0x50000100
 8001368:	48001400 	.word	0x48001400

0800136c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <HAL_TIM_Base_MspInit+0x80>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10c      	bne.n	8001398 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 8001384:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001388:	6613      	str	r3, [r2, #96]	; 0x60
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001396:	e022      	b.n	80013de <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d10c      	bne.n	80013bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
}
 80013ba:	e010      	b.n	80013de <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <HAL_TIM_Base_MspInit+0x88>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10b      	bne.n	80013de <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6593      	str	r3, [r2, #88]	; 0x58
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40012c00 	.word	0x40012c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40001000 	.word	0x40001000

080013f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <HAL_TIM_MspPostInit+0xd8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d155      	bne.n	80014c6 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_TIM_MspPostInit+0xdc>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001472:	2306      	movs	r3, #6
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4816      	ldr	r0, [pc, #88]	; (80014d8 <HAL_TIM_MspPostInit+0xe0>)
 800147e:	f001 fe19 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001482:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001494:	2306      	movs	r3, #6
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f001 fe07 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a6:	2301      	movs	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014b6:	2306      	movs	r3, #6
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <HAL_TIM_MspPostInit+0xe4>)
 80014c2:	f001 fdf7 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40012c00 	.word	0x40012c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48001400 	.word	0x48001400
 80014dc:	48000400 	.word	0x48000400

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f8d4 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <ADC1_2_IRQHandler+0x14>)
 800153a:	f000 fdf9 	bl	8002130 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <ADC1_2_IRQHandler+0x18>)
 8001540:	f000 fdf6 	bl	8002130 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000008c 	.word	0x2000008c
 800154c:	200000f8 	.word	0x200000f8

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f004 fca6 	bl	8005ed0 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20008000 	.word	0x20008000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	200050b4 	.word	0x200050b4
 80015b8:	200050d0 	.word	0x200050d0

080015bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <LoopForever+0x6>)
  ldr r1, =_edata
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <LoopForever+0xe>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015fc:	4c0b      	ldr	r4, [pc, #44]	; (800162c <LoopForever+0x16>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160a:	f7ff ffd7 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f004 fc65 	bl	8005edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001612:	f7fe fec1 	bl	8000398 <main>

08001616 <LoopForever>:

LoopForever:
    b LoopForever
 8001616:	e7fe      	b.n	8001616 <LoopForever>
  ldr   r0, =_estack
 8001618:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001624:	080068a4 	.word	0x080068a4
  ldr r2, =_sbss
 8001628:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800162c:	200050cc 	.word	0x200050cc

08001630 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <COMP1_2_3_IRQHandler>

08001632 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f001 fcf9 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f80e 	bl	8001664 <HAL_InitTick>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	e001      	b.n	8001658 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001654:	f7ff fd98 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001658:	79fb      	ldrb	r3, [r7, #7]

}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_InitTick+0x68>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d022      	beq.n	80016be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_InitTick+0x6c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_InitTick+0x68>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001684:	fbb1 f3f3 	udiv	r3, r1, r3
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fd04 	bl	800309a <HAL_SYSTICK_Config>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10f      	bne.n	80016b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	d809      	bhi.n	80016b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169e:	2200      	movs	r2, #0
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	f04f 30ff 	mov.w	r0, #4294967295
 80016a6:	f001 fcd0 	bl	800304a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_InitTick+0x70>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e007      	b.n	80016c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e004      	b.n	80016c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x1c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x20>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_IncTick+0x1c>)
 80016e8:	6013      	str	r3, [r2, #0]
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	200050b8 	.word	0x200050b8
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200050b8 	.word	0x200050b8

08001714 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3360      	adds	r3, #96	; 0x60
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <LL_ADC_SetOffset+0x44>)
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	03fff000 	.word	0x03fff000

080017c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3360      	adds	r3, #96	; 0x60
 80017d2:	461a      	mov	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3360      	adds	r3, #96	; 0x60
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001826:	b480      	push	{r7}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3360      	adds	r3, #96	; 0x60
 8001836:	461a      	mov	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	431a      	orrs	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3360      	adds	r3, #96	; 0x60
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	431a      	orrs	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	615a      	str	r2, [r3, #20]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018de:	b480      	push	{r7}
 80018e0:	b087      	sub	sp, #28
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3330      	adds	r3, #48	; 0x30
 80018ee:	461a      	mov	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	4413      	add	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	211f      	movs	r1, #31
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	f003 011f 	and.w	r1, r3, #31
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3314      	adds	r3, #20
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	0e5b      	lsrs	r3, r3, #25
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	0d1b      	lsrs	r3, r3, #20
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	2107      	movs	r1, #7
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	401a      	ands	r2, r3
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	0d1b      	lsrs	r3, r3, #20
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d10a      	bne.n	80019de <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	431a      	orrs	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80019dc:	e00a      	b.n	80019f4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ea:	43db      	mvns	r3, r3
 80019ec:	401a      	ands	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	407f0000 	.word	0x407f0000

08001a04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 031f 	and.w	r3, r3, #31
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6093      	str	r3, [r2, #8]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <LL_ADC_IsEnabled+0x18>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <LL_ADC_IsEnabled+0x1a>
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b3a:	f043 0204 	orr.w	r2, r3, #4
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d101      	bne.n	8001b66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d101      	bne.n	8001b8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e177      	b.n	8001ea6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fb03 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff3f 	bl	8001a60 <LL_ADC_IsDeepPowerDownEnabled>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff25 	bl	8001a3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff5a 	bl	8001ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d115      	bne.n	8001c2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff3e 	bl	8001a88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c0c:	4b9c      	ldr	r3, [pc, #624]	; (8001e80 <HAL_ADC_Init+0x2e4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	4a9c      	ldr	r2, [pc, #624]	; (8001e84 <HAL_ADC_Init+0x2e8>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff3c 	bl	8001ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff75 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 8001c64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 8110 	bne.w	8001e94 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 810c 	bne.w	8001e94 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c84:	f043 0202 	orr.w	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff35 	bl	8001b00 <LL_ADC_IsEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d111      	bne.n	8001cc0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ca0:	f7ff ff2e 	bl	8001b00 <LL_ADC_IsEnabled>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4878      	ldr	r0, [pc, #480]	; (8001e88 <HAL_ADC_Init+0x2ec>)
 8001ca8:	f7ff ff2a 	bl	8001b00 <LL_ADC_IsEnabled>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4323      	orrs	r3, r4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4874      	ldr	r0, [pc, #464]	; (8001e8c <HAL_ADC_Init+0x2f0>)
 8001cbc:	f7ff fd2a 	bl	8001714 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7f5b      	ldrb	r3, [r3, #29]
 8001cc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cd0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cd6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cde:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d106      	bne.n	8001cfc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	045b      	lsls	r3, r3, #17
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_ADC_Init+0x2f4>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	69b9      	ldr	r1, [r7, #24]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff01 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 8001d4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff0e 	bl	8001b74 <LL_ADC_INJ_IsConversionOngoing>
 8001d58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d16d      	bne.n	8001e3c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d16a      	bne.n	8001e3c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d6a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d72:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d82:	f023 0302 	bic.w	r3, r3, #2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d017      	beq.n	8001dc8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001da6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001db0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6911      	ldr	r1, [r2, #16]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001dc6:	e013      	b.n	8001df0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d118      	bne.n	8001e2c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	e007      	b.n	8001e3c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10c      	bne.n	8001e5e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f023 010f 	bic.w	r1, r3, #15
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e5c:	e007      	b.n	8001e6e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 020f 	bic.w	r2, r2, #15
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e7e:	e011      	b.n	8001ea4 <HAL_ADC_Init+0x308>
 8001e80:	20000000 	.word	0x20000000
 8001e84:	053e2d63 	.word	0x053e2d63
 8001e88:	50000100 	.word	0x50000100
 8001e8c:	50000300 	.word	0x50000300
 8001e90:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop

08001eb0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eb8:	4894      	ldr	r0, [pc, #592]	; (800210c <HAL_ADC_Start_IT+0x25c>)
 8001eba:	f7ff fda3 	bl	8001a04 <LL_ADC_GetMultimode>
 8001ebe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fe42 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 8114 	bne.w	80020fa <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_Start_IT+0x30>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e111      	b.n	8002104 <HAL_ADC_Start_IT+0x254>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 ff3f 	bl	8002d6c <ADC_Enable>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 80fb 	bne.w	80020f0 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7f      	ldr	r2, [pc, #508]	; (8002110 <HAL_ADC_Start_IT+0x260>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d002      	beq.n	8001f1e <HAL_ADC_Start_IT+0x6e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	e001      	b.n	8001f22 <HAL_ADC_Start_IT+0x72>
 8001f1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d002      	beq.n	8001f30 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	f023 0206 	bic.w	r2, r3, #6
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	661a      	str	r2, [r3, #96]	; 0x60
 8001f54:	e002      	b.n	8001f5c <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	221c      	movs	r2, #28
 8001f62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 021c 	bic.w	r2, r2, #28
 8001f7a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d108      	bne.n	8001f96 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0208 	orr.w	r2, r2, #8
 8001f92:	605a      	str	r2, [r3, #4]
          break;
 8001f94:	e008      	b.n	8001fa8 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0204 	orr.w	r2, r2, #4
 8001fa4:	605a      	str	r2, [r3, #4]
          break;
 8001fa6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0210 	orr.w	r2, r2, #16
 8001fbe:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a52      	ldr	r2, [pc, #328]	; (8002110 <HAL_ADC_Start_IT+0x260>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d002      	beq.n	8001fd0 <HAL_ADC_Start_IT+0x120>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e001      	b.n	8001fd4 <HAL_ADC_Start_IT+0x124>
 8001fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d008      	beq.n	8001fee <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d002      	beq.n	8001fee <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d13b      	bne.n	8002066 <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d02d      	beq.n	8002058 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002004:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d110      	bne.n	8002036 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0220 	bic.w	r2, r2, #32
 8002022:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002032:	605a      	str	r2, [r3, #4]
              break;
 8002034:	e011      	b.n	800205a <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002044:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	605a      	str	r2, [r3, #4]
              break;
 8002056:	e000      	b.n	800205a <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8002058:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fd61 	bl	8001b26 <LL_ADC_REG_StartConversion>
 8002064:	e04d      	b.n	8002102 <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_ADC_Start_IT+0x260>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d002      	beq.n	8002082 <HAL_ADC_Start_IT+0x1d2>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	e001      	b.n	8002086 <HAL_ADC_Start_IT+0x1d6>
 8002082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002086:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d035      	beq.n	8002100 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d110      	bne.n	80020ce <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0220 	bic.w	r2, r2, #32
 80020ba:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ca:	605a      	str	r2, [r3, #4]
              break;
 80020cc:	e019      	b.n	8002102 <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020dc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	605a      	str	r2, [r3, #4]
              break;
 80020ee:	e008      	b.n	8002102 <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80020f8:	e003      	b.n	8002102 <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	75fb      	strb	r3, [r7, #23]
 80020fe:	e000      	b.n	8002102 <HAL_ADC_Start_IT+0x252>
        }
 8002100:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002102:	7dfb      	ldrb	r3, [r7, #23]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	50000300 	.word	0x50000300
 8002110:	50000100 	.word	0x50000100

08002114 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800214c:	4883      	ldr	r0, [pc, #524]	; (800235c <HAL_ADC_IRQHandler+0x22c>)
 800214e:	f7ff fc59 	bl	8001a04 <LL_ADC_GetMultimode>
 8002152:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d017      	beq.n	800218e <HAL_ADC_IRQHandler+0x5e>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fe7d 	bl	8002e80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <HAL_ADC_IRQHandler+0x72>
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10a      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8085 	beq.w	80022b8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d07f      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fb6f 	bl	80018b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d064      	beq.n	80022aa <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5e      	ldr	r2, [pc, #376]	; (8002360 <HAL_ADC_IRQHandler+0x230>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d002      	beq.n	80021f0 <HAL_ADC_IRQHandler+0xc0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e001      	b.n	80021f4 <HAL_ADC_IRQHandler+0xc4>
 80021f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d008      	beq.n	800220e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d002      	beq.n	800220e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b09      	cmp	r3, #9
 800220c:	d104      	bne.n	8002218 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	e00d      	b.n	8002234 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_ADC_IRQHandler+0x230>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d002      	beq.n	8002228 <HAL_ADC_IRQHandler+0xf8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	e001      	b.n	800222c <HAL_ADC_IRQHandler+0xfc>
 8002228:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800222c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d135      	bne.n	80022aa <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b08      	cmp	r3, #8
 800224a:	d12e      	bne.n	80022aa <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fc7c 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11a      	bne.n	8002292 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 020c 	bic.w	r2, r2, #12
 800226a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d112      	bne.n	80022aa <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002290:	e00b      	b.n	80022aa <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe f808 	bl	80002c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	220c      	movs	r2, #12
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_ADC_IRQHandler+0x19c>
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 809e 	beq.w	8002414 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8098 	beq.w	8002414 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fb18 	bl	8001936 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002306:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fad3 	bl	80018b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002312:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a11      	ldr	r2, [pc, #68]	; (8002360 <HAL_ADC_IRQHandler+0x230>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d002      	beq.n	8002324 <HAL_ADC_IRQHandler+0x1f4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	e001      	b.n	8002328 <HAL_ADC_IRQHandler+0x1f8>
 8002324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	4293      	cmp	r3, r2
 800232e:	d008      	beq.n	8002342 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d002      	beq.n	8002342 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b07      	cmp	r3, #7
 8002340:	d104      	bne.n	800234c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	e011      	b.n	8002370 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a03      	ldr	r2, [pc, #12]	; (8002360 <HAL_ADC_IRQHandler+0x230>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d006      	beq.n	8002364 <HAL_ADC_IRQHandler+0x234>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e005      	b.n	8002368 <HAL_ADC_IRQHandler+0x238>
 800235c:	50000300 	.word	0x50000300
 8002360:	50000100 	.word	0x50000100
 8002364:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002368:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d047      	beq.n	8002406 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_ADC_IRQHandler+0x260>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d03f      	beq.n	8002406 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d13a      	bne.n	8002406 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	d133      	bne.n	8002406 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d12e      	bne.n	8002406 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fbe1 	bl	8001b74 <LL_ADC_INJ_IsConversionOngoing>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11a      	bne.n	80023ee <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023c6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80023ec:	e00b      	b.n	8002406 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fd12 	bl	8002e30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2260      	movs	r2, #96	; 0x60
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d011      	beq.n	8002442 <HAL_ADC_IRQHandler+0x312>
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00c      	beq.n	8002442 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f895 	bl	8002564 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_ADC_IRQHandler+0x342>
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fcf8 	bl	8002e58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x372>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fcea 	bl	8002e6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d036      	beq.n	800251a <HAL_ADC_IRQHandler+0x3ea>
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d031      	beq.n	800251a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80024be:	2301      	movs	r3, #1
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	e014      	b.n	80024ee <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024ca:	4825      	ldr	r0, [pc, #148]	; (8002560 <HAL_ADC_IRQHandler+0x430>)
 80024cc:	f7ff faa8 	bl	8001a20 <LL_ADC_GetMultiDMATransfer>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80024d6:	2301      	movs	r3, #1
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	e008      	b.n	80024ee <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10e      	bne.n	8002512 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002504:	f043 0202 	orr.w	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f833 	bl	8002578 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2210      	movs	r2, #16
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d018      	beq.n	8002556 <HAL_ADC_IRQHandler+0x426>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d013      	beq.n	8002556 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f043 0208 	orr.w	r2, r3, #8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fc77 	bl	8002e44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002556:	bf00      	nop
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	50000300 	.word	0x50000300

08002564 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b0b6      	sub	sp, #216	; 0xd8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x22>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e3c8      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7b4>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fac7 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 83ad 	bne.w	8002d22 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff f982 	bl	80018de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fab5 	bl	8001b4e <LL_ADC_REG_IsConversionOngoing>
 80025e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fac1 	bl	8001b74 <LL_ADC_INJ_IsConversionOngoing>
 80025f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 81d9 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 81d4 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002612:	d10f      	bne.n	8002634 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	4619      	mov	r1, r3
 8002620:	f7ff f99c 	bl	800195c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f930 	bl	8001892 <LL_ADC_SetSamplingTimeCommonConfig>
 8002632:	e00e      	b.n	8002652 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff f98b 	bl	800195c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff f920 	bl	8001892 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d022      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6919      	ldr	r1, [r3, #16]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002684:	f7ff f87a 	bl	800177c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6919      	ldr	r1, [r3, #16]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	461a      	mov	r2, r3
 8002696:	f7ff f8c6 	bl	8001826 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7f1b      	ldrb	r3, [r3, #28]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x124>
 80026aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x126>
 80026b0:	2300      	movs	r3, #0
 80026b2:	461a      	mov	r2, r3
 80026b4:	f7ff f8d2 	bl	800185c <LL_ADC_SetOffsetSaturation>
 80026b8:	e17b      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f87f 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x15a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f874 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	e01e      	b.n	8002724 <HAL_ADC_ConfigChannel+0x198>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f869 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800270c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e004      	b.n	8002722 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_ADC_ConfigChannel+0x1b0>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	e018      	b.n	800276e <HAL_ADC_ConfigChannel+0x1e2>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e004      	b.n	800276e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800276e:	429a      	cmp	r2, r3
 8002770:	d106      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f838 	bl	80017f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f81c 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x220>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f811 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	f003 021f 	and.w	r2, r3, #31
 80027aa:	e01e      	b.n	80027ea <HAL_ADC_ConfigChannel+0x25e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f806 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e004      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80027de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x276>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	e018      	b.n	8002834 <HAL_ADC_ConfigChannel+0x2a8>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002816:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800281a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800281e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e004      	b.n	8002834 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800282a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ffd5 	bl	80017f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe ffb9 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x2e6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe ffae 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	0e9b      	lsrs	r3, r3, #26
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	e01e      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x324>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe ffa3 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e004      	b.n	80028ae <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80028a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x33c>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	e016      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x36a>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80028ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe ff74 	bl	80017f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2103      	movs	r1, #3
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe ff58 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x3a8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2103      	movs	r1, #3
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe ff4d 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	e017      	b.n	8002964 <HAL_ADC_ConfigChannel+0x3d8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2103      	movs	r1, #3
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe ff42 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800294c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e003      	b.n	8002962 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800295a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_ConfigChannel+0x3f0>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	e011      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x414>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800298a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800298c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800298e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2103      	movs	r1, #3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe ff1f 	bl	80017f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f8a2 	bl	8001b00 <LL_ADC_IsEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8140 	bne.w	8002c44 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7fe ffef 	bl	80019b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a8f      	ldr	r2, [pc, #572]	; (8002c18 <HAL_ADC_ConfigChannel+0x68c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	f040 8131 	bne.w	8002c44 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x47e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	bf94      	ite	ls
 8002a02:	2301      	movls	r3, #1
 8002a04:	2300      	movhi	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e019      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x4b2>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e003      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	bf94      	ite	ls
 8002a38:	2301      	movls	r3, #1
 8002a3a:	2300      	movhi	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d079      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x4d2>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	3301      	adds	r3, #1
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5c:	e015      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x4fe>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e003      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	069b      	lsls	r3, r3, #26
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x51e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	e017      	b.n	8002ada <HAL_ADC_ConfigChannel+0x54e>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e003      	b.n	8002ace <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	ea42 0103 	orr.w	r1, r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x574>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	051b      	lsls	r3, r3, #20
 8002afe:	e018      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x5a6>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e003      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	f003 021f 	and.w	r2, r3, #31
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e081      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x5c6>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b50:	e015      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x5f2>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x612>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	e017      	b.n	8002bce <HAL_ADC_ConfigChannel+0x642>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	61fb      	str	r3, [r7, #28]
  return result;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	ea42 0103 	orr.w	r1, r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x66e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 021f 	and.w	r2, r3, #31
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b1e      	subs	r3, #30
 8002bf2:	051b      	lsls	r3, r3, #20
 8002bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	e01e      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x6ac>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	613b      	str	r3, [r7, #16]
  return result;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e006      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x698>
 8002c16:	bf00      	nop
 8002c18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 021f 	and.w	r2, r3, #31
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	3b1e      	subs	r3, #30
 8002c32:	051b      	lsls	r3, r3, #20
 8002c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	6892      	ldr	r2, [r2, #8]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fe fe8c 	bl	800195c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d071      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c50:	483e      	ldr	r0, [pc, #248]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c52:	f7fe fd85 	bl	8001760 <LL_ADC_GetCommonPathInternalCh>
 8002c56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x6e2>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d127      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d121      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c82:	d157      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	482f      	ldr	r0, [pc, #188]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c90:	f7fe fd53 	bl	800173a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cae:	e002      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f9      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cbc:	e03a      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d113      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x764>
 8002cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d02a      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4818      	ldr	r0, [pc, #96]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002cea:	f7fe fd26 	bl	800173a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cee:	e021      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d11c      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d011      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480c      	ldr	r0, [pc, #48]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d1c:	f7fe fd0d 	bl	800173a <LL_ADC_SetCommonPathInternalCh>
 8002d20:	e008      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	37d8      	adds	r7, #216	; 0xd8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	80080000 	.word	0x80080000
 8002d4c:	50000300 	.word	0x50000300
 8002d50:	c3210000 	.word	0xc3210000
 8002d54:	90c00010 	.word	0x90c00010
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	053e2d63 	.word	0x053e2d63
 8002d60:	c7520000 	.word	0xc7520000
 8002d64:	50000100 	.word	0x50000100
 8002d68:	cb840000 	.word	0xcb840000

08002d6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fec1 	bl	8001b00 <LL_ADC_IsEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d14d      	bne.n	8002e20 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <ADC_Enable+0xc0>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e039      	b.n	8002e22 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fe90 	bl	8001ad8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fca0 	bl	80016fc <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dbe:	e028      	b.n	8002e12 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fe9b 	bl	8001b00 <LL_ADC_IsEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fe7f 	bl	8001ad8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dda:	f7fe fc8f 	bl	80016fc <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d914      	bls.n	8002e12 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d00d      	beq.n	8002e12 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	f043 0210 	orr.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e007      	b.n	8002e22 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d1cf      	bne.n	8002dc0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	8000003f 	.word	0x8000003f

08002e30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	; (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	; (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	; (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff8e 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff29 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003058:	f7ff ff40 	bl	8002edc <__NVIC_GetPriorityGrouping>
 800305c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff90 	bl	8002f88 <NVIC_EncodePriority>
 8003068:	4602      	mov	r2, r0
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5f 	bl	8002f34 <__NVIC_SetPriority>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff33 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffa4 	bl	8002ff0 <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030c2:	e15a      	b.n	800337a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 814c 	beq.w	8003374 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d005      	beq.n	80030f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d130      	bne.n	8003156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800312a:	2201      	movs	r2, #1
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0201 	and.w	r2, r3, #1
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b03      	cmp	r3, #3
 8003160:	d017      	beq.n	8003192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d123      	bne.n	80031e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	08da      	lsrs	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3208      	adds	r2, #8
 80031a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	6939      	ldr	r1, [r7, #16]
 80031e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0203 	and.w	r2, r3, #3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80a6 	beq.w	8003374 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003228:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 800322a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322c:	4a5a      	ldr	r2, [pc, #360]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6613      	str	r3, [r2, #96]	; 0x60
 8003234:	4b58      	ldr	r3, [pc, #352]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003240:	4a56      	ldr	r2, [pc, #344]	; (800339c <HAL_GPIO_Init+0x2e8>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800326a:	d01f      	beq.n	80032ac <HAL_GPIO_Init+0x1f8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <HAL_GPIO_Init+0x2ec>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d019      	beq.n	80032a8 <HAL_GPIO_Init+0x1f4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a4b      	ldr	r2, [pc, #300]	; (80033a4 <HAL_GPIO_Init+0x2f0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <HAL_GPIO_Init+0x1f0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a4a      	ldr	r2, [pc, #296]	; (80033a8 <HAL_GPIO_Init+0x2f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00d      	beq.n	80032a0 <HAL_GPIO_Init+0x1ec>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a49      	ldr	r2, [pc, #292]	; (80033ac <HAL_GPIO_Init+0x2f8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <HAL_GPIO_Init+0x1e8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a48      	ldr	r2, [pc, #288]	; (80033b0 <HAL_GPIO_Init+0x2fc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_GPIO_Init+0x1e4>
 8003294:	2305      	movs	r3, #5
 8003296:	e00a      	b.n	80032ae <HAL_GPIO_Init+0x1fa>
 8003298:	2306      	movs	r3, #6
 800329a:	e008      	b.n	80032ae <HAL_GPIO_Init+0x1fa>
 800329c:	2304      	movs	r3, #4
 800329e:	e006      	b.n	80032ae <HAL_GPIO_Init+0x1fa>
 80032a0:	2303      	movs	r3, #3
 80032a2:	e004      	b.n	80032ae <HAL_GPIO_Init+0x1fa>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_Init+0x1fa>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_GPIO_Init+0x1fa>
 80032ac:	2300      	movs	r3, #0
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4093      	lsls	r3, r2
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032be:	4937      	ldr	r1, [pc, #220]	; (800339c <HAL_GPIO_Init+0x2e8>)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_GPIO_Init+0x300>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032f0:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <HAL_GPIO_Init+0x300>)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_GPIO_Init+0x300>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <HAL_GPIO_Init+0x300>)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_GPIO_Init+0x300>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_GPIO_Init+0x300>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_GPIO_Init+0x300>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800336e:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <HAL_GPIO_Init+0x300>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f ae9d 	bne.w	80030c4 <HAL_GPIO_Init+0x10>
  }
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40021000 	.word	0x40021000
 800339c:	40010000 	.word	0x40010000
 80033a0:	48000400 	.word	0x48000400
 80033a4:	48000800 	.word	0x48000800
 80033a8:	48000c00 	.word	0x48000c00
 80033ac:	48001000 	.word	0x48001000
 80033b0:	48001400 	.word	0x48001400
 80033b4:	40010400 	.word	0x40010400

080033b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d4:	e002      	b.n	80033dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d141      	bne.n	800347a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f6:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003402:	d131      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003404:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340a:	4a46      	ldr	r2, [pc, #280]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800341c:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003424:	4b40      	ldr	r3, [pc, #256]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2232      	movs	r2, #50	; 0x32
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	4a3f      	ldr	r2, [pc, #252]	; (800352c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	0c9b      	lsrs	r3, r3, #18
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343a:	e002      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3b01      	subs	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d102      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003456:	4b33      	ldr	r3, [pc, #204]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d158      	bne.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e057      	b.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346e:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003478:	e04d      	b.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003480:	d141      	bne.n	8003506 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003482:	4b28      	ldr	r3, [pc, #160]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d131      	bne.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003490:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003496:	4a23      	ldr	r2, [pc, #140]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a8:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2232      	movs	r2, #50	; 0x32
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	0c9b      	lsrs	r3, r3, #18
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c6:	e002      	b.n	80034ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d102      	bne.n	80034e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f2      	bne.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d112      	bne.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e011      	b.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003504:	e007      	b.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003514:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40007000 	.word	0x40007000
 8003528:	20000000 	.word	0x20000000
 800352c:	431bde83 	.word	0x431bde83

08003530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e306      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d075      	beq.n	800363a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354e:	4b97      	ldr	r3, [pc, #604]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003558:	4b94      	ldr	r3, [pc, #592]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d102      	bne.n	800356e <HAL_RCC_OscConfig+0x3e>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d002      	beq.n	8003574 <HAL_RCC_OscConfig+0x44>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d10b      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b8d      	ldr	r3, [pc, #564]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05b      	beq.n	8003638 <HAL_RCC_OscConfig+0x108>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d157      	bne.n	8003638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e2e1      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x74>
 8003596:	4b85      	ldr	r3, [pc, #532]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a84      	ldr	r2, [pc, #528]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e01d      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b7f      	ldr	r3, [pc, #508]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b7c      	ldr	r3, [pc, #496]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7b      	ldr	r2, [pc, #492]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035c8:	4b78      	ldr	r3, [pc, #480]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a77      	ldr	r2, [pc, #476]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a74      	ldr	r2, [pc, #464]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f888 	bl	80016fc <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe f884 	bl	80016fc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e2a6      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003602:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xc0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe f874 	bl	80016fc <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe f870 	bl	80016fc <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e292      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362a:	4b60      	ldr	r3, [pc, #384]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0xe8>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d075      	beq.n	8003732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003646:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003650:	4b56      	ldr	r3, [pc, #344]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d102      	bne.n	8003666 <HAL_RCC_OscConfig+0x136>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d002      	beq.n	800366c <HAL_RCC_OscConfig+0x13c>
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11f      	bne.n	80036ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_OscConfig+0x154>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e265      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b49      	ldr	r3, [pc, #292]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	4946      	ldr	r1, [pc, #280]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003698:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <HAL_RCC_OscConfig+0x280>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd ffe1 	bl	8001664 <HAL_InitTick>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d043      	beq.n	8003730 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e251      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d023      	beq.n	80036fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b3d      	ldr	r3, [pc, #244]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe f81c 	bl	80016fc <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe f818 	bl	80016fc <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e23a      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	4b31      	ldr	r3, [pc, #196]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	492d      	ldr	r1, [pc, #180]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
 80036fa:	e01a      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2a      	ldr	r2, [pc, #168]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fff8 	bl	80016fc <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003710:	f7fd fff4 	bl	80016fc <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e216      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x1e0>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d041      	beq.n	80037c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01c      	beq.n	8003780 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fd ffd1 	bl	80016fc <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375e:	f7fd ffcd 	bl	80016fc <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1ef      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0ef      	beq.n	800375e <HAL_RCC_OscConfig+0x22e>
 800377e:	e020      	b.n	80037c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd ffb4 	bl	80016fc <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003796:	e00d      	b.n	80037b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003798:	f7fd ffb0 	bl	80016fc <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d906      	bls.n	80037b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1d2      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ea      	bne.n	8003798 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80a6 	beq.w	800391c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037d4:	4b84      	ldr	r3, [pc, #528]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2b4>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x2b6>
 80037e4:	2300      	movs	r3, #0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	4b7f      	ldr	r3, [pc, #508]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	4a7e      	ldr	r2, [pc, #504]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6593      	str	r3, [r2, #88]	; 0x58
 80037f6:	4b7c      	ldr	r3, [pc, #496]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003806:	4b79      	ldr	r3, [pc, #484]	; (80039ec <HAL_RCC_OscConfig+0x4bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x4bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a75      	ldr	r2, [pc, #468]	; (80039ec <HAL_RCC_OscConfig+0x4bc>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fd ff6d 	bl	80016fc <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fd ff69 	bl	80016fc <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e18b      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003838:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <HAL_RCC_OscConfig+0x4bc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_RCC_OscConfig+0x32e>
 800384c:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800385c:	e024      	b.n	80038a8 <HAL_RCC_OscConfig+0x378>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b05      	cmp	r3, #5
 8003864:	d110      	bne.n	8003888 <HAL_RCC_OscConfig+0x358>
 8003866:	4b60      	ldr	r3, [pc, #384]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	f043 0304 	orr.w	r3, r3, #4
 8003872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003876:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	4a5a      	ldr	r2, [pc, #360]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003886:	e00f      	b.n	80038a8 <HAL_RCC_OscConfig+0x378>
 8003888:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	4a56      	ldr	r2, [pc, #344]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003898:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a52      	ldr	r2, [pc, #328]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d016      	beq.n	80038de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd ff24 	bl	80016fc <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fd ff20 	bl	80016fc <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e140      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ed      	beq.n	80038b8 <HAL_RCC_OscConfig+0x388>
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fd ff0d 	bl	80016fc <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fd ff09 	bl	80016fc <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e129      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038fc:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ed      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800390a:	7ffb      	ldrb	r3, [r7, #31]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d03c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003936:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fd fedc 	bl	80016fc <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003948:	f7fd fed8 	bl	80016fc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0fa      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 800395c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <HAL_RCC_OscConfig+0x418>
 8003968:	e01b      	b.n	80039a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800396a:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 800396c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003970:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd febf 	bl	80016fc <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003982:	f7fd febb 	bl	80016fc <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0dd      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 8003996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ef      	bne.n	8003982 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80d1 	beq.w	8003b4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	f000 808b 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d15e      	bne.n	8003a80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <HAL_RCC_OscConfig+0x4b8>)
 80039c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fd fe95 	bl	80016fc <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d4:	e00c      	b.n	80039f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fd fe91 	bl	80016fc <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d905      	bls.n	80039f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0b3      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f0:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ec      	bne.n	80039d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fc:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <HAL_RCC_OscConfig+0x62c>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6a11      	ldr	r1, [r2, #32]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	4311      	orrs	r1, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a16:	0212      	lsls	r2, r2, #8
 8003a18:	4311      	orrs	r1, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a1e:	0852      	lsrs	r2, r2, #1
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0552      	lsls	r2, r2, #21
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a2a:	0852      	lsrs	r2, r2, #1
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	0652      	lsls	r2, r2, #25
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a36:	06d2      	lsls	r2, r2, #27
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	4947      	ldr	r1, [pc, #284]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a40:	4b45      	ldr	r3, [pc, #276]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a44      	ldr	r2, [pc, #272]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a4c:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a41      	ldr	r2, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fe50 	bl	80016fc <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd fe4c 	bl	80016fc <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e06e      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x530>
 8003a7e:	e066      	b.n	8003b4e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a8a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a31      	ldr	r2, [pc, #196]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a98:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a2e      	ldr	r2, [pc, #184]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a9e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fe28 	bl	80016fc <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fe24 	bl	80016fc <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e046      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x580>
 8003ace:	e03e      	b.n	8003b4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e039      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d12c      	bne.n	8003b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	3b01      	subs	r3, #1
 8003afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d123      	bne.n	8003b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d11b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d113      	bne.n	8003b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	019f800c 	.word	0x019f800c

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e11e      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b8e      	ldr	r3, [pc, #568]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	498c      	ldr	r1, [pc, #560]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b8a      	ldr	r3, [pc, #552]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e106      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d073      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d129      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bbc:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0f4      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bcc:	f000 f966 	bl	8003e9c <RCC_GetSysClockFreqFromPLLSource>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4a7c      	ldr	r2, [pc, #496]	; (8003dc8 <HAL_RCC_ClockConfig+0x268>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d93f      	bls.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bda:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d033      	beq.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d12f      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfa:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c02:	4a70      	ldr	r2, [pc, #448]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e024      	b.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c18:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0c6      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c28:	4b66      	ldr	r3, [pc, #408]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0be      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c38:	f000 f8ce 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a61      	ldr	r2, [pc, #388]	; (8003dc8 <HAL_RCC_ClockConfig+0x268>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d909      	bls.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	4a5d      	ldr	r2, [pc, #372]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4957      	ldr	r1, [pc, #348]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fd fd46 	bl	80016fc <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fd fd42 	bl	80016fc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e095      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b4e      	ldr	r3, [pc, #312]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d023      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a42      	ldr	r2, [pc, #264]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ccc:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cd4:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4936      	ldr	r1, [pc, #216]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b80      	cmp	r3, #128	; 0x80
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cf6:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4a32      	ldr	r2, [pc, #200]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d02:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d21d      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 020f 	bic.w	r2, r3, #15
 8003d18:	4929      	ldr	r1, [pc, #164]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d20:	f7fd fcec 	bl	80016fc <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fd fce8 	bl	80016fc <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e03b      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1ed      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4917      	ldr	r1, [pc, #92]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d76:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	490f      	ldr	r1, [pc, #60]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d8a:	f000 f825 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	490c      	ldr	r1, [pc, #48]	; (8003dcc <HAL_RCC_ClockConfig+0x26c>)
 8003d9c:	5ccb      	ldrb	r3, [r1, r3]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x270>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd fc58 	bl	8001664 <HAL_InitTick>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40022000 	.word	0x40022000
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	04c4b400 	.word	0x04c4b400
 8003dcc:	08006858 	.word	0x08006858
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000004 	.word	0x20000004

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	e047      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d102      	bne.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dfc:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	e03e      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d136      	bne.n	8003e7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	3301      	adds	r3, #1
 8003e24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d10c      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e36:	68d2      	ldr	r2, [r2, #12]
 8003e38:	0a12      	lsrs	r2, r2, #8
 8003e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	617b      	str	r3, [r7, #20]
      break;
 8003e44:	e00c      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e50:	68d2      	ldr	r2, [r2, #12]
 8003e52:	0a12      	lsrs	r2, r2, #8
 8003e54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
      break;
 8003e5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	0e5b      	lsrs	r3, r3, #25
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	e001      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e80:	693b      	ldr	r3, [r7, #16]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	007a1200 	.word	0x007a1200

08003e9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d10c      	bne.n	8003eda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ec0:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eca:	68d2      	ldr	r2, [r2, #12]
 8003ecc:	0a12      	lsrs	r2, r2, #8
 8003ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	617b      	str	r3, [r7, #20]
    break;
 8003ed8:	e00c      	b.n	8003ef4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ee4:	68d2      	ldr	r2, [r2, #12]
 8003ee6:	0a12      	lsrs	r2, r2, #8
 8003ee8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    break;
 8003ef2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	0e5b      	lsrs	r3, r3, #25
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f0e:	687b      	ldr	r3, [r7, #4]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	007a1200 	.word	0x007a1200
 8003f24:	00f42400 	.word	0x00f42400

08003f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f30:	2300      	movs	r3, #0
 8003f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f34:	2300      	movs	r3, #0
 8003f36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8098 	beq.w	8004076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f56:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6593      	str	r3, [r2, #88]	; 0x58
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f72:	4b3a      	ldr	r3, [pc, #232]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a39      	ldr	r2, [pc, #228]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f7e:	f7fd fbbd 	bl	80016fc <HAL_GetTick>
 8003f82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f84:	e009      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f86:	f7fd fbb9 	bl	80016fc <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d902      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	74fb      	strb	r3, [r7, #19]
        break;
 8003f98:	e005      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9a:	4b30      	ldr	r3, [pc, #192]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0ef      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d159      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01e      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d019      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc8:	4b23      	ldr	r3, [pc, #140]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd4:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe4:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff4:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fd fb79 	bl	80016fc <HAL_GetTick>
 800400a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400c:	e00b      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd fb75 	bl	80016fc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d902      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	74fb      	strb	r3, [r7, #19]
            break;
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ec      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10b      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4903      	ldr	r1, [pc, #12]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004050:	e008      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	74bb      	strb	r3, [r7, #18]
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004064:	7c7b      	ldrb	r3, [r7, #17]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d105      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406a:	4ba6      	ldr	r3, [pc, #664]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	4aa5      	ldr	r2, [pc, #660]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004082:	4ba0      	ldr	r3, [pc, #640]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f023 0203 	bic.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	499c      	ldr	r1, [pc, #624]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a4:	4b97      	ldr	r3, [pc, #604]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f023 020c 	bic.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	4994      	ldr	r1, [pc, #592]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c6:	4b8f      	ldr	r3, [pc, #572]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	498b      	ldr	r1, [pc, #556]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e8:	4b86      	ldr	r3, [pc, #536]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	4983      	ldr	r1, [pc, #524]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410a:	4b7e      	ldr	r3, [pc, #504]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	497a      	ldr	r1, [pc, #488]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412c:	4b75      	ldr	r3, [pc, #468]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	4972      	ldr	r1, [pc, #456]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800414e:	4b6d      	ldr	r3, [pc, #436]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	4969      	ldr	r1, [pc, #420]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004170:	4b64      	ldr	r3, [pc, #400]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4961      	ldr	r1, [pc, #388]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004192:	4b5c      	ldr	r3, [pc, #368]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	4958      	ldr	r1, [pc, #352]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b4:	4b53      	ldr	r3, [pc, #332]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	4950      	ldr	r1, [pc, #320]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d2:	d105      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d4:	4b4b      	ldr	r3, [pc, #300]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d015      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041ec:	4b45      	ldr	r3, [pc, #276]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	4942      	ldr	r1, [pc, #264]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420a:	d105      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420c:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004216:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d015      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4934      	ldr	r1, [pc, #208]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004244:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a2e      	ldr	r2, [pc, #184]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d015      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425c:	4b29      	ldr	r3, [pc, #164]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	4926      	ldr	r1, [pc, #152]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d105      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	4918      	ldr	r1, [pc, #96]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b2:	d105      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a12      	ldr	r2, [pc, #72]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	490a      	ldr	r1, [pc, #40]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ea:	d105      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e049      	b.n	80043ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd f81c 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f000 fde4 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e042      	b.n	8004456 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <HAL_TIM_Base_Start+0xac>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_TIM_Base_Start+0x5c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ea:	d013      	beq.n	8004414 <HAL_TIM_Base_Start+0x5c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_TIM_Base_Start+0xb0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_TIM_Base_Start+0x5c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_TIM_Base_Start+0xb4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_TIM_Base_Start+0x5c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1a      	ldr	r2, [pc, #104]	; (8004470 <HAL_TIM_Base_Start+0xb8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_TIM_Base_Start+0x5c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a19      	ldr	r2, [pc, #100]	; (8004474 <HAL_TIM_Base_Start+0xbc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d115      	bne.n	8004440 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <HAL_TIM_Base_Start+0xc0>)
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b06      	cmp	r3, #6
 8004424:	d015      	beq.n	8004452 <HAL_TIM_Base_Start+0x9a>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442c:	d011      	beq.n	8004452 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	e008      	b.n	8004452 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e000      	b.n	8004454 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40013400 	.word	0x40013400
 8004474:	40014000 	.word	0x40014000
 8004478:	00010007 	.word	0x00010007

0800447c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e049      	b.n	8004522 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f841 	bl	800452a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f000 fd2a 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_TIM_OC_Start+0x24>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e03c      	b.n	80045de <HAL_TIM_OC_Start+0x9e>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b04      	cmp	r3, #4
 8004568:	d109      	bne.n	800457e <HAL_TIM_OC_Start+0x3e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e02f      	b.n	80045de <HAL_TIM_OC_Start+0x9e>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d109      	bne.n	8004598 <HAL_TIM_OC_Start+0x58>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e022      	b.n	80045de <HAL_TIM_OC_Start+0x9e>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d109      	bne.n	80045b2 <HAL_TIM_OC_Start+0x72>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e015      	b.n	80045de <HAL_TIM_OC_Start+0x9e>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d109      	bne.n	80045cc <HAL_TIM_OC_Start+0x8c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	bf14      	ite	ne
 80045c4:	2301      	movne	r3, #1
 80045c6:	2300      	moveq	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e008      	b.n	80045de <HAL_TIM_OC_Start+0x9e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e097      	b.n	8004716 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_OC_Start+0xb6>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f4:	e023      	b.n	800463e <HAL_TIM_OC_Start+0xfe>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_OC_Start+0xc6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004604:	e01b      	b.n	800463e <HAL_TIM_OC_Start+0xfe>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d104      	bne.n	8004616 <HAL_TIM_OC_Start+0xd6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004614:	e013      	b.n	800463e <HAL_TIM_OC_Start+0xfe>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d104      	bne.n	8004626 <HAL_TIM_OC_Start+0xe6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004624:	e00b      	b.n	800463e <HAL_TIM_OC_Start+0xfe>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b10      	cmp	r3, #16
 800462a:	d104      	bne.n	8004636 <HAL_TIM_OC_Start+0xf6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004634:	e003      	b.n	800463e <HAL_TIM_OC_Start+0xfe>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f001 f886 	bl	8005758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a33      	ldr	r2, [pc, #204]	; (8004720 <HAL_TIM_OC_Start+0x1e0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_TIM_OC_Start+0x13e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a32      	ldr	r2, [pc, #200]	; (8004724 <HAL_TIM_OC_Start+0x1e4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_TIM_OC_Start+0x13e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a30      	ldr	r2, [pc, #192]	; (8004728 <HAL_TIM_OC_Start+0x1e8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_TIM_OC_Start+0x13e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2f      	ldr	r2, [pc, #188]	; (800472c <HAL_TIM_OC_Start+0x1ec>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIM_OC_Start+0x13e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2d      	ldr	r2, [pc, #180]	; (8004730 <HAL_TIM_OC_Start+0x1f0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_TIM_OC_Start+0x142>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_TIM_OC_Start+0x144>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a20      	ldr	r2, [pc, #128]	; (8004720 <HAL_TIM_OC_Start+0x1e0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d018      	beq.n	80046d4 <HAL_TIM_OC_Start+0x194>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d013      	beq.n	80046d4 <HAL_TIM_OC_Start+0x194>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <HAL_TIM_OC_Start+0x1f4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_TIM_OC_Start+0x194>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <HAL_TIM_OC_Start+0x1f8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_TIM_OC_Start+0x194>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_TIM_OC_Start+0x1e4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIM_OC_Start+0x194>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_TIM_OC_Start+0x1e8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d115      	bne.n	8004700 <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <HAL_TIM_OC_Start+0x1fc>)
 80046dc:	4013      	ands	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d015      	beq.n	8004712 <HAL_TIM_OC_Start+0x1d2>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d011      	beq.n	8004712 <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fe:	e008      	b.n	8004712 <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e000      	b.n	8004714 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40013400 	.word	0x40013400
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	00010007 	.word	0x00010007

08004740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e049      	b.n	80047e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f841 	bl	80047ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fbc8 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start+0x24>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e03c      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d109      	bne.n	8004842 <HAL_TIM_PWM_Start+0x3e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e02f      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d109      	bne.n	800485c <HAL_TIM_PWM_Start+0x58>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e022      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d109      	bne.n	8004876 <HAL_TIM_PWM_Start+0x72>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e015      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d109      	bne.n	8004890 <HAL_TIM_PWM_Start+0x8c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e008      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e097      	b.n	80049da <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0xb6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	e023      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start+0xc6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c8:	e01b      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0xd6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d8:	e013      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0xe6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xf6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f8:	e003      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 ff24 	bl	8005758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a33      	ldr	r2, [pc, #204]	; (80049e4 <HAL_TIM_PWM_Start+0x1e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a32      	ldr	r2, [pc, #200]	; (80049e8 <HAL_TIM_PWM_Start+0x1e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a30      	ldr	r2, [pc, #192]	; (80049ec <HAL_TIM_PWM_Start+0x1e8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <HAL_TIM_PWM_Start+0x1ec>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2d      	ldr	r2, [pc, #180]	; (80049f4 <HAL_TIM_PWM_Start+0x1f0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_TIM_PWM_Start+0x142>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_TIM_PWM_Start+0x144>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_TIM_PWM_Start+0x1e0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d013      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <HAL_TIM_PWM_Start+0x1f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <HAL_TIM_PWM_Start+0x1f8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_TIM_PWM_Start+0x1e4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_TIM_PWM_Start+0x1e8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d115      	bne.n	80049c4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <HAL_TIM_PWM_Start+0x1fc>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d015      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x1d2>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d011      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	e008      	b.n	80049d6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	00010007 	.word	0x00010007

08004a04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e066      	b.n	8004af0 <HAL_TIM_OC_ConfigChannel+0xec>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b14      	cmp	r3, #20
 8004a2e:	d857      	bhi.n	8004ae0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004ae1 	.word	0x08004ae1
 8004a40:	08004ae1 	.word	0x08004ae1
 8004a44:	08004ae1 	.word	0x08004ae1
 8004a48:	08004a9b 	.word	0x08004a9b
 8004a4c:	08004ae1 	.word	0x08004ae1
 8004a50:	08004ae1 	.word	0x08004ae1
 8004a54:	08004ae1 	.word	0x08004ae1
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	08004ae1 	.word	0x08004ae1
 8004a60:	08004ae1 	.word	0x08004ae1
 8004a64:	08004ae1 	.word	0x08004ae1
 8004a68:	08004ab7 	.word	0x08004ab7
 8004a6c:	08004ae1 	.word	0x08004ae1
 8004a70:	08004ae1 	.word	0x08004ae1
 8004a74:	08004ae1 	.word	0x08004ae1
 8004a78:	08004ac5 	.word	0x08004ac5
 8004a7c:	08004ae1 	.word	0x08004ae1
 8004a80:	08004ae1 	.word	0x08004ae1
 8004a84:	08004ae1 	.word	0x08004ae1
 8004a88:	08004ad3 	.word	0x08004ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 face 	bl	8005034 <TIM_OC1_SetConfig>
      break;
 8004a98:	e025      	b.n	8004ae6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fb57 	bl	8005154 <TIM_OC2_SetConfig>
      break;
 8004aa6:	e01e      	b.n	8004ae6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fbda 	bl	8005268 <TIM_OC3_SetConfig>
      break;
 8004ab4:	e017      	b.n	8004ae6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fc5b 	bl	8005378 <TIM_OC4_SetConfig>
      break;
 8004ac2:	e010      	b.n	8004ae6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fcde 	bl	800548c <TIM_OC5_SetConfig>
      break;
 8004ad0:	e009      	b.n	8004ae6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fd3b 	bl	8005554 <TIM_OC6_SetConfig>
      break;
 8004ade:	e002      	b.n	8004ae6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e0ff      	b.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b14      	cmp	r3, #20
 8004b22:	f200 80f0 	bhi.w	8004d06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004d07 	.word	0x08004d07
 8004b34:	08004d07 	.word	0x08004d07
 8004b38:	08004d07 	.word	0x08004d07
 8004b3c:	08004bc1 	.word	0x08004bc1
 8004b40:	08004d07 	.word	0x08004d07
 8004b44:	08004d07 	.word	0x08004d07
 8004b48:	08004d07 	.word	0x08004d07
 8004b4c:	08004c03 	.word	0x08004c03
 8004b50:	08004d07 	.word	0x08004d07
 8004b54:	08004d07 	.word	0x08004d07
 8004b58:	08004d07 	.word	0x08004d07
 8004b5c:	08004c43 	.word	0x08004c43
 8004b60:	08004d07 	.word	0x08004d07
 8004b64:	08004d07 	.word	0x08004d07
 8004b68:	08004d07 	.word	0x08004d07
 8004b6c:	08004c85 	.word	0x08004c85
 8004b70:	08004d07 	.word	0x08004d07
 8004b74:	08004d07 	.word	0x08004d07
 8004b78:	08004d07 	.word	0x08004d07
 8004b7c:	08004cc5 	.word	0x08004cc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fa54 	bl	8005034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0208 	orr.w	r2, r2, #8
 8004b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0204 	bic.w	r2, r2, #4
 8004baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6999      	ldr	r1, [r3, #24]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	619a      	str	r2, [r3, #24]
      break;
 8004bbe:	e0a5      	b.n	8004d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fac4 	bl	8005154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6999      	ldr	r1, [r3, #24]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	021a      	lsls	r2, r3, #8
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	619a      	str	r2, [r3, #24]
      break;
 8004c00:	e084      	b.n	8004d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fb2d 	bl	8005268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0208 	orr.w	r2, r2, #8
 8004c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0204 	bic.w	r2, r2, #4
 8004c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69d9      	ldr	r1, [r3, #28]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	61da      	str	r2, [r3, #28]
      break;
 8004c40:	e064      	b.n	8004d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fb95 	bl	8005378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69d9      	ldr	r1, [r3, #28]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	021a      	lsls	r2, r3, #8
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	61da      	str	r2, [r3, #28]
      break;
 8004c82:	e043      	b.n	8004d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fbfe 	bl	800548c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cc2:	e023      	b.n	8004d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fc42 	bl	8005554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d04:	e002      	b.n	8004d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop

08004d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_TIM_ConfigClockSource+0x1c>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e0de      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x1da>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a63      	ldr	r2, [pc, #396]	; (8004f04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	f000 80a9 	beq.w	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004d7c:	4a61      	ldr	r2, [pc, #388]	; (8004f04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	f200 80ae 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d84:	4a60      	ldr	r2, [pc, #384]	; (8004f08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	f000 80a1 	beq.w	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004d8c:	4a5e      	ldr	r2, [pc, #376]	; (8004f08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	f200 80a6 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d94:	4a5d      	ldr	r2, [pc, #372]	; (8004f0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	f000 8099 	beq.w	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004d9c:	4a5b      	ldr	r2, [pc, #364]	; (8004f0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	f200 809e 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004da4:	4a5a      	ldr	r2, [pc, #360]	; (8004f10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	f000 8091 	beq.w	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004dac:	4a58      	ldr	r2, [pc, #352]	; (8004f10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	f200 8096 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004db4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004db8:	f000 8089 	beq.w	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004dbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004dc0:	f200 808e 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc8:	d03e      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x128>
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dce:	f200 8087 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	f000 8086 	beq.w	8004ee6 <HAL_TIM_ConfigClockSource+0x1c6>
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d87f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004de0:	2b70      	cmp	r3, #112	; 0x70
 8004de2:	d01a      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0xfa>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d87b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d050      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x16e>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d877      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004df0:	2b50      	cmp	r3, #80	; 0x50
 8004df2:	d03c      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x14e>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d873      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d058      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x18e>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d86f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e00:	2b30      	cmp	r3, #48	; 0x30
 8004e02:	d064      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d86b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d060      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d867      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05c      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d05a      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x1ae>
 8004e18:	e062      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6899      	ldr	r1, [r3, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f000 fc75 	bl	8005718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	609a      	str	r2, [r3, #8]
      break;
 8004e46:	e04f      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6899      	ldr	r1, [r3, #8]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f000 fc5e 	bl	8005718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6a:	609a      	str	r2, [r3, #8]
      break;
 8004e6c:	e03c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 fbd0 	bl	8005620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2150      	movs	r1, #80	; 0x50
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fc29 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e02c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 fbef 	bl	800567e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2160      	movs	r1, #96	; 0x60
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fc19 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8004eac:	e01c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 fbb0 	bl	8005620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fc09 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e00c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f000 fc00 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8004ede:	e003      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee4:	e000      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	00100070 	.word	0x00100070
 8004f08:	00100040 	.word	0x00100040
 8004f0c:	00100030 	.word	0x00100030
 8004f10:	00100020 	.word	0x00100020

08004f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a3c      	ldr	r2, [pc, #240]	; (8005018 <TIM_Base_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a39      	ldr	r2, [pc, #228]	; (800501c <TIM_Base_SetConfig+0x108>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a38      	ldr	r2, [pc, #224]	; (8005020 <TIM_Base_SetConfig+0x10c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a37      	ldr	r2, [pc, #220]	; (8005024 <TIM_Base_SetConfig+0x110>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <TIM_Base_SetConfig+0x104>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01b      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d017      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2a      	ldr	r2, [pc, #168]	; (800501c <TIM_Base_SetConfig+0x108>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a29      	ldr	r2, [pc, #164]	; (8005020 <TIM_Base_SetConfig+0x10c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00f      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a28      	ldr	r2, [pc, #160]	; (8005024 <TIM_Base_SetConfig+0x110>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a27      	ldr	r2, [pc, #156]	; (8005028 <TIM_Base_SetConfig+0x114>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a26      	ldr	r2, [pc, #152]	; (800502c <TIM_Base_SetConfig+0x118>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <TIM_Base_SetConfig+0x11c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a10      	ldr	r2, [pc, #64]	; (8005018 <TIM_Base_SetConfig+0x104>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00f      	beq.n	8004ffc <TIM_Base_SetConfig+0xe8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a11      	ldr	r2, [pc, #68]	; (8005024 <TIM_Base_SetConfig+0x110>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0xe8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a10      	ldr	r2, [pc, #64]	; (8005028 <TIM_Base_SetConfig+0x114>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0xe8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0f      	ldr	r2, [pc, #60]	; (800502c <TIM_Base_SetConfig+0x118>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0xe8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a0e      	ldr	r2, [pc, #56]	; (8005030 <TIM_Base_SetConfig+0x11c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	615a      	str	r2, [r3, #20]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40013400 	.word	0x40013400
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400
 8005030:	40014800 	.word	0x40014800

08005034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f023 0302 	bic.w	r3, r3, #2
 8005080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <TIM_OC1_SetConfig+0x10c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00f      	beq.n	80050b4 <TIM_OC1_SetConfig+0x80>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <TIM_OC1_SetConfig+0x110>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00b      	beq.n	80050b4 <TIM_OC1_SetConfig+0x80>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <TIM_OC1_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <TIM_OC1_SetConfig+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a29      	ldr	r2, [pc, #164]	; (800514c <TIM_OC1_SetConfig+0x118>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_OC1_SetConfig+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_OC1_SetConfig+0x11c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10c      	bne.n	80050ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0308 	bic.w	r3, r3, #8
 80050ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <TIM_OC1_SetConfig+0x10c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00f      	beq.n	80050f6 <TIM_OC1_SetConfig+0xc2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <TIM_OC1_SetConfig+0x110>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <TIM_OC1_SetConfig+0xc2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a19      	ldr	r2, [pc, #100]	; (8005148 <TIM_OC1_SetConfig+0x114>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <TIM_OC1_SetConfig+0xc2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a18      	ldr	r2, [pc, #96]	; (800514c <TIM_OC1_SetConfig+0x118>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_OC1_SetConfig+0xc2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a17      	ldr	r2, [pc, #92]	; (8005150 <TIM_OC1_SetConfig+0x11c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d111      	bne.n	800511a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40013400 	.word	0x40013400
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800

08005154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0210 	bic.w	r2, r3, #16
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f023 0320 	bic.w	r3, r3, #32
 80051a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a28      	ldr	r2, [pc, #160]	; (8005254 <TIM_OC2_SetConfig+0x100>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC2_SetConfig+0x6c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a27      	ldr	r2, [pc, #156]	; (8005258 <TIM_OC2_SetConfig+0x104>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10d      	bne.n	80051dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <TIM_OC2_SetConfig+0x100>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00f      	beq.n	8005204 <TIM_OC2_SetConfig+0xb0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <TIM_OC2_SetConfig+0x104>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_OC2_SetConfig+0xb0>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a1b      	ldr	r2, [pc, #108]	; (800525c <TIM_OC2_SetConfig+0x108>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d007      	beq.n	8005204 <TIM_OC2_SetConfig+0xb0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <TIM_OC2_SetConfig+0x10c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_OC2_SetConfig+0xb0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a19      	ldr	r2, [pc, #100]	; (8005264 <TIM_OC2_SetConfig+0x110>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d113      	bne.n	800522c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800520a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40013400 	.word	0x40013400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800

08005268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <TIM_OC3_SetConfig+0xfc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_OC3_SetConfig+0x6a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <TIM_OC3_SetConfig+0x100>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10d      	bne.n	80052ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <TIM_OC3_SetConfig+0xfc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00f      	beq.n	8005316 <TIM_OC3_SetConfig+0xae>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <TIM_OC3_SetConfig+0x100>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00b      	beq.n	8005316 <TIM_OC3_SetConfig+0xae>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <TIM_OC3_SetConfig+0x104>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <TIM_OC3_SetConfig+0xae>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a19      	ldr	r2, [pc, #100]	; (8005370 <TIM_OC3_SetConfig+0x108>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC3_SetConfig+0xae>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <TIM_OC3_SetConfig+0x10c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d113      	bne.n	800533e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800531c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800

08005378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	031b      	lsls	r3, r3, #12
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a28      	ldr	r2, [pc, #160]	; (8005478 <TIM_OC4_SetConfig+0x100>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC4_SetConfig+0x6c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a27      	ldr	r2, [pc, #156]	; (800547c <TIM_OC4_SetConfig+0x104>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10d      	bne.n	8005400 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	031b      	lsls	r3, r3, #12
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <TIM_OC4_SetConfig+0x100>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00f      	beq.n	8005428 <TIM_OC4_SetConfig+0xb0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a1c      	ldr	r2, [pc, #112]	; (800547c <TIM_OC4_SetConfig+0x104>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00b      	beq.n	8005428 <TIM_OC4_SetConfig+0xb0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <TIM_OC4_SetConfig+0x108>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d007      	beq.n	8005428 <TIM_OC4_SetConfig+0xb0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <TIM_OC4_SetConfig+0x10c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_OC4_SetConfig+0xb0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <TIM_OC4_SetConfig+0x110>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d113      	bne.n	8005450 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005436:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	019b      	lsls	r3, r3, #6
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	019b      	lsls	r3, r3, #6
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40013400 	.word	0x40013400
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800

0800548c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <TIM_OC5_SetConfig+0xb4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00f      	beq.n	8005506 <TIM_OC5_SetConfig+0x7a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a16      	ldr	r2, [pc, #88]	; (8005544 <TIM_OC5_SetConfig+0xb8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_OC5_SetConfig+0x7a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <TIM_OC5_SetConfig+0xbc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_OC5_SetConfig+0x7a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <TIM_OC5_SetConfig+0xc0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_OC5_SetConfig+0x7a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a13      	ldr	r2, [pc, #76]	; (8005550 <TIM_OC5_SetConfig+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d109      	bne.n	800551a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40013400 	.word	0x40013400
 8005548:	40014000 	.word	0x40014000
 800554c:	40014400 	.word	0x40014400
 8005550:	40014800 	.word	0x40014800

08005554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800559a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	051b      	lsls	r3, r3, #20
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a18      	ldr	r2, [pc, #96]	; (800560c <TIM_OC6_SetConfig+0xb8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00f      	beq.n	80055d0 <TIM_OC6_SetConfig+0x7c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a17      	ldr	r2, [pc, #92]	; (8005610 <TIM_OC6_SetConfig+0xbc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00b      	beq.n	80055d0 <TIM_OC6_SetConfig+0x7c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a16      	ldr	r2, [pc, #88]	; (8005614 <TIM_OC6_SetConfig+0xc0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_OC6_SetConfig+0x7c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <TIM_OC6_SetConfig+0xc4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_OC6_SetConfig+0x7c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a14      	ldr	r2, [pc, #80]	; (800561c <TIM_OC6_SetConfig+0xc8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d109      	bne.n	80055e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40013400 	.word	0x40013400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 030a 	bic.w	r3, r3, #10
 800565c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567e:	b480      	push	{r7}
 8005680:	b087      	sub	sp, #28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f023 0210 	bic.w	r2, r3, #16
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	031b      	lsls	r3, r3, #12
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f043 0307 	orr.w	r3, r3, #7
 8005704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	431a      	orrs	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4313      	orrs	r3, r2
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	609a      	str	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2201      	movs	r2, #1
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	43db      	mvns	r3, r3
 800577a:	401a      	ands	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_TIMEx_PWMN_Start+0x24>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e022      	b.n	800580e <HAL_TIMEx_PWMN_Start+0x6a>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d109      	bne.n	80057e2 <HAL_TIMEx_PWMN_Start+0x3e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e015      	b.n	800580e <HAL_TIMEx_PWMN_Start+0x6a>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d109      	bne.n	80057fc <HAL_TIMEx_PWMN_Start+0x58>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e008      	b.n	800580e <HAL_TIMEx_PWMN_Start+0x6a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e069      	b.n	80058ea <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_TIMEx_PWMN_Start+0x82>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005824:	e013      	b.n	800584e <HAL_TIMEx_PWMN_Start+0xaa>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d104      	bne.n	8005836 <HAL_TIMEx_PWMN_Start+0x92>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005834:	e00b      	b.n	800584e <HAL_TIMEx_PWMN_Start+0xaa>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d104      	bne.n	8005846 <HAL_TIMEx_PWMN_Start+0xa2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005844:	e003      	b.n	800584e <HAL_TIMEx_PWMN_Start+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2204      	movs	r2, #4
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f9b6 	bl	8005bc8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800586a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <HAL_TIMEx_PWMN_Start+0x150>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <HAL_TIMEx_PWMN_Start+0x104>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587e:	d013      	beq.n	80058a8 <HAL_TIMEx_PWMN_Start+0x104>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <HAL_TIMEx_PWMN_Start+0x154>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <HAL_TIMEx_PWMN_Start+0x104>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <HAL_TIMEx_PWMN_Start+0x158>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <HAL_TIMEx_PWMN_Start+0x104>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a19      	ldr	r2, [pc, #100]	; (8005900 <HAL_TIMEx_PWMN_Start+0x15c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIMEx_PWMN_Start+0x104>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a18      	ldr	r2, [pc, #96]	; (8005904 <HAL_TIMEx_PWMN_Start+0x160>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d115      	bne.n	80058d4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b16      	ldr	r3, [pc, #88]	; (8005908 <HAL_TIMEx_PWMN_Start+0x164>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d015      	beq.n	80058e6 <HAL_TIMEx_PWMN_Start+0x142>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d011      	beq.n	80058e6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d2:	e008      	b.n	80058e6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e000      	b.n	80058e8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800
 8005900:	40013400 	.word	0x40013400
 8005904:	40014000 	.word	0x40014000
 8005908:	00010007 	.word	0x00010007

0800590c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005920:	2302      	movs	r3, #2
 8005922:	e065      	b.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2c      	ldr	r2, [pc, #176]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2b      	ldr	r2, [pc, #172]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d108      	bne.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800595e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d018      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d013      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10c      	bne.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40014000 	.word	0x40014000

08005a10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e087      	b.n	8005b3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d126      	bne.n	8005b2a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	051b      	lsls	r3, r3, #20
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d106      	bne.n	8005b2a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40013400 	.word	0x40013400

08005b50 <HAL_TIMEx_OC_ConfigPulseOnCompare>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OC_ConfigPulseOnCompare(TIM_HandleTypeDef *htim,
                                                    uint32_t PulseWidthPrescaler,
                                                    uint32_t PulseWidth)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PULSEONCOMPARE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_PULSEONCOMPARE_WIDTH(PulseWidth));
  assert_param(IS_TIM_PULSEONCOMPARE_WIDTHPRESCALER(PulseWidthPrescaler));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_TIMEx_OC_ConfigPulseOnCompare+0x1a>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e028      	b.n	8005bbc <HAL_TIMEx_OC_ConfigPulseOnCompare+0x6c>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx ECR register value */
  tmpecr = htim->Instance->ECR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b80:	617b      	str	r3, [r7, #20]
  /* Reset the Pulse width prescaler and the Pulse width */
  tmpecr &= ~(TIM_ECR_PWPRSC | TIM_ECR_PW);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 63ff 	bic.w	r3, r3, #133693440	; 0x7f80000
 8005b88:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Set the Pulse width prescaler and Pulse width*/
  tmpecr |= PulseWidthPrescaler << TIM_ECR_PWPRSC_Pos;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	061b      	lsls	r3, r3, #24
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
  tmpecr |= PulseWidth << TIM_ECR_PW_Pos;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Write to TIMx ECR */
  htim->Instance->ECR = tmpecr;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2204      	movs	r2, #4
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	401a      	ands	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	431a      	orrs	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b08a      	sub	sp, #40	; 0x28
 8005c16:	af02      	add	r7, sp, #8
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	f040 8083 	bne.w	8005d34 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_UART_Transmit+0x28>
 8005c34:	88fb      	ldrh	r3, [r7, #6]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e07b      	b.n	8005d36 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Transmit+0x3a>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e074      	b.n	8005d36 <HAL_UART_Transmit+0x124>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2221      	movs	r2, #33	; 0x21
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c64:	f7fb fd4a 	bl	80016fc <HAL_GetTick>
 8005c68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	d108      	bne.n	8005c96 <HAL_UART_Transmit+0x84>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e003      	b.n	8005c9e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005ca6:	e02c      	b.n	8005d02 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f843 	bl	8005d3e <UART_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e039      	b.n	8005d36 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	3302      	adds	r3, #2
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	e007      	b.n	8005cf0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3301      	adds	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1cc      	bne.n	8005ca8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	2140      	movs	r1, #64	; 0x40
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f810 	bl	8005d3e <UART_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e006      	b.n	8005d36 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b09c      	sub	sp, #112	; 0x70
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4e:	e0a9      	b.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	f000 80a5 	beq.w	8005ea4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5a:	f7fb fccf 	bl	80016fc <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d140      	bne.n	8005df2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d84:	667b      	str	r3, [r7, #100]	; 0x64
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e5      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e069      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d051      	beq.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0e:	d149      	bne.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e6c:	623a      	str	r2, [r7, #32]
 8005e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	6a3a      	ldr	r2, [r7, #32]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e010      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	f43f af46 	beq.w	8005d50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3770      	adds	r7, #112	; 0x70
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <__errno>:
 8005ed0:	4b01      	ldr	r3, [pc, #4]	; (8005ed8 <__errno+0x8>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2000000c 	.word	0x2000000c

08005edc <__libc_init_array>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	4d0d      	ldr	r5, [pc, #52]	; (8005f14 <__libc_init_array+0x38>)
 8005ee0:	4c0d      	ldr	r4, [pc, #52]	; (8005f18 <__libc_init_array+0x3c>)
 8005ee2:	1b64      	subs	r4, r4, r5
 8005ee4:	10a4      	asrs	r4, r4, #2
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	42a6      	cmp	r6, r4
 8005eea:	d109      	bne.n	8005f00 <__libc_init_array+0x24>
 8005eec:	4d0b      	ldr	r5, [pc, #44]	; (8005f1c <__libc_init_array+0x40>)
 8005eee:	4c0c      	ldr	r4, [pc, #48]	; (8005f20 <__libc_init_array+0x44>)
 8005ef0:	f000 fca2 	bl	8006838 <_init>
 8005ef4:	1b64      	subs	r4, r4, r5
 8005ef6:	10a4      	asrs	r4, r4, #2
 8005ef8:	2600      	movs	r6, #0
 8005efa:	42a6      	cmp	r6, r4
 8005efc:	d105      	bne.n	8005f0a <__libc_init_array+0x2e>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f04:	4798      	blx	r3
 8005f06:	3601      	adds	r6, #1
 8005f08:	e7ee      	b.n	8005ee8 <__libc_init_array+0xc>
 8005f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0e:	4798      	blx	r3
 8005f10:	3601      	adds	r6, #1
 8005f12:	e7f2      	b.n	8005efa <__libc_init_array+0x1e>
 8005f14:	0800689c 	.word	0x0800689c
 8005f18:	0800689c 	.word	0x0800689c
 8005f1c:	0800689c 	.word	0x0800689c
 8005f20:	080068a0 	.word	0x080068a0

08005f24 <memset>:
 8005f24:	4402      	add	r2, r0
 8005f26:	4603      	mov	r3, r0
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d100      	bne.n	8005f2e <memset+0xa>
 8005f2c:	4770      	bx	lr
 8005f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f32:	e7f9      	b.n	8005f28 <memset+0x4>

08005f34 <sniprintf>:
 8005f34:	b40c      	push	{r2, r3}
 8005f36:	b530      	push	{r4, r5, lr}
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <sniprintf+0x64>)
 8005f3a:	1e0c      	subs	r4, r1, #0
 8005f3c:	681d      	ldr	r5, [r3, #0]
 8005f3e:	b09d      	sub	sp, #116	; 0x74
 8005f40:	da08      	bge.n	8005f54 <sniprintf+0x20>
 8005f42:	238b      	movs	r3, #139	; 0x8b
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	b01d      	add	sp, #116	; 0x74
 8005f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f50:	b002      	add	sp, #8
 8005f52:	4770      	bx	lr
 8005f54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f5c:	bf14      	ite	ne
 8005f5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f62:	4623      	moveq	r3, r4
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	9307      	str	r3, [sp, #28]
 8005f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f6c:	9002      	str	r0, [sp, #8]
 8005f6e:	9006      	str	r0, [sp, #24]
 8005f70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f76:	ab21      	add	r3, sp, #132	; 0x84
 8005f78:	a902      	add	r1, sp, #8
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	f000 f869 	bl	8006054 <_svfiprintf_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	bfbc      	itt	lt
 8005f86:	238b      	movlt	r3, #139	; 0x8b
 8005f88:	602b      	strlt	r3, [r5, #0]
 8005f8a:	2c00      	cmp	r4, #0
 8005f8c:	d0dd      	beq.n	8005f4a <sniprintf+0x16>
 8005f8e:	9b02      	ldr	r3, [sp, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e7d9      	b.n	8005f4a <sniprintf+0x16>
 8005f96:	bf00      	nop
 8005f98:	2000000c 	.word	0x2000000c

08005f9c <__ssputs_r>:
 8005f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	688e      	ldr	r6, [r1, #8]
 8005fa2:	429e      	cmp	r6, r3
 8005fa4:	4682      	mov	sl, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	4690      	mov	r8, r2
 8005faa:	461f      	mov	r7, r3
 8005fac:	d838      	bhi.n	8006020 <__ssputs_r+0x84>
 8005fae:	898a      	ldrh	r2, [r1, #12]
 8005fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fb4:	d032      	beq.n	800601c <__ssputs_r+0x80>
 8005fb6:	6825      	ldr	r5, [r4, #0]
 8005fb8:	6909      	ldr	r1, [r1, #16]
 8005fba:	eba5 0901 	sub.w	r9, r5, r1
 8005fbe:	6965      	ldr	r5, [r4, #20]
 8005fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fc8:	3301      	adds	r3, #1
 8005fca:	444b      	add	r3, r9
 8005fcc:	106d      	asrs	r5, r5, #1
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	bf38      	it	cc
 8005fd2:	461d      	movcc	r5, r3
 8005fd4:	0553      	lsls	r3, r2, #21
 8005fd6:	d531      	bpl.n	800603c <__ssputs_r+0xa0>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f000 fb63 	bl	80066a4 <_malloc_r>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	b950      	cbnz	r0, 8005ff8 <__ssputs_r+0x5c>
 8005fe2:	230c      	movs	r3, #12
 8005fe4:	f8ca 3000 	str.w	r3, [sl]
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff8:	6921      	ldr	r1, [r4, #16]
 8005ffa:	464a      	mov	r2, r9
 8005ffc:	f000 fabe 	bl	800657c <memcpy>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	6126      	str	r6, [r4, #16]
 800600e:	6165      	str	r5, [r4, #20]
 8006010:	444e      	add	r6, r9
 8006012:	eba5 0509 	sub.w	r5, r5, r9
 8006016:	6026      	str	r6, [r4, #0]
 8006018:	60a5      	str	r5, [r4, #8]
 800601a:	463e      	mov	r6, r7
 800601c:	42be      	cmp	r6, r7
 800601e:	d900      	bls.n	8006022 <__ssputs_r+0x86>
 8006020:	463e      	mov	r6, r7
 8006022:	6820      	ldr	r0, [r4, #0]
 8006024:	4632      	mov	r2, r6
 8006026:	4641      	mov	r1, r8
 8006028:	f000 fab6 	bl	8006598 <memmove>
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	1b9b      	subs	r3, r3, r6
 8006030:	60a3      	str	r3, [r4, #8]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	4433      	add	r3, r6
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	2000      	movs	r0, #0
 800603a:	e7db      	b.n	8005ff4 <__ssputs_r+0x58>
 800603c:	462a      	mov	r2, r5
 800603e:	f000 fba5 	bl	800678c <_realloc_r>
 8006042:	4606      	mov	r6, r0
 8006044:	2800      	cmp	r0, #0
 8006046:	d1e1      	bne.n	800600c <__ssputs_r+0x70>
 8006048:	6921      	ldr	r1, [r4, #16]
 800604a:	4650      	mov	r0, sl
 800604c:	f000 fabe 	bl	80065cc <_free_r>
 8006050:	e7c7      	b.n	8005fe2 <__ssputs_r+0x46>
	...

08006054 <_svfiprintf_r>:
 8006054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006058:	4698      	mov	r8, r3
 800605a:	898b      	ldrh	r3, [r1, #12]
 800605c:	061b      	lsls	r3, r3, #24
 800605e:	b09d      	sub	sp, #116	; 0x74
 8006060:	4607      	mov	r7, r0
 8006062:	460d      	mov	r5, r1
 8006064:	4614      	mov	r4, r2
 8006066:	d50e      	bpl.n	8006086 <_svfiprintf_r+0x32>
 8006068:	690b      	ldr	r3, [r1, #16]
 800606a:	b963      	cbnz	r3, 8006086 <_svfiprintf_r+0x32>
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	f000 fb19 	bl	80066a4 <_malloc_r>
 8006072:	6028      	str	r0, [r5, #0]
 8006074:	6128      	str	r0, [r5, #16]
 8006076:	b920      	cbnz	r0, 8006082 <_svfiprintf_r+0x2e>
 8006078:	230c      	movs	r3, #12
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	e0d1      	b.n	8006226 <_svfiprintf_r+0x1d2>
 8006082:	2340      	movs	r3, #64	; 0x40
 8006084:	616b      	str	r3, [r5, #20]
 8006086:	2300      	movs	r3, #0
 8006088:	9309      	str	r3, [sp, #36]	; 0x24
 800608a:	2320      	movs	r3, #32
 800608c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006090:	f8cd 800c 	str.w	r8, [sp, #12]
 8006094:	2330      	movs	r3, #48	; 0x30
 8006096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006240 <_svfiprintf_r+0x1ec>
 800609a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800609e:	f04f 0901 	mov.w	r9, #1
 80060a2:	4623      	mov	r3, r4
 80060a4:	469a      	mov	sl, r3
 80060a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060aa:	b10a      	cbz	r2, 80060b0 <_svfiprintf_r+0x5c>
 80060ac:	2a25      	cmp	r2, #37	; 0x25
 80060ae:	d1f9      	bne.n	80060a4 <_svfiprintf_r+0x50>
 80060b0:	ebba 0b04 	subs.w	fp, sl, r4
 80060b4:	d00b      	beq.n	80060ce <_svfiprintf_r+0x7a>
 80060b6:	465b      	mov	r3, fp
 80060b8:	4622      	mov	r2, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	4638      	mov	r0, r7
 80060be:	f7ff ff6d 	bl	8005f9c <__ssputs_r>
 80060c2:	3001      	adds	r0, #1
 80060c4:	f000 80aa 	beq.w	800621c <_svfiprintf_r+0x1c8>
 80060c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ca:	445a      	add	r2, fp
 80060cc:	9209      	str	r2, [sp, #36]	; 0x24
 80060ce:	f89a 3000 	ldrb.w	r3, [sl]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80a2 	beq.w	800621c <_svfiprintf_r+0x1c8>
 80060d8:	2300      	movs	r3, #0
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e2:	f10a 0a01 	add.w	sl, sl, #1
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060ee:	931a      	str	r3, [sp, #104]	; 0x68
 80060f0:	4654      	mov	r4, sl
 80060f2:	2205      	movs	r2, #5
 80060f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f8:	4851      	ldr	r0, [pc, #324]	; (8006240 <_svfiprintf_r+0x1ec>)
 80060fa:	f7fa f891 	bl	8000220 <memchr>
 80060fe:	9a04      	ldr	r2, [sp, #16]
 8006100:	b9d8      	cbnz	r0, 800613a <_svfiprintf_r+0xe6>
 8006102:	06d0      	lsls	r0, r2, #27
 8006104:	bf44      	itt	mi
 8006106:	2320      	movmi	r3, #32
 8006108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800610c:	0711      	lsls	r1, r2, #28
 800610e:	bf44      	itt	mi
 8006110:	232b      	movmi	r3, #43	; 0x2b
 8006112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006116:	f89a 3000 	ldrb.w	r3, [sl]
 800611a:	2b2a      	cmp	r3, #42	; 0x2a
 800611c:	d015      	beq.n	800614a <_svfiprintf_r+0xf6>
 800611e:	9a07      	ldr	r2, [sp, #28]
 8006120:	4654      	mov	r4, sl
 8006122:	2000      	movs	r0, #0
 8006124:	f04f 0c0a 	mov.w	ip, #10
 8006128:	4621      	mov	r1, r4
 800612a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800612e:	3b30      	subs	r3, #48	; 0x30
 8006130:	2b09      	cmp	r3, #9
 8006132:	d94e      	bls.n	80061d2 <_svfiprintf_r+0x17e>
 8006134:	b1b0      	cbz	r0, 8006164 <_svfiprintf_r+0x110>
 8006136:	9207      	str	r2, [sp, #28]
 8006138:	e014      	b.n	8006164 <_svfiprintf_r+0x110>
 800613a:	eba0 0308 	sub.w	r3, r0, r8
 800613e:	fa09 f303 	lsl.w	r3, r9, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	46a2      	mov	sl, r4
 8006148:	e7d2      	b.n	80060f0 <_svfiprintf_r+0x9c>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	9103      	str	r1, [sp, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfbb      	ittet	lt
 8006156:	425b      	neglt	r3, r3
 8006158:	f042 0202 	orrlt.w	r2, r2, #2
 800615c:	9307      	strge	r3, [sp, #28]
 800615e:	9307      	strlt	r3, [sp, #28]
 8006160:	bfb8      	it	lt
 8006162:	9204      	strlt	r2, [sp, #16]
 8006164:	7823      	ldrb	r3, [r4, #0]
 8006166:	2b2e      	cmp	r3, #46	; 0x2e
 8006168:	d10c      	bne.n	8006184 <_svfiprintf_r+0x130>
 800616a:	7863      	ldrb	r3, [r4, #1]
 800616c:	2b2a      	cmp	r3, #42	; 0x2a
 800616e:	d135      	bne.n	80061dc <_svfiprintf_r+0x188>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	9203      	str	r2, [sp, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	bfb8      	it	lt
 800617c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006180:	3402      	adds	r4, #2
 8006182:	9305      	str	r3, [sp, #20]
 8006184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006250 <_svfiprintf_r+0x1fc>
 8006188:	7821      	ldrb	r1, [r4, #0]
 800618a:	2203      	movs	r2, #3
 800618c:	4650      	mov	r0, sl
 800618e:	f7fa f847 	bl	8000220 <memchr>
 8006192:	b140      	cbz	r0, 80061a6 <_svfiprintf_r+0x152>
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	eba0 000a 	sub.w	r0, r0, sl
 800619a:	fa03 f000 	lsl.w	r0, r3, r0
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	4303      	orrs	r3, r0
 80061a2:	3401      	adds	r4, #1
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061aa:	4826      	ldr	r0, [pc, #152]	; (8006244 <_svfiprintf_r+0x1f0>)
 80061ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b0:	2206      	movs	r2, #6
 80061b2:	f7fa f835 	bl	8000220 <memchr>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d038      	beq.n	800622c <_svfiprintf_r+0x1d8>
 80061ba:	4b23      	ldr	r3, [pc, #140]	; (8006248 <_svfiprintf_r+0x1f4>)
 80061bc:	bb1b      	cbnz	r3, 8006206 <_svfiprintf_r+0x1b2>
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	3307      	adds	r3, #7
 80061c2:	f023 0307 	bic.w	r3, r3, #7
 80061c6:	3308      	adds	r3, #8
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061cc:	4433      	add	r3, r6
 80061ce:	9309      	str	r3, [sp, #36]	; 0x24
 80061d0:	e767      	b.n	80060a2 <_svfiprintf_r+0x4e>
 80061d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d6:	460c      	mov	r4, r1
 80061d8:	2001      	movs	r0, #1
 80061da:	e7a5      	b.n	8006128 <_svfiprintf_r+0xd4>
 80061dc:	2300      	movs	r3, #0
 80061de:	3401      	adds	r4, #1
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	4619      	mov	r1, r3
 80061e4:	f04f 0c0a 	mov.w	ip, #10
 80061e8:	4620      	mov	r0, r4
 80061ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ee:	3a30      	subs	r2, #48	; 0x30
 80061f0:	2a09      	cmp	r2, #9
 80061f2:	d903      	bls.n	80061fc <_svfiprintf_r+0x1a8>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0c5      	beq.n	8006184 <_svfiprintf_r+0x130>
 80061f8:	9105      	str	r1, [sp, #20]
 80061fa:	e7c3      	b.n	8006184 <_svfiprintf_r+0x130>
 80061fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006200:	4604      	mov	r4, r0
 8006202:	2301      	movs	r3, #1
 8006204:	e7f0      	b.n	80061e8 <_svfiprintf_r+0x194>
 8006206:	ab03      	add	r3, sp, #12
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	462a      	mov	r2, r5
 800620c:	4b0f      	ldr	r3, [pc, #60]	; (800624c <_svfiprintf_r+0x1f8>)
 800620e:	a904      	add	r1, sp, #16
 8006210:	4638      	mov	r0, r7
 8006212:	f3af 8000 	nop.w
 8006216:	1c42      	adds	r2, r0, #1
 8006218:	4606      	mov	r6, r0
 800621a:	d1d6      	bne.n	80061ca <_svfiprintf_r+0x176>
 800621c:	89ab      	ldrh	r3, [r5, #12]
 800621e:	065b      	lsls	r3, r3, #25
 8006220:	f53f af2c 	bmi.w	800607c <_svfiprintf_r+0x28>
 8006224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006226:	b01d      	add	sp, #116	; 0x74
 8006228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622c:	ab03      	add	r3, sp, #12
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	462a      	mov	r2, r5
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <_svfiprintf_r+0x1f8>)
 8006234:	a904      	add	r1, sp, #16
 8006236:	4638      	mov	r0, r7
 8006238:	f000 f87a 	bl	8006330 <_printf_i>
 800623c:	e7eb      	b.n	8006216 <_svfiprintf_r+0x1c2>
 800623e:	bf00      	nop
 8006240:	08006868 	.word	0x08006868
 8006244:	08006872 	.word	0x08006872
 8006248:	00000000 	.word	0x00000000
 800624c:	08005f9d 	.word	0x08005f9d
 8006250:	0800686e 	.word	0x0800686e

08006254 <_printf_common>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	4616      	mov	r6, r2
 800625a:	4699      	mov	r9, r3
 800625c:	688a      	ldr	r2, [r1, #8]
 800625e:	690b      	ldr	r3, [r1, #16]
 8006260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006264:	4293      	cmp	r3, r2
 8006266:	bfb8      	it	lt
 8006268:	4613      	movlt	r3, r2
 800626a:	6033      	str	r3, [r6, #0]
 800626c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006270:	4607      	mov	r7, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b10a      	cbz	r2, 800627a <_printf_common+0x26>
 8006276:	3301      	adds	r3, #1
 8006278:	6033      	str	r3, [r6, #0]
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	0699      	lsls	r1, r3, #26
 800627e:	bf42      	ittt	mi
 8006280:	6833      	ldrmi	r3, [r6, #0]
 8006282:	3302      	addmi	r3, #2
 8006284:	6033      	strmi	r3, [r6, #0]
 8006286:	6825      	ldr	r5, [r4, #0]
 8006288:	f015 0506 	ands.w	r5, r5, #6
 800628c:	d106      	bne.n	800629c <_printf_common+0x48>
 800628e:	f104 0a19 	add.w	sl, r4, #25
 8006292:	68e3      	ldr	r3, [r4, #12]
 8006294:	6832      	ldr	r2, [r6, #0]
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	42ab      	cmp	r3, r5
 800629a:	dc26      	bgt.n	80062ea <_printf_common+0x96>
 800629c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062a0:	1e13      	subs	r3, r2, #0
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	bf18      	it	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	0692      	lsls	r2, r2, #26
 80062aa:	d42b      	bmi.n	8006304 <_printf_common+0xb0>
 80062ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b0:	4649      	mov	r1, r9
 80062b2:	4638      	mov	r0, r7
 80062b4:	47c0      	blx	r8
 80062b6:	3001      	adds	r0, #1
 80062b8:	d01e      	beq.n	80062f8 <_printf_common+0xa4>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	68e5      	ldr	r5, [r4, #12]
 80062be:	6832      	ldr	r2, [r6, #0]
 80062c0:	f003 0306 	and.w	r3, r3, #6
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	bf08      	it	eq
 80062c8:	1aad      	subeq	r5, r5, r2
 80062ca:	68a3      	ldr	r3, [r4, #8]
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	bf0c      	ite	eq
 80062d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d4:	2500      	movne	r5, #0
 80062d6:	4293      	cmp	r3, r2
 80062d8:	bfc4      	itt	gt
 80062da:	1a9b      	subgt	r3, r3, r2
 80062dc:	18ed      	addgt	r5, r5, r3
 80062de:	2600      	movs	r6, #0
 80062e0:	341a      	adds	r4, #26
 80062e2:	42b5      	cmp	r5, r6
 80062e4:	d11a      	bne.n	800631c <_printf_common+0xc8>
 80062e6:	2000      	movs	r0, #0
 80062e8:	e008      	b.n	80062fc <_printf_common+0xa8>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4652      	mov	r2, sl
 80062ee:	4649      	mov	r1, r9
 80062f0:	4638      	mov	r0, r7
 80062f2:	47c0      	blx	r8
 80062f4:	3001      	adds	r0, #1
 80062f6:	d103      	bne.n	8006300 <_printf_common+0xac>
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295
 80062fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006300:	3501      	adds	r5, #1
 8006302:	e7c6      	b.n	8006292 <_printf_common+0x3e>
 8006304:	18e1      	adds	r1, r4, r3
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	2030      	movs	r0, #48	; 0x30
 800630a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800630e:	4422      	add	r2, r4
 8006310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006318:	3302      	adds	r3, #2
 800631a:	e7c7      	b.n	80062ac <_printf_common+0x58>
 800631c:	2301      	movs	r3, #1
 800631e:	4622      	mov	r2, r4
 8006320:	4649      	mov	r1, r9
 8006322:	4638      	mov	r0, r7
 8006324:	47c0      	blx	r8
 8006326:	3001      	adds	r0, #1
 8006328:	d0e6      	beq.n	80062f8 <_printf_common+0xa4>
 800632a:	3601      	adds	r6, #1
 800632c:	e7d9      	b.n	80062e2 <_printf_common+0x8e>
	...

08006330 <_printf_i>:
 8006330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006334:	7e0f      	ldrb	r7, [r1, #24]
 8006336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006338:	2f78      	cmp	r7, #120	; 0x78
 800633a:	4691      	mov	r9, r2
 800633c:	4680      	mov	r8, r0
 800633e:	460c      	mov	r4, r1
 8006340:	469a      	mov	sl, r3
 8006342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006346:	d807      	bhi.n	8006358 <_printf_i+0x28>
 8006348:	2f62      	cmp	r7, #98	; 0x62
 800634a:	d80a      	bhi.n	8006362 <_printf_i+0x32>
 800634c:	2f00      	cmp	r7, #0
 800634e:	f000 80d8 	beq.w	8006502 <_printf_i+0x1d2>
 8006352:	2f58      	cmp	r7, #88	; 0x58
 8006354:	f000 80a3 	beq.w	800649e <_printf_i+0x16e>
 8006358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800635c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006360:	e03a      	b.n	80063d8 <_printf_i+0xa8>
 8006362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006366:	2b15      	cmp	r3, #21
 8006368:	d8f6      	bhi.n	8006358 <_printf_i+0x28>
 800636a:	a101      	add	r1, pc, #4	; (adr r1, 8006370 <_printf_i+0x40>)
 800636c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006370:	080063c9 	.word	0x080063c9
 8006374:	080063dd 	.word	0x080063dd
 8006378:	08006359 	.word	0x08006359
 800637c:	08006359 	.word	0x08006359
 8006380:	08006359 	.word	0x08006359
 8006384:	08006359 	.word	0x08006359
 8006388:	080063dd 	.word	0x080063dd
 800638c:	08006359 	.word	0x08006359
 8006390:	08006359 	.word	0x08006359
 8006394:	08006359 	.word	0x08006359
 8006398:	08006359 	.word	0x08006359
 800639c:	080064e9 	.word	0x080064e9
 80063a0:	0800640d 	.word	0x0800640d
 80063a4:	080064cb 	.word	0x080064cb
 80063a8:	08006359 	.word	0x08006359
 80063ac:	08006359 	.word	0x08006359
 80063b0:	0800650b 	.word	0x0800650b
 80063b4:	08006359 	.word	0x08006359
 80063b8:	0800640d 	.word	0x0800640d
 80063bc:	08006359 	.word	0x08006359
 80063c0:	08006359 	.word	0x08006359
 80063c4:	080064d3 	.word	0x080064d3
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	602a      	str	r2, [r5, #0]
 80063d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063d8:	2301      	movs	r3, #1
 80063da:	e0a3      	b.n	8006524 <_printf_i+0x1f4>
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	6829      	ldr	r1, [r5, #0]
 80063e0:	0606      	lsls	r6, r0, #24
 80063e2:	f101 0304 	add.w	r3, r1, #4
 80063e6:	d50a      	bpl.n	80063fe <_printf_i+0xce>
 80063e8:	680e      	ldr	r6, [r1, #0]
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	2e00      	cmp	r6, #0
 80063ee:	da03      	bge.n	80063f8 <_printf_i+0xc8>
 80063f0:	232d      	movs	r3, #45	; 0x2d
 80063f2:	4276      	negs	r6, r6
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f8:	485e      	ldr	r0, [pc, #376]	; (8006574 <_printf_i+0x244>)
 80063fa:	230a      	movs	r3, #10
 80063fc:	e019      	b.n	8006432 <_printf_i+0x102>
 80063fe:	680e      	ldr	r6, [r1, #0]
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006406:	bf18      	it	ne
 8006408:	b236      	sxthne	r6, r6
 800640a:	e7ef      	b.n	80063ec <_printf_i+0xbc>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	1d19      	adds	r1, r3, #4
 8006412:	6029      	str	r1, [r5, #0]
 8006414:	0601      	lsls	r1, r0, #24
 8006416:	d501      	bpl.n	800641c <_printf_i+0xec>
 8006418:	681e      	ldr	r6, [r3, #0]
 800641a:	e002      	b.n	8006422 <_printf_i+0xf2>
 800641c:	0646      	lsls	r6, r0, #25
 800641e:	d5fb      	bpl.n	8006418 <_printf_i+0xe8>
 8006420:	881e      	ldrh	r6, [r3, #0]
 8006422:	4854      	ldr	r0, [pc, #336]	; (8006574 <_printf_i+0x244>)
 8006424:	2f6f      	cmp	r7, #111	; 0x6f
 8006426:	bf0c      	ite	eq
 8006428:	2308      	moveq	r3, #8
 800642a:	230a      	movne	r3, #10
 800642c:	2100      	movs	r1, #0
 800642e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006432:	6865      	ldr	r5, [r4, #4]
 8006434:	60a5      	str	r5, [r4, #8]
 8006436:	2d00      	cmp	r5, #0
 8006438:	bfa2      	ittt	ge
 800643a:	6821      	ldrge	r1, [r4, #0]
 800643c:	f021 0104 	bicge.w	r1, r1, #4
 8006440:	6021      	strge	r1, [r4, #0]
 8006442:	b90e      	cbnz	r6, 8006448 <_printf_i+0x118>
 8006444:	2d00      	cmp	r5, #0
 8006446:	d04d      	beq.n	80064e4 <_printf_i+0x1b4>
 8006448:	4615      	mov	r5, r2
 800644a:	fbb6 f1f3 	udiv	r1, r6, r3
 800644e:	fb03 6711 	mls	r7, r3, r1, r6
 8006452:	5dc7      	ldrb	r7, [r0, r7]
 8006454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006458:	4637      	mov	r7, r6
 800645a:	42bb      	cmp	r3, r7
 800645c:	460e      	mov	r6, r1
 800645e:	d9f4      	bls.n	800644a <_printf_i+0x11a>
 8006460:	2b08      	cmp	r3, #8
 8006462:	d10b      	bne.n	800647c <_printf_i+0x14c>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07de      	lsls	r6, r3, #31
 8006468:	d508      	bpl.n	800647c <_printf_i+0x14c>
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	4299      	cmp	r1, r3
 8006470:	bfde      	ittt	le
 8006472:	2330      	movle	r3, #48	; 0x30
 8006474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800647c:	1b52      	subs	r2, r2, r5
 800647e:	6122      	str	r2, [r4, #16]
 8006480:	f8cd a000 	str.w	sl, [sp]
 8006484:	464b      	mov	r3, r9
 8006486:	aa03      	add	r2, sp, #12
 8006488:	4621      	mov	r1, r4
 800648a:	4640      	mov	r0, r8
 800648c:	f7ff fee2 	bl	8006254 <_printf_common>
 8006490:	3001      	adds	r0, #1
 8006492:	d14c      	bne.n	800652e <_printf_i+0x1fe>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	b004      	add	sp, #16
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	4835      	ldr	r0, [pc, #212]	; (8006574 <_printf_i+0x244>)
 80064a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064a4:	6829      	ldr	r1, [r5, #0]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ac:	6029      	str	r1, [r5, #0]
 80064ae:	061d      	lsls	r5, r3, #24
 80064b0:	d514      	bpl.n	80064dc <_printf_i+0x1ac>
 80064b2:	07df      	lsls	r7, r3, #31
 80064b4:	bf44      	itt	mi
 80064b6:	f043 0320 	orrmi.w	r3, r3, #32
 80064ba:	6023      	strmi	r3, [r4, #0]
 80064bc:	b91e      	cbnz	r6, 80064c6 <_printf_i+0x196>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	f023 0320 	bic.w	r3, r3, #32
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	2310      	movs	r3, #16
 80064c8:	e7b0      	b.n	800642c <_printf_i+0xfc>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f043 0320 	orr.w	r3, r3, #32
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	2378      	movs	r3, #120	; 0x78
 80064d4:	4828      	ldr	r0, [pc, #160]	; (8006578 <_printf_i+0x248>)
 80064d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064da:	e7e3      	b.n	80064a4 <_printf_i+0x174>
 80064dc:	0659      	lsls	r1, r3, #25
 80064de:	bf48      	it	mi
 80064e0:	b2b6      	uxthmi	r6, r6
 80064e2:	e7e6      	b.n	80064b2 <_printf_i+0x182>
 80064e4:	4615      	mov	r5, r2
 80064e6:	e7bb      	b.n	8006460 <_printf_i+0x130>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	6826      	ldr	r6, [r4, #0]
 80064ec:	6961      	ldr	r1, [r4, #20]
 80064ee:	1d18      	adds	r0, r3, #4
 80064f0:	6028      	str	r0, [r5, #0]
 80064f2:	0635      	lsls	r5, r6, #24
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0x1cc>
 80064f8:	6019      	str	r1, [r3, #0]
 80064fa:	e002      	b.n	8006502 <_printf_i+0x1d2>
 80064fc:	0670      	lsls	r0, r6, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0x1c8>
 8006500:	8019      	strh	r1, [r3, #0]
 8006502:	2300      	movs	r3, #0
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	4615      	mov	r5, r2
 8006508:	e7ba      	b.n	8006480 <_printf_i+0x150>
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	1d1a      	adds	r2, r3, #4
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	681d      	ldr	r5, [r3, #0]
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	2100      	movs	r1, #0
 8006516:	4628      	mov	r0, r5
 8006518:	f7f9 fe82 	bl	8000220 <memchr>
 800651c:	b108      	cbz	r0, 8006522 <_printf_i+0x1f2>
 800651e:	1b40      	subs	r0, r0, r5
 8006520:	6060      	str	r0, [r4, #4]
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	2300      	movs	r3, #0
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652c:	e7a8      	b.n	8006480 <_printf_i+0x150>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	462a      	mov	r2, r5
 8006532:	4649      	mov	r1, r9
 8006534:	4640      	mov	r0, r8
 8006536:	47d0      	blx	sl
 8006538:	3001      	adds	r0, #1
 800653a:	d0ab      	beq.n	8006494 <_printf_i+0x164>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	079b      	lsls	r3, r3, #30
 8006540:	d413      	bmi.n	800656a <_printf_i+0x23a>
 8006542:	68e0      	ldr	r0, [r4, #12]
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	4298      	cmp	r0, r3
 8006548:	bfb8      	it	lt
 800654a:	4618      	movlt	r0, r3
 800654c:	e7a4      	b.n	8006498 <_printf_i+0x168>
 800654e:	2301      	movs	r3, #1
 8006550:	4632      	mov	r2, r6
 8006552:	4649      	mov	r1, r9
 8006554:	4640      	mov	r0, r8
 8006556:	47d0      	blx	sl
 8006558:	3001      	adds	r0, #1
 800655a:	d09b      	beq.n	8006494 <_printf_i+0x164>
 800655c:	3501      	adds	r5, #1
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	9903      	ldr	r1, [sp, #12]
 8006562:	1a5b      	subs	r3, r3, r1
 8006564:	42ab      	cmp	r3, r5
 8006566:	dcf2      	bgt.n	800654e <_printf_i+0x21e>
 8006568:	e7eb      	b.n	8006542 <_printf_i+0x212>
 800656a:	2500      	movs	r5, #0
 800656c:	f104 0619 	add.w	r6, r4, #25
 8006570:	e7f5      	b.n	800655e <_printf_i+0x22e>
 8006572:	bf00      	nop
 8006574:	08006879 	.word	0x08006879
 8006578:	0800688a 	.word	0x0800688a

0800657c <memcpy>:
 800657c:	440a      	add	r2, r1
 800657e:	4291      	cmp	r1, r2
 8006580:	f100 33ff 	add.w	r3, r0, #4294967295
 8006584:	d100      	bne.n	8006588 <memcpy+0xc>
 8006586:	4770      	bx	lr
 8006588:	b510      	push	{r4, lr}
 800658a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006592:	4291      	cmp	r1, r2
 8006594:	d1f9      	bne.n	800658a <memcpy+0xe>
 8006596:	bd10      	pop	{r4, pc}

08006598 <memmove>:
 8006598:	4288      	cmp	r0, r1
 800659a:	b510      	push	{r4, lr}
 800659c:	eb01 0402 	add.w	r4, r1, r2
 80065a0:	d902      	bls.n	80065a8 <memmove+0x10>
 80065a2:	4284      	cmp	r4, r0
 80065a4:	4623      	mov	r3, r4
 80065a6:	d807      	bhi.n	80065b8 <memmove+0x20>
 80065a8:	1e43      	subs	r3, r0, #1
 80065aa:	42a1      	cmp	r1, r4
 80065ac:	d008      	beq.n	80065c0 <memmove+0x28>
 80065ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065b6:	e7f8      	b.n	80065aa <memmove+0x12>
 80065b8:	4402      	add	r2, r0
 80065ba:	4601      	mov	r1, r0
 80065bc:	428a      	cmp	r2, r1
 80065be:	d100      	bne.n	80065c2 <memmove+0x2a>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ca:	e7f7      	b.n	80065bc <memmove+0x24>

080065cc <_free_r>:
 80065cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ce:	2900      	cmp	r1, #0
 80065d0:	d044      	beq.n	800665c <_free_r+0x90>
 80065d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d6:	9001      	str	r0, [sp, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f1a1 0404 	sub.w	r4, r1, #4
 80065de:	bfb8      	it	lt
 80065e0:	18e4      	addlt	r4, r4, r3
 80065e2:	f000 f913 	bl	800680c <__malloc_lock>
 80065e6:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <_free_r+0x94>)
 80065e8:	9801      	ldr	r0, [sp, #4]
 80065ea:	6813      	ldr	r3, [r2, #0]
 80065ec:	b933      	cbnz	r3, 80065fc <_free_r+0x30>
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	6014      	str	r4, [r2, #0]
 80065f2:	b003      	add	sp, #12
 80065f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065f8:	f000 b90e 	b.w	8006818 <__malloc_unlock>
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	d908      	bls.n	8006612 <_free_r+0x46>
 8006600:	6825      	ldr	r5, [r4, #0]
 8006602:	1961      	adds	r1, r4, r5
 8006604:	428b      	cmp	r3, r1
 8006606:	bf01      	itttt	eq
 8006608:	6819      	ldreq	r1, [r3, #0]
 800660a:	685b      	ldreq	r3, [r3, #4]
 800660c:	1949      	addeq	r1, r1, r5
 800660e:	6021      	streq	r1, [r4, #0]
 8006610:	e7ed      	b.n	80065ee <_free_r+0x22>
 8006612:	461a      	mov	r2, r3
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	b10b      	cbz	r3, 800661c <_free_r+0x50>
 8006618:	42a3      	cmp	r3, r4
 800661a:	d9fa      	bls.n	8006612 <_free_r+0x46>
 800661c:	6811      	ldr	r1, [r2, #0]
 800661e:	1855      	adds	r5, r2, r1
 8006620:	42a5      	cmp	r5, r4
 8006622:	d10b      	bne.n	800663c <_free_r+0x70>
 8006624:	6824      	ldr	r4, [r4, #0]
 8006626:	4421      	add	r1, r4
 8006628:	1854      	adds	r4, r2, r1
 800662a:	42a3      	cmp	r3, r4
 800662c:	6011      	str	r1, [r2, #0]
 800662e:	d1e0      	bne.n	80065f2 <_free_r+0x26>
 8006630:	681c      	ldr	r4, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	6053      	str	r3, [r2, #4]
 8006636:	4421      	add	r1, r4
 8006638:	6011      	str	r1, [r2, #0]
 800663a:	e7da      	b.n	80065f2 <_free_r+0x26>
 800663c:	d902      	bls.n	8006644 <_free_r+0x78>
 800663e:	230c      	movs	r3, #12
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	e7d6      	b.n	80065f2 <_free_r+0x26>
 8006644:	6825      	ldr	r5, [r4, #0]
 8006646:	1961      	adds	r1, r4, r5
 8006648:	428b      	cmp	r3, r1
 800664a:	bf04      	itt	eq
 800664c:	6819      	ldreq	r1, [r3, #0]
 800664e:	685b      	ldreq	r3, [r3, #4]
 8006650:	6063      	str	r3, [r4, #4]
 8006652:	bf04      	itt	eq
 8006654:	1949      	addeq	r1, r1, r5
 8006656:	6021      	streq	r1, [r4, #0]
 8006658:	6054      	str	r4, [r2, #4]
 800665a:	e7ca      	b.n	80065f2 <_free_r+0x26>
 800665c:	b003      	add	sp, #12
 800665e:	bd30      	pop	{r4, r5, pc}
 8006660:	200050bc 	.word	0x200050bc

08006664 <sbrk_aligned>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4e0e      	ldr	r6, [pc, #56]	; (80066a0 <sbrk_aligned+0x3c>)
 8006668:	460c      	mov	r4, r1
 800666a:	6831      	ldr	r1, [r6, #0]
 800666c:	4605      	mov	r5, r0
 800666e:	b911      	cbnz	r1, 8006676 <sbrk_aligned+0x12>
 8006670:	f000 f8bc 	bl	80067ec <_sbrk_r>
 8006674:	6030      	str	r0, [r6, #0]
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f000 f8b7 	bl	80067ec <_sbrk_r>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	d00a      	beq.n	8006698 <sbrk_aligned+0x34>
 8006682:	1cc4      	adds	r4, r0, #3
 8006684:	f024 0403 	bic.w	r4, r4, #3
 8006688:	42a0      	cmp	r0, r4
 800668a:	d007      	beq.n	800669c <sbrk_aligned+0x38>
 800668c:	1a21      	subs	r1, r4, r0
 800668e:	4628      	mov	r0, r5
 8006690:	f000 f8ac 	bl	80067ec <_sbrk_r>
 8006694:	3001      	adds	r0, #1
 8006696:	d101      	bne.n	800669c <sbrk_aligned+0x38>
 8006698:	f04f 34ff 	mov.w	r4, #4294967295
 800669c:	4620      	mov	r0, r4
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	200050c0 	.word	0x200050c0

080066a4 <_malloc_r>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	1ccd      	adds	r5, r1, #3
 80066aa:	f025 0503 	bic.w	r5, r5, #3
 80066ae:	3508      	adds	r5, #8
 80066b0:	2d0c      	cmp	r5, #12
 80066b2:	bf38      	it	cc
 80066b4:	250c      	movcc	r5, #12
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	4607      	mov	r7, r0
 80066ba:	db01      	blt.n	80066c0 <_malloc_r+0x1c>
 80066bc:	42a9      	cmp	r1, r5
 80066be:	d905      	bls.n	80066cc <_malloc_r+0x28>
 80066c0:	230c      	movs	r3, #12
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	2600      	movs	r6, #0
 80066c6:	4630      	mov	r0, r6
 80066c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066cc:	4e2e      	ldr	r6, [pc, #184]	; (8006788 <_malloc_r+0xe4>)
 80066ce:	f000 f89d 	bl	800680c <__malloc_lock>
 80066d2:	6833      	ldr	r3, [r6, #0]
 80066d4:	461c      	mov	r4, r3
 80066d6:	bb34      	cbnz	r4, 8006726 <_malloc_r+0x82>
 80066d8:	4629      	mov	r1, r5
 80066da:	4638      	mov	r0, r7
 80066dc:	f7ff ffc2 	bl	8006664 <sbrk_aligned>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	4604      	mov	r4, r0
 80066e4:	d14d      	bne.n	8006782 <_malloc_r+0xde>
 80066e6:	6834      	ldr	r4, [r6, #0]
 80066e8:	4626      	mov	r6, r4
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	d140      	bne.n	8006770 <_malloc_r+0xcc>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	4631      	mov	r1, r6
 80066f2:	4638      	mov	r0, r7
 80066f4:	eb04 0803 	add.w	r8, r4, r3
 80066f8:	f000 f878 	bl	80067ec <_sbrk_r>
 80066fc:	4580      	cmp	r8, r0
 80066fe:	d13a      	bne.n	8006776 <_malloc_r+0xd2>
 8006700:	6821      	ldr	r1, [r4, #0]
 8006702:	3503      	adds	r5, #3
 8006704:	1a6d      	subs	r5, r5, r1
 8006706:	f025 0503 	bic.w	r5, r5, #3
 800670a:	3508      	adds	r5, #8
 800670c:	2d0c      	cmp	r5, #12
 800670e:	bf38      	it	cc
 8006710:	250c      	movcc	r5, #12
 8006712:	4629      	mov	r1, r5
 8006714:	4638      	mov	r0, r7
 8006716:	f7ff ffa5 	bl	8006664 <sbrk_aligned>
 800671a:	3001      	adds	r0, #1
 800671c:	d02b      	beq.n	8006776 <_malloc_r+0xd2>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	442b      	add	r3, r5
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	e00e      	b.n	8006744 <_malloc_r+0xa0>
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	1b52      	subs	r2, r2, r5
 800672a:	d41e      	bmi.n	800676a <_malloc_r+0xc6>
 800672c:	2a0b      	cmp	r2, #11
 800672e:	d916      	bls.n	800675e <_malloc_r+0xba>
 8006730:	1961      	adds	r1, r4, r5
 8006732:	42a3      	cmp	r3, r4
 8006734:	6025      	str	r5, [r4, #0]
 8006736:	bf18      	it	ne
 8006738:	6059      	strne	r1, [r3, #4]
 800673a:	6863      	ldr	r3, [r4, #4]
 800673c:	bf08      	it	eq
 800673e:	6031      	streq	r1, [r6, #0]
 8006740:	5162      	str	r2, [r4, r5]
 8006742:	604b      	str	r3, [r1, #4]
 8006744:	4638      	mov	r0, r7
 8006746:	f104 060b 	add.w	r6, r4, #11
 800674a:	f000 f865 	bl	8006818 <__malloc_unlock>
 800674e:	f026 0607 	bic.w	r6, r6, #7
 8006752:	1d23      	adds	r3, r4, #4
 8006754:	1af2      	subs	r2, r6, r3
 8006756:	d0b6      	beq.n	80066c6 <_malloc_r+0x22>
 8006758:	1b9b      	subs	r3, r3, r6
 800675a:	50a3      	str	r3, [r4, r2]
 800675c:	e7b3      	b.n	80066c6 <_malloc_r+0x22>
 800675e:	6862      	ldr	r2, [r4, #4]
 8006760:	42a3      	cmp	r3, r4
 8006762:	bf0c      	ite	eq
 8006764:	6032      	streq	r2, [r6, #0]
 8006766:	605a      	strne	r2, [r3, #4]
 8006768:	e7ec      	b.n	8006744 <_malloc_r+0xa0>
 800676a:	4623      	mov	r3, r4
 800676c:	6864      	ldr	r4, [r4, #4]
 800676e:	e7b2      	b.n	80066d6 <_malloc_r+0x32>
 8006770:	4634      	mov	r4, r6
 8006772:	6876      	ldr	r6, [r6, #4]
 8006774:	e7b9      	b.n	80066ea <_malloc_r+0x46>
 8006776:	230c      	movs	r3, #12
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4638      	mov	r0, r7
 800677c:	f000 f84c 	bl	8006818 <__malloc_unlock>
 8006780:	e7a1      	b.n	80066c6 <_malloc_r+0x22>
 8006782:	6025      	str	r5, [r4, #0]
 8006784:	e7de      	b.n	8006744 <_malloc_r+0xa0>
 8006786:	bf00      	nop
 8006788:	200050bc 	.word	0x200050bc

0800678c <_realloc_r>:
 800678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006790:	4680      	mov	r8, r0
 8006792:	4614      	mov	r4, r2
 8006794:	460e      	mov	r6, r1
 8006796:	b921      	cbnz	r1, 80067a2 <_realloc_r+0x16>
 8006798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800679c:	4611      	mov	r1, r2
 800679e:	f7ff bf81 	b.w	80066a4 <_malloc_r>
 80067a2:	b92a      	cbnz	r2, 80067b0 <_realloc_r+0x24>
 80067a4:	f7ff ff12 	bl	80065cc <_free_r>
 80067a8:	4625      	mov	r5, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b0:	f000 f838 	bl	8006824 <_malloc_usable_size_r>
 80067b4:	4284      	cmp	r4, r0
 80067b6:	4607      	mov	r7, r0
 80067b8:	d802      	bhi.n	80067c0 <_realloc_r+0x34>
 80067ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067be:	d812      	bhi.n	80067e6 <_realloc_r+0x5a>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4640      	mov	r0, r8
 80067c4:	f7ff ff6e 	bl	80066a4 <_malloc_r>
 80067c8:	4605      	mov	r5, r0
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d0ed      	beq.n	80067aa <_realloc_r+0x1e>
 80067ce:	42bc      	cmp	r4, r7
 80067d0:	4622      	mov	r2, r4
 80067d2:	4631      	mov	r1, r6
 80067d4:	bf28      	it	cs
 80067d6:	463a      	movcs	r2, r7
 80067d8:	f7ff fed0 	bl	800657c <memcpy>
 80067dc:	4631      	mov	r1, r6
 80067de:	4640      	mov	r0, r8
 80067e0:	f7ff fef4 	bl	80065cc <_free_r>
 80067e4:	e7e1      	b.n	80067aa <_realloc_r+0x1e>
 80067e6:	4635      	mov	r5, r6
 80067e8:	e7df      	b.n	80067aa <_realloc_r+0x1e>
	...

080067ec <_sbrk_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4d06      	ldr	r5, [pc, #24]	; (8006808 <_sbrk_r+0x1c>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	f7fa feaa 	bl	8001550 <_sbrk>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_sbrk_r+0x1a>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_sbrk_r+0x1a>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	200050c4 	.word	0x200050c4

0800680c <__malloc_lock>:
 800680c:	4801      	ldr	r0, [pc, #4]	; (8006814 <__malloc_lock+0x8>)
 800680e:	f000 b811 	b.w	8006834 <__retarget_lock_acquire_recursive>
 8006812:	bf00      	nop
 8006814:	200050c8 	.word	0x200050c8

08006818 <__malloc_unlock>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__malloc_unlock+0x8>)
 800681a:	f000 b80c 	b.w	8006836 <__retarget_lock_release_recursive>
 800681e:	bf00      	nop
 8006820:	200050c8 	.word	0x200050c8

08006824 <_malloc_usable_size_r>:
 8006824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006828:	1f18      	subs	r0, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	bfbc      	itt	lt
 800682e:	580b      	ldrlt	r3, [r1, r0]
 8006830:	18c0      	addlt	r0, r0, r3
 8006832:	4770      	bx	lr

08006834 <__retarget_lock_acquire_recursive>:
 8006834:	4770      	bx	lr

08006836 <__retarget_lock_release_recursive>:
 8006836:	4770      	bx	lr

08006838 <_init>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr

08006844 <_fini>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr

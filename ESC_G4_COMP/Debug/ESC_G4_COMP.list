
ESC_G4_COMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003128  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003310  08003310  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003310  08003310  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003310  08003310  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003314  08003314  00013314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003324  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003324  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3b1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188a  00000000  00000000  0002c3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f27b  00000000  00000000  0002f440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca2a  00000000  00000000  0004e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9a00  00000000  00000000  0005b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003378  00000000  00000000  00134b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080032e8 	.word	0x080032e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080032e8 	.word	0x080032e8

08000218 <BLDC_phase>:
static void MX_TIM8_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);

void BLDC_phase(unsigned char phase, float p) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	ed87 0a00 	vstr	s0, [r7]
 8000224:	71fb      	strb	r3, [r7, #7]
	if(phase == 1) {
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d126      	bne.n	800027a <BLDC_phase+0x62>
		TIM1->CCER |= TIM_CCER_CC1NP;
 800022c:	4b7e      	ldr	r3, [pc, #504]	; (8000428 <BLDC_phase+0x210>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a7d      	ldr	r2, [pc, #500]	; (8000428 <BLDC_phase+0x210>)
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000238:	4b7b      	ldr	r3, [pc, #492]	; (8000428 <BLDC_phase+0x210>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a7a      	ldr	r2, [pc, #488]	; (8000428 <BLDC_phase+0x210>)
 800023e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000242:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000244:	4b78      	ldr	r3, [pc, #480]	; (8000428 <BLDC_phase+0x210>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a77      	ldr	r2, [pc, #476]	; (8000428 <BLDC_phase+0x210>)
 800024a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800024e:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8000250:	4b75      	ldr	r3, [pc, #468]	; (8000428 <BLDC_phase+0x210>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a74      	ldr	r2, [pc, #464]	; (8000428 <BLDC_phase+0x210>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 800025c:	4b72      	ldr	r3, [pc, #456]	; (8000428 <BLDC_phase+0x210>)
 800025e:	2200      	movs	r2, #0
 8000260:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p;
 8000262:	4b71      	ldr	r3, [pc, #452]	; (8000428 <BLDC_phase+0x210>)
 8000264:	edd7 7a00 	vldr	s15, [r7]
 8000268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800026c:	ee17 2a90 	vmov	r2, s15
 8000270:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000272:	4b6d      	ldr	r3, [pc, #436]	; (8000428 <BLDC_phase+0x210>)
 8000274:	2200      	movs	r2, #0
 8000276:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->EGR |= TIM_EGR_COMG;
		TIM1->CCR1 = p;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 8000278:	e0d0      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 2) {
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d126      	bne.n	80002ce <BLDC_phase+0xb6>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000280:	4b69      	ldr	r3, [pc, #420]	; (8000428 <BLDC_phase+0x210>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a68      	ldr	r2, [pc, #416]	; (8000428 <BLDC_phase+0x210>)
 8000286:	f023 0308 	bic.w	r3, r3, #8
 800028a:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 800028c:	4b66      	ldr	r3, [pc, #408]	; (8000428 <BLDC_phase+0x210>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a65      	ldr	r2, [pc, #404]	; (8000428 <BLDC_phase+0x210>)
 8000292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000296:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8000298:	4b63      	ldr	r3, [pc, #396]	; (8000428 <BLDC_phase+0x210>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a62      	ldr	r2, [pc, #392]	; (8000428 <BLDC_phase+0x210>)
 800029e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002a2:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80002a4:	4b60      	ldr	r3, [pc, #384]	; (8000428 <BLDC_phase+0x210>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a5f      	ldr	r2, [pc, #380]	; (8000428 <BLDC_phase+0x210>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 80002b0:	4b5d      	ldr	r3, [pc, #372]	; (8000428 <BLDC_phase+0x210>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p;
 80002b6:	4b5c      	ldr	r3, [pc, #368]	; (8000428 <BLDC_phase+0x210>)
 80002b8:	edd7 7a00 	vldr	s15, [r7]
 80002bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002c0:	ee17 2a90 	vmov	r2, s15
 80002c4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80002c6:	4b58      	ldr	r3, [pc, #352]	; (8000428 <BLDC_phase+0x210>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002cc:	e0a6      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 3) {
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d126      	bne.n	8000322 <BLDC_phase+0x10a>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80002d4:	4b54      	ldr	r3, [pc, #336]	; (8000428 <BLDC_phase+0x210>)
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	4a53      	ldr	r2, [pc, #332]	; (8000428 <BLDC_phase+0x210>)
 80002da:	f023 0308 	bic.w	r3, r3, #8
 80002de:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 80002e0:	4b51      	ldr	r3, [pc, #324]	; (8000428 <BLDC_phase+0x210>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a50      	ldr	r2, [pc, #320]	; (8000428 <BLDC_phase+0x210>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80002ec:	4b4e      	ldr	r3, [pc, #312]	; (8000428 <BLDC_phase+0x210>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a4d      	ldr	r2, [pc, #308]	; (8000428 <BLDC_phase+0x210>)
 80002f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002f6:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80002f8:	4b4b      	ldr	r3, [pc, #300]	; (8000428 <BLDC_phase+0x210>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a4a      	ldr	r2, [pc, #296]	; (8000428 <BLDC_phase+0x210>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8000304:	4b48      	ldr	r3, [pc, #288]	; (8000428 <BLDC_phase+0x210>)
 8000306:	2200      	movs	r2, #0
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800030a:	4b47      	ldr	r3, [pc, #284]	; (8000428 <BLDC_phase+0x210>)
 800030c:	2200      	movs	r2, #0
 800030e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = p;
 8000310:	4b45      	ldr	r3, [pc, #276]	; (8000428 <BLDC_phase+0x210>)
 8000312:	edd7 7a00 	vldr	s15, [r7]
 8000316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800031a:	ee17 2a90 	vmov	r2, s15
 800031e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000320:	e07c      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 4) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d126      	bne.n	8000376 <BLDC_phase+0x15e>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 8000328:	4b3f      	ldr	r3, [pc, #252]	; (8000428 <BLDC_phase+0x210>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a3e      	ldr	r2, [pc, #248]	; (8000428 <BLDC_phase+0x210>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000334:	4b3c      	ldr	r3, [pc, #240]	; (8000428 <BLDC_phase+0x210>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a3b      	ldr	r2, [pc, #236]	; (8000428 <BLDC_phase+0x210>)
 800033a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800033e:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000340:	4b39      	ldr	r3, [pc, #228]	; (8000428 <BLDC_phase+0x210>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a38      	ldr	r2, [pc, #224]	; (8000428 <BLDC_phase+0x210>)
 8000346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800034a:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <BLDC_phase+0x210>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a35      	ldr	r2, [pc, #212]	; (8000428 <BLDC_phase+0x210>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 8000358:	4b33      	ldr	r3, [pc, #204]	; (8000428 <BLDC_phase+0x210>)
 800035a:	2200      	movs	r2, #0
 800035c:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 800035e:	4b32      	ldr	r3, [pc, #200]	; (8000428 <BLDC_phase+0x210>)
 8000360:	2200      	movs	r2, #0
 8000362:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <BLDC_phase+0x210>)
 8000366:	edd7 7a00 	vldr	s15, [r7]
 800036a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800036e:	ee17 2a90 	vmov	r2, s15
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000374:	e052      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 5) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b05      	cmp	r3, #5
 800037a:	d126      	bne.n	80003ca <BLDC_phase+0x1b2>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <BLDC_phase+0x210>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4a29      	ldr	r2, [pc, #164]	; (8000428 <BLDC_phase+0x210>)
 8000382:	f023 0308 	bic.w	r3, r3, #8
 8000386:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <BLDC_phase+0x210>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	4a26      	ldr	r2, [pc, #152]	; (8000428 <BLDC_phase+0x210>)
 800038e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000392:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <BLDC_phase+0x210>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a23      	ldr	r2, [pc, #140]	; (8000428 <BLDC_phase+0x210>)
 800039a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800039e:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80003a0:	4b21      	ldr	r3, [pc, #132]	; (8000428 <BLDC_phase+0x210>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <BLDC_phase+0x210>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <BLDC_phase+0x210>)
 80003ae:	edd7 7a00 	vldr	s15, [r7]
 80003b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003b6:	ee17 2a90 	vmov	r2, s15
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <BLDC_phase+0x210>)
 80003be:	2200      	movs	r2, #0
 80003c0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <BLDC_phase+0x210>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80003c8:	e028      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 6) {
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	d125      	bne.n	800041c <BLDC_phase+0x204>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <BLDC_phase+0x210>)
 80003d2:	6a1b      	ldr	r3, [r3, #32]
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <BLDC_phase+0x210>)
 80003d6:	f023 0308 	bic.w	r3, r3, #8
 80003da:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <BLDC_phase+0x210>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a11      	ldr	r2, [pc, #68]	; (8000428 <BLDC_phase+0x210>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <BLDC_phase+0x210>)
 80003ea:	6a1b      	ldr	r3, [r3, #32]
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <BLDC_phase+0x210>)
 80003ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003f2:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <BLDC_phase+0x210>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <BLDC_phase+0x210>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <BLDC_phase+0x210>)
 8000402:	edd7 7a00 	vldr	s15, [r7]
 8000406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800040a:	ee17 2a90 	vmov	r2, s15
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <BLDC_phase+0x210>)
 8000412:	2200      	movs	r2, #0
 8000414:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <BLDC_phase+0x210>)
 8000418:	2200      	movs	r2, #0
 800041a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40012c00 	.word	0x40012c00

0800042c <main>:

int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0

  HAL_Init();
 8000432:	f000 fb6e 	bl	8000b12 <HAL_Init>

  	SystemClock_Config();
 8000436:	f000 f861 	bl	80004fc <SystemClock_Config>

  	MX_GPIO_Init();
 800043a:	f000 fa05 	bl	8000848 <MX_GPIO_Init>
  	MX_TIM1_Init();
 800043e:	f000 f8a9 	bl	8000594 <MX_TIM1_Init>
  	MX_TIM2_Init();
 8000442:	f000 f98d 	bl	8000760 <MX_TIM2_Init>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000446:	2100      	movs	r1, #0
 8000448:	4828      	ldr	r0, [pc, #160]	; (80004ec <main+0xc0>)
 800044a:	f001 fd55 	bl	8001ef8 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800044e:	2100      	movs	r1, #0
 8000450:	4826      	ldr	r0, [pc, #152]	; (80004ec <main+0xc0>)
 8000452:	f002 fd21 	bl	8002e98 <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000456:	2104      	movs	r1, #4
 8000458:	4824      	ldr	r0, [pc, #144]	; (80004ec <main+0xc0>)
 800045a:	f001 fd4d 	bl	8001ef8 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800045e:	2104      	movs	r1, #4
 8000460:	4822      	ldr	r0, [pc, #136]	; (80004ec <main+0xc0>)
 8000462:	f002 fd19 	bl	8002e98 <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000466:	2108      	movs	r1, #8
 8000468:	4820      	ldr	r0, [pc, #128]	; (80004ec <main+0xc0>)
 800046a:	f001 fd45 	bl	8001ef8 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800046e:	2108      	movs	r1, #8
 8000470:	481e      	ldr	r0, [pc, #120]	; (80004ec <main+0xc0>)
 8000472:	f002 fd11 	bl	8002e98 <HAL_TIMEx_PWMN_Start>

  	HAL_TIM_Base_Start(&htim1);
 8000476:	481d      	ldr	r0, [pc, #116]	; (80004ec <main+0xc0>)
 8000478:	f001 fc1a 	bl	8001cb0 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start(&htim2);
 800047c:	481c      	ldr	r0, [pc, #112]	; (80004f0 <main+0xc4>)
 800047e:	f001 fc17 	bl	8001cb0 <HAL_TIM_Base_Start>

  	TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <main+0xc8>)
 8000484:	6a1b      	ldr	r3, [r3, #32]
 8000486:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <main+0xc8>)
 8000488:	f023 0308 	bic.w	r3, r3, #8
 800048c:	6213      	str	r3, [r2, #32]
  	TIM1->CCER &= ~TIM_CCER_CC2NP;
 800048e:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <main+0xc8>)
 8000490:	6a1b      	ldr	r3, [r3, #32]
 8000492:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <main+0xc8>)
 8000494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000498:	6213      	str	r3, [r2, #32]
  	TIM1->CCER &= ~TIM_CCER_CC3NP;
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <main+0xc8>)
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <main+0xc8>)
 80004a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004a4:	6213      	str	r3, [r2, #32]
  	TIM1->EGR |= TIM_EGR_COMG;
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <main+0xc8>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <main+0xc8>)
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	6153      	str	r3, [r2, #20]

  	int i, j;
  	while(1) {
  		for(i = 1; i <= 6; i++) {
 80004b2:	2301      	movs	r3, #1
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e015      	b.n	80004e4 <main+0xb8>
  			BLDC_phase(i, 100);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80004f8 <main+0xcc>
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fea9 	bl	8000218 <BLDC_phase>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <main+0xc4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < 5000);
 80004ce:	bf00      	nop
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <main+0xc4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80004da:	4293      	cmp	r3, r2
 80004dc:	d9f8      	bls.n	80004d0 <main+0xa4>
  		for(i = 1; i <= 6; i++) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b06      	cmp	r3, #6
 80004e8:	dde6      	ble.n	80004b8 <main+0x8c>
 80004ea:	e7e2      	b.n	80004b2 <main+0x86>
 80004ec:	20000028 	.word	0x20000028
 80004f0:	20000074 	.word	0x20000074
 80004f4:	40012c00 	.word	0x40012c00
 80004f8:	42c80000 	.word	0x42c80000

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	2238      	movs	r2, #56	; 0x38
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fee4 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fdce 	bl	80010c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	2302      	movs	r3, #2
 8000526:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2340      	movs	r3, #64	; 0x40
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800053a:	2301      	movs	r3, #1
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 800053e:	2315      	movs	r3, #21
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000546:	2302      	movs	r3, #2
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054a:	2302      	movs	r3, #2
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fe58 	bl	8001208 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055e:	f000 f9a3 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2303      	movs	r3, #3
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2104      	movs	r1, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f001 f95c 	bl	8001838 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000586:	f000 f98f 	bl	80008a8 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3750      	adds	r7, #80	; 0x50
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b09c      	sub	sp, #112	; 0x70
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]
 80005c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2234      	movs	r2, #52	; 0x34
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fe82 	bl	80032d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80005d6:	4a61      	ldr	r2, [pc, #388]	; (800075c <MX_TIM1_Init+0x1c8>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005da:	4b5f      	ldr	r3, [pc, #380]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80005e0:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80005e2:	2220      	movs	r2, #32
 80005e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1750;
 80005e6:	4b5c      	ldr	r3, [pc, #368]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80005e8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80005ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ee:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f4:	4b58      	ldr	r3, [pc, #352]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005fa:	4b57      	ldr	r3, [pc, #348]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000600:	4855      	ldr	r0, [pc, #340]	; (8000758 <MX_TIM1_Init+0x1c4>)
 8000602:	f001 fafd 	bl	8001c00 <HAL_TIM_Base_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800060c:	f000 f94c 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000616:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800061a:	4619      	mov	r1, r3
 800061c:	484e      	ldr	r0, [pc, #312]	; (8000758 <MX_TIM1_Init+0x1c4>)
 800061e:	f001 fef9 	bl	8002414 <HAL_TIM_ConfigClockSource>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000628:	f000 f93e 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800062c:	484a      	ldr	r0, [pc, #296]	; (8000758 <MX_TIM1_Init+0x1c4>)
 800062e:	f001 fc02 	bl	8001e36 <HAL_TIM_PWM_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000638:	f000 f936 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800063c:	4846      	ldr	r0, [pc, #280]	; (8000758 <MX_TIM1_Init+0x1c4>)
 800063e:	f001 fb99 	bl	8001d74 <HAL_TIM_OC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000648:	f000 f92e 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800064c:	2370      	movs	r3, #112	; 0x70
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000658:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800065c:	4619      	mov	r1, r3
 800065e:	483e      	ldr	r0, [pc, #248]	; (8000758 <MX_TIM1_Init+0x1c4>)
 8000660:	f002 fcce 	bl	8003000 <HAL_TIMEx_MasterConfigSynchronization>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800066a:	f000 f91d 	bl	80008a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066e:	2360      	movs	r3, #96	; 0x60
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000676:	2300      	movs	r3, #0
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067a:	2300      	movs	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4831      	ldr	r0, [pc, #196]	; (8000758 <MX_TIM1_Init+0x1c4>)
 8000694:	f001 fdaa 	bl	80021ec <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800069e:	f000 f903 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a6:	2204      	movs	r2, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	482b      	ldr	r0, [pc, #172]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80006ac:	f001 fd9e 	bl	80021ec <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80006b6:	f000 f8f7 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006be:	2208      	movs	r2, #8
 80006c0:	4619      	mov	r1, r3
 80006c2:	4825      	ldr	r0, [pc, #148]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80006c4:	f001 fd92 	bl	80021ec <HAL_TIM_PWM_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80006ce:	f000 f8eb 	bl	80008a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80006d2:	2330      	movs	r3, #48	; 0x30
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006da:	220c      	movs	r2, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	481e      	ldr	r0, [pc, #120]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80006e0:	f001 fd0a 	bl	80020f8 <HAL_TIM_OC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80006ea:	f000 f8dd 	bl	80008a8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	69da      	ldr	r2, [r3, #28]
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_TIM1_Init+0x1c4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006fc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 800070a:	2332      	movs	r3, #50	; 0x32
 800070c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000716:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <MX_TIM1_Init+0x1c4>)
 800073c:	f002 fce2 	bl	8003104 <HAL_TIMEx_ConfigBreakDeadTime>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0x1b6>
  {
    Error_Handler();
 8000746:	f000 f8af 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800074a:	4803      	ldr	r0, [pc, #12]	; (8000758 <MX_TIM1_Init+0x1c4>)
 800074c:	f000 f908 	bl	8000960 <HAL_TIM_MspPostInit>

}
 8000750:	bf00      	nop
 8000752:	3770      	adds	r7, #112	; 0x70
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000028 	.word	0x20000028
 800075c:	40012c00 	.word	0x40012c00

08000760 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_TIM2_Init+0xe4>)
 8000794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_TIM2_Init+0xe4>)
 800079c:	22aa      	movs	r2, #170	; 0xaa
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007bc:	f001 fa20 	bl	8001c00 <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007c6:	f000 f86f 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d4:	4619      	mov	r1, r3
 80007d6:	481b      	ldr	r0, [pc, #108]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007d8:	f001 fe1c 	bl	8002414 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007e2:	f000 f861 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e6:	4817      	ldr	r0, [pc, #92]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007e8:	f001 fb25 	bl	8001e36 <HAL_TIM_PWM_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007f2:	f000 f859 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	480f      	ldr	r0, [pc, #60]	; (8000844 <MX_TIM2_Init+0xe4>)
 8000806:	f002 fbfb 	bl	8003000 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000810:	f000 f84a 	bl	80008a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_TIM2_Init+0xe4>)
 800082c:	f001 fcde 	bl	80021ec <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000836:	f000 f837 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3738      	adds	r7, #56	; 0x38
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000074 	.word	0x20000074

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_GPIO_Init+0x5c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <MX_GPIO_Init+0x5c>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_GPIO_Init+0x5c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_GPIO_Init+0x5c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <MX_GPIO_Init+0x5c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_GPIO_Init+0x5c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_GPIO_Init+0x5c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <MX_GPIO_Init+0x5c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x5c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6613      	str	r3, [r2, #96]	; 0x60
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	; 0x58
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a13      	ldr	r2, [pc, #76]	; (8000958 <HAL_TIM_Base_MspInit+0x5c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d10c      	bne.n	8000928 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <HAL_TIM_Base_MspInit+0x60>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <HAL_TIM_Base_MspInit+0x60>)
 8000914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_TIM_Base_MspInit+0x60>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000926:	e010      	b.n	800094a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000930:	d10b      	bne.n	800094a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_Base_MspInit+0x60>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x60>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_TIM_Base_MspInit+0x60>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40012c00 	.word	0x40012c00
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <HAL_TIM_MspPostInit+0xd8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d155      	bne.n	8000a2e <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <HAL_TIM_MspPostInit+0xdc>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009da:	2306      	movs	r3, #6
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <HAL_TIM_MspPostInit+0xe0>)
 80009e6:	f000 f9e9 	bl	8000dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009fc:	2306      	movs	r3, #6
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 f9d7 	bl	8000dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4806      	ldr	r0, [pc, #24]	; (8000a44 <HAL_TIM_MspPostInit+0xe4>)
 8000a2a:	f000 f9c7 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48001400 	.word	0x48001400
 8000a44:	48000400 	.word	0x48000400

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f890 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aea:	f7ff ffd7 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 fbcf 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000af2:	f7ff fc9b 	bl	800042c <main>

08000af6 <LoopForever>:

LoopForever:
    b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   r0, =_estack
 8000af8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b04:	08003318 	.word	0x08003318
  ldr r2, =_sbss
 8000b08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b0c:	200000c4 	.word	0x200000c4

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>

08000b12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f91b 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f80e 	bl	8000b44 <HAL_InitTick>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	e001      	b.n	8000b38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b34:	f7ff febe 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b38:	79fb      	ldrb	r3, [r7, #7]

}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_InitTick+0x68>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d022      	beq.n	8000b9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_InitTick+0x6c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_InitTick+0x68>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f918 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10f      	bne.n	8000b98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d809      	bhi.n	8000b92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	f000 f8f2 	bl	8000d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0x70>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e004      	b.n	8000ba2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e001      	b.n	8000ba2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x1c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x1c>)
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	200000c0 	.word	0x200000c0
 8000bd8:	20000008 	.word	0x20000008

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200000c0 	.word	0x200000c0

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff47 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb2 	bl	8000d14 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dca:	e15a      	b.n	8001082 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 814c 	beq.w	800107c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d005      	beq.n	8000dfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d130      	bne.n	8000e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	f003 0201 	and.w	r2, r3, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d017      	beq.n	8000e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d123      	bne.n	8000eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	6939      	ldr	r1, [r7, #16]
 8000eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0203 	and.w	r2, r3, #3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 80a6 	beq.w	800107c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f30:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <HAL_GPIO_Init+0x2e4>)
 8000f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f34:	4a5a      	ldr	r2, [pc, #360]	; (80010a0 <HAL_GPIO_Init+0x2e4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3c:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <HAL_GPIO_Init+0x2e4>)
 8000f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f48:	4a56      	ldr	r2, [pc, #344]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f72:	d01f      	beq.n	8000fb4 <HAL_GPIO_Init+0x1f8>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_GPIO_Init+0x2ec>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d019      	beq.n	8000fb0 <HAL_GPIO_Init+0x1f4>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <HAL_GPIO_Init+0x2f0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d013      	beq.n	8000fac <HAL_GPIO_Init+0x1f0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_GPIO_Init+0x2f4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d00d      	beq.n	8000fa8 <HAL_GPIO_Init+0x1ec>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_GPIO_Init+0x2f8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d007      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e8>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <HAL_GPIO_Init+0x2fc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d101      	bne.n	8000fa0 <HAL_GPIO_Init+0x1e4>
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	e00a      	b.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	e008      	b.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	e006      	b.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc6:	4937      	ldr	r1, [pc, #220]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ff8:	4a30      	ldr	r2, [pc, #192]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001022:	4a26      	ldr	r2, [pc, #152]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_GPIO_Init+0x300>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <HAL_GPIO_Init+0x300>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	f47f ae9d 	bne.w	8000dcc <HAL_GPIO_Init+0x10>
  }
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	48001000 	.word	0x48001000
 80010b8:	48001400 	.word	0x48001400
 80010bc:	40010400 	.word	0x40010400

080010c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d141      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010da:	d131      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010dc:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010e2:	4a46      	ldr	r2, [pc, #280]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f4:	4a41      	ldr	r2, [pc, #260]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fc:	4b40      	ldr	r3, [pc, #256]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2232      	movs	r2, #50	; 0x32
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a3f      	ldr	r2, [pc, #252]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001112:	e002      	b.n	800111a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001126:	d102      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f2      	bne.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113a:	d158      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e057      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800114c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001150:	e04d      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001158:	d141      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001166:	d131      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800116e:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2232      	movs	r2, #50	; 0x32
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	0c9b      	lsrs	r3, r3, #18
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119e:	e002      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b2:	d102      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f2      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c6:	d112      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e011      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011dc:	e007      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40007000 	.word	0x40007000
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83

08001208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e306      	b.n	8001828 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d075      	beq.n	8001312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001226:	4b97      	ldr	r3, [pc, #604]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001230:	4b94      	ldr	r3, [pc, #592]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d102      	bne.n	8001246 <HAL_RCC_OscConfig+0x3e>
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d002      	beq.n	800124c <HAL_RCC_OscConfig+0x44>
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b08      	cmp	r3, #8
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d05b      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d157      	bne.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e2e1      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x74>
 800126e:	4b85      	ldr	r3, [pc, #532]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a84      	ldr	r2, [pc, #528]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b7f      	ldr	r3, [pc, #508]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7e      	ldr	r2, [pc, #504]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b7c      	ldr	r3, [pc, #496]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7b      	ldr	r2, [pc, #492]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 80012a0:	4b78      	ldr	r3, [pc, #480]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a77      	ldr	r2, [pc, #476]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b75      	ldr	r3, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a74      	ldr	r2, [pc, #464]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc8c 	bl	8000bdc <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc88 	bl	8000bdc <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e2a6      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012da:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc78 	bl	8000bdc <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc74 	bl	8000bdc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e292      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001302:	4b60      	ldr	r3, [pc, #384]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d075      	beq.n	800140a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131e:	4b59      	ldr	r3, [pc, #356]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001328:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x136>
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d002      	beq.n	8001344 <HAL_RCC_OscConfig+0x13c>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d11f      	bne.n	8001384 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001344:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x154>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e265      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	4946      	ldr	r1, [pc, #280]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <HAL_RCC_OscConfig+0x280>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fbe5 	bl	8000b44 <HAL_InitTick>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d043      	beq.n	8001408 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e251      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d023      	beq.n	80013d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a3c      	ldr	r2, [pc, #240]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fc20 	bl	8000bdc <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc1c 	bl	8000bdc <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e23a      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	061b      	lsls	r3, r3, #24
 80013cc:	492d      	ldr	r1, [pc, #180]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
 80013d2:	e01a      	b.n	800140a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2a      	ldr	r2, [pc, #168]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80013da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fbfc 	bl	8000bdc <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fbf8 	bl	8000bdc <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e216      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1e0>
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d041      	beq.n	800149a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01c      	beq.n	8001458 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142e:	f7ff fbd5 	bl	8000bdc <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fbd1 	bl	8000bdc <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1ef      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800144a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0ef      	beq.n	8001436 <HAL_RCC_OscConfig+0x22e>
 8001456:	e020      	b.n	800149a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fbb8 	bl	8000bdc <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800146e:	e00d      	b.n	800148c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fbb4 	bl	8000bdc <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d906      	bls.n	800148c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1d2      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800148c:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 800148e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ea      	bne.n	8001470 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80a6 	beq.w	80015f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014ac:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x2b4>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x2b6>
 80014bc:	2300      	movs	r3, #0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00d      	beq.n	80014de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a7e      	ldr	r2, [pc, #504]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
 80014ce:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014da:	2301      	movs	r3, #1
 80014dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <HAL_RCC_OscConfig+0x4bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d118      	bne.n	800151c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ea:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_OscConfig+0x4bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a75      	ldr	r2, [pc, #468]	; (80016c4 <HAL_RCC_OscConfig+0x4bc>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb71 	bl	8000bdc <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fe:	f7ff fb6d 	bl	8000bdc <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e18b      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001510:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <HAL_RCC_OscConfig+0x4bc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d108      	bne.n	8001536 <HAL_RCC_OscConfig+0x32e>
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001534:	e024      	b.n	8001580 <HAL_RCC_OscConfig+0x378>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d110      	bne.n	8001560 <HAL_RCC_OscConfig+0x358>
 800153e:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001544:	4a5e      	ldr	r2, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001554:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155e:	e00f      	b.n	8001580 <HAL_RCC_OscConfig+0x378>
 8001560:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001566:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001576:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001578:	f023 0304 	bic.w	r3, r3, #4
 800157c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d016      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f7ff fb28 	bl	8000bdc <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fb24 	bl	8000bdc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e140      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a6:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80015a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ed      	beq.n	8001590 <HAL_RCC_OscConfig+0x388>
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb11 	bl	8000bdc <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fb0d 	bl	8000bdc <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e129      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d4:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ed      	bne.n	80015be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	4a34      	ldr	r2, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d03c      	beq.n	800167a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01c      	beq.n	8001642 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 800160a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800160e:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fae0 	bl	8000bdc <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001620:	f7ff fadc 	bl	8000bdc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0fa      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ef      	beq.n	8001620 <HAL_RCC_OscConfig+0x418>
 8001640:	e01b      	b.n	800167a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fac3 	bl	8000bdc <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800165a:	f7ff fabf 	bl	8000bdc <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0dd      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 800166e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ef      	bne.n	800165a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80d1 	beq.w	8001826 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b0c      	cmp	r3, #12
 800168e:	f000 808b 	beq.w	80017a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d15e      	bne.n	8001758 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff fa99 	bl	8000bdc <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ac:	e00c      	b.n	80016c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fa95 	bl	8000bdc <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d905      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0b3      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ec      	bne.n	80016ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d4:	4b56      	ldr	r3, [pc, #344]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_RCC_OscConfig+0x62c>)
 80016da:	4013      	ands	r3, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6a11      	ldr	r1, [r2, #32]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e4:	3a01      	subs	r2, #1
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016ee:	0212      	lsls	r2, r2, #8
 80016f0:	4311      	orrs	r1, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016f6:	0852      	lsrs	r2, r2, #1
 80016f8:	3a01      	subs	r2, #1
 80016fa:	0552      	lsls	r2, r2, #21
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001702:	0852      	lsrs	r2, r2, #1
 8001704:	3a01      	subs	r2, #1
 8001706:	0652      	lsls	r2, r2, #25
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800170e:	06d2      	lsls	r2, r2, #27
 8001710:	430a      	orrs	r2, r1
 8001712:	4947      	ldr	r1, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001718:	4b45      	ldr	r3, [pc, #276]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a44      	ldr	r2, [pc, #272]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001722:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4a41      	ldr	r2, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800172a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fa54 	bl	8000bdc <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fa50 	bl	8000bdc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e06e      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x530>
 8001756:	e066      	b.n	8001826 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001758:	4b35      	ldr	r3, [pc, #212]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a34      	ldr	r2, [pc, #208]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800175e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001762:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a31      	ldr	r2, [pc, #196]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a2e      	ldr	r2, [pc, #184]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 8001776:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fa2c 	bl	8000bdc <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fa28 	bl	8000bdc <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e046      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x580>
 80017a6:	e03e      	b.n	8001826 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e039      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_RCC_OscConfig+0x628>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d12c      	bne.n	8001822 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	3b01      	subs	r3, #1
 80017d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d123      	bne.n	8001822 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d11b      	bne.n	8001822 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d113      	bne.n	8001822 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d109      	bne.n	8001822 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	019f800c 	.word	0x019f800c

08001838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e11e      	b.n	8001a8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d910      	bls.n	8001880 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 020f 	bic.w	r2, r3, #15
 8001866:	498c      	ldr	r1, [pc, #560]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b8a      	ldr	r3, [pc, #552]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e106      	b.n	8001a8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d073      	beq.n	8001974 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d129      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001894:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0f4      	b.n	8001a8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018a4:	f000 f966 	bl	8001b74 <RCC_GetSysClockFreqFromPLLSource>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4a7c      	ldr	r2, [pc, #496]	; (8001aa0 <HAL_RCC_ClockConfig+0x268>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d93f      	bls.n	8001932 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018b2:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d033      	beq.n	8001932 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12f      	bne.n	8001932 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018d2:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018da:	4a70      	ldr	r2, [pc, #448]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80018dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e024      	b.n	8001932 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0c6      	b.n	8001a8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001900:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0be      	b.n	8001a8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001910:	f000 f8ce 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001914:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4a61      	ldr	r2, [pc, #388]	; (8001aa0 <HAL_RCC_ClockConfig+0x268>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d909      	bls.n	8001932 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800191e:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001926:	4a5d      	ldr	r2, [pc, #372]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4957      	ldr	r1, [pc, #348]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001944:	f7ff f94a 	bl	8000bdc <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f946 	bl	8000bdc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e095      	b.n	8001a8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b4e      	ldr	r3, [pc, #312]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d023      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198c:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001996:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019a4:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80019ac:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80019ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4936      	ldr	r1, [pc, #216]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
 80019c6:	e008      	b.n	80019da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b80      	cmp	r3, #128	; 0x80
 80019cc:	d105      	bne.n	80019da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 80019d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d21d      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 020f 	bic.w	r2, r3, #15
 80019f0:	4929      	ldr	r1, [pc, #164]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f8f0 	bl	8000bdc <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff f8ec 	bl	8000bdc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e03b      	b.n	8001a8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_RCC_ClockConfig+0x260>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1ed      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4917      	ldr	r1, [pc, #92]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	490f      	ldr	r1, [pc, #60]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a62:	f000 f825 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_RCC_ClockConfig+0x264>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <HAL_RCC_ClockConfig+0x26c>)
 8001a74:	5ccb      	ldrb	r3, [r1, r3]
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x270>)
 8001a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x274>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f85c 	bl	8000b44 <HAL_InitTick>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	04c4b400 	.word	0x04c4b400
 8001aa4:	08003300 	.word	0x08003300
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e047      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d102      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e03e      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d136      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3301      	adds	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b0e:	68d2      	ldr	r2, [r2, #12]
 8001b10:	0a12      	lsrs	r2, r2, #8
 8001b12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
      break;
 8001b1c:	e00c      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b28:	68d2      	ldr	r2, [r2, #12]
 8001b2a:	0a12      	lsrs	r2, r2, #8
 8001b2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
      break;
 8001b36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0e5b      	lsrs	r3, r3, #25
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	e001      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b58:	693b      	ldr	r3, [r7, #16]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d10c      	bne.n	8001bb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b98:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ba2:	68d2      	ldr	r2, [r2, #12]
 8001ba4:	0a12      	lsrs	r2, r2, #8
 8001ba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
    break;
 8001bb0:	e00c      	b.n	8001bcc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	0a12      	lsrs	r2, r2, #8
 8001bc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    break;
 8001bca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0e5b      	lsrs	r3, r3, #25
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001be6:	687b      	ldr	r3, [r7, #4]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	007a1200 	.word	0x007a1200
 8001bfc:	00f42400 	.word	0x00f42400

08001c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e049      	b.n	8001ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fe68 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4610      	mov	r0, r2
 8001c40:	f000 fce2 	bl	8002608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d001      	beq.n	8001cc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e042      	b.n	8001d4e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_TIM_Base_Start+0xac>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <HAL_TIM_Base_Start+0x5c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce2:	d013      	beq.n	8001d0c <HAL_TIM_Base_Start+0x5c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_TIM_Base_Start+0xb0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_TIM_Base_Start+0x5c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_TIM_Base_Start+0xb4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_TIM_Base_Start+0x5c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_TIM_Base_Start+0xb8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_TIM_Base_Start+0x5c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_TIM_Base_Start+0xbc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d115      	bne.n	8001d38 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_TIM_Base_Start+0xc0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d015      	beq.n	8001d4a <HAL_TIM_Base_Start+0x9a>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d011      	beq.n	8001d4a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	e008      	b.n	8001d4a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e000      	b.n	8001d4c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800
 8001d68:	40013400 	.word	0x40013400
 8001d6c:	40014000 	.word	0x40014000
 8001d70:	00010007 	.word	0x00010007

08001d74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e049      	b.n	8001e1a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f841 	bl	8001e22 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 fc28 	bl	8002608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e049      	b.n	8001edc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f841 	bl	8001ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f000 fbc7 	bl	8002608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_TIM_PWM_Start+0x24>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e03c      	b.n	8001f96 <HAL_TIM_PWM_Start+0x9e>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d109      	bne.n	8001f36 <HAL_TIM_PWM_Start+0x3e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	e02f      	b.n	8001f96 <HAL_TIM_PWM_Start+0x9e>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d109      	bne.n	8001f50 <HAL_TIM_PWM_Start+0x58>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e022      	b.n	8001f96 <HAL_TIM_PWM_Start+0x9e>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d109      	bne.n	8001f6a <HAL_TIM_PWM_Start+0x72>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	e015      	b.n	8001f96 <HAL_TIM_PWM_Start+0x9e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d109      	bne.n	8001f84 <HAL_TIM_PWM_Start+0x8c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e008      	b.n	8001f96 <HAL_TIM_PWM_Start+0x9e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e097      	b.n	80020ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d104      	bne.n	8001fae <HAL_TIM_PWM_Start+0xb6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fac:	e023      	b.n	8001ff6 <HAL_TIM_PWM_Start+0xfe>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d104      	bne.n	8001fbe <HAL_TIM_PWM_Start+0xc6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fbc:	e01b      	b.n	8001ff6 <HAL_TIM_PWM_Start+0xfe>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d104      	bne.n	8001fce <HAL_TIM_PWM_Start+0xd6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fcc:	e013      	b.n	8001ff6 <HAL_TIM_PWM_Start+0xfe>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d104      	bne.n	8001fde <HAL_TIM_PWM_Start+0xe6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fdc:	e00b      	b.n	8001ff6 <HAL_TIM_PWM_Start+0xfe>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d104      	bne.n	8001fee <HAL_TIM_PWM_Start+0xf6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fec:	e003      	b.n	8001ff6 <HAL_TIM_PWM_Start+0xfe>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 ff24 	bl	8002e4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <HAL_TIM_PWM_Start+0x1e0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_TIM_PWM_Start+0x13e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a32      	ldr	r2, [pc, #200]	; (80020dc <HAL_TIM_PWM_Start+0x1e4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00e      	beq.n	8002036 <HAL_TIM_PWM_Start+0x13e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <HAL_TIM_PWM_Start+0x1e8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d009      	beq.n	8002036 <HAL_TIM_PWM_Start+0x13e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2f      	ldr	r2, [pc, #188]	; (80020e4 <HAL_TIM_PWM_Start+0x1ec>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_TIM_PWM_Start+0x13e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <HAL_TIM_PWM_Start+0x1f0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_TIM_PWM_Start+0x142>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_TIM_PWM_Start+0x144>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_TIM_PWM_Start+0x1e0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d018      	beq.n	800208c <HAL_TIM_PWM_Start+0x194>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d013      	beq.n	800208c <HAL_TIM_PWM_Start+0x194>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a20      	ldr	r2, [pc, #128]	; (80020ec <HAL_TIM_PWM_Start+0x1f4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00e      	beq.n	800208c <HAL_TIM_PWM_Start+0x194>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <HAL_TIM_PWM_Start+0x1f8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_TIM_PWM_Start+0x194>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_TIM_PWM_Start+0x1e4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_TIM_PWM_Start+0x194>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_TIM_PWM_Start+0x1e8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d115      	bne.n	80020b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_TIM_PWM_Start+0x1fc>)
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b06      	cmp	r3, #6
 800209c:	d015      	beq.n	80020ca <HAL_TIM_PWM_Start+0x1d2>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d011      	beq.n	80020ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b6:	e008      	b.n	80020ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e000      	b.n	80020cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40013400 	.word	0x40013400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800
 80020f4:	00010007 	.word	0x00010007

080020f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002112:	2302      	movs	r3, #2
 8002114:	e066      	b.n	80021e4 <HAL_TIM_OC_ConfigChannel+0xec>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b14      	cmp	r3, #20
 8002122:	d857      	bhi.n	80021d4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	08002181 	.word	0x08002181
 8002130:	080021d5 	.word	0x080021d5
 8002134:	080021d5 	.word	0x080021d5
 8002138:	080021d5 	.word	0x080021d5
 800213c:	0800218f 	.word	0x0800218f
 8002140:	080021d5 	.word	0x080021d5
 8002144:	080021d5 	.word	0x080021d5
 8002148:	080021d5 	.word	0x080021d5
 800214c:	0800219d 	.word	0x0800219d
 8002150:	080021d5 	.word	0x080021d5
 8002154:	080021d5 	.word	0x080021d5
 8002158:	080021d5 	.word	0x080021d5
 800215c:	080021ab 	.word	0x080021ab
 8002160:	080021d5 	.word	0x080021d5
 8002164:	080021d5 	.word	0x080021d5
 8002168:	080021d5 	.word	0x080021d5
 800216c:	080021b9 	.word	0x080021b9
 8002170:	080021d5 	.word	0x080021d5
 8002174:	080021d5 	.word	0x080021d5
 8002178:	080021d5 	.word	0x080021d5
 800217c:	080021c7 	.word	0x080021c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 face 	bl	8002728 <TIM_OC1_SetConfig>
      break;
 800218c:	e025      	b.n	80021da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fb57 	bl	8002848 <TIM_OC2_SetConfig>
      break;
 800219a:	e01e      	b.n	80021da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fbda 	bl	800295c <TIM_OC3_SetConfig>
      break;
 80021a8:	e017      	b.n	80021da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fc5b 	bl	8002a6c <TIM_OC4_SetConfig>
      break;
 80021b6:	e010      	b.n	80021da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fcde 	bl	8002b80 <TIM_OC5_SetConfig>
      break;
 80021c4:	e009      	b.n	80021da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fd3b 	bl	8002c48 <TIM_OC6_SetConfig>
      break;
 80021d2:	e002      	b.n	80021da <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
      break;
 80021d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002206:	2302      	movs	r3, #2
 8002208:	e0ff      	b.n	800240a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b14      	cmp	r3, #20
 8002216:	f200 80f0 	bhi.w	80023fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002275 	.word	0x08002275
 8002224:	080023fb 	.word	0x080023fb
 8002228:	080023fb 	.word	0x080023fb
 800222c:	080023fb 	.word	0x080023fb
 8002230:	080022b5 	.word	0x080022b5
 8002234:	080023fb 	.word	0x080023fb
 8002238:	080023fb 	.word	0x080023fb
 800223c:	080023fb 	.word	0x080023fb
 8002240:	080022f7 	.word	0x080022f7
 8002244:	080023fb 	.word	0x080023fb
 8002248:	080023fb 	.word	0x080023fb
 800224c:	080023fb 	.word	0x080023fb
 8002250:	08002337 	.word	0x08002337
 8002254:	080023fb 	.word	0x080023fb
 8002258:	080023fb 	.word	0x080023fb
 800225c:	080023fb 	.word	0x080023fb
 8002260:	08002379 	.word	0x08002379
 8002264:	080023fb 	.word	0x080023fb
 8002268:	080023fb 	.word	0x080023fb
 800226c:	080023fb 	.word	0x080023fb
 8002270:	080023b9 	.word	0x080023b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fa54 	bl	8002728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0208 	orr.w	r2, r2, #8
 800228e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6999      	ldr	r1, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	619a      	str	r2, [r3, #24]
      break;
 80022b2:	e0a5      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fac4 	bl	8002848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6999      	ldr	r1, [r3, #24]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	021a      	lsls	r2, r3, #8
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	619a      	str	r2, [r3, #24]
      break;
 80022f4:	e084      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fb2d 	bl	800295c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0208 	orr.w	r2, r2, #8
 8002310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0204 	bic.w	r2, r2, #4
 8002320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	61da      	str	r2, [r3, #28]
      break;
 8002334:	e064      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fb95 	bl	8002a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	021a      	lsls	r2, r3, #8
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	61da      	str	r2, [r3, #28]
      break;
 8002376:	e043      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fbfe 	bl	8002b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0208 	orr.w	r2, r2, #8
 8002392:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80023b6:	e023      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fc42 	bl	8002c48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	021a      	lsls	r2, r3, #8
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80023f8:	e002      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
      break;
 80023fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002408:	7dfb      	ldrb	r3, [r7, #23]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop

08002414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_TIM_ConfigClockSource+0x1c>
 800242c:	2302      	movs	r3, #2
 800242e:	e0de      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x1da>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800244e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a63      	ldr	r2, [pc, #396]	; (80025f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f000 80a9 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002470:	4a61      	ldr	r2, [pc, #388]	; (80025f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	f200 80ae 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002478:	4a60      	ldr	r2, [pc, #384]	; (80025fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f000 80a1 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002480:	4a5e      	ldr	r2, [pc, #376]	; (80025fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	f200 80a6 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002488:	4a5d      	ldr	r2, [pc, #372]	; (8002600 <HAL_TIM_ConfigClockSource+0x1ec>)
 800248a:	4293      	cmp	r3, r2
 800248c:	f000 8099 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002490:	4a5b      	ldr	r2, [pc, #364]	; (8002600 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002492:	4293      	cmp	r3, r2
 8002494:	f200 809e 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002498:	4a5a      	ldr	r2, [pc, #360]	; (8002604 <HAL_TIM_ConfigClockSource+0x1f0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	f000 8091 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_TIM_ConfigClockSource+0x1f0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f200 8096 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80024ac:	f000 8089 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80024b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80024b4:	f200 808e 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024bc:	d03e      	beq.n	800253c <HAL_TIM_ConfigClockSource+0x128>
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c2:	f200 8087 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ca:	f000 8086 	beq.w	80025da <HAL_TIM_ConfigClockSource+0x1c6>
 80024ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d2:	d87f      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024d4:	2b70      	cmp	r3, #112	; 0x70
 80024d6:	d01a      	beq.n	800250e <HAL_TIM_ConfigClockSource+0xfa>
 80024d8:	2b70      	cmp	r3, #112	; 0x70
 80024da:	d87b      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024dc:	2b60      	cmp	r3, #96	; 0x60
 80024de:	d050      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x16e>
 80024e0:	2b60      	cmp	r3, #96	; 0x60
 80024e2:	d877      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024e4:	2b50      	cmp	r3, #80	; 0x50
 80024e6:	d03c      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x14e>
 80024e8:	2b50      	cmp	r3, #80	; 0x50
 80024ea:	d873      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d058      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x18e>
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d86f      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024f4:	2b30      	cmp	r3, #48	; 0x30
 80024f6:	d064      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80024f8:	2b30      	cmp	r3, #48	; 0x30
 80024fa:	d86b      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d060      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002500:	2b20      	cmp	r3, #32
 8002502:	d867      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d05c      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002508:	2b10      	cmp	r3, #16
 800250a:	d05a      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x1ae>
 800250c:	e062      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f000 fc75 	bl	8002e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	609a      	str	r2, [r3, #8]
      break;
 800253a:	e04f      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f000 fc5e 	bl	8002e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255e:	609a      	str	r2, [r3, #8]
      break;
 8002560:	e03c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	461a      	mov	r2, r3
 8002570:	f000 fbd0 	bl	8002d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2150      	movs	r1, #80	; 0x50
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fc29 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002580:	e02c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	461a      	mov	r2, r3
 8002590:	f000 fbef 	bl	8002d72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2160      	movs	r1, #96	; 0x60
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fc19 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 80025a0:	e01c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f000 fbb0 	bl	8002d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fc09 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 80025c0:	e00c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f000 fc00 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 80025d2:	e003      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e000      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80025da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	00100070 	.word	0x00100070
 80025fc:	00100040 	.word	0x00100040
 8002600:	00100030 	.word	0x00100030
 8002604:	00100020 	.word	0x00100020

08002608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a3c      	ldr	r2, [pc, #240]	; (800270c <TIM_Base_SetConfig+0x104>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00f      	beq.n	8002640 <TIM_Base_SetConfig+0x38>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d00b      	beq.n	8002640 <TIM_Base_SetConfig+0x38>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a39      	ldr	r2, [pc, #228]	; (8002710 <TIM_Base_SetConfig+0x108>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0x38>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a38      	ldr	r2, [pc, #224]	; (8002714 <TIM_Base_SetConfig+0x10c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0x38>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a37      	ldr	r2, [pc, #220]	; (8002718 <TIM_Base_SetConfig+0x110>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d108      	bne.n	8002652 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a2d      	ldr	r2, [pc, #180]	; (800270c <TIM_Base_SetConfig+0x104>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01b      	beq.n	8002692 <TIM_Base_SetConfig+0x8a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d017      	beq.n	8002692 <TIM_Base_SetConfig+0x8a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2a      	ldr	r2, [pc, #168]	; (8002710 <TIM_Base_SetConfig+0x108>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <TIM_Base_SetConfig+0x8a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <TIM_Base_SetConfig+0x10c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00f      	beq.n	8002692 <TIM_Base_SetConfig+0x8a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <TIM_Base_SetConfig+0x110>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00b      	beq.n	8002692 <TIM_Base_SetConfig+0x8a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <TIM_Base_SetConfig+0x114>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <TIM_Base_SetConfig+0x8a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <TIM_Base_SetConfig+0x118>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d003      	beq.n	8002692 <TIM_Base_SetConfig+0x8a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <TIM_Base_SetConfig+0x11c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <TIM_Base_SetConfig+0x104>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00f      	beq.n	80026f0 <TIM_Base_SetConfig+0xe8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <TIM_Base_SetConfig+0x110>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00b      	beq.n	80026f0 <TIM_Base_SetConfig+0xe8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a10      	ldr	r2, [pc, #64]	; (800271c <TIM_Base_SetConfig+0x114>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <TIM_Base_SetConfig+0xe8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <TIM_Base_SetConfig+0x118>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d003      	beq.n	80026f0 <TIM_Base_SetConfig+0xe8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <TIM_Base_SetConfig+0x11c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	615a      	str	r2, [r3, #20]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800
 8002718:	40013400 	.word	0x40013400
 800271c:	40014000 	.word	0x40014000
 8002720:	40014400 	.word	0x40014400
 8002724:	40014800 	.word	0x40014800

08002728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <TIM_OC1_SetConfig+0x10c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00f      	beq.n	80027a8 <TIM_OC1_SetConfig+0x80>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <TIM_OC1_SetConfig+0x110>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00b      	beq.n	80027a8 <TIM_OC1_SetConfig+0x80>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <TIM_OC1_SetConfig+0x114>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <TIM_OC1_SetConfig+0x80>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a29      	ldr	r2, [pc, #164]	; (8002840 <TIM_OC1_SetConfig+0x118>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d003      	beq.n	80027a8 <TIM_OC1_SetConfig+0x80>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a28      	ldr	r2, [pc, #160]	; (8002844 <TIM_OC1_SetConfig+0x11c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d10c      	bne.n	80027c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 0308 	bic.w	r3, r3, #8
 80027ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <TIM_OC1_SetConfig+0x10c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00f      	beq.n	80027ea <TIM_OC1_SetConfig+0xc2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <TIM_OC1_SetConfig+0x110>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <TIM_OC1_SetConfig+0xc2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a19      	ldr	r2, [pc, #100]	; (800283c <TIM_OC1_SetConfig+0x114>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <TIM_OC1_SetConfig+0xc2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a18      	ldr	r2, [pc, #96]	; (8002840 <TIM_OC1_SetConfig+0x118>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_OC1_SetConfig+0xc2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <TIM_OC1_SetConfig+0x11c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	621a      	str	r2, [r3, #32]
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40013400 	.word	0x40013400
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f023 0210 	bic.w	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 0320 	bic.w	r3, r3, #32
 8002896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a28      	ldr	r2, [pc, #160]	; (8002948 <TIM_OC2_SetConfig+0x100>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <TIM_OC2_SetConfig+0x6c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a27      	ldr	r2, [pc, #156]	; (800294c <TIM_OC2_SetConfig+0x104>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d10d      	bne.n	80028d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <TIM_OC2_SetConfig+0x100>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00f      	beq.n	80028f8 <TIM_OC2_SetConfig+0xb0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a1c      	ldr	r2, [pc, #112]	; (800294c <TIM_OC2_SetConfig+0x104>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00b      	beq.n	80028f8 <TIM_OC2_SetConfig+0xb0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <TIM_OC2_SetConfig+0x108>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <TIM_OC2_SetConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <TIM_OC2_SetConfig+0x10c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_OC2_SetConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a19      	ldr	r2, [pc, #100]	; (8002958 <TIM_OC2_SetConfig+0x110>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d113      	bne.n	8002920 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40013400 	.word	0x40013400
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800

0800295c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <TIM_OC3_SetConfig+0xfc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <TIM_OC3_SetConfig+0x6a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <TIM_OC3_SetConfig+0x100>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10d      	bne.n	80029e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <TIM_OC3_SetConfig+0xfc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00f      	beq.n	8002a0a <TIM_OC3_SetConfig+0xae>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <TIM_OC3_SetConfig+0x100>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00b      	beq.n	8002a0a <TIM_OC3_SetConfig+0xae>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <TIM_OC3_SetConfig+0x104>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <TIM_OC3_SetConfig+0xae>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <TIM_OC3_SetConfig+0x108>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d003      	beq.n	8002a0a <TIM_OC3_SetConfig+0xae>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <TIM_OC3_SetConfig+0x10c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d113      	bne.n	8002a32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	621a      	str	r2, [r3, #32]
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40013400 	.word	0x40013400
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40014400 	.word	0x40014400
 8002a68:	40014800 	.word	0x40014800

08002a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	031b      	lsls	r3, r3, #12
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <TIM_OC4_SetConfig+0x100>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <TIM_OC4_SetConfig+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <TIM_OC4_SetConfig+0x104>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10d      	bne.n	8002af4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	031b      	lsls	r3, r3, #12
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <TIM_OC4_SetConfig+0x100>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00f      	beq.n	8002b1c <TIM_OC4_SetConfig+0xb0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <TIM_OC4_SetConfig+0x104>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <TIM_OC4_SetConfig+0xb0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <TIM_OC4_SetConfig+0x108>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <TIM_OC4_SetConfig+0xb0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <TIM_OC4_SetConfig+0x10c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_OC4_SetConfig+0xb0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <TIM_OC4_SetConfig+0x110>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d113      	bne.n	8002b44 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40013400 	.word	0x40013400
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	40014800 	.word	0x40014800

08002b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002bc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <TIM_OC5_SetConfig+0xb4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00f      	beq.n	8002bfa <TIM_OC5_SetConfig+0x7a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <TIM_OC5_SetConfig+0xb8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_OC5_SetConfig+0x7a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <TIM_OC5_SetConfig+0xbc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_OC5_SetConfig+0x7a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <TIM_OC5_SetConfig+0xc0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_OC5_SetConfig+0x7a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <TIM_OC5_SetConfig+0xc4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d109      	bne.n	8002c0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	40014800 	.word	0x40014800

08002c48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	051b      	lsls	r3, r3, #20
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <TIM_OC6_SetConfig+0xb8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00f      	beq.n	8002cc4 <TIM_OC6_SetConfig+0x7c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <TIM_OC6_SetConfig+0xbc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <TIM_OC6_SetConfig+0x7c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <TIM_OC6_SetConfig+0xc0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d007      	beq.n	8002cc4 <TIM_OC6_SetConfig+0x7c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <TIM_OC6_SetConfig+0xc4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <TIM_OC6_SetConfig+0x7c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <TIM_OC6_SetConfig+0xc8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d109      	bne.n	8002cd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	029b      	lsls	r3, r3, #10
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40013400 	.word	0x40013400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800

08002d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f023 0201 	bic.w	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f023 030a 	bic.w	r3, r3, #10
 8002d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0210 	bic.w	r2, r3, #16
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	031b      	lsls	r3, r3, #12
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	621a      	str	r2, [r3, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f043 0307 	orr.w	r3, r3, #7
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	021a      	lsls	r2, r3, #8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2201      	movs	r2, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_TIMEx_PWMN_Start+0x24>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e022      	b.n	8002f02 <HAL_TIMEx_PWMN_Start+0x6a>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d109      	bne.n	8002ed6 <HAL_TIMEx_PWMN_Start+0x3e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e015      	b.n	8002f02 <HAL_TIMEx_PWMN_Start+0x6a>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d109      	bne.n	8002ef0 <HAL_TIMEx_PWMN_Start+0x58>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e008      	b.n	8002f02 <HAL_TIMEx_PWMN_Start+0x6a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e069      	b.n	8002fde <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d104      	bne.n	8002f1a <HAL_TIMEx_PWMN_Start+0x82>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f18:	e013      	b.n	8002f42 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIMEx_PWMN_Start+0x92>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f28:	e00b      	b.n	8002f42 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIMEx_PWMN_Start+0xa2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f38:	e003      	b.n	8002f42 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2204      	movs	r2, #4
 8002f48:	6839      	ldr	r1, [r7, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f97a 	bl	8003244 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_TIMEx_PWMN_Start+0x150>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_TIMEx_PWMN_Start+0x104>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d013      	beq.n	8002f9c <HAL_TIMEx_PWMN_Start+0x104>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_TIMEx_PWMN_Start+0x154>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIMEx_PWMN_Start+0x104>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_TIMEx_PWMN_Start+0x158>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIMEx_PWMN_Start+0x104>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_TIMEx_PWMN_Start+0x15c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIMEx_PWMN_Start+0x104>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_TIMEx_PWMN_Start+0x160>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d115      	bne.n	8002fc8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <HAL_TIMEx_PWMN_Start+0x164>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d015      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x142>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d011      	beq.n	8002fda <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	e008      	b.n	8002fda <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e000      	b.n	8002fdc <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40013400 	.word	0x40013400
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	00010007 	.word	0x00010007

08003000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003014:	2302      	movs	r3, #2
 8003016:	e065      	b.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d018      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308e:	d013      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00e      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10c      	bne.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40013400 	.word	0x40013400
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40014000 	.word	0x40014000

08003104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800311c:	2302      	movs	r3, #2
 800311e:	e087      	b.n	8003230 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a25      	ldr	r2, [pc, #148]	; (8003240 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d106      	bne.n	80031bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1e      	ldr	r2, [pc, #120]	; (800323c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d126      	bne.n	800321e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	051b      	lsls	r3, r3, #20
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d106      	bne.n	800321e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40013400 	.word	0x40013400

08003244 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2204      	movs	r2, #4
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	43db      	mvns	r3, r3
 8003266:	401a      	ands	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 f820 	bl	80032e8 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003310 	.word	0x08003310
 80032cc:	08003310 	.word	0x08003310
 80032d0:	08003310 	.word	0x08003310
 80032d4:	08003314 	.word	0x08003314

080032d8 <memset>:
 80032d8:	4402      	add	r2, r0
 80032da:	4603      	mov	r3, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

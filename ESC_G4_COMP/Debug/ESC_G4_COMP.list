
ESC_G4_COMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f60  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005148  08005148  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005148  08005148  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005148  08005148  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000000c  0800515c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800515c  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011389  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  000313c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00033678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2b6  00000000  00000000  000358d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d55  00000000  00000000  00054b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5be4  00000000  00000000  000668db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c4bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c10  00000000  00000000  0013c510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005120 	.word	0x08005120

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005120 	.word	0x08005120

08000218 <BLDC_phase>:

//	HAL_COMP_IRQHandler(&hcomp1);
//	HAL_COMP_IRQHandler(&hcomp2);
} */

void BLDC_phase(unsigned char phase, float p) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	ed87 0a00 	vstr	s0, [r7]
 8000224:	71fb      	strb	r3, [r7, #7]
	if(phase == 1) {
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d126      	bne.n	800027a <BLDC_phase+0x62>
		TIM1->CCER |= TIM_CCER_CC1NP;
 800022c:	4b7e      	ldr	r3, [pc, #504]	; (8000428 <BLDC_phase+0x210>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a7d      	ldr	r2, [pc, #500]	; (8000428 <BLDC_phase+0x210>)
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000238:	4b7b      	ldr	r3, [pc, #492]	; (8000428 <BLDC_phase+0x210>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a7a      	ldr	r2, [pc, #488]	; (8000428 <BLDC_phase+0x210>)
 800023e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000242:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000244:	4b78      	ldr	r3, [pc, #480]	; (8000428 <BLDC_phase+0x210>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a77      	ldr	r2, [pc, #476]	; (8000428 <BLDC_phase+0x210>)
 800024a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800024e:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8000250:	4b75      	ldr	r3, [pc, #468]	; (8000428 <BLDC_phase+0x210>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a74      	ldr	r2, [pc, #464]	; (8000428 <BLDC_phase+0x210>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 800025c:	4b72      	ldr	r3, [pc, #456]	; (8000428 <BLDC_phase+0x210>)
 800025e:	2200      	movs	r2, #0
 8000260:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p;
 8000262:	4b71      	ldr	r3, [pc, #452]	; (8000428 <BLDC_phase+0x210>)
 8000264:	edd7 7a00 	vldr	s15, [r7]
 8000268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800026c:	ee17 2a90 	vmov	r2, s15
 8000270:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000272:	4b6d      	ldr	r3, [pc, #436]	; (8000428 <BLDC_phase+0x210>)
 8000274:	2200      	movs	r2, #0
 8000276:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->EGR |= TIM_EGR_COMG;
		TIM1->CCR1 = p;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 8000278:	e0d0      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 2) {
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d126      	bne.n	80002ce <BLDC_phase+0xb6>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000280:	4b69      	ldr	r3, [pc, #420]	; (8000428 <BLDC_phase+0x210>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a68      	ldr	r2, [pc, #416]	; (8000428 <BLDC_phase+0x210>)
 8000286:	f023 0308 	bic.w	r3, r3, #8
 800028a:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 800028c:	4b66      	ldr	r3, [pc, #408]	; (8000428 <BLDC_phase+0x210>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a65      	ldr	r2, [pc, #404]	; (8000428 <BLDC_phase+0x210>)
 8000292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000296:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8000298:	4b63      	ldr	r3, [pc, #396]	; (8000428 <BLDC_phase+0x210>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a62      	ldr	r2, [pc, #392]	; (8000428 <BLDC_phase+0x210>)
 800029e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002a2:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80002a4:	4b60      	ldr	r3, [pc, #384]	; (8000428 <BLDC_phase+0x210>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a5f      	ldr	r2, [pc, #380]	; (8000428 <BLDC_phase+0x210>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 80002b0:	4b5d      	ldr	r3, [pc, #372]	; (8000428 <BLDC_phase+0x210>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p;
 80002b6:	4b5c      	ldr	r3, [pc, #368]	; (8000428 <BLDC_phase+0x210>)
 80002b8:	edd7 7a00 	vldr	s15, [r7]
 80002bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002c0:	ee17 2a90 	vmov	r2, s15
 80002c4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80002c6:	4b58      	ldr	r3, [pc, #352]	; (8000428 <BLDC_phase+0x210>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002cc:	e0a6      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 3) {
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d126      	bne.n	8000322 <BLDC_phase+0x10a>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80002d4:	4b54      	ldr	r3, [pc, #336]	; (8000428 <BLDC_phase+0x210>)
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	4a53      	ldr	r2, [pc, #332]	; (8000428 <BLDC_phase+0x210>)
 80002da:	f023 0308 	bic.w	r3, r3, #8
 80002de:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 80002e0:	4b51      	ldr	r3, [pc, #324]	; (8000428 <BLDC_phase+0x210>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a50      	ldr	r2, [pc, #320]	; (8000428 <BLDC_phase+0x210>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80002ec:	4b4e      	ldr	r3, [pc, #312]	; (8000428 <BLDC_phase+0x210>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a4d      	ldr	r2, [pc, #308]	; (8000428 <BLDC_phase+0x210>)
 80002f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002f6:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80002f8:	4b4b      	ldr	r3, [pc, #300]	; (8000428 <BLDC_phase+0x210>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a4a      	ldr	r2, [pc, #296]	; (8000428 <BLDC_phase+0x210>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8000304:	4b48      	ldr	r3, [pc, #288]	; (8000428 <BLDC_phase+0x210>)
 8000306:	2200      	movs	r2, #0
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800030a:	4b47      	ldr	r3, [pc, #284]	; (8000428 <BLDC_phase+0x210>)
 800030c:	2200      	movs	r2, #0
 800030e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = p;
 8000310:	4b45      	ldr	r3, [pc, #276]	; (8000428 <BLDC_phase+0x210>)
 8000312:	edd7 7a00 	vldr	s15, [r7]
 8000316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800031a:	ee17 2a90 	vmov	r2, s15
 800031e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000320:	e07c      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 4) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d126      	bne.n	8000376 <BLDC_phase+0x15e>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 8000328:	4b3f      	ldr	r3, [pc, #252]	; (8000428 <BLDC_phase+0x210>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a3e      	ldr	r2, [pc, #248]	; (8000428 <BLDC_phase+0x210>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000334:	4b3c      	ldr	r3, [pc, #240]	; (8000428 <BLDC_phase+0x210>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a3b      	ldr	r2, [pc, #236]	; (8000428 <BLDC_phase+0x210>)
 800033a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800033e:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000340:	4b39      	ldr	r3, [pc, #228]	; (8000428 <BLDC_phase+0x210>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a38      	ldr	r2, [pc, #224]	; (8000428 <BLDC_phase+0x210>)
 8000346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800034a:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <BLDC_phase+0x210>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a35      	ldr	r2, [pc, #212]	; (8000428 <BLDC_phase+0x210>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 8000358:	4b33      	ldr	r3, [pc, #204]	; (8000428 <BLDC_phase+0x210>)
 800035a:	2200      	movs	r2, #0
 800035c:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 800035e:	4b32      	ldr	r3, [pc, #200]	; (8000428 <BLDC_phase+0x210>)
 8000360:	2200      	movs	r2, #0
 8000362:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <BLDC_phase+0x210>)
 8000366:	edd7 7a00 	vldr	s15, [r7]
 800036a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800036e:	ee17 2a90 	vmov	r2, s15
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000374:	e052      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 5) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b05      	cmp	r3, #5
 800037a:	d126      	bne.n	80003ca <BLDC_phase+0x1b2>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <BLDC_phase+0x210>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4a29      	ldr	r2, [pc, #164]	; (8000428 <BLDC_phase+0x210>)
 8000382:	f023 0308 	bic.w	r3, r3, #8
 8000386:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <BLDC_phase+0x210>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	4a26      	ldr	r2, [pc, #152]	; (8000428 <BLDC_phase+0x210>)
 800038e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000392:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <BLDC_phase+0x210>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a23      	ldr	r2, [pc, #140]	; (8000428 <BLDC_phase+0x210>)
 800039a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800039e:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80003a0:	4b21      	ldr	r3, [pc, #132]	; (8000428 <BLDC_phase+0x210>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <BLDC_phase+0x210>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <BLDC_phase+0x210>)
 80003ae:	edd7 7a00 	vldr	s15, [r7]
 80003b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003b6:	ee17 2a90 	vmov	r2, s15
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <BLDC_phase+0x210>)
 80003be:	2200      	movs	r2, #0
 80003c0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <BLDC_phase+0x210>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80003c8:	e028      	b.n	800041c <BLDC_phase+0x204>
	} else if(phase == 6) {
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	d125      	bne.n	800041c <BLDC_phase+0x204>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <BLDC_phase+0x210>)
 80003d2:	6a1b      	ldr	r3, [r3, #32]
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <BLDC_phase+0x210>)
 80003d6:	f023 0308 	bic.w	r3, r3, #8
 80003da:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <BLDC_phase+0x210>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a11      	ldr	r2, [pc, #68]	; (8000428 <BLDC_phase+0x210>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <BLDC_phase+0x210>)
 80003ea:	6a1b      	ldr	r3, [r3, #32]
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <BLDC_phase+0x210>)
 80003ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003f2:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <BLDC_phase+0x210>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <BLDC_phase+0x210>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <BLDC_phase+0x210>)
 8000402:	edd7 7a00 	vldr	s15, [r7]
 8000406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800040a:	ee17 2a90 	vmov	r2, s15
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <BLDC_phase+0x210>)
 8000412:	2200      	movs	r2, #0
 8000414:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <BLDC_phase+0x210>)
 8000418:	2200      	movs	r2, #0
 800041a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40012c00 	.word	0x40012c00

0800042c <main>:

int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
	HAL_Init();
 8000432:	f000 fe2e 	bl	8001092 <HAL_Init>

	SystemClock_Config();
 8000436:	f000 f8c7 	bl	80005c8 <SystemClock_Config>

	RCC->AHB2ENR |= 0b1111111;
 800043a:	4b5d      	ldr	r3, [pc, #372]	; (80005b0 <main+0x184>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a5c      	ldr	r2, [pc, #368]	; (80005b0 <main+0x184>)
 8000440:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->OTYPER &= ~(1<<3);
 8000446:	4b5b      	ldr	r3, [pc, #364]	; (80005b4 <main+0x188>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	4a5a      	ldr	r2, [pc, #360]	; (80005b4 <main+0x188>)
 800044c:	f023 0308 	bic.w	r3, r3, #8
 8000450:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(1<<4);
 8000452:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <main+0x188>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	4a57      	ldr	r2, [pc, #348]	; (80005b4 <main+0x188>)
 8000458:	f023 0310 	bic.w	r3, r3, #16
 800045c:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (1<<7);
 800045e:	4b55      	ldr	r3, [pc, #340]	; (80005b4 <main+0x188>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a54      	ldr	r2, [pc, #336]	; (80005b4 <main+0x188>)
 8000464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000468:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<9);
 800046a:	4b52      	ldr	r3, [pc, #328]	; (80005b4 <main+0x188>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	4a51      	ldr	r2, [pc, #324]	; (80005b4 <main+0x188>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6093      	str	r3, [r2, #8]

	GPIOB->MODER |= 1<<6;
 8000476:	4b4f      	ldr	r3, [pc, #316]	; (80005b4 <main+0x188>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a4e      	ldr	r2, [pc, #312]	; (80005b4 <main+0x188>)
 800047c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000480:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 8000482:	4b4c      	ldr	r3, [pc, #304]	; (80005b4 <main+0x188>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a4b      	ldr	r2, [pc, #300]	; (80005b4 <main+0x188>)
 8000488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800048c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 800048e:	4b49      	ldr	r3, [pc, #292]	; (80005b4 <main+0x188>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a48      	ldr	r2, [pc, #288]	; (80005b4 <main+0x188>)
 8000494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000498:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 800049a:	4b46      	ldr	r3, [pc, #280]	; (80005b4 <main+0x188>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a45      	ldr	r2, [pc, #276]	; (80005b4 <main+0x188>)
 80004a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004a4:	6013      	str	r3, [r2, #0]

	MX_TIM1_Init();
 80004a6:	f000 f9b9 	bl	800081c <MX_TIM1_Init>
//	MX_COMP1_Init();
//	MX_COMP2_Init();

	GPIOA->MODER |= 0b11111111111111;
 80004aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b4:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80004b8:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80004bc:	6013      	str	r3, [r2, #0]

//	COMP1->CSR = 0;
	COMP1->CSR &= ~(0b11111111 << 16);
 80004be:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <main+0x18c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a3d      	ldr	r2, [pc, #244]	; (80005b8 <main+0x18c>)
 80004c4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80004c8:	6013      	str	r3, [r2, #0]

//	COMP1->CSR |= (0b1 << 16);
//	COMP1->CSR |= (0b111 << 15);

	COMP1->CSR &= ~(1 << 8);
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <main+0x18c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a3a      	ldr	r2, [pc, #232]	; (80005b8 <main+0x18c>)
 80004d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004d4:	6013      	str	r3, [r2, #0]

	COMP1->CSR |= (0b111 << 4);
 80004d6:	4b38      	ldr	r3, [pc, #224]	; (80005b8 <main+0x18c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a37      	ldr	r2, [pc, #220]	; (80005b8 <main+0x18c>)
 80004dc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80004e0:	6013      	str	r3, [r2, #0]
	COMP1->CSR |= 0b1;
 80004e2:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <main+0x18c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a34      	ldr	r2, [pc, #208]	; (80005b8 <main+0x18c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]

	MX_TIM8_Init();
 80004ee:	f000 fafd 	bl	8000aec <MX_TIM8_Init>
	MX_ADC1_Init();
 80004f2:	f000 f8b5 	bl	8000660 <MX_ADC1_Init>
	MX_ADC2_Init();
 80004f6:	f000 f92b 	bl	8000750 <MX_ADC2_Init>
	MX_TIM2_Init();
 80004fa:	f000 fa83 	bl	8000a04 <MX_TIM2_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004fe:	2100      	movs	r1, #0
 8000500:	482e      	ldr	r0, [pc, #184]	; (80005bc <main+0x190>)
 8000502:	f003 fb35 	bl	8003b70 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	482c      	ldr	r0, [pc, #176]	; (80005bc <main+0x190>)
 800050a:	f004 fba7 	bl	8004c5c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800050e:	2104      	movs	r1, #4
 8000510:	482a      	ldr	r0, [pc, #168]	; (80005bc <main+0x190>)
 8000512:	f003 fb2d 	bl	8003b70 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000516:	2104      	movs	r1, #4
 8000518:	4828      	ldr	r0, [pc, #160]	; (80005bc <main+0x190>)
 800051a:	f004 fb9f 	bl	8004c5c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800051e:	2108      	movs	r1, #8
 8000520:	4826      	ldr	r0, [pc, #152]	; (80005bc <main+0x190>)
 8000522:	f003 fb25 	bl	8003b70 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000526:	2108      	movs	r1, #8
 8000528:	4824      	ldr	r0, [pc, #144]	; (80005bc <main+0x190>)
 800052a:	f004 fb97 	bl	8004c5c <HAL_TIMEx_PWMN_Start>

	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 800052e:	210c      	movs	r1, #12
 8000530:	4822      	ldr	r0, [pc, #136]	; (80005bc <main+0x190>)
 8000532:	f003 f9bb 	bl	80038ac <HAL_TIM_OC_Start>

	HAL_TIM_Base_Start(&htim1);
 8000536:	4821      	ldr	r0, [pc, #132]	; (80005bc <main+0x190>)
 8000538:	f003 f8f4 	bl	8003724 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 800053c:	4820      	ldr	r0, [pc, #128]	; (80005c0 <main+0x194>)
 800053e:	f003 f8f1 	bl	8003724 <HAL_TIM_Base_Start>

	uint32_t flag;

	int i;
	float p = 1000;
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <main+0x198>)
 8000544:	60bb      	str	r3, [r7, #8]
	while(1) {
		for(i = 1; i <= 6; i++) {
 8000546:	2301      	movs	r3, #1
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e02d      	b.n	80005a8 <main+0x17c>
			BLDC_phase(i, p);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	ed97 0a02 	vldr	s0, [r7, #8]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fe5f 	bl	8000218 <BLDC_phase>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <main+0x194>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2200      	movs	r2, #0
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < 2000) {
 8000562:	e018      	b.n	8000596 <main+0x16a>
//				flag = (COMP1->CSR >> 30) & 1;
				flag = COMP1->CSR & (1 << 30);
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <main+0x18c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800056c:	607b      	str	r3, [r7, #4]
				if(flag) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <main+0x15a>
					flag = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
					GPIOB->BSRR |= 1 << 3;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0x188>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <main+0x188>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	e007      	b.n	8000596 <main+0x16a>
				} else {
					flag = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
					GPIOB->BSRR |= 1 << 19;
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x188>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <main+0x188>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000594:	6193      	str	r3, [r2, #24]
			while (__HAL_TIM_GET_COUNTER(&htim2) < 2000) {
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <main+0x194>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005a0:	d3e0      	bcc.n	8000564 <main+0x138>
		for(i = 1; i <= 6; i++) {
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	ddce      	ble.n	800054c <main+0x120>
 80005ae:	e7ca      	b.n	8000546 <main+0x11a>
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	40010200 	.word	0x40010200
 80005bc:	20000148 	.word	0x20000148
 80005c0:	20000194 	.word	0x20000194
 80005c4:	447a0000 	.word	0x447a0000

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2238      	movs	r2, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 fd9a 	bl	8005110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f002 f8b2 	bl	8002754 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	2340      	movs	r3, #64	; 0x40
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000606:	2301      	movs	r3, #1
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 800060a:	2315      	movs	r3, #21
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f93c 	bl	800289c <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800062a:	f000 fad9 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fc40 	bl	8002ecc <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000652:	f000 fac5 	bl	8000be0 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2220      	movs	r2, #32
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f004 fd49 	bl	8005110 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000680:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000684:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000688:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800068c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_ADC1_Init+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ea:	f000 ff1d 	bl	8001528 <HAL_ADC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006f4:	f000 fa74 	bl	8000be0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000700:	4619      	mov	r1, r3
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000704:	f001 fcb0 	bl	8002068 <HAL_ADCEx_MultiModeConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800070e:	f000 fa67 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_ADC1_Init+0xec>)
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000716:	2306      	movs	r3, #6
 8000718:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071e:	237f      	movs	r3, #127	; 0x7f
 8000720:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000722:	2304      	movs	r3, #4
 8000724:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000730:	f001 f884 	bl	800183c <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800073a:	f000 fa51 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3730      	adds	r7, #48	; 0x30
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	0c900008 	.word	0x0c900008

08000750 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f004 fcd7 	bl	8005110 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000764:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <MX_ADC2_Init+0xc4>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_ADC2_Init+0xc0>)
 800076a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800076e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_ADC2_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_ADC2_Init+0xc0>)
 800078a:	2204      	movs	r2, #4
 800078c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000796:	2200      	movs	r2, #0
 8000798:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_ADC2_Init+0xc0>)
 800079c:	2201      	movs	r2, #1
 800079e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007cc:	f000 feac 	bl	8001528 <HAL_ADC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007d6:	f000 fa03 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC2_Init+0xc8>)
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007de:	2306      	movs	r3, #6
 80007e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e6:	237f      	movs	r3, #127	; 0x7f
 80007e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ea:	2304      	movs	r3, #4
 80007ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007f8:	f001 f820 	bl	800183c <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000802:	f000 f9ed 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000094 	.word	0x20000094
 8000814:	50000100 	.word	0x50000100
 8000818:	0c900008 	.word	0x0c900008

0800081c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09c      	sub	sp, #112	; 0x70
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2234      	movs	r2, #52	; 0x34
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fc5a 	bl	8005110 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085c:	4b67      	ldr	r3, [pc, #412]	; (80009fc <MX_TIM1_Init+0x1e0>)
 800085e:	4a68      	ldr	r2, [pc, #416]	; (8000a00 <MX_TIM1_Init+0x1e4>)
 8000860:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000862:	4b66      	ldr	r3, [pc, #408]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000868:	4b64      	ldr	r3, [pc, #400]	; (80009fc <MX_TIM1_Init+0x1e0>)
 800086a:	2220      	movs	r2, #32
 800086c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1750;
 800086e:	4b63      	ldr	r3, [pc, #396]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000870:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8000874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b61      	ldr	r3, [pc, #388]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087c:	4b5f      	ldr	r3, [pc, #380]	; (80009fc <MX_TIM1_Init+0x1e0>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000888:	485c      	ldr	r0, [pc, #368]	; (80009fc <MX_TIM1_Init+0x1e0>)
 800088a:	f002 fef3 	bl	8003674 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000894:	f000 f9a4 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008a2:	4619      	mov	r1, r3
 80008a4:	4855      	ldr	r0, [pc, #340]	; (80009fc <MX_TIM1_Init+0x1e0>)
 80008a6:	f003 fc97 	bl	80041d8 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008b0:	f000 f996 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b4:	4851      	ldr	r0, [pc, #324]	; (80009fc <MX_TIM1_Init+0x1e0>)
 80008b6:	f003 f8f9 	bl	8003aac <HAL_TIM_PWM_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008c0:	f000 f98e 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008c4:	484d      	ldr	r0, [pc, #308]	; (80009fc <MX_TIM1_Init+0x1e0>)
 80008c6:	f002 ff8f 	bl	80037e8 <HAL_TIM_OC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80008d0:	f000 f986 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80008d4:	2370      	movs	r3, #112	; 0x70
 80008d6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008e4:	4619      	mov	r1, r3
 80008e6:	4845      	ldr	r0, [pc, #276]	; (80009fc <MX_TIM1_Init+0x1e0>)
 80008e8:	f004 fa6c 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80008f2:	f000 f975 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2360      	movs	r3, #96	; 0x60
 80008f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fe:	2300      	movs	r3, #0
 8000900:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000902:	2300      	movs	r3, #0
 8000904:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000912:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	4838      	ldr	r0, [pc, #224]	; (80009fc <MX_TIM1_Init+0x1e0>)
 800091c:	f003 fb48 	bl	8003fb0 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000926:	f000 f95b 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800092e:	2204      	movs	r2, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4832      	ldr	r0, [pc, #200]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000934:	f003 fb3c 	bl	8003fb0 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800093e:	f000 f94f 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000946:	2208      	movs	r2, #8
 8000948:	4619      	mov	r1, r3
 800094a:	482c      	ldr	r0, [pc, #176]	; (80009fc <MX_TIM1_Init+0x1e0>)
 800094c:	f003 fb30 	bl	8003fb0 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000956:	f000 f943 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800095a:	2330      	movs	r3, #48	; 0x30
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800095e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000962:	220c      	movs	r2, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4825      	ldr	r0, [pc, #148]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000968:	f003 faa8 	bl	8003ebc <HAL_TIM_OC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000972:	f000 f935 	bl	8000be0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_TIM1_Init+0x1e0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000984:	61da      	str	r2, [r3, #28]
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000986:	2310      	movs	r3, #16
 8000988:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 800098a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098e:	2210      	movs	r2, #16
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <MX_TIM1_Init+0x1e0>)
 8000994:	f003 fa92 	bl	8003ebc <HAL_TIM_OC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 800099e:	f000 f91f 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 80009ae:	2332      	movs	r3, #50	; 0x32
 80009b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <MX_TIM1_Init+0x1e0>)
 80009e0:	f004 fa72 	bl	8004ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x1d2>
  {
    Error_Handler();
 80009ea:	f000 f8f9 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <MX_TIM1_Init+0x1e0>)
 80009f0:	f000 fa68 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	; 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000148 	.word	0x20000148
 8000a00:	40012c00 	.word	0x40012c00

08000a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a40:	22aa      	movs	r2, #170	; 0xaa
 8000a42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a60:	f002 fe08 	bl	8003674 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f8b9 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a7c:	f003 fbac 	bl	80041d8 <HAL_TIM_ConfigClockSource>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a86:	f000 f8ab 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000a8c:	f003 f80e 	bl	8003aac <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a96:	f000 f8a3 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000aaa:	f004 f98b 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ab4:	f000 f894 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2360      	movs	r3, #96	; 0x60
 8000aba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_TIM2_Init+0xe4>)
 8000ad0:	f003 fa6e 	bl	8003fb0 <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ada:	f000 f881 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3738      	adds	r7, #56	; 0x38
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000194 	.word	0x20000194

08000aec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b092      	sub	sp, #72	; 0x48
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	2224      	movs	r2, #36	; 0x24
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fb08 	bl	8005110 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
 8000b1a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <MX_TIM8_Init+0xf0>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b60:	2301      	movs	r3, #1
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b74:	f003 f8fc 	bl	8003d70 <HAL_TIM_Encoder_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000b7e:	f000 f82f 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	4619      	mov	r1, r3
 8000b94:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000b96:	f004 f915 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8000ba0:	f000 f81e 	bl	8000be0 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_TIM8_Init+0xec>)
 8000bc2:	f004 fa21 	bl	8005008 <HAL_TIMEx_ConfigEncoderIndex>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8000bcc:	f000 f808 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3748      	adds	r7, #72	; 0x48
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001e0 	.word	0x200001e0
 8000bdc:	40013400 	.word	0x40013400

08000be0 <Error_Handler>:

void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6593      	str	r3, [r2, #88]	; 0x58
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b09c      	sub	sp, #112	; 0x70
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	2244      	movs	r2, #68	; 0x44
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f004 fa5b 	bl	8005110 <memset>
  if(hadc->Instance==ADC1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c62:	d13e      	bne.n	8000ce2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c6e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 fb0d 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c80:	f7ff ffae 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c84:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <HAL_ADC_MspInit+0x13c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a39      	ldr	r2, [pc, #228]	; (8000d70 <HAL_ADC_MspInit+0x13c>)
 8000c8c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <HAL_ADC_MspInit+0x13c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d10b      	bne.n	8000cae <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c96:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a36      	ldr	r2, [pc, #216]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a30      	ldr	r2, [pc, #192]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f001 fbb8 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ce0:	e042      	b.n	8000d68 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a24      	ldr	r2, [pc, #144]	; (8000d78 <HAL_ADC_MspInit+0x144>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d13d      	bne.n	8000d68 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cf2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fac9 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000d08:	f7ff ff6a 	bl	8000be0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_ADC_MspInit+0x13c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_ADC_MspInit+0x13c>)
 8000d14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_ADC_MspInit+0x13c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10b      	bne.n	8000d36 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_ADC_MspInit+0x140>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d52:	2303      	movs	r3, #3
 8000d54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f001 fb74 	bl	8002450 <HAL_GPIO_Init>
}
 8000d68:	bf00      	nop
 8000d6a:	3770      	adds	r7, #112	; 0x70
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000022c 	.word	0x2000022c
 8000d74:	40021000 	.word	0x40021000
 8000d78:	50000100 	.word	0x50000100

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_TIM_Base_MspInit+0x5c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10c      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da6:	e010      	b.n	8000dca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d156      	bne.n	8000eb0 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB6     ------> TIM8_ETR
    PB8-BOOT0     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f001 faf1 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e6e:	2340      	movs	r3, #64	; 0x40
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8000e7e:	2306      	movs	r3, #6
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e8a:	f001 fae1 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8000ea0:	230a      	movs	r3, #10
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000eac:	f001 fad0 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40013400 	.word	0x40013400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <HAL_TIM_MspPostInit+0xd8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d155      	bne.n	8000f92 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <HAL_TIM_MspPostInit+0xdc>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f3e:	2306      	movs	r3, #6
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <HAL_TIM_MspPostInit+0xe0>)
 8000f4a:	f001 fa81 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f4e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f60:	2306      	movs	r3, #6
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f001 fa6f 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f72:	2301      	movs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f82:	2306      	movs	r3, #6
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <HAL_TIM_MspPostInit+0xe4>)
 8000f8e:	f001 fa5f 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48001400 	.word	0x48001400
 8000fa8:	48000400 	.word	0x48000400

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f89e 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <COMP1_2_3_IRQHandler+0x14>)
 8001006:	f001 f8f9 	bl	80021fc <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <COMP1_2_3_IRQHandler+0x18>)
 800100c:	f001 f8f6 	bl	80021fc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000100 	.word	0x20000100
 8001018:	20000124 	.word	0x20000124

0800101c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001042:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106a:	f7ff ffd7 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f004 f82b 	bl	80050c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001072:	f7ff f9db 	bl	800042c <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   r0, =_estack
 8001078:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001084:	08005150 	.word	0x08005150
  ldr r2, =_sbss
 8001088:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800108c:	20000234 	.word	0x20000234

08001090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_2_IRQHandler>

08001092 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f001 f9a5 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a2:	200f      	movs	r0, #15
 80010a4:	f000 f80e 	bl	80010c4 <HAL_InitTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	e001      	b.n	80010b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b4:	f7ff fd9a 	bl	8000bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b8:	79fb      	ldrb	r3, [r7, #7]

}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_InitTick+0x68>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d022      	beq.n	800111e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_InitTick+0x6c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_InitTick+0x68>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f9a2 	bl	8002436 <HAL_SYSTICK_Config>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10f      	bne.n	8001118 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	d809      	bhi.n	8001112 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fe:	2200      	movs	r2, #0
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	f001 f97c 	bl	8002402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_InitTick+0x70>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e007      	b.n	8001122 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e004      	b.n	8001122 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e001      	b.n	8001122 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000008 	.word	0x20000008
 8001130:	20000000 	.word	0x20000000
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x1c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x20>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4413      	add	r3, r2
 8001146:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x1c>)
 8001148:	6013      	str	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	20000230 	.word	0x20000230
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000230 	.word	0x20000230

08001174 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3360      	adds	r3, #96	; 0x60
 80011ee:	461a      	mov	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <LL_ADC_SetOffset+0x44>)
 80011fe:	4013      	ands	r3, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	4313      	orrs	r3, r2
 800120c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	03fff000 	.word	0x03fff000

08001224 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3360      	adds	r3, #96	; 0x60
 8001232:	461a      	mov	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3360      	adds	r3, #96	; 0x60
 8001260:	461a      	mov	r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	431a      	orrs	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001286:	b480      	push	{r7}
 8001288:	b087      	sub	sp, #28
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3360      	adds	r3, #96	; 0x60
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3360      	adds	r3, #96	; 0x60
 80012cc:	461a      	mov	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	615a      	str	r2, [r3, #20]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	211f      	movs	r1, #31
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0e9b      	lsrs	r3, r3, #26
 8001350:	f003 011f 	and.w	r1, r3, #31
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	431a      	orrs	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3314      	adds	r3, #20
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0e5b      	lsrs	r3, r3, #25
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	0d1b      	lsrs	r3, r3, #20
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	2107      	movs	r1, #7
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	401a      	ands	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	0d1b      	lsrs	r3, r3, #20
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d10a      	bne.n	80013f2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e8:	431a      	orrs	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80013f0:	e00a      	b.n	8001408 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fe:	43db      	mvns	r3, r3
 8001400:	401a      	ands	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	407f0000 	.word	0x407f0000

08001418 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6093      	str	r3, [r2, #8]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800144c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001450:	d101      	bne.n	8001456 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001474:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001478:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014a0:	d101      	bne.n	80014a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <LL_ADC_IsEnabled+0x18>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <LL_ADC_IsEnabled+0x1a>
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d101      	bne.n	80014f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b08      	cmp	r3, #8
 8001512:	d101      	bne.n	8001518 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e177      	b.n	8001832 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fb6f 	bl	8000c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff67 	bl	800143c <LL_ADC_IsDeepPowerDownEnabled>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff4d 	bl	8001418 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff82 	bl	800148c <LL_ADC_IsInternalRegulatorEnabled>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d115      	bne.n	80015ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff66 	bl	8001464 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001598:	4b9c      	ldr	r3, [pc, #624]	; (800180c <HAL_ADC_Init+0x2e4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	4a9c      	ldr	r2, [pc, #624]	; (8001810 <HAL_ADC_Init+0x2e8>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	3301      	adds	r3, #1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff64 	bl	800148c <LL_ADC_IsInternalRegulatorEnabled>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10d      	bne.n	80015e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff75 	bl	80014da <LL_ADC_REG_IsConversionOngoing>
 80015f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8110 	bne.w	8001820 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 810c 	bne.w	8001820 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001610:	f043 0202 	orr.w	r2, r3, #2
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff49 	bl	80014b4 <LL_ADC_IsEnabled>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d111      	bne.n	800164c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001628:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800162c:	f7ff ff42 	bl	80014b4 <LL_ADC_IsEnabled>
 8001630:	4604      	mov	r4, r0
 8001632:	4878      	ldr	r0, [pc, #480]	; (8001814 <HAL_ADC_Init+0x2ec>)
 8001634:	f7ff ff3e 	bl	80014b4 <LL_ADC_IsEnabled>
 8001638:	4603      	mov	r3, r0
 800163a:	4323      	orrs	r3, r4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4619      	mov	r1, r3
 8001646:	4874      	ldr	r0, [pc, #464]	; (8001818 <HAL_ADC_Init+0x2f0>)
 8001648:	f7ff fd94 	bl	8001174 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7f5b      	ldrb	r3, [r3, #29]
 8001650:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001656:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800165c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001662:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800166a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001676:	2b01      	cmp	r3, #1
 8001678:	d106      	bne.n	8001688 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	3b01      	subs	r3, #1
 8001680:	045b      	lsls	r3, r3, #17
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b5c      	ldr	r3, [pc, #368]	; (800181c <HAL_ADC_Init+0x2f4>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff01 	bl	80014da <LL_ADC_REG_IsConversionOngoing>
 80016d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff0e 	bl	8001500 <LL_ADC_INJ_IsConversionOngoing>
 80016e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d16d      	bne.n	80017c8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d16a      	bne.n	80017c8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800170e:	f023 0302 	bic.w	r3, r3, #2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	430b      	orrs	r3, r1
 800171a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d017      	beq.n	8001754 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001732:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800173c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6911      	ldr	r1, [r2, #16]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	430b      	orrs	r3, r1
 800174e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001752:	e013      	b.n	800177c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001762:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001778:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001782:	2b01      	cmp	r3, #1
 8001784:	d118      	bne.n	80017b8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800179c:	4311      	orrs	r1, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017a2:	4311      	orrs	r1, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017a8:	430a      	orrs	r2, r1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	e007      	b.n	80017c8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10c      	bne.n	80017ea <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f023 010f 	bic.w	r1, r3, #15
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
 80017e8:	e007      	b.n	80017fa <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 020f 	bic.w	r2, r2, #15
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	65da      	str	r2, [r3, #92]	; 0x5c
 800180a:	e011      	b.n	8001830 <HAL_ADC_Init+0x308>
 800180c:	20000000 	.word	0x20000000
 8001810:	053e2d63 	.word	0x053e2d63
 8001814:	50000100 	.word	0x50000100
 8001818:	50000300 	.word	0x50000300
 800181c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001830:	7ffb      	ldrb	r3, [r7, #31]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop

0800183c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0b6      	sub	sp, #216	; 0xd8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADC_ConfigChannel+0x22>
 800185a:	2302      	movs	r3, #2
 800185c:	e3c8      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x7b4>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fe35 	bl	80014da <LL_ADC_REG_IsConversionOngoing>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 83ad 	bne.w	8001fd2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	f7ff fd47 	bl	8001318 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe23 	bl	80014da <LL_ADC_REG_IsConversionOngoing>
 8001894:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe2f 	bl	8001500 <LL_ADC_INJ_IsConversionOngoing>
 80018a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 81d9 	bne.w	8001c62 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 81d4 	bne.w	8001c62 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018c2:	d10f      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff fd4e 	bl	8001370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fd08 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>
 80018e2:	e00e      	b.n	8001902 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f7ff fd3d 	bl	8001370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fcf8 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d022      	beq.n	800196a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6919      	ldr	r1, [r3, #16]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001934:	f7ff fc52 	bl	80011dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6919      	ldr	r1, [r3, #16]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	461a      	mov	r2, r3
 8001946:	f7ff fc9e 	bl	8001286 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6919      	ldr	r1, [r3, #16]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	7f1b      	ldrb	r3, [r3, #28]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x124>
 800195a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800195e:	e000      	b.n	8001962 <HAL_ADC_ConfigChannel+0x126>
 8001960:	2300      	movs	r3, #0
 8001962:	461a      	mov	r2, r3
 8001964:	f7ff fcaa 	bl	80012bc <LL_ADC_SetOffsetSaturation>
 8001968:	e17b      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fc57 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x15a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc4c 	bl	8001224 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	0e9b      	lsrs	r3, r3, #26
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	e01e      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x198>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fc41 	bl	8001224 <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	e004      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80019c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1b0>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	e018      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1e2>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001a10:	2320      	movs	r3, #32
 8001a12:	e004      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d106      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fc10 	bl	8001250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fbf4 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10a      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x220>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fbe9 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	f003 021f 	and.w	r2, r3, #31
 8001a5a:	e01e      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x25e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fbde 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	e004      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x276>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0e9b      	lsrs	r3, r3, #26
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	e018      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x2a8>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ace:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	e004      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fbad 	bl	8001250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb91 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x2e6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2102      	movs	r1, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb86 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	e01e      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x324>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2102      	movs	r1, #2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fb7b 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001b50:	2320      	movs	r3, #32
 8001b52:	e004      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x33c>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	e016      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x36a>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e004      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d106      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fb4c 	bl	8001250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fb30 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10a      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x3a8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fb25 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	f003 021f 	and.w	r2, r3, #31
 8001be2:	e017      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x3d8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2103      	movs	r1, #3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fb1a 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bfe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001c06:	2320      	movs	r3, #32
 8001c08:	e003      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x3f0>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	e011      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x414>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e003      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff faf7 	bl	8001250 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fc24 	bl	80014b4 <LL_ADC_IsEnabled>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 8140 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	461a      	mov	r2, r3
 8001c82:	f7ff fba1 	bl	80013c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	4a8f      	ldr	r2, [pc, #572]	; (8001ec8 <HAL_ADC_ConfigChannel+0x68c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	f040 8131 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10b      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x47e>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	bf94      	ite	ls
 8001cb2:	2301      	movls	r3, #1
 8001cb4:	2300      	movhi	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	e019      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4b2>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e003      	b.n	8001cde <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	bf94      	ite	ls
 8001ce8:	2301      	movls	r3, #1
 8001cea:	2300      	movhi	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d079      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d107      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x4d2>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	3301      	adds	r3, #1
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0c:	e015      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x4fe>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e003      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	069b      	lsls	r3, r3, #26
 8001d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x51e>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0e9b      	lsrs	r3, r3, #26
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	e017      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x54e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	ea42 0103 	orr.w	r1, r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10a      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x574>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	3301      	adds	r3, #1
 8001da2:	f003 021f 	and.w	r2, r3, #31
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	051b      	lsls	r3, r3, #20
 8001dae:	e018      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x5a6>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e003      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 021f 	and.w	r2, r3, #31
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de2:	430b      	orrs	r3, r1
 8001de4:	e081      	b.n	8001eea <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d107      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x5c6>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	3301      	adds	r3, #1
 8001dfa:	069b      	lsls	r3, r3, #26
 8001dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e00:	e015      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x5f2>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e003      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	069b      	lsls	r3, r3, #26
 8001e2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x612>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	e017      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x642>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	ea42 0103 	orr.w	r1, r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x66e>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 021f 	and.w	r2, r3, #31
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b1e      	subs	r3, #30
 8001ea2:	051b      	lsls	r3, r3, #20
 8001ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	e01e      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x6ac>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	613b      	str	r3, [r7, #16]
  return result;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d104      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e006      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x698>
 8001ec6:	bf00      	nop
 8001ec8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 021f 	and.w	r2, r3, #31
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	051b      	lsls	r3, r3, #20
 8001ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	6892      	ldr	r2, [r2, #8]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7ff fa3e 	bl	8001370 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d071      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f00:	483e      	ldr	r0, [pc, #248]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001f02:	f7ff f95d 	bl	80011c0 <LL_ADC_GetCommonPathInternalCh>
 8001f06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d004      	beq.n	8001f1e <HAL_ADC_ConfigChannel+0x6e2>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d127      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d121      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f32:	d157      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	482f      	ldr	r0, [pc, #188]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001f40:	f7ff f92b 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <HAL_ADC_ConfigChannel+0x7d0>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f5e:	e002      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f9      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f6c:	e03a      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a27      	ldr	r2, [pc, #156]	; (8002010 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d113      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x764>
 8001f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a22      	ldr	r2, [pc, #136]	; (8002014 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d02a      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f96:	4619      	mov	r1, r3
 8001f98:	4818      	ldr	r0, [pc, #96]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001f9a:	f7ff f8fe 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f9e:	e021      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a16      	ldr	r2, [pc, #88]	; (8002014 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d011      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480c      	ldr	r0, [pc, #48]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001fcc:	f7ff f8e5 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
 8001fd0:	e008      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	37d8      	adds	r7, #216	; 0xd8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	80080000 	.word	0x80080000
 8001ffc:	50000300 	.word	0x50000300
 8002000:	c3210000 	.word	0xc3210000
 8002004:	90c00010 	.word	0x90c00010
 8002008:	20000000 	.word	0x20000000
 800200c:	053e2d63 	.word	0x053e2d63
 8002010:	c7520000 	.word	0xc7520000
 8002014:	50000100 	.word	0x50000100
 8002018:	cb840000 	.word	0xcb840000

0800201c <LL_ADC_IsEnabled>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <LL_ADC_IsEnabled+0x18>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <LL_ADC_IsEnabled+0x1a>
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_ADC_REG_IsConversionOngoing>:
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b04      	cmp	r3, #4
 8002054:	d101      	bne.n	800205a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b0a1      	sub	sp, #132	; 0x84
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002082:	2302      	movs	r3, #2
 8002084:	e08b      	b.n	800219e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800208e:	2300      	movs	r3, #0
 8002090:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002092:	2300      	movs	r3, #0
 8002094:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209e:	d102      	bne.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020a0:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	e001      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10b      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e06a      	b.n	800219e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ffb9 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 80020d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ffb3 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d14c      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d149      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80020ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d028      	beq.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002106:	035b      	lsls	r3, r3, #13
 8002108:	430b      	orrs	r3, r1
 800210a:	431a      	orrs	r2, r3
 800210c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002110:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002114:	f7ff ff82 	bl	800201c <LL_ADC_IsEnabled>
 8002118:	4604      	mov	r4, r0
 800211a:	4823      	ldr	r0, [pc, #140]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800211c:	f7ff ff7e 	bl	800201c <LL_ADC_IsEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	4323      	orrs	r3, r4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d133      	bne.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002130:	f023 030f 	bic.w	r3, r3, #15
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	6811      	ldr	r1, [r2, #0]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	6892      	ldr	r2, [r2, #8]
 800213c:	430a      	orrs	r2, r1
 800213e:	431a      	orrs	r2, r3
 8002140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002142:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002144:	e024      	b.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002150:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002152:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002156:	f7ff ff61 	bl	800201c <LL_ADC_IsEnabled>
 800215a:	4604      	mov	r4, r0
 800215c:	4812      	ldr	r0, [pc, #72]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800215e:	f7ff ff5d 	bl	800201c <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	4323      	orrs	r3, r4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d112      	bne.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800216a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002172:	f023 030f 	bic.w	r3, r3, #15
 8002176:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002178:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800217a:	e009      	b.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800218e:	e000      	b.n	8002192 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002190:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800219a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3784      	adds	r7, #132	; 0x84
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	50000100 	.word	0x50000100
 80021ac:	50000300 	.word	0x50000300

080021b0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4013      	ands	r3, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d101      	bne.n	80021ca <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40010400 	.word	0x40010400

080021dc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6153      	str	r3, [r2, #20]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_COMP_IRQHandler+0x6c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d012      	beq.n	8002234 <HAL_COMP_IRQHandler+0x38>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <HAL_COMP_IRQHandler+0x70>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00a      	beq.n	800222e <HAL_COMP_IRQHandler+0x32>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <HAL_COMP_IRQHandler+0x74>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d102      	bne.n	8002228 <HAL_COMP_IRQHandler+0x2c>
 8002222:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002226:	e007      	b.n	8002238 <HAL_COMP_IRQHandler+0x3c>
 8002228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222c:	e004      	b.n	8002238 <HAL_COMP_IRQHandler+0x3c>
 800222e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002232:	e001      	b.n	8002238 <HAL_COMP_IRQHandler+0x3c>
 8002234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002238:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800223e:	68b8      	ldr	r0, [r7, #8]
 8002240:	f7ff ffb6 	bl	80021b0 <LL_EXTI_IsActiveFlag_0_31>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800224a:	2301      	movs	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if(tmp_comp_exti_flag_set != 0UL)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_COMP_IRQHandler+0x64>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8002254:	68b8      	ldr	r0, [r7, #8]
 8002256:	f7ff ffc1 	bl	80021dc <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f80a 	bl	8002274 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40010200 	.word	0x40010200
 800226c:	40010204 	.word	0x40010204
 8002270:	40010208 	.word	0x40010208

08002274 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff47 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff5e 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff90 	bl	8002340 <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5f 	bl	80022ec <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffb2 	bl	80023a8 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800245e:	e15a      	b.n	8002716 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	4013      	ands	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 814c 	beq.w	8002710 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d005      	beq.n	8002490 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800248c:	2b02      	cmp	r3, #2
 800248e:	d130      	bne.n	80024f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c6:	2201      	movs	r2, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 0201 	and.w	r2, r3, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d017      	beq.n	800252e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d123      	bne.n	8002582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	6939      	ldr	r1, [r7, #16]
 800257e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80a6 	beq.w	8002710 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c4:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <HAL_GPIO_Init+0x2e4>)
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <HAL_GPIO_Init+0x2e4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6613      	str	r3, [r2, #96]	; 0x60
 80025d0:	4b58      	ldr	r3, [pc, #352]	; (8002734 <HAL_GPIO_Init+0x2e4>)
 80025d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025dc:	4a56      	ldr	r2, [pc, #344]	; (8002738 <HAL_GPIO_Init+0x2e8>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002606:	d01f      	beq.n	8002648 <HAL_GPIO_Init+0x1f8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a4c      	ldr	r2, [pc, #304]	; (800273c <HAL_GPIO_Init+0x2ec>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d019      	beq.n	8002644 <HAL_GPIO_Init+0x1f4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a4b      	ldr	r2, [pc, #300]	; (8002740 <HAL_GPIO_Init+0x2f0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_GPIO_Init+0x1f0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <HAL_GPIO_Init+0x2f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00d      	beq.n	800263c <HAL_GPIO_Init+0x1ec>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a49      	ldr	r2, [pc, #292]	; (8002748 <HAL_GPIO_Init+0x2f8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <HAL_GPIO_Init+0x1e8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a48      	ldr	r2, [pc, #288]	; (800274c <HAL_GPIO_Init+0x2fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_GPIO_Init+0x1e4>
 8002630:	2305      	movs	r3, #5
 8002632:	e00a      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002634:	2306      	movs	r3, #6
 8002636:	e008      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002638:	2304      	movs	r3, #4
 800263a:	e006      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 800263c:	2303      	movs	r3, #3
 800263e:	e004      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002640:	2302      	movs	r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002648:	2300      	movs	r3, #0
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265a:	4937      	ldr	r1, [pc, #220]	; (8002738 <HAL_GPIO_Init+0x2e8>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_GPIO_Init+0x300>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800268c:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_GPIO_Init+0x300>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_GPIO_Init+0x300>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b6:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e0:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_GPIO_Init+0x300>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f ae9d 	bne.w	8002460 <HAL_GPIO_Init+0x10>
  }
}
 8002726:	bf00      	nop
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000
 800273c:	48000400 	.word	0x48000400
 8002740:	48000800 	.word	0x48000800
 8002744:	48000c00 	.word	0x48000c00
 8002748:	48001000 	.word	0x48001000
 800274c:	48001400 	.word	0x48001400
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d141      	bne.n	80027e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002762:	4b4b      	ldr	r3, [pc, #300]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d131      	bne.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002776:	4a46      	ldr	r2, [pc, #280]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800277c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002788:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2232      	movs	r2, #50	; 0x32
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	4a3f      	ldr	r2, [pc, #252]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a6:	e002      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d102      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f2      	bne.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c2:	4b33      	ldr	r3, [pc, #204]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d158      	bne.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e057      	b.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027e4:	e04d      	b.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ec:	d141      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	d131      	bne.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002814:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2232      	movs	r2, #50	; 0x32
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9b      	lsrs	r3, r3, #18
 800282e:	3301      	adds	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002832:	e002      	b.n	800283a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3b01      	subs	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002846:	d102      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f2      	bne.n	8002834 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285a:	d112      	bne.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e011      	b.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002870:	e007      	b.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287a:	4a05      	ldr	r2, [pc, #20]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002880:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40007000 	.word	0x40007000
 8002894:	20000000 	.word	0x20000000
 8002898:	431bde83 	.word	0x431bde83

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e306      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d075      	beq.n	80029a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4b97      	ldr	r3, [pc, #604]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c4:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d102      	bne.n	80028da <HAL_RCC_OscConfig+0x3e>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_OscConfig+0x44>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d10b      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	4b8d      	ldr	r3, [pc, #564]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d05b      	beq.n	80029a4 <HAL_RCC_OscConfig+0x108>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d157      	bne.n	80029a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2e1      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x74>
 8002902:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a84      	ldr	r2, [pc, #528]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e01d      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x98>
 800291a:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7e      	ldr	r2, [pc, #504]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7b      	ldr	r2, [pc, #492]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002934:	4b78      	ldr	r3, [pc, #480]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a77      	ldr	r2, [pc, #476]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b75      	ldr	r3, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a74      	ldr	r2, [pc, #464]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fc02 	bl	800115c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fbfe 	bl	800115c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e2a6      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296e:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0xc0>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fbee 	bl	800115c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe fbea 	bl	800115c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e292      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002996:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0xe8>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d075      	beq.n	8002a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029bc:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_OscConfig+0x136>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_OscConfig+0x13c>
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d11f      	bne.n	8002a18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_OscConfig+0x154>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e265      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	4946      	ldr	r1, [pc, #280]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a04:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <HAL_RCC_OscConfig+0x280>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fb5b 	bl	80010c4 <HAL_InitTick>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d043      	beq.n	8002a9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e251      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d023      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fb96 	bl	800115c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe fb92 	bl	800115c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e23a      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	492d      	ldr	r1, [pc, #180]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e01a      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fb72 	bl	800115c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fb6e 	bl	800115c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e216      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1e0>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d041      	beq.n	8002b2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01c      	beq.n	8002aec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fb4b 	bl	800115c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe fb47 	bl	800115c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1ef      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ef      	beq.n	8002aca <HAL_RCC_OscConfig+0x22e>
 8002aea:	e020      	b.n	8002b2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fb2e 	bl	800115c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b02:	e00d      	b.n	8002b20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b04:	f7fe fb2a 	bl	800115c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d906      	bls.n	8002b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1d2      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ea      	bne.n	8002b04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80a6 	beq.w	8002c88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b40:	4b84      	ldr	r3, [pc, #528]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2b4>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x2b6>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a7e      	ldr	r2, [pc, #504]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
 8002b62:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b72:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fae7 	bl	800115c <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe fae3 	bl	800115c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e18b      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x4bc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_RCC_OscConfig+0x32e>
 8002bb8:	4b66      	ldr	r3, [pc, #408]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	4a65      	ldr	r2, [pc, #404]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc8:	e024      	b.n	8002c14 <HAL_RCC_OscConfig+0x378>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d110      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x358>
 8002bd2:	4b60      	ldr	r3, [pc, #384]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a5e      	ldr	r2, [pc, #376]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be2:	4b5c      	ldr	r3, [pc, #368]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	4a5a      	ldr	r2, [pc, #360]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCC_OscConfig+0x378>
 8002bf4:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d016      	beq.n	8002c4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fa9e 	bl	800115c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe fa9a 	bl	800115c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e140      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ed      	beq.n	8002c24 <HAL_RCC_OscConfig+0x388>
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fa87 	bl	800115c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe fa83 	bl	800115c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e129      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c68:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ed      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7c:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe fa56 	bl	800115c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cb4:	f7fe fa52 	bl	800115c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0fa      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x418>
 8002cd4:	e01b      	b.n	8002d0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fa39 	bl	800115c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cee:	f7fe fa35 	bl	800115c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0dd      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ef      	bne.n	8002cee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80d1 	beq.w	8002eba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	f000 808b 	beq.w	8002e3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d15e      	bne.n	8002dec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <HAL_RCC_OscConfig+0x4b8>)
 8002d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fa0f 	bl	800115c <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	e00c      	b.n	8002d5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe fa0b 	bl	800115c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d905      	bls.n	8002d5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0b3      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ec      	bne.n	8002d42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d68:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <HAL_RCC_OscConfig+0x62c>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6a11      	ldr	r1, [r2, #32]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d82:	0212      	lsls	r2, r2, #8
 8002d84:	4311      	orrs	r1, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0552      	lsls	r2, r2, #21
 8002d90:	4311      	orrs	r1, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d96:	0852      	lsrs	r2, r2, #1
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0652      	lsls	r2, r2, #25
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002da2:	06d2      	lsls	r2, r2, #27
 8002da4:	430a      	orrs	r2, r1
 8002da6:	4947      	ldr	r1, [pc, #284]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a44      	ldr	r2, [pc, #272]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a41      	ldr	r2, [pc, #260]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f9ca 	bl	800115c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe f9c6 	bl	800115c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e06e      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x530>
 8002dea:	e066      	b.n	8002eba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002df8:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a2e      	ldr	r2, [pc, #184]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f9a2 	bl	800115c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f99e 	bl	800115c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e046      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x580>
 8002e3a:	e03e      	b.n	8002eba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e039      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x628>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d12c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	3b01      	subs	r3, #1
 8002e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d123      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11b      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d113      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	019f800c 	.word	0x019f800c

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e11e      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b91      	ldr	r3, [pc, #580]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d910      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b8e      	ldr	r3, [pc, #568]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 020f 	bic.w	r2, r3, #15
 8002efa:	498c      	ldr	r1, [pc, #560]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b8a      	ldr	r3, [pc, #552]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e106      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d073      	beq.n	8003008 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d129      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f28:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0f4      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f38:	f000 f966 	bl	8003208 <RCC_GetSysClockFreqFromPLLSource>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <HAL_RCC_ClockConfig+0x268>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d93f      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d033      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d12f      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f66:	4b72      	ldr	r3, [pc, #456]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6e:	4a70      	ldr	r2, [pc, #448]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e024      	b.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0c6      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0be      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fa4:	f000 f8ce 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4a61      	ldr	r2, [pc, #388]	; (8003134 <HAL_RCC_ClockConfig+0x268>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d909      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fba:	4a5d      	ldr	r2, [pc, #372]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc6:	4b5a      	ldr	r3, [pc, #360]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4957      	ldr	r1, [pc, #348]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd8:	f7fe f8c0 	bl	800115c <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7fe f8bc 	bl	800115c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e095      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 020c 	and.w	r2, r3, #12
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	429a      	cmp	r2, r3
 8003006:	d1eb      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d023      	beq.n	800305c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a42      	ldr	r2, [pc, #264]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800302a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003038:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003040:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4936      	ldr	r1, [pc, #216]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
 800305a:	e008      	b.n	800306e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d105      	bne.n	800306e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a32      	ldr	r2, [pc, #200]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 8003068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800306c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d21d      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 020f 	bic.w	r2, r3, #15
 8003084:	4929      	ldr	r1, [pc, #164]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800308c:	f7fe f866 	bl	800115c <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe f862 	bl	800115c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e03b      	b.n	8003122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_RCC_ClockConfig+0x260>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1ed      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4917      	ldr	r1, [pc, #92]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490f      	ldr	r1, [pc, #60]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f6:	f000 f825 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCC_ClockConfig+0x264>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490c      	ldr	r1, [pc, #48]	; (8003138 <HAL_RCC_ClockConfig+0x26c>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x270>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x274>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd ffd2 	bl	80010c4 <HAL_InitTick>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
 8003134:	04c4b400 	.word	0x04c4b400
 8003138:	08005138 	.word	0x08005138
 800313c:	20000000 	.word	0x20000000
 8003140:	20000004 	.word	0x20000004

08003144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800314a:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d102      	bne.n	800315c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	e047      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d102      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003168:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e03e      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d136      	bne.n	80031e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3301      	adds	r3, #1
 8003190:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d10c      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003198:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a2:	68d2      	ldr	r2, [r2, #12]
 80031a4:	0a12      	lsrs	r2, r2, #8
 80031a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	617b      	str	r3, [r7, #20]
      break;
 80031b0:	e00c      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	0a12      	lsrs	r2, r2, #8
 80031c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
      break;
 80031ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0e5b      	lsrs	r3, r3, #25
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e001      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031ec:	693b      	ldr	r3, [r7, #16]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	00f42400 	.word	0x00f42400
 8003204:	007a1200 	.word	0x007a1200

08003208 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d10c      	bne.n	8003246 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800322c:	4a17      	ldr	r2, [pc, #92]	; (800328c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003236:	68d2      	ldr	r2, [r2, #12]
 8003238:	0a12      	lsrs	r2, r2, #8
 800323a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	617b      	str	r3, [r7, #20]
    break;
 8003244:	e00c      	b.n	8003260 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	0a12      	lsrs	r2, r2, #8
 8003254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
    break;
 800325e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0e5b      	lsrs	r3, r3, #25
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800327a:	687b      	ldr	r3, [r7, #4]
}
 800327c:	4618      	mov	r0, r3
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40021000 	.word	0x40021000
 800328c:	007a1200 	.word	0x007a1200
 8003290:	00f42400 	.word	0x00f42400

08003294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800329c:	2300      	movs	r3, #0
 800329e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032a0:	2300      	movs	r3, #0
 80032a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8098 	beq.w	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b6:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	4a3f      	ldr	r2, [pc, #252]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
 80032ce:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032da:	2301      	movs	r3, #1
 80032dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032de:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a39      	ldr	r2, [pc, #228]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ea:	f7fd ff37 	bl	800115c <HAL_GetTick>
 80032ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f0:	e009      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fd ff33 	bl	800115c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d902      	bls.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	74fb      	strb	r3, [r7, #19]
        break;
 8003304:	e005      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003306:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ef      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003312:	7cfb      	ldrb	r3, [r7, #19]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d159      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01e      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	429a      	cmp	r2, r3
 8003332:	d019      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fd fef3 	bl	800115c <HAL_GetTick>
 8003376:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003378:	e00b      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd feef 	bl	800115c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d902      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	74fb      	strb	r3, [r7, #19]
            break;
 8003390:	e006      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ec      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033bc:	e008      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
 80033c2:	e005      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d0:	7c7b      	ldrb	r3, [r7, #17]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4ba6      	ldr	r3, [pc, #664]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	4aa5      	ldr	r2, [pc, #660]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ee:	4ba0      	ldr	r3, [pc, #640]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f023 0203 	bic.w	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	499c      	ldr	r1, [pc, #624]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003410:	4b97      	ldr	r3, [pc, #604]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f023 020c 	bic.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4994      	ldr	r1, [pc, #592]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003432:	4b8f      	ldr	r3, [pc, #572]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	498b      	ldr	r1, [pc, #556]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003454:	4b86      	ldr	r3, [pc, #536]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	4983      	ldr	r1, [pc, #524]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003476:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	497a      	ldr	r1, [pc, #488]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003498:	4b75      	ldr	r3, [pc, #468]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	4972      	ldr	r1, [pc, #456]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ba:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4969      	ldr	r1, [pc, #420]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034dc:	4b64      	ldr	r3, [pc, #400]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4961      	ldr	r1, [pc, #388]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034fe:	4b5c      	ldr	r3, [pc, #368]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	4958      	ldr	r1, [pc, #352]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	4950      	ldr	r1, [pc, #320]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003558:	4b45      	ldr	r3, [pc, #276]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4942      	ldr	r1, [pc, #264]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003590:	4b37      	ldr	r3, [pc, #220]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4934      	ldr	r1, [pc, #208]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ae:	d105      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a2e      	ldr	r2, [pc, #184]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	4926      	ldr	r1, [pc, #152]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e6:	d105      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a20      	ldr	r2, [pc, #128]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	4918      	ldr	r1, [pc, #96]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361e:	d105      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a12      	ldr	r2, [pc, #72]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003638:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003656:	d105      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003664:	7cbb      	ldrb	r3, [r7, #18]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000

08003674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e049      	b.n	800371a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd fb6e 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 fe8a 	bl	80043cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d001      	beq.n	800373c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e042      	b.n	80037c2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <HAL_TIM_Base_Start+0xac>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d018      	beq.n	8003780 <HAL_TIM_Base_Start+0x5c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003756:	d013      	beq.n	8003780 <HAL_TIM_Base_Start+0x5c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_TIM_Base_Start+0xb0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <HAL_TIM_Base_Start+0x5c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_TIM_Base_Start+0xb4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_TIM_Base_Start+0x5c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <HAL_TIM_Base_Start+0xb8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_TIM_Base_Start+0x5c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_TIM_Base_Start+0xbc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d115      	bne.n	80037ac <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <HAL_TIM_Base_Start+0xc0>)
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b06      	cmp	r3, #6
 8003790:	d015      	beq.n	80037be <HAL_TIM_Base_Start+0x9a>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d011      	beq.n	80037be <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037aa:	e008      	b.n	80037be <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e000      	b.n	80037c0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40014000 	.word	0x40014000
 80037e4:	00010007 	.word	0x00010007

080037e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e049      	b.n	800388e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f841 	bl	8003896 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 fdd0 	bl	80043cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_TIM_OC_Start+0x24>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e03c      	b.n	800394a <HAL_TIM_OC_Start+0x9e>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d109      	bne.n	80038ea <HAL_TIM_OC_Start+0x3e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e02f      	b.n	800394a <HAL_TIM_OC_Start+0x9e>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d109      	bne.n	8003904 <HAL_TIM_OC_Start+0x58>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e022      	b.n	800394a <HAL_TIM_OC_Start+0x9e>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d109      	bne.n	800391e <HAL_TIM_OC_Start+0x72>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e015      	b.n	800394a <HAL_TIM_OC_Start+0x9e>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b10      	cmp	r3, #16
 8003922:	d109      	bne.n	8003938 <HAL_TIM_OC_Start+0x8c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e008      	b.n	800394a <HAL_TIM_OC_Start+0x9e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e097      	b.n	8003a82 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_TIM_OC_Start+0xb6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003960:	e023      	b.n	80039aa <HAL_TIM_OC_Start+0xfe>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d104      	bne.n	8003972 <HAL_TIM_OC_Start+0xc6>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003970:	e01b      	b.n	80039aa <HAL_TIM_OC_Start+0xfe>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d104      	bne.n	8003982 <HAL_TIM_OC_Start+0xd6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003980:	e013      	b.n	80039aa <HAL_TIM_OC_Start+0xfe>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d104      	bne.n	8003992 <HAL_TIM_OC_Start+0xe6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003990:	e00b      	b.n	80039aa <HAL_TIM_OC_Start+0xfe>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_OC_Start+0xf6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	e003      	b.n	80039aa <HAL_TIM_OC_Start+0xfe>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f92c 	bl	8004c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a33      	ldr	r2, [pc, #204]	; (8003a8c <HAL_TIM_OC_Start+0x1e0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_TIM_OC_Start+0x13e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a32      	ldr	r2, [pc, #200]	; (8003a90 <HAL_TIM_OC_Start+0x1e4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_TIM_OC_Start+0x13e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a30      	ldr	r2, [pc, #192]	; (8003a94 <HAL_TIM_OC_Start+0x1e8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_TIM_OC_Start+0x13e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <HAL_TIM_OC_Start+0x1ec>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_TIM_OC_Start+0x13e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_TIM_OC_Start+0x1f0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_OC_Start+0x142>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_TIM_OC_Start+0x144>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_TIM_OC_Start+0x1e0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_TIM_OC_Start+0x194>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d013      	beq.n	8003a40 <HAL_TIM_OC_Start+0x194>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_TIM_OC_Start+0x1f4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_TIM_OC_Start+0x194>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <HAL_TIM_OC_Start+0x1f8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_TIM_OC_Start+0x194>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <HAL_TIM_OC_Start+0x1e4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_OC_Start+0x194>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIM_OC_Start+0x1e8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d115      	bne.n	8003a6c <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <HAL_TIM_OC_Start+0x1fc>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d015      	beq.n	8003a7e <HAL_TIM_OC_Start+0x1d2>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d011      	beq.n	8003a7e <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	e008      	b.n	8003a7e <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e000      	b.n	8003a80 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40013400 	.word	0x40013400
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40014800 	.word	0x40014800
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	00010007 	.word	0x00010007

08003aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e049      	b.n	8003b52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f841 	bl	8003b5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 fc6e 	bl	80043cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_TIM_PWM_Start+0x24>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e03c      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d109      	bne.n	8003bae <HAL_TIM_PWM_Start+0x3e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	bf14      	ite	ne
 8003ba6:	2301      	movne	r3, #1
 8003ba8:	2300      	moveq	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	e02f      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d109      	bne.n	8003bc8 <HAL_TIM_PWM_Start+0x58>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e022      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d109      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x72>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e015      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d109      	bne.n	8003bfc <HAL_TIM_PWM_Start+0x8c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e008      	b.n	8003c0e <HAL_TIM_PWM_Start+0x9e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e097      	b.n	8003d46 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <HAL_TIM_PWM_Start+0xb6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c24:	e023      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_PWM_Start+0xc6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c34:	e01b      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_PWM_Start+0xd6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c44:	e013      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PWM_Start+0xe6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c54:	e00b      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIM_PWM_Start+0xf6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c64:	e003      	b.n	8003c6e <HAL_TIM_PWM_Start+0xfe>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2201      	movs	r2, #1
 8003c74:	6839      	ldr	r1, [r7, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 ffca 	bl	8004c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a33      	ldr	r2, [pc, #204]	; (8003d50 <HAL_TIM_PWM_Start+0x1e0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_TIM_PWM_Start+0x13e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a32      	ldr	r2, [pc, #200]	; (8003d54 <HAL_TIM_PWM_Start+0x1e4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_TIM_PWM_Start+0x13e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <HAL_TIM_PWM_Start+0x1e8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_TIM_PWM_Start+0x13e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <HAL_TIM_PWM_Start+0x1ec>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_TIM_PWM_Start+0x13e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <HAL_TIM_PWM_Start+0x1f0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0x142>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_PWM_Start+0x144>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_TIM_PWM_Start+0x1e0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <HAL_TIM_PWM_Start+0x194>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d013      	beq.n	8003d04 <HAL_TIM_PWM_Start+0x194>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_TIM_PWM_Start+0x1f4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_TIM_PWM_Start+0x194>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_TIM_PWM_Start+0x1f8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_TIM_PWM_Start+0x194>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_TIM_PWM_Start+0x1e4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_TIM_PWM_Start+0x194>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_TIM_PWM_Start+0x1e8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d115      	bne.n	8003d30 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_TIM_PWM_Start+0x1fc>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d015      	beq.n	8003d42 <HAL_TIM_PWM_Start+0x1d2>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d011      	beq.n	8003d42 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2e:	e008      	b.n	8003d42 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e000      	b.n	8003d44 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40013400 	.word	0x40013400
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	00010007 	.word	0x00010007

08003d70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e097      	b.n	8003eb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fd f821 	bl	8000de0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003db4:	f023 0307 	bic.w	r3, r3, #7
 8003db8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 fb01 	bl	80043cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	f023 0303 	bic.w	r3, r3, #3
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	4313      	orrs	r3, r2
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e10:	f023 030c 	bic.w	r3, r3, #12
 8003e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	011a      	lsls	r2, r3, #4
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	031b      	lsls	r3, r3, #12
 8003e40:	4313      	orrs	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	4313      	orrs	r3, r2
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_OC_ConfigChannel+0x1e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e066      	b.n	8003fa8 <HAL_TIM_OC_ConfigChannel+0xec>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b14      	cmp	r3, #20
 8003ee6:	d857      	bhi.n	8003f98 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003f99 	.word	0x08003f99
 8003ef8:	08003f99 	.word	0x08003f99
 8003efc:	08003f99 	.word	0x08003f99
 8003f00:	08003f53 	.word	0x08003f53
 8003f04:	08003f99 	.word	0x08003f99
 8003f08:	08003f99 	.word	0x08003f99
 8003f0c:	08003f99 	.word	0x08003f99
 8003f10:	08003f61 	.word	0x08003f61
 8003f14:	08003f99 	.word	0x08003f99
 8003f18:	08003f99 	.word	0x08003f99
 8003f1c:	08003f99 	.word	0x08003f99
 8003f20:	08003f6f 	.word	0x08003f6f
 8003f24:	08003f99 	.word	0x08003f99
 8003f28:	08003f99 	.word	0x08003f99
 8003f2c:	08003f99 	.word	0x08003f99
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f99 	.word	0x08003f99
 8003f38:	08003f99 	.word	0x08003f99
 8003f3c:	08003f99 	.word	0x08003f99
 8003f40:	08003f8b 	.word	0x08003f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 face 	bl	80044ec <TIM_OC1_SetConfig>
      break;
 8003f50:	e025      	b.n	8003f9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fb57 	bl	800460c <TIM_OC2_SetConfig>
      break;
 8003f5e:	e01e      	b.n	8003f9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fbda 	bl	8004720 <TIM_OC3_SetConfig>
      break;
 8003f6c:	e017      	b.n	8003f9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fc5b 	bl	8004830 <TIM_OC4_SetConfig>
      break;
 8003f7a:	e010      	b.n	8003f9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fcde 	bl	8004944 <TIM_OC5_SetConfig>
      break;
 8003f88:	e009      	b.n	8003f9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fd3b 	bl	8004a0c <TIM_OC6_SetConfig>
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e0ff      	b.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b14      	cmp	r3, #20
 8003fda:	f200 80f0 	bhi.w	80041be <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fde:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe4:	08004039 	.word	0x08004039
 8003fe8:	080041bf 	.word	0x080041bf
 8003fec:	080041bf 	.word	0x080041bf
 8003ff0:	080041bf 	.word	0x080041bf
 8003ff4:	08004079 	.word	0x08004079
 8003ff8:	080041bf 	.word	0x080041bf
 8003ffc:	080041bf 	.word	0x080041bf
 8004000:	080041bf 	.word	0x080041bf
 8004004:	080040bb 	.word	0x080040bb
 8004008:	080041bf 	.word	0x080041bf
 800400c:	080041bf 	.word	0x080041bf
 8004010:	080041bf 	.word	0x080041bf
 8004014:	080040fb 	.word	0x080040fb
 8004018:	080041bf 	.word	0x080041bf
 800401c:	080041bf 	.word	0x080041bf
 8004020:	080041bf 	.word	0x080041bf
 8004024:	0800413d 	.word	0x0800413d
 8004028:	080041bf 	.word	0x080041bf
 800402c:	080041bf 	.word	0x080041bf
 8004030:	080041bf 	.word	0x080041bf
 8004034:	0800417d 	.word	0x0800417d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fa54 	bl	80044ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0208 	orr.w	r2, r2, #8
 8004052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0204 	bic.w	r2, r2, #4
 8004062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6999      	ldr	r1, [r3, #24]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	619a      	str	r2, [r3, #24]
      break;
 8004076:	e0a5      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fac4 	bl	800460c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6999      	ldr	r1, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	021a      	lsls	r2, r3, #8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	619a      	str	r2, [r3, #24]
      break;
 80040b8:	e084      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fb2d 	bl	8004720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0208 	orr.w	r2, r2, #8
 80040d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0204 	bic.w	r2, r2, #4
 80040e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69d9      	ldr	r1, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
      break;
 80040f8:	e064      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fb95 	bl	8004830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69d9      	ldr	r1, [r3, #28]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	61da      	str	r2, [r3, #28]
      break;
 800413a:	e043      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fbfe 	bl	8004944 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800417a:	e023      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fc42 	bl	8004a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004196:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	021a      	lsls	r2, r3, #8
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80041bc:	e002      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
      break;
 80041c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop

080041d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_ConfigClockSource+0x1c>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e0de      	b.n	80043b2 <HAL_TIM_ConfigClockSource+0x1da>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a63      	ldr	r2, [pc, #396]	; (80043bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f000 80a9 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 8004234:	4a61      	ldr	r2, [pc, #388]	; (80043bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	f200 80ae 	bhi.w	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 800423c:	4a60      	ldr	r2, [pc, #384]	; (80043c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	f000 80a1 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 8004244:	4a5e      	ldr	r2, [pc, #376]	; (80043c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	f200 80a6 	bhi.w	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 800424c:	4a5d      	ldr	r2, [pc, #372]	; (80043c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800424e:	4293      	cmp	r3, r2
 8004250:	f000 8099 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 8004254:	4a5b      	ldr	r2, [pc, #364]	; (80043c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f200 809e 	bhi.w	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 800425c:	4a5a      	ldr	r2, [pc, #360]	; (80043c8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f000 8091 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f200 8096 	bhi.w	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 800426c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004270:	f000 8089 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 8004274:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004278:	f200 808e 	bhi.w	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004280:	d03e      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0x128>
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	f200 8087 	bhi.w	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 800428a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428e:	f000 8086 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1c6>
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d87f      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 8004298:	2b70      	cmp	r3, #112	; 0x70
 800429a:	d01a      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0xfa>
 800429c:	2b70      	cmp	r3, #112	; 0x70
 800429e:	d87b      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 80042a0:	2b60      	cmp	r3, #96	; 0x60
 80042a2:	d050      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x16e>
 80042a4:	2b60      	cmp	r3, #96	; 0x60
 80042a6:	d877      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 80042a8:	2b50      	cmp	r3, #80	; 0x50
 80042aa:	d03c      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x14e>
 80042ac:	2b50      	cmp	r3, #80	; 0x50
 80042ae:	d873      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d058      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x18e>
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d86f      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	d064      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d86b      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d060      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d867      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05c      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d05a      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x1ae>
 80042d0:	e062      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6899      	ldr	r1, [r3, #8]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f000 fc75 	bl	8004bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	609a      	str	r2, [r3, #8]
      break;
 80042fe:	e04f      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6899      	ldr	r1, [r3, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f000 fc5e 	bl	8004bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004322:	609a      	str	r2, [r3, #8]
      break;
 8004324:	e03c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fbd0 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2150      	movs	r1, #80	; 0x50
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fc29 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004344:	e02c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 fbef 	bl	8004b36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2160      	movs	r1, #96	; 0x60
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fc19 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004364:	e01c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	461a      	mov	r2, r3
 8004374:	f000 fbb0 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2140      	movs	r1, #64	; 0x40
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fc09 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004384:	e00c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f000 fc00 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004396:	e003      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
      break;
 800439c:	e000      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800439e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	00100070 	.word	0x00100070
 80043c0:	00100040 	.word	0x00100040
 80043c4:	00100030 	.word	0x00100030
 80043c8:	00100020 	.word	0x00100020

080043cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a3c      	ldr	r2, [pc, #240]	; (80044d0 <TIM_Base_SetConfig+0x104>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00f      	beq.n	8004404 <TIM_Base_SetConfig+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ea:	d00b      	beq.n	8004404 <TIM_Base_SetConfig+0x38>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a39      	ldr	r2, [pc, #228]	; (80044d4 <TIM_Base_SetConfig+0x108>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_Base_SetConfig+0x38>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a38      	ldr	r2, [pc, #224]	; (80044d8 <TIM_Base_SetConfig+0x10c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_Base_SetConfig+0x38>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a37      	ldr	r2, [pc, #220]	; (80044dc <TIM_Base_SetConfig+0x110>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <TIM_Base_SetConfig+0x104>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01b      	beq.n	8004456 <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d017      	beq.n	8004456 <TIM_Base_SetConfig+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <TIM_Base_SetConfig+0x108>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <TIM_Base_SetConfig+0x10c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00f      	beq.n	8004456 <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a28      	ldr	r2, [pc, #160]	; (80044dc <TIM_Base_SetConfig+0x110>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_Base_SetConfig+0x8a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <TIM_Base_SetConfig+0x114>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_Base_SetConfig+0x8a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <TIM_Base_SetConfig+0x118>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_Base_SetConfig+0x8a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <TIM_Base_SetConfig+0x11c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <TIM_Base_SetConfig+0x104>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00f      	beq.n	80044b4 <TIM_Base_SetConfig+0xe8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a11      	ldr	r2, [pc, #68]	; (80044dc <TIM_Base_SetConfig+0x110>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_Base_SetConfig+0xe8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <TIM_Base_SetConfig+0x114>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0xe8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <TIM_Base_SetConfig+0x118>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0xe8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <TIM_Base_SetConfig+0x11c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800

080044ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f023 0201 	bic.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f023 0302 	bic.w	r3, r3, #2
 8004538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <TIM_OC1_SetConfig+0x10c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00f      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <TIM_OC1_SetConfig+0x110>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <TIM_OC1_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a29      	ldr	r2, [pc, #164]	; (8004604 <TIM_OC1_SetConfig+0x118>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a28      	ldr	r2, [pc, #160]	; (8004608 <TIM_OC1_SetConfig+0x11c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10c      	bne.n	8004586 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0308 	bic.w	r3, r3, #8
 8004572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <TIM_OC1_SetConfig+0x10c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <TIM_OC1_SetConfig+0x110>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <TIM_OC1_SetConfig+0x114>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a18      	ldr	r2, [pc, #96]	; (8004604 <TIM_OC1_SetConfig+0x118>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a17      	ldr	r2, [pc, #92]	; (8004608 <TIM_OC1_SetConfig+0x11c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d111      	bne.n	80045d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40013400 	.word	0x40013400
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0210 	bic.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0320 	bic.w	r3, r3, #32
 800465a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a28      	ldr	r2, [pc, #160]	; (800470c <TIM_OC2_SetConfig+0x100>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC2_SetConfig+0x6c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a27      	ldr	r2, [pc, #156]	; (8004710 <TIM_OC2_SetConfig+0x104>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10d      	bne.n	8004694 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004692:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1d      	ldr	r2, [pc, #116]	; (800470c <TIM_OC2_SetConfig+0x100>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00f      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1c      	ldr	r2, [pc, #112]	; (8004710 <TIM_OC2_SetConfig+0x104>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <TIM_OC2_SetConfig+0x108>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <TIM_OC2_SetConfig+0x10c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a19      	ldr	r2, [pc, #100]	; (800471c <TIM_OC2_SetConfig+0x110>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d113      	bne.n	80046e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40013400 	.word	0x40013400
 8004714:	40014000 	.word	0x40014000
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800

08004720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a27      	ldr	r2, [pc, #156]	; (800481c <TIM_OC3_SetConfig+0xfc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_OC3_SetConfig+0x6a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a26      	ldr	r2, [pc, #152]	; (8004820 <TIM_OC3_SetConfig+0x100>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10d      	bne.n	80047a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <TIM_OC3_SetConfig+0xfc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00f      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <TIM_OC3_SetConfig+0x100>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <TIM_OC3_SetConfig+0x104>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <TIM_OC3_SetConfig+0x108>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <TIM_OC3_SetConfig+0x10c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d113      	bne.n	80047f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800

08004830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a28      	ldr	r2, [pc, #160]	; (8004930 <TIM_OC4_SetConfig+0x100>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC4_SetConfig+0x6c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a27      	ldr	r2, [pc, #156]	; (8004934 <TIM_OC4_SetConfig+0x104>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d10d      	bne.n	80048b8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <TIM_OC4_SetConfig+0x100>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <TIM_OC4_SetConfig+0x104>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <TIM_OC4_SetConfig+0x108>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <TIM_OC4_SetConfig+0x10c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a19      	ldr	r2, [pc, #100]	; (8004940 <TIM_OC4_SetConfig+0x110>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d113      	bne.n	8004908 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	019b      	lsls	r3, r3, #6
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40013400 	.word	0x40013400
 8004938:	40014000 	.word	0x40014000
 800493c:	40014400 	.word	0x40014400
 8004940:	40014800 	.word	0x40014800

08004944 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <TIM_OC5_SetConfig+0xb4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a16      	ldr	r2, [pc, #88]	; (80049fc <TIM_OC5_SetConfig+0xb8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <TIM_OC5_SetConfig+0xbc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <TIM_OC5_SetConfig+0xc0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <TIM_OC5_SetConfig+0xc4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d109      	bne.n	80049d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	051b      	lsls	r3, r3, #20
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <TIM_OC6_SetConfig+0xb8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <TIM_OC6_SetConfig+0xbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <TIM_OC6_SetConfig+0xc0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <TIM_OC6_SetConfig+0xc4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <TIM_OC6_SetConfig+0xc8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d109      	bne.n	8004a9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	029b      	lsls	r3, r3, #10
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 030a 	bic.w	r3, r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b087      	sub	sp, #28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f023 0210 	bic.w	r2, r3, #16
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f043 0307 	orr.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	609a      	str	r2, [r3, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	021a      	lsls	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2201      	movs	r2, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_TIMEx_PWMN_Start+0x24>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e022      	b.n	8004cc6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d109      	bne.n	8004c9a <HAL_TIMEx_PWMN_Start+0x3e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	bf14      	ite	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	2300      	moveq	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	e015      	b.n	8004cc6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d109      	bne.n	8004cb4 <HAL_TIMEx_PWMN_Start+0x58>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e008      	b.n	8004cc6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e069      	b.n	8004da2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <HAL_TIMEx_PWMN_Start+0x82>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cdc:	e013      	b.n	8004d06 <HAL_TIMEx_PWMN_Start+0xaa>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d104      	bne.n	8004cee <HAL_TIMEx_PWMN_Start+0x92>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cec:	e00b      	b.n	8004d06 <HAL_TIMEx_PWMN_Start+0xaa>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIMEx_PWMN_Start+0xa2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cfc:	e003      	b.n	8004d06 <HAL_TIMEx_PWMN_Start+0xaa>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f9b5 	bl	800507e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <HAL_TIMEx_PWMN_Start+0x150>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_TIMEx_PWMN_Start+0x104>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d013      	beq.n	8004d60 <HAL_TIMEx_PWMN_Start+0x104>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <HAL_TIMEx_PWMN_Start+0x154>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_TIMEx_PWMN_Start+0x104>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <HAL_TIMEx_PWMN_Start+0x158>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_TIMEx_PWMN_Start+0x104>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIMEx_PWMN_Start+0x104>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a18      	ldr	r2, [pc, #96]	; (8004dbc <HAL_TIMEx_PWMN_Start+0x160>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d115      	bne.n	8004d8c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <HAL_TIMEx_PWMN_Start+0x164>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b06      	cmp	r3, #6
 8004d70:	d015      	beq.n	8004d9e <HAL_TIMEx_PWMN_Start+0x142>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d78:	d011      	beq.n	8004d9e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	e008      	b.n	8004d9e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e000      	b.n	8004da0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800
 8004db8:	40013400 	.word	0x40013400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	00010007 	.word	0x00010007

08004dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e065      	b.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d108      	bne.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d013      	beq.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d10c      	bne.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40014000 	.word	0x40014000

08004ec8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e087      	b.n	8004ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a27      	ldr	r2, [pc, #156]	; (8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a25      	ldr	r2, [pc, #148]	; (8005004 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d106      	bne.n	8004f80 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d126      	bne.n	8004fe2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	051b      	lsls	r3, r3, #20
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a0d      	ldr	r2, [pc, #52]	; (8005004 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d106      	bne.n	8004fe2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40013400 	.word	0x40013400

08005008 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800501c:	2302      	movs	r3, #2
 800501e:	e02a      	b.n	8005076 <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6859      	ldr	r1, [r3, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f7ff fdca 	bl	8004bd0 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	f023 02e6 	bic.w	r2, r3, #230	; 0xe6
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	7b09      	ldrb	r1, [r1, #12]
 800504e:	2901      	cmp	r1, #1
 8005050:	d101      	bne.n	8005056 <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 8005052:	2120      	movs	r1, #32
 8005054:	e000      	b.n	8005058 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 8005056:	2100      	movs	r1, #0
 8005058:	4319      	orrs	r1, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	430b      	orrs	r3, r1
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	659a      	str	r2, [r3, #88]	; 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2204      	movs	r2, #4
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	43db      	mvns	r3, r3
 80050a0:	401a      	ands	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4d0d      	ldr	r5, [pc, #52]	; (8005100 <__libc_init_array+0x38>)
 80050cc:	4c0d      	ldr	r4, [pc, #52]	; (8005104 <__libc_init_array+0x3c>)
 80050ce:	1b64      	subs	r4, r4, r5
 80050d0:	10a4      	asrs	r4, r4, #2
 80050d2:	2600      	movs	r6, #0
 80050d4:	42a6      	cmp	r6, r4
 80050d6:	d109      	bne.n	80050ec <__libc_init_array+0x24>
 80050d8:	4d0b      	ldr	r5, [pc, #44]	; (8005108 <__libc_init_array+0x40>)
 80050da:	4c0c      	ldr	r4, [pc, #48]	; (800510c <__libc_init_array+0x44>)
 80050dc:	f000 f820 	bl	8005120 <_init>
 80050e0:	1b64      	subs	r4, r4, r5
 80050e2:	10a4      	asrs	r4, r4, #2
 80050e4:	2600      	movs	r6, #0
 80050e6:	42a6      	cmp	r6, r4
 80050e8:	d105      	bne.n	80050f6 <__libc_init_array+0x2e>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f0:	4798      	blx	r3
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7ee      	b.n	80050d4 <__libc_init_array+0xc>
 80050f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fa:	4798      	blx	r3
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7f2      	b.n	80050e6 <__libc_init_array+0x1e>
 8005100:	08005148 	.word	0x08005148
 8005104:	08005148 	.word	0x08005148
 8005108:	08005148 	.word	0x08005148
 800510c:	0800514c 	.word	0x0800514c

08005110 <memset>:
 8005110:	4402      	add	r2, r0
 8005112:	4603      	mov	r3, r0
 8005114:	4293      	cmp	r3, r2
 8005116:	d100      	bne.n	800511a <memset+0xa>
 8005118:	4770      	bx	lr
 800511a:	f803 1b01 	strb.w	r1, [r3], #1
 800511e:	e7f9      	b.n	8005114 <memset+0x4>

08005120 <_init>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr

0800512c <_fini>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr

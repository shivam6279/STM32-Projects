
OpticalSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001744  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800192c  0800192c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800192c  0800192c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800192c  0800192c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800192c  0800192c  0001192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001930  08001930  00011930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001940  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006619  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011fd  00000000  00000000  00026655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  00027858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00027ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c93  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000685e  00000000  00000000  0002a0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5f66  00000000  00000000  00030941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001068a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001754  00000000  00000000  001068f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001904 	.word	0x08001904

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001904 	.word	0x08001904

08000218 <main>:
#include "main.h"
#include "stm32.h"
#include "UART.h"
#include <math.h>

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_Init();
 800021c:	f000 fc51 	bl	8000ac2 <HAL_Init>

	SystemClock_Config();
 8000220:	f000 fb76 	bl	8000910 <SystemClock_Config>

	GPIO_init();
 8000224:	f000 f858 	bl	80002d8 <GPIO_init>

	TIM1_init();	//PWM timer - 24/48/96 khz
 8000228:	f000 f8b0 	bl	800038c <TIM1_init>
	TIM6_init();	//Delay timer - 1 khz
 800022c:	f000 fab0 	bl	8000790 <TIM6_init>
	TIM3_init();	//FOC timer - 25 khz
 8000230:	f000 fa24 	bl	800067c <TIM3_init>
	TIM4_init();	//Audio timer
 8000234:	f000 fa6a 	bl	800070c <TIM4_init>
	TIM2_init();
 8000238:	f000 f9e0 	bl	80005fc <TIM2_init>

	TIM8_init();
 800023c:	f000 faea 	bl	8000814 <TIM8_init>
 8000240:	2300      	movs	r3, #0
//	UART_init(115200);
}
 8000242:	4618      	mov	r0, r3
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	2b00      	cmp	r3, #0
 8000258:	db0b      	blt.n	8000272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	f003 021f 	and.w	r2, r3, #31
 8000260:	4907      	ldr	r1, [pc, #28]	; (8000280 <__NVIC_EnableIRQ+0x38>)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	2001      	movs	r0, #1
 800026a:	fa00 f202 	lsl.w	r2, r0, r2
 800026e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000e100 	.word	0xe000e100

08000284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	6039      	str	r1, [r7, #0]
 800028e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000294:	2b00      	cmp	r3, #0
 8000296:	db0a      	blt.n	80002ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	b2da      	uxtb	r2, r3
 800029c:	490c      	ldr	r1, [pc, #48]	; (80002d0 <__NVIC_SetPriority+0x4c>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	0112      	lsls	r2, r2, #4
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	440b      	add	r3, r1
 80002a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ac:	e00a      	b.n	80002c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4908      	ldr	r1, [pc, #32]	; (80002d4 <__NVIC_SetPriority+0x50>)
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	f003 030f 	and.w	r3, r3, #15
 80002ba:	3b04      	subs	r3, #4
 80002bc:	0112      	lsls	r2, r2, #4
 80002be:	b2d2      	uxtb	r2, r2
 80002c0:	440b      	add	r3, r1
 80002c2:	761a      	strb	r2, [r3, #24]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <GPIO_init>:
#include <math.h>

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void GPIO_init() {
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 0b1111111;
 80002dc:	4b29      	ldr	r3, [pc, #164]	; (8000384 <GPIO_init+0xac>)
 80002de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e0:	4a28      	ldr	r2, [pc, #160]	; (8000384 <GPIO_init+0xac>)
 80002e2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80002e6:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->OTYPER &= ~(1<<3);
 80002e8:	4b27      	ldr	r3, [pc, #156]	; (8000388 <GPIO_init+0xb0>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a26      	ldr	r2, [pc, #152]	; (8000388 <GPIO_init+0xb0>)
 80002ee:	f023 0308 	bic.w	r3, r3, #8
 80002f2:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(1<<4);
 80002f4:	4b24      	ldr	r3, [pc, #144]	; (8000388 <GPIO_init+0xb0>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a23      	ldr	r2, [pc, #140]	; (8000388 <GPIO_init+0xb0>)
 80002fa:	f023 0310 	bic.w	r3, r3, #16
 80002fe:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (1<<7);
 8000300:	4b21      	ldr	r3, [pc, #132]	; (8000388 <GPIO_init+0xb0>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a20      	ldr	r2, [pc, #128]	; (8000388 <GPIO_init+0xb0>)
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<9);
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <GPIO_init+0xb0>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a1d      	ldr	r2, [pc, #116]	; (8000388 <GPIO_init+0xb0>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6093      	str	r3, [r2, #8]

	GPIOB->MODER |= 1<<6;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <GPIO_init+0xb0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <GPIO_init+0xb0>)
 800031e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000322:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <GPIO_init+0xb0>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a17      	ldr	r2, [pc, #92]	; (8000388 <GPIO_init+0xb0>)
 800032a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800032e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <GPIO_init+0xb0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a14      	ldr	r2, [pc, #80]	; (8000388 <GPIO_init+0xb0>)
 8000336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800033a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <GPIO_init+0xb0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <GPIO_init+0xb0>)
 8000342:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000346:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= 1<<6;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <GPIO_init+0xb0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <GPIO_init+0xb0>)
 800034e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000352:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<7);
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <GPIO_init+0xb0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <GPIO_init+0xb0>)
 800035a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800035e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<8;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <GPIO_init+0xb0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a08      	ldr	r2, [pc, #32]	; (8000388 <GPIO_init+0xb0>)
 8000366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800036a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<9);
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <GPIO_init+0xb0>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a05      	ldr	r2, [pc, #20]	; (8000388 <GPIO_init+0xb0>)
 8000372:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	48000400 	.word	0x48000400

0800038c <TIM1_init>:
	TIM8->CR1 &= ~1;
}

//---------------------

void TIM1_init() {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= 1 << 11;
 8000390:	4b96      	ldr	r3, [pc, #600]	; (80005ec <TIM1_init+0x260>)
 8000392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000394:	4a95      	ldr	r2, [pc, #596]	; (80005ec <TIM1_init+0x260>)
 8000396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800039a:	6613      	str	r3, [r2, #96]	; 0x60

    //PA[8] - 1P
    GPIOA->AFR[1] |= 0b0110;
 800039c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a6:	f043 0306 	orr.w	r3, r3, #6
 80003aa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 16);
 80003ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 17;
 80003bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 16;
 80003cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6093      	str	r3, [r2, #8]

    //PA[7] - 1N
    GPIOA->AFR[0] |= 0b0110 << 28;
 80003dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e0:	6a1b      	ldr	r3, [r3, #32]
 80003e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e6:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80003ea:	6213      	str	r3, [r2, #32]
	GPIOA->MODER &= ~(1 << 14);
 80003ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 15;
 80003fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800040a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 14;
 800040c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6093      	str	r3, [r2, #8]

    //PA[9] - 2P
    GPIOA->AFR[1] |= 0b0110 << 4;
 800041c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000422:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000426:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800042a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 18);
 800042c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800043a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 19;
 800043c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800044a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 18;
 800044c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6093      	str	r3, [r2, #8]

    //PB[0] - 2N
    GPIOB->AFR[0] |= 0b0110;
 800045c:	4b64      	ldr	r3, [pc, #400]	; (80005f0 <TIM1_init+0x264>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	4a63      	ldr	r2, [pc, #396]	; (80005f0 <TIM1_init+0x264>)
 8000462:	f043 0306 	orr.w	r3, r3, #6
 8000466:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~1;
 8000468:	4b61      	ldr	r3, [pc, #388]	; (80005f0 <TIM1_init+0x264>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a60      	ldr	r2, [pc, #384]	; (80005f0 <TIM1_init+0x264>)
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1 << 1;
 8000474:	4b5e      	ldr	r3, [pc, #376]	; (80005f0 <TIM1_init+0x264>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a5d      	ldr	r2, [pc, #372]	; (80005f0 <TIM1_init+0x264>)
 800047a:	f043 0302 	orr.w	r3, r3, #2
 800047e:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= 0b11;
 8000480:	4b5b      	ldr	r3, [pc, #364]	; (80005f0 <TIM1_init+0x264>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a5a      	ldr	r2, [pc, #360]	; (80005f0 <TIM1_init+0x264>)
 8000486:	f043 0303 	orr.w	r3, r3, #3
 800048a:	6093      	str	r3, [r2, #8]

    //PA[10] - 3P
    GPIOA->AFR[1] |= 0b0110 << 8;
 800048c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000492:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000496:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800049a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1 << 20);
 800049c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 21;
 80004ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ba:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 < 20;
 80004bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6093      	str	r3, [r2, #8]

    //PF[0] - 3N
    GPIOF->AFR[0] |= 0b0110;
 80004cc:	4b49      	ldr	r3, [pc, #292]	; (80005f4 <TIM1_init+0x268>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	4a48      	ldr	r2, [pc, #288]	; (80005f4 <TIM1_init+0x268>)
 80004d2:	f043 0306 	orr.w	r3, r3, #6
 80004d6:	6213      	str	r3, [r2, #32]
	GPIOF->MODER &= ~1;
 80004d8:	4b46      	ldr	r3, [pc, #280]	; (80005f4 <TIM1_init+0x268>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a45      	ldr	r2, [pc, #276]	; (80005f4 <TIM1_init+0x268>)
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= 1 << 1;
 80004e4:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <TIM1_init+0x268>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a42      	ldr	r2, [pc, #264]	; (80005f4 <TIM1_init+0x268>)
 80004ea:	f043 0302 	orr.w	r3, r3, #2
 80004ee:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= 0b11;
 80004f0:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <TIM1_init+0x268>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	4a3f      	ldr	r2, [pc, #252]	; (80005f4 <TIM1_init+0x268>)
 80004f6:	f043 0303 	orr.w	r3, r3, #3
 80004fa:	6093      	str	r3, [r2, #8]

    TIM1->CR1 = 0;
 80004fc:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <TIM1_init+0x26c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
    TIM1->CR2 = 0;
 8000502:	4b3d      	ldr	r3, [pc, #244]	; (80005f8 <TIM1_init+0x26c>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]

    TIM1->CR1 |= 1 << 7; //Auto-preload enable    
 8000508:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <TIM1_init+0x26c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a3a      	ldr	r2, [pc, #232]	; (80005f8 <TIM1_init+0x26c>)
 800050e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000512:	6013      	str	r3, [r2, #0]
//    TIM1->CR1 |= 0b01 << 5; //Center-aligned mode 1
    TIM1->CR1 |= 0b10 << 5; //Center-aligned mode 2
 8000514:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <TIM1_init+0x26c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a37      	ldr	r2, [pc, #220]	; (80005f8 <TIM1_init+0x26c>)
 800051a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800051e:	6013      	str	r3, [r2, #0]

    TIM1->CCMR1 = 0;
 8000520:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <TIM1_init+0x26c>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
    TIM1->CCMR1 |= 0b110 << 12;
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <TIM1_init+0x26c>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a33      	ldr	r2, [pc, #204]	; (80005f8 <TIM1_init+0x26c>)
 800052c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000530:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= 0b110 << 4;
 8000532:	4b31      	ldr	r3, [pc, #196]	; (80005f8 <TIM1_init+0x26c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a30      	ldr	r2, [pc, #192]	; (80005f8 <TIM1_init+0x26c>)
 8000538:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800053c:	6193      	str	r3, [r2, #24]

    TIM1->CCMR2 = 0;
 800053e:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <TIM1_init+0x26c>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
    TIM1->CCMR2 |= 0b110 << 4;
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <TIM1_init+0x26c>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	4a2b      	ldr	r2, [pc, #172]	; (80005f8 <TIM1_init+0x26c>)
 800054a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800054e:	61d3      	str	r3, [r2, #28]

    TIM1->CCMR2 = 0;
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <TIM1_init+0x26c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= 0b110 << 4;
 8000556:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <TIM1_init+0x26c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <TIM1_init+0x26c>)
 800055c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000560:	61d3      	str	r3, [r2, #28]



    TIM1->PSC = 0;
 8000562:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <TIM1_init+0x26c>)
 8000564:	2200      	movs	r2, #0
 8000566:	629a      	str	r2, [r3, #40]	; 0x28

    TIM1->CNT = 0;
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <TIM1_init+0x26c>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24

    TIM1->CCER = 0;
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <TIM1_init+0x26c>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= 0b010101010101; //enable outputs
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <TIM1_init+0x26c>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <TIM1_init+0x26c>)
 800057a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800057e:	f043 0305 	orr.w	r3, r3, #5
 8000582:	6213      	str	r3, [r2, #32]

	TIM1->CCER |= TIM_CCER_CC1NP;
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <TIM1_init+0x26c>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <TIM1_init+0x26c>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2NP;
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <TIM1_init+0x26c>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <TIM1_init+0x26c>)
 8000596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059a:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3NP;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <TIM1_init+0x26c>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <TIM1_init+0x26c>)
 80005a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a6:	6213      	str	r3, [r2, #32]
	TIM1->CCR1 = 0;
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <TIM1_init+0x26c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <TIM1_init+0x26c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <TIM1_init+0x26c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	63da      	str	r2, [r3, #60]	; 0x3c

	//OC4
//	TIM1->CCMR2 |= 0b001 << 12;
//	TIM1->CCER |= 1 << 16;
	TIM1->CCR4 = 0;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <TIM1_init+0x26c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	641a      	str	r2, [r3, #64]	; 0x40
//    TIM1->CCMR3 = 0;
//	TIM1->CCMR3 |= 0b110 << 4;
//	TIM1->CCER |= 1 << 16;
//	TIM1->CCR5 = 0;

	TIM1->BDTR |= 1 << 15;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <TIM1_init+0x26c>)
 80005c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c4:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <TIM1_init+0x26c>)
 80005c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ca:	6453      	str	r3, [r2, #68]	; 0x44

	NVIC_SetPriority(TIM1_CC_IRQn, 2);
 80005cc:	2102      	movs	r1, #2
 80005ce:	201b      	movs	r0, #27
 80005d0:	f7ff fe58 	bl	8000284 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_CC_IRQn);
 80005d4:	201b      	movs	r0, #27
 80005d6:	f7ff fe37 	bl	8000248 <__NVIC_EnableIRQ>

    TIM1->CR1 |= 1;
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <TIM1_init+0x26c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <TIM1_init+0x26c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400
 80005f4:	48001400 	.word	0x48001400
 80005f8:	40012c00 	.word	0x40012c00

080005fc <TIM2_init>:

void TIM2_init() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <TIM2_init+0x7c>)
 8000602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000604:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <TIM2_init+0x7c>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6593      	str	r3, [r2, #88]	; 0x58

    TIM2->CR1 = 0;
 800060c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
    TIM2->CR2 = 0;
 8000614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]

    TIM2->CR1 |= 1 << 7;
 800061c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062a:	6013      	str	r3, [r2, #0]

    TIM2->ARR = 1000;
 800062c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC = 170 - 1;
 8000636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800063a:	22a9      	movs	r2, #169	; 0xa9
 800063c:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->CNT = 0;
 800063e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24

    TIM2->EGR |= 1;
 8000646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6153      	str	r3, [r2, #20]

    TIM2->DIER |= 1;
 8000656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 3);
 8000666:	2103      	movs	r1, #3
 8000668:	201c      	movs	r0, #28
 800066a:	f7ff fe0b 	bl	8000284 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800066e:	201c      	movs	r0, #28
 8000670:	f7ff fdea 	bl	8000248 <__NVIC_EnableIRQ>

//	TIM2->CR1 |= 1;
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <TIM3_init>:

void TIM3_init() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 1;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <TIM3_init+0x80>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <TIM3_init+0x80>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6593      	str	r3, [r2, #88]	; 0x58

    TIM3->CR1 = 0;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <TIM3_init+0x84>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
    TIM3->CR2 = 0;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <TIM3_init+0x84>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]

    TIM3->CR1 |= 1 << 7;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <TIM3_init+0x84>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <TIM3_init+0x84>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	6013      	str	r3, [r2, #0]

    float freq = 50000;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <TIM3_init+0x88>)
 80006a8:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 80006aa:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000708 <TIM3_init+0x8c>
 80006ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80006b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b6:	edc7 7a00 	vstr	s15, [r7]
    TIM3->ARR = (uint16_t)f;
 80006ba:	edd7 7a00 	vldr	s15, [r7]
 80006be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c2:	ee17 3a90 	vmov	r3, s15
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <TIM3_init+0x84>)
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 0;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <TIM3_init+0x84>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28

    TIM3->CNT = 0;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <TIM3_init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24

    TIM3->DIER |= 1;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <TIM3_init+0x84>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <TIM3_init+0x84>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	60d3      	str	r3, [r2, #12]
//    TIM3->CR1 |= 1;
    NVIC_SetPriority(TIM3_IRQn, 2);
 80006e4:	2102      	movs	r1, #2
 80006e6:	201d      	movs	r0, #29
 80006e8:	f7ff fdcc 	bl	8000284 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 80006ec:	201d      	movs	r0, #29
 80006ee:	f7ff fdab 	bl	8000248 <__NVIC_EnableIRQ>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	40000400 	.word	0x40000400
 8000704:	47435000 	.word	0x47435000
 8000708:	4d221fe8 	.word	0x4d221fe8

0800070c <TIM4_init>:

void TIM4_init() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 2;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <TIM4_init+0x7c>)
 8000712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000714:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <TIM4_init+0x7c>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6593      	str	r3, [r2, #88]	; 0x58

    TIM4->CR1 = 0;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <TIM4_init+0x80>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
    TIM4->CR2 = 0;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <TIM4_init+0x80>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]

    TIM4->CR1 |= 1 << 7;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <TIM4_init+0x80>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a17      	ldr	r2, [pc, #92]	; (800078c <TIM4_init+0x80>)
 800072e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000732:	6013      	str	r3, [r2, #0]

    TIM4->ARR |= 0xFFFFF;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <TIM4_init+0x80>)
 8000736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <TIM4_init+0x80>)
 800073a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800073e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000742:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM4->PSC = 0;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <TIM4_init+0x80>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28

    TIM4->CNT = 0;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <TIM4_init+0x80>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24

    TIM4->EGR |= 1;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <TIM4_init+0x80>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <TIM4_init+0x80>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6153      	str	r3, [r2, #20]

    TIM4->DIER |= 1;
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <TIM4_init+0x80>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <TIM4_init+0x80>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	60d3      	str	r3, [r2, #12]

    TIM4->SR &= ~(0x1);
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <TIM4_init+0x80>)
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <TIM4_init+0x80>)
 800076e:	f023 0301 	bic.w	r3, r3, #1
 8000772:	6113      	str	r3, [r2, #16]

    // TIM4->CR1 |= 1;
    NVIC_SetPriority(TIM4_IRQn, 5);
 8000774:	2105      	movs	r1, #5
 8000776:	201e      	movs	r0, #30
 8000778:	f7ff fd84 	bl	8000284 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn);
 800077c:	201e      	movs	r0, #30
 800077e:	f7ff fd63 	bl	8000248 <__NVIC_EnableIRQ>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	40000800 	.word	0x40000800

08000790 <TIM6_init>:

void TIM6_init() {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 4;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <TIM6_init+0x74>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <TIM6_init+0x74>)
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	6593      	str	r3, [r2, #88]	; 0x58

    TIM6->CR1 = 0;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <TIM6_init+0x78>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
    TIM6->CR2 = 0;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <TIM6_init+0x78>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]

    float freq = 10000;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <TIM6_init+0x7c>)
 80007b0:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 80007b2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000810 <TIM6_init+0x80>
 80007b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80007ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007be:	edc7 7a00 	vstr	s15, [r7]
    // TIM6->ARR |= ((uint32_t)f & 0x000FFFFF);
    // TIM6->ARR = (uint32_t)f;
    TIM6->ARR |= 0xFFFFF;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <TIM6_init+0x78>)
 80007c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <TIM6_init+0x78>)
 80007c8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80007cc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80007d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM6->PSC = (uint16_t)f - 1;
 80007d2:	edd7 7a00 	vldr	s15, [r7]
 80007d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007da:	ee17 3a90 	vmov	r3, s15
 80007de:	b29b      	uxth	r3, r3
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <TIM6_init+0x78>)
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28

    TIM6->CNT = 0;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <TIM6_init+0x78>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24

    TIM6->EGR |= 1;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <TIM6_init+0x78>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <TIM6_init+0x78>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6153      	str	r3, [r2, #20]

    // TIM6->CR1 |= 1;
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000
 8000808:	40001000 	.word	0x40001000
 800080c:	461c4000 	.word	0x461c4000
 8000810:	4d221fe8 	.word	0x4d221fe8

08000814 <TIM8_init>:
	TIM6->CR1 |= 1;
	while(TIM6->CNT < d);
	TIM6->CR1 &= ~1;
}

void TIM8_init() {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 1 << 13;
 8000818:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <TIM8_init+0xf0>)
 800081a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081c:	4a39      	ldr	r2, [pc, #228]	; (8000904 <TIM8_init+0xf0>)
 800081e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000822:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2ENR |= 0b1111111;
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <TIM8_init+0xf0>)
 8000826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000828:	4a36      	ldr	r2, [pc, #216]	; (8000904 <TIM8_init+0xf0>)
 800082a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800082e:	6613      	str	r3, [r2, #96]	; 0x60

	//PA15 - TIM8_CH1
	GPIOA->AFR[1] |= 0b0010 << 28;
 8000830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800083a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800083e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER &= ~(1<<30);
 8000840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800084a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800084e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1<<31;
 8000850:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800085a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085e:	6013      	str	r3, [r2, #0]

	//PB8 - TIM8_CH2
	GPIOB->AFR[1] |= 0b1010;
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <TIM8_init+0xf4>)
 8000862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <TIM8_init+0xf4>)
 8000866:	f043 030a 	orr.w	r3, r3, #10
 800086a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~(1<<16);
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <TIM8_init+0xf4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a25      	ldr	r2, [pc, #148]	; (8000908 <TIM8_init+0xf4>)
 8000872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000876:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<17;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <TIM8_init+0xf4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a22      	ldr	r2, [pc, #136]	; (8000908 <TIM8_init+0xf4>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000882:	6013      	str	r3, [r2, #0]

	//PB6 <> TIM8_ETR
	GPIOB->AFR[0] |= 0b0110 << 24;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <TIM8_init+0xf4>)
 8000886:	6a1b      	ldr	r3, [r3, #32]
 8000888:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <TIM8_init+0xf4>)
 800088a:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 800088e:	6213      	str	r3, [r2, #32]
	GPIOB->MODER &= ~(1<<12);
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <TIM8_init+0xf4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <TIM8_init+0xf4>)
 8000896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1<<13;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <TIM8_init+0xf4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <TIM8_init+0xf4>)
 80008a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008a6:	6013      	str	r3, [r2, #0]

    TIM8->CR1 = 0;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <TIM8_init+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]

    TIM8->CR2 = 0;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <TIM8_init+0xf8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
    TIM8->SMCR = 0b0011;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <TIM8_init+0xf8>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	609a      	str	r2, [r3, #8]
    TIM8->CCMR1 |= 0b01 << 8;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <TIM8_init+0xf8>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <TIM8_init+0xf8>)
 80008c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c4:	6193      	str	r3, [r2, #24]
    TIM8->CCMR1 |= 0b01;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <TIM8_init+0xf8>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <TIM8_init+0xf8>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
    TIM8->ECR = 1;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <TIM8_init+0xf8>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	659a      	str	r2, [r3, #88]	; 0x58

    TIM8->ARR |= 0xFFFFF;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <TIM8_init+0xf8>)
 80008da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <TIM8_init+0xf8>)
 80008de:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80008e2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80008e6:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM8->CNT = 0;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <TIM8_init+0xf8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24

    TIM8->CR1 |= 1;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <TIM8_init+0xf8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a06      	ldr	r2, [pc, #24]	; (800090c <TIM8_init+0xf8>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6013      	str	r3, [r2, #0]
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	40013400 	.word	0x40013400

08000910 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2238      	movs	r2, #56	; 0x38
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f000 ffe8 	bl	80018f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 fa1a 	bl	8000d6c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094a:	2302      	movs	r3, #2
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800094e:	2301      	movs	r3, #1
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 21;
 8000952:	2315      	movs	r3, #21
 8000954:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	4618      	mov	r0, r3
 8000968:	f000 faa4 	bl	8000eb4 <HAL_RCC_OscConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x66>
	{
	Error_Handler();
 8000972:	f000 f818 	bl	80009a6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000976:	230f      	movs	r3, #15
 8000978:	607b      	str	r3, [r7, #4]
	                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097a:	2303      	movs	r3, #3
 800097c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fda8 	bl	80014e4 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x8e>
	{
	Error_Handler();
 800099a:	f000 f804 	bl	80009a6 <Error_Handler>
	}
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <Error_Handler>:

void Error_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009aa:	b672      	cpsid	i
}
 80009ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ae:	e7fe      	b.n	80009ae <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6613      	str	r3, [r2, #96]	; 0x60
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f890 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f000 ff05 	bl	80018ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa2:	f7ff fbb9 	bl	8000218 <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab4:	08001934 	.word	0x08001934
  ldr r2, =_sbss
 8000ab8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000abc:	2000002c 	.word	0x2000002c

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>

08000ac2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f91b 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f80e 	bl	8000af4 <HAL_InitTick>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	e001      	b.n	8000ae8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae4:	f7ff ff64 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]

}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_InitTick+0x68>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d022      	beq.n	8000b4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_InitTick+0x6c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <HAL_InitTick+0x68>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f918 	bl	8000d52 <HAL_SYSTICK_Config>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10f      	bne.n	8000b48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d809      	bhi.n	8000b42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	f04f 30ff 	mov.w	r0, #4294967295
 8000b36:	f000 f8f2 	bl	8000d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_InitTick+0x70>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	e007      	b.n	8000b52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e004      	b.n	8000b52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e001      	b.n	8000b52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x1c>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x20>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <HAL_IncTick+0x1c>)
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	20000028 	.word	0x20000028
 8000b88:	20000008 	.word	0x20000008

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000028 	.word	0x20000028

08000ba4 <__NVIC_SetPriorityGrouping>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_SetPriority>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff47 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff5e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff90 	bl	8000c5c <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5f 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffb2 	bl	8000cc4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d141      	bne.n	8000dfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d86:	d131      	bne.n	8000dec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d88:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d8e:	4a46      	ldr	r2, [pc, #280]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da0:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2232      	movs	r2, #50	; 0x32
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	0c9b      	lsrs	r3, r3, #18
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dbe:	e002      	b.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd2:	d102      	bne.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f2      	bne.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de6:	d158      	bne.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e057      	b.n	8000e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000dfc:	e04d      	b.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e04:	d141      	bne.n	8000e8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d131      	bne.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1a:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2232      	movs	r2, #50	; 0x32
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e4a:	e002      	b.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d102      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f2      	bne.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e72:	d112      	bne.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e011      	b.n	8000e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e88:	e007      	b.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	431bde83 	.word	0x431bde83

08000eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e306      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d075      	beq.n	8000fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed2:	4b97      	ldr	r3, [pc, #604]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000edc:	4b94      	ldr	r3, [pc, #592]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2b0c      	cmp	r3, #12
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x3e>
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d002      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x44>
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d10b      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	4b8d      	ldr	r3, [pc, #564]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d05b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x108>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d157      	bne.n	8000fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e2e1      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f18:	d106      	bne.n	8000f28 <HAL_RCC_OscConfig+0x74>
 8000f1a:	4b85      	ldr	r3, [pc, #532]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a84      	ldr	r2, [pc, #528]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e01d      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x98>
 8000f32:	4b7f      	ldr	r3, [pc, #508]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a7e      	ldr	r2, [pc, #504]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7b      	ldr	r2, [pc, #492]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f4c:	4b78      	ldr	r3, [pc, #480]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a77      	ldr	r2, [pc, #476]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b75      	ldr	r3, [pc, #468]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a74      	ldr	r2, [pc, #464]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fe0e 	bl	8000b8c <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fe0a 	bl	8000b8c <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e2a6      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f86:	4b6a      	ldr	r3, [pc, #424]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0xc0>
 8000f92:	e014      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fdfa 	bl	8000b8c <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fdf6 	bl	8000b8c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e292      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fae:	4b60      	ldr	r3, [pc, #384]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0xe8>
 8000fba:	e000      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d075      	beq.n	80010b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fca:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd4:	4b56      	ldr	r3, [pc, #344]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	2b0c      	cmp	r3, #12
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x136>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d002      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x13c>
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d11f      	bne.n	8001030 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x154>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e265      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b49      	ldr	r3, [pc, #292]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	4946      	ldr	r1, [pc, #280]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800101c:	4b45      	ldr	r3, [pc, #276]	; (8001134 <HAL_RCC_OscConfig+0x280>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fd67 	bl	8000af4 <HAL_InitTick>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d043      	beq.n	80010b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e251      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d023      	beq.n	8001080 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001038:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a3c      	ldr	r2, [pc, #240]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fda2 	bl	8000b8c <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104c:	f7ff fd9e 	bl	8000b8c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e23a      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800105e:	4b34      	ldr	r3, [pc, #208]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	061b      	lsls	r3, r3, #24
 8001078:	492d      	ldr	r1, [pc, #180]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e01a      	b.n	80010b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800108a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fd7e 	bl	8000b8c <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fd7a 	bl	8000b8c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e216      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x1e0>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d041      	beq.n	8001146 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01c      	beq.n	8001104 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010da:	f7ff fd57 	bl	8000b8c <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fd53 	bl	8000b8c <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1ef      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0ef      	beq.n	80010e2 <HAL_RCC_OscConfig+0x22e>
 8001102:	e020      	b.n	8001146 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <HAL_RCC_OscConfig+0x27c>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001114:	f7ff fd3a 	bl	8000b8c <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111a:	e00d      	b.n	8001138 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fd36 	bl	8000b8c <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d906      	bls.n	8001138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1d2      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001138:	4b8c      	ldr	r3, [pc, #560]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800113a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ea      	bne.n	800111c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80a6 	beq.w	80012a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001158:	4b84      	ldr	r3, [pc, #528]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_OscConfig+0x2b4>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x2b6>
 8001168:	2300      	movs	r3, #0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00d      	beq.n	800118a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b7f      	ldr	r3, [pc, #508]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	4a7e      	ldr	r2, [pc, #504]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6593      	str	r3, [r2, #88]	; 0x58
 800117a:	4b7c      	ldr	r3, [pc, #496]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001186:	2301      	movs	r3, #1
 8001188:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800118a:	4b79      	ldr	r3, [pc, #484]	; (8001370 <HAL_RCC_OscConfig+0x4bc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001196:	4b76      	ldr	r3, [pc, #472]	; (8001370 <HAL_RCC_OscConfig+0x4bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a75      	ldr	r2, [pc, #468]	; (8001370 <HAL_RCC_OscConfig+0x4bc>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fcf3 	bl	8000b8c <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011aa:	f7ff fcef 	bl	8000b8c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e18b      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011bc:	4b6c      	ldr	r3, [pc, #432]	; (8001370 <HAL_RCC_OscConfig+0x4bc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_RCC_OscConfig+0x32e>
 80011d0:	4b66      	ldr	r3, [pc, #408]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e0:	e024      	b.n	800122c <HAL_RCC_OscConfig+0x378>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d110      	bne.n	800120c <HAL_RCC_OscConfig+0x358>
 80011ea:	4b60      	ldr	r3, [pc, #384]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f0:	4a5e      	ldr	r2, [pc, #376]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011fa:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001200:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800120a:	e00f      	b.n	800122c <HAL_RCC_OscConfig+0x378>
 800120c:	4b57      	ldr	r3, [pc, #348]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800120e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001212:	4a56      	ldr	r2, [pc, #344]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800121e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001222:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d016      	beq.n	8001262 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff fcaa 	bl	8000b8c <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800123a:	e00a      	b.n	8001252 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff fca6 	bl	8000b8c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	; 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e140      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0ed      	beq.n	800123c <HAL_RCC_OscConfig+0x388>
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001262:	f7ff fc93 	bl	8000b8c <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fc8f 	bl	8000b8c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e129      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ed      	bne.n	800126a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	4a34      	ldr	r2, [pc, #208]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800129a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800129e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d03c      	beq.n	8001326 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01c      	beq.n	80012ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012ba:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc62 	bl	8000b8c <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012cc:	f7ff fc5e 	bl	8000b8c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0fa      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ef      	beq.n	80012cc <HAL_RCC_OscConfig+0x418>
 80012ec:	e01b      	b.n	8001326 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc45 	bl	8000b8c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001306:	f7ff fc41 	bl	8000b8c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0dd      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800131a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ef      	bne.n	8001306 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80d1 	beq.w	80014d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b0c      	cmp	r3, #12
 800133a:	f000 808b 	beq.w	8001454 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d15e      	bne.n	8001404 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_RCC_OscConfig+0x4b8>)
 800134c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fc1b 	bl	8000b8c <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001358:	e00c      	b.n	8001374 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff fc17 	bl	8000b8c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d905      	bls.n	8001374 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0b3      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ec      	bne.n	800135a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001380:	4b56      	ldr	r3, [pc, #344]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <HAL_RCC_OscConfig+0x62c>)
 8001386:	4013      	ands	r3, r2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6a11      	ldr	r1, [r2, #32]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001390:	3a01      	subs	r2, #1
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	4311      	orrs	r1, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800139a:	0212      	lsls	r2, r2, #8
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013a2:	0852      	lsrs	r2, r2, #1
 80013a4:	3a01      	subs	r2, #1
 80013a6:	0552      	lsls	r2, r2, #21
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ae:	0852      	lsrs	r2, r2, #1
 80013b0:	3a01      	subs	r2, #1
 80013b2:	0652      	lsls	r2, r2, #25
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013ba:	06d2      	lsls	r2, r2, #27
 80013bc:	430a      	orrs	r2, r1
 80013be:	4947      	ldr	r1, [pc, #284]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a44      	ldr	r2, [pc, #272]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4a41      	ldr	r2, [pc, #260]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 80013d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fbd6 	bl	8000b8c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fbd2 	bl	8000b8c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e06e      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x530>
 8001402:	e066      	b.n	80014d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a34      	ldr	r2, [pc, #208]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 800140a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4a31      	ldr	r2, [pc, #196]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001422:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fbae 	bl	8000b8c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fbaa 	bl	8000b8c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e046      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x580>
 8001452:	e03e      	b.n	80014d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e039      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_OscConfig+0x628>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	429a      	cmp	r2, r3
 8001472:	d12c      	bne.n	80014ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d123      	bne.n	80014ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d11b      	bne.n	80014ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d113      	bne.n	80014ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	3b01      	subs	r3, #1
 80014b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d109      	bne.n	80014ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	3b01      	subs	r3, #1
 80014c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	019f800c 	.word	0x019f800c

080014e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e11e      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b91      	ldr	r3, [pc, #580]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b8e      	ldr	r3, [pc, #568]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 020f 	bic.w	r2, r3, #15
 8001512:	498c      	ldr	r1, [pc, #560]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b8a      	ldr	r3, [pc, #552]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e106      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d073      	beq.n	8001620 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d129      	bne.n	8001594 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001540:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0f4      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001550:	f000 f966 	bl	8001820 <RCC_GetSysClockFreqFromPLLSource>
 8001554:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4a7c      	ldr	r2, [pc, #496]	; (800174c <HAL_RCC_ClockConfig+0x268>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d93f      	bls.n	80015de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800155e:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001572:	2b00      	cmp	r3, #0
 8001574:	d033      	beq.n	80015de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d12f      	bne.n	80015de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800157e:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001586:	4a70      	ldr	r2, [pc, #448]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e024      	b.n	80015de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d107      	bne.n	80015ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d109      	bne.n	80015bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0c6      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0be      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80015bc:	f000 f8ce 	bl	800175c <HAL_RCC_GetSysClockFreq>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4a61      	ldr	r2, [pc, #388]	; (800174c <HAL_RCC_ClockConfig+0x268>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d909      	bls.n	80015de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015d2:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015de:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 0203 	bic.w	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4957      	ldr	r1, [pc, #348]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f0:	f7ff facc 	bl	8000b8c <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	e00a      	b.n	800160e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fac8 	bl	8000b8c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e095      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 020c 	and.w	r2, r3, #12
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	429a      	cmp	r2, r3
 800161e:	d1eb      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d023      	beq.n	8001674 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a42      	ldr	r2, [pc, #264]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 800163e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001642:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001650:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001658:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 800165a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800165e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4936      	ldr	r1, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
 8001672:	e008      	b.n	8001686 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b80      	cmp	r3, #128	; 0x80
 8001678:	d105      	bne.n	8001686 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4a32      	ldr	r2, [pc, #200]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001684:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d21d      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 020f 	bic.w	r2, r3, #15
 800169c:	4929      	ldr	r1, [pc, #164]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa72 	bl	8000b8c <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fa6e 	bl	8000b8c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e03b      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x260>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1ed      	bne.n	80016ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4917      	ldr	r1, [pc, #92]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490f      	ldr	r1, [pc, #60]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800170e:	f000 f825 	bl	800175c <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490c      	ldr	r1, [pc, #48]	; (8001750 <HAL_RCC_ClockConfig+0x26c>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_RCC_ClockConfig+0x270>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f9de 	bl	8000af4 <HAL_InitTick>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	04c4b400 	.word	0x04c4b400
 8001750:	0800191c 	.word	0x0800191c
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001762:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d102      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e047      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d102      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e03e      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d136      	bne.n	8001800 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d10c      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_RCC_GetSysClockFreq+0xc0>)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4a16      	ldr	r2, [pc, #88]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ba:	68d2      	ldr	r2, [r2, #12]
 80017bc:	0a12      	lsrs	r2, r2, #8
 80017be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
      break;
 80017c8:	e00c      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d4:	68d2      	ldr	r2, [r2, #12]
 80017d6:	0a12      	lsrs	r2, r2, #8
 80017d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
      break;
 80017e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0e5b      	lsrs	r3, r3, #25
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	3301      	adds	r3, #1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	e001      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001804:	693b      	ldr	r3, [r7, #16]
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	00f42400 	.word	0x00f42400
 800181c:	007a1200 	.word	0x007a1200

08001820 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d10c      	bne.n	800185e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001844:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800184e:	68d2      	ldr	r2, [r2, #12]
 8001850:	0a12      	lsrs	r2, r2, #8
 8001852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
    break;
 800185c:	e00c      	b.n	8001878 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001868:	68d2      	ldr	r2, [r2, #12]
 800186a:	0a12      	lsrs	r2, r2, #8
 800186c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
    break;
 8001876:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0e5b      	lsrs	r3, r3, #25
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001892:	687b      	ldr	r3, [r7, #4]
}
 8001894:	4618      	mov	r0, r3
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	007a1200 	.word	0x007a1200
 80018a8:	00f42400 	.word	0x00f42400

080018ac <__libc_init_array>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4d0d      	ldr	r5, [pc, #52]	; (80018e4 <__libc_init_array+0x38>)
 80018b0:	4c0d      	ldr	r4, [pc, #52]	; (80018e8 <__libc_init_array+0x3c>)
 80018b2:	1b64      	subs	r4, r4, r5
 80018b4:	10a4      	asrs	r4, r4, #2
 80018b6:	2600      	movs	r6, #0
 80018b8:	42a6      	cmp	r6, r4
 80018ba:	d109      	bne.n	80018d0 <__libc_init_array+0x24>
 80018bc:	4d0b      	ldr	r5, [pc, #44]	; (80018ec <__libc_init_array+0x40>)
 80018be:	4c0c      	ldr	r4, [pc, #48]	; (80018f0 <__libc_init_array+0x44>)
 80018c0:	f000 f820 	bl	8001904 <_init>
 80018c4:	1b64      	subs	r4, r4, r5
 80018c6:	10a4      	asrs	r4, r4, #2
 80018c8:	2600      	movs	r6, #0
 80018ca:	42a6      	cmp	r6, r4
 80018cc:	d105      	bne.n	80018da <__libc_init_array+0x2e>
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d4:	4798      	blx	r3
 80018d6:	3601      	adds	r6, #1
 80018d8:	e7ee      	b.n	80018b8 <__libc_init_array+0xc>
 80018da:	f855 3b04 	ldr.w	r3, [r5], #4
 80018de:	4798      	blx	r3
 80018e0:	3601      	adds	r6, #1
 80018e2:	e7f2      	b.n	80018ca <__libc_init_array+0x1e>
 80018e4:	0800192c 	.word	0x0800192c
 80018e8:	0800192c 	.word	0x0800192c
 80018ec:	0800192c 	.word	0x0800192c
 80018f0:	08001930 	.word	0x08001930

080018f4 <memset>:
 80018f4:	4402      	add	r2, r0
 80018f6:	4603      	mov	r3, r0
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d100      	bne.n	80018fe <memset+0xa>
 80018fc:	4770      	bx	lr
 80018fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001902:	e7f9      	b.n	80018f8 <memset+0x4>

08001904 <_init>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr

08001910 <_fini>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr


OpticalSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cd4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001eac  08001eac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001edc  08001edc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ee4  08001ee4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee4  08001ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001ef8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001ef8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000753f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163e  00000000  00000000  0002757b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00028bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  000292c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6d9  00000000  00000000  000298f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000830c  00000000  00000000  00048fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d60eb  00000000  00000000  000512dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001273c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a10  00000000  00000000  00127418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001e94 	.word	0x08001e94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001e94 	.word	0x08001e94

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b9a7 	b.w	8000588 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f835 	bl	80002b8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f828 	bl	80002b8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f817 	bl	80002b8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f809 	bl	80002b8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9d08      	ldr	r5, [sp, #32]
 80002be:	4604      	mov	r4, r0
 80002c0:	468e      	mov	lr, r1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d14d      	bne.n	8000362 <__udivmoddi4+0xaa>
 80002c6:	428a      	cmp	r2, r1
 80002c8:	4694      	mov	ip, r2
 80002ca:	d969      	bls.n	80003a0 <__udivmoddi4+0xe8>
 80002cc:	fab2 f282 	clz	r2, r2
 80002d0:	b152      	cbz	r2, 80002e8 <__udivmoddi4+0x30>
 80002d2:	fa01 f302 	lsl.w	r3, r1, r2
 80002d6:	f1c2 0120 	rsb	r1, r2, #32
 80002da:	fa20 f101 	lsr.w	r1, r0, r1
 80002de:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e2:	ea41 0e03 	orr.w	lr, r1, r3
 80002e6:	4094      	lsls	r4, r2
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	0c21      	lsrs	r1, r4, #16
 80002ee:	fbbe f6f8 	udiv	r6, lr, r8
 80002f2:	fa1f f78c 	uxth.w	r7, ip
 80002f6:	fb08 e316 	mls	r3, r8, r6, lr
 80002fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fe:	fb06 f107 	mul.w	r1, r6, r7
 8000302:	4299      	cmp	r1, r3
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x64>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 30ff 	add.w	r0, r6, #4294967295
 800030e:	f080 811f 	bcs.w	8000550 <__udivmoddi4+0x298>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 811c 	bls.w	8000550 <__udivmoddi4+0x298>
 8000318:	3e02      	subs	r6, #2
 800031a:	4463      	add	r3, ip
 800031c:	1a5b      	subs	r3, r3, r1
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb3 f0f8 	udiv	r0, r3, r8
 8000324:	fb08 3310 	mls	r3, r8, r0, r3
 8000328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032c:	fb00 f707 	mul.w	r7, r0, r7
 8000330:	42a7      	cmp	r7, r4
 8000332:	d90a      	bls.n	800034a <__udivmoddi4+0x92>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 33ff 	add.w	r3, r0, #4294967295
 800033c:	f080 810a 	bcs.w	8000554 <__udivmoddi4+0x29c>
 8000340:	42a7      	cmp	r7, r4
 8000342:	f240 8107 	bls.w	8000554 <__udivmoddi4+0x29c>
 8000346:	4464      	add	r4, ip
 8000348:	3802      	subs	r0, #2
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	1be4      	subs	r4, r4, r7
 8000350:	2600      	movs	r6, #0
 8000352:	b11d      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000354:	40d4      	lsrs	r4, r2
 8000356:	2300      	movs	r3, #0
 8000358:	e9c5 4300 	strd	r4, r3, [r5]
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0xc2>
 8000366:	2d00      	cmp	r5, #0
 8000368:	f000 80ef 	beq.w	800054a <__udivmoddi4+0x292>
 800036c:	2600      	movs	r6, #0
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	4630      	mov	r0, r6
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	fab3 f683 	clz	r6, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d14a      	bne.n	8000418 <__udivmoddi4+0x160>
 8000382:	428b      	cmp	r3, r1
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xd4>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80f9 	bhi.w	800057e <__udivmoddi4+0x2c6>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb61 0303 	sbc.w	r3, r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	469e      	mov	lr, r3
 8000396:	2d00      	cmp	r5, #0
 8000398:	d0e0      	beq.n	800035c <__udivmoddi4+0xa4>
 800039a:	e9c5 4e00 	strd	r4, lr, [r5]
 800039e:	e7dd      	b.n	800035c <__udivmoddi4+0xa4>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xec>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	2a00      	cmp	r2, #0
 80003aa:	f040 8092 	bne.w	80004d2 <__udivmoddi4+0x21a>
 80003ae:	eba1 010c 	sub.w	r1, r1, ip
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2601      	movs	r6, #1
 80003bc:	0c20      	lsrs	r0, r4, #16
 80003be:	fbb1 f3f7 	udiv	r3, r1, r7
 80003c2:	fb07 1113 	mls	r1, r7, r3, r1
 80003c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ca:	fb0e f003 	mul.w	r0, lr, r3
 80003ce:	4288      	cmp	r0, r1
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x12c>
 80003d2:	eb1c 0101 	adds.w	r1, ip, r1
 80003d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x12a>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 80003e2:	4643      	mov	r3, r8
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1110 	mls	r1, r7, r0, r1
 80003f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x156>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 31ff 	add.w	r1, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x154>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2ca>
 800040c:	4608      	mov	r0, r1
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000416:	e79c      	b.n	8000352 <__udivmoddi4+0x9a>
 8000418:	f1c6 0720 	rsb	r7, r6, #32
 800041c:	40b3      	lsls	r3, r6
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa20 f407 	lsr.w	r4, r0, r7
 800042a:	fa01 f306 	lsl.w	r3, r1, r6
 800042e:	431c      	orrs	r4, r3
 8000430:	40f9      	lsrs	r1, r7
 8000432:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000436:	fa00 f306 	lsl.w	r3, r0, r6
 800043a:	fbb1 f8f9 	udiv	r8, r1, r9
 800043e:	0c20      	lsrs	r0, r4, #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fb09 1118 	mls	r1, r9, r8, r1
 8000448:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044c:	fb08 f00e 	mul.w	r0, r8, lr
 8000450:	4288      	cmp	r0, r1
 8000452:	fa02 f206 	lsl.w	r2, r2, r6
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000458:	eb1c 0101 	adds.w	r1, ip, r1
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2bc>
 8000464:	4288      	cmp	r0, r1
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2bc>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4461      	add	r1, ip
 8000470:	1a09      	subs	r1, r1, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb1 f0f9 	udiv	r0, r1, r9
 8000478:	fb09 1110 	mls	r1, r9, r0, r1
 800047c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000480:	fb00 fe0e 	mul.w	lr, r0, lr
 8000484:	458e      	cmp	lr, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1e2>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2b4>
 8000492:	458e      	cmp	lr, r1
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2b4>
 8000496:	3802      	subs	r0, #2
 8000498:	4461      	add	r1, ip
 800049a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049e:	fba0 9402 	umull	r9, r4, r0, r2
 80004a2:	eba1 010e 	sub.w	r1, r1, lr
 80004a6:	42a1      	cmp	r1, r4
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46a6      	mov	lr, r4
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x2a4>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x2a0>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x212>
 80004b2:	ebb3 0208 	subs.w	r2, r3, r8
 80004b6:	eb61 010e 	sbc.w	r1, r1, lr
 80004ba:	fa01 f707 	lsl.w	r7, r1, r7
 80004be:	fa22 f306 	lsr.w	r3, r2, r6
 80004c2:	40f1      	lsrs	r1, r6
 80004c4:	431f      	orrs	r7, r3
 80004c6:	e9c5 7100 	strd	r7, r1, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	40d8      	lsrs	r0, r3
 80004d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004dc:	fa21 f303 	lsr.w	r3, r1, r3
 80004e0:	4091      	lsls	r1, r2
 80004e2:	4301      	orrs	r1, r0
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f0:	fb07 3610 	mls	r6, r7, r0, r3
 80004f4:	0c0b      	lsrs	r3, r1, #16
 80004f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004fa:	fb00 f60e 	mul.w	r6, r0, lr
 80004fe:	429e      	cmp	r6, r3
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x260>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b8>
 8000510:	429e      	cmp	r6, r3
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b8>
 8000514:	3802      	subs	r0, #2
 8000516:	4463      	add	r3, ip
 8000518:	1b9b      	subs	r3, r3, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000520:	fb07 3316 	mls	r3, r7, r6, r3
 8000524:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000528:	fb06 f30e 	mul.w	r3, r6, lr
 800052c:	428b      	cmp	r3, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x28a>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2b0>
 800053a:	428b      	cmp	r3, r1
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2b0>
 800053e:	3e02      	subs	r6, #2
 8000540:	4461      	add	r1, ip
 8000542:	1ac9      	subs	r1, r1, r3
 8000544:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0x104>
 800054a:	462e      	mov	r6, r5
 800054c:	4628      	mov	r0, r5
 800054e:	e705      	b.n	800035c <__udivmoddi4+0xa4>
 8000550:	4606      	mov	r6, r0
 8000552:	e6e3      	b.n	800031c <__udivmoddi4+0x64>
 8000554:	4618      	mov	r0, r3
 8000556:	e6f8      	b.n	800034a <__udivmoddi4+0x92>
 8000558:	454b      	cmp	r3, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f8>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000564:	3801      	subs	r0, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f8>
 8000568:	4646      	mov	r6, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x28a>
 800056c:	4620      	mov	r0, r4
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1e2>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x260>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b8>
 8000578:	3b02      	subs	r3, #2
 800057a:	4461      	add	r1, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x12c>
 800057e:	4630      	mov	r0, r6
 8000580:	e709      	b.n	8000396 <__udivmoddi4+0xde>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x156>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <I2C_init>:
#include "I2C.h"
#include "main.h"

void I2C_init(float freq) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	ed87 0a01 	vstr	s0, [r7, #4]
	GPIOA->MODER &= 0b11 << 30;
 8000596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80005a4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= 0b11 << 14;
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <I2C_init+0x34>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <I2C_init+0x34>)
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	6013      	str	r3, [r2, #0]
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	48000400 	.word	0x48000400

080005c4 <PMW3901_init>:
#include "SPI.h"
#include "stm32.h"
#include "main.h"

void PMW3901_init() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	write_reg(0x3A, 0x5A);
 80005c8:	215a      	movs	r1, #90	; 0x5a
 80005ca:	203a      	movs	r0, #58	; 0x3a
 80005cc:	f000 f8ce 	bl	800076c <write_reg>
	delay_ms(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f000 fc09 	bl	8000de8 <delay_ms>

	read_reg(0x00);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f906 	bl	80007e8 <read_reg>
	read_reg(0x5F);
 80005dc:	205f      	movs	r0, #95	; 0x5f
 80005de:	f000 f903 	bl	80007e8 <read_reg>

	read_reg(0x02);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f000 f900 	bl	80007e8 <read_reg>
	delay_us(50);
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f000 fc2d 	bl	8000e48 <delay_us>
	read_reg(0x03);
 80005ee:	2003      	movs	r0, #3
 80005f0:	f000 f8fa 	bl	80007e8 <read_reg>
	delay_us(50);
 80005f4:	2032      	movs	r0, #50	; 0x32
 80005f6:	f000 fc27 	bl	8000e48 <delay_us>
	read_reg(0x04);
 80005fa:	2004      	movs	r0, #4
 80005fc:	f000 f8f4 	bl	80007e8 <read_reg>
	delay_us(50);
 8000600:	2032      	movs	r0, #50	; 0x32
 8000602:	f000 fc21 	bl	8000e48 <delay_us>
	read_reg(0x05);
 8000606:	2005      	movs	r0, #5
 8000608:	f000 f8ee 	bl	80007e8 <read_reg>
	delay_us(50);
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f000 fc1b 	bl	8000e48 <delay_us>
	read_reg(0x06);
 8000612:	2006      	movs	r0, #6
 8000614:	f000 f8e8 	bl	80007e8 <read_reg>

	delay_ms(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fbe5 	bl	8000de8 <delay_ms>

	write_reg(0x7F, 0x00);
 800061e:	2100      	movs	r1, #0
 8000620:	207f      	movs	r0, #127	; 0x7f
 8000622:	f000 f8a3 	bl	800076c <write_reg>
	write_reg(0x61, 0xAD);
 8000626:	21ad      	movs	r1, #173	; 0xad
 8000628:	2061      	movs	r0, #97	; 0x61
 800062a:	f000 f89f 	bl	800076c <write_reg>
	write_reg(0x7F, 0x03);
 800062e:	2103      	movs	r1, #3
 8000630:	207f      	movs	r0, #127	; 0x7f
 8000632:	f000 f89b 	bl	800076c <write_reg>
	write_reg(0x40, 0x00);
 8000636:	2100      	movs	r1, #0
 8000638:	2040      	movs	r0, #64	; 0x40
 800063a:	f000 f897 	bl	800076c <write_reg>
	write_reg(0x7F, 0x05);
 800063e:	2105      	movs	r1, #5
 8000640:	207f      	movs	r0, #127	; 0x7f
 8000642:	f000 f893 	bl	800076c <write_reg>
	write_reg(0x41, 0xB3);
 8000646:	21b3      	movs	r1, #179	; 0xb3
 8000648:	2041      	movs	r0, #65	; 0x41
 800064a:	f000 f88f 	bl	800076c <write_reg>
	write_reg(0x43, 0xF1);
 800064e:	21f1      	movs	r1, #241	; 0xf1
 8000650:	2043      	movs	r0, #67	; 0x43
 8000652:	f000 f88b 	bl	800076c <write_reg>
	write_reg(0x45, 0x14);
 8000656:	2114      	movs	r1, #20
 8000658:	2045      	movs	r0, #69	; 0x45
 800065a:	f000 f887 	bl	800076c <write_reg>
	write_reg(0x5B, 0x32);
 800065e:	2132      	movs	r1, #50	; 0x32
 8000660:	205b      	movs	r0, #91	; 0x5b
 8000662:	f000 f883 	bl	800076c <write_reg>
	write_reg(0x5F, 0x34);
 8000666:	2134      	movs	r1, #52	; 0x34
 8000668:	205f      	movs	r0, #95	; 0x5f
 800066a:	f000 f87f 	bl	800076c <write_reg>
	write_reg(0x7B, 0x08);
 800066e:	2108      	movs	r1, #8
 8000670:	207b      	movs	r0, #123	; 0x7b
 8000672:	f000 f87b 	bl	800076c <write_reg>
	write_reg(0x7F, 0x06);
 8000676:	2106      	movs	r1, #6
 8000678:	207f      	movs	r0, #127	; 0x7f
 800067a:	f000 f877 	bl	800076c <write_reg>
	write_reg(0x44, 0x1B);
 800067e:	211b      	movs	r1, #27
 8000680:	2044      	movs	r0, #68	; 0x44
 8000682:	f000 f873 	bl	800076c <write_reg>
	write_reg(0x40, 0xBF);
 8000686:	21bf      	movs	r1, #191	; 0xbf
 8000688:	2040      	movs	r0, #64	; 0x40
 800068a:	f000 f86f 	bl	800076c <write_reg>
	write_reg(0x4E, 0x3F);
 800068e:	213f      	movs	r1, #63	; 0x3f
 8000690:	204e      	movs	r0, #78	; 0x4e
 8000692:	f000 f86b 	bl	800076c <write_reg>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <PMW3901_read_deltas>:

void PMW3901_read_deltas(int16_t *delta_x, int16_t *delta_y, uint8_t *squal, uint8_t *shutter_u) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
	static uint8_t x_l, x_h, y_l, y_h;

	read_reg(0x02);
 80006aa:	2002      	movs	r0, #2
 80006ac:	f000 f89c 	bl	80007e8 <read_reg>
	delay_us(50);
 80006b0:	2032      	movs	r0, #50	; 0x32
 80006b2:	f000 fbc9 	bl	8000e48 <delay_us>
	x_l = read_reg(0x03);
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 f896 	bl	80007e8 <read_reg>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <PMW3901_read_deltas+0xc0>)
 80006c2:	701a      	strb	r2, [r3, #0]
	delay_us(50);
 80006c4:	2032      	movs	r0, #50	; 0x32
 80006c6:	f000 fbbf 	bl	8000e48 <delay_us>
	x_h = read_reg(0x04);
 80006ca:	2004      	movs	r0, #4
 80006cc:	f000 f88c 	bl	80007e8 <read_reg>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <PMW3901_read_deltas+0xc4>)
 80006d6:	701a      	strb	r2, [r3, #0]
	delay_us(50);
 80006d8:	2032      	movs	r0, #50	; 0x32
 80006da:	f000 fbb5 	bl	8000e48 <delay_us>
	y_l = read_reg(0x05);
 80006de:	2005      	movs	r0, #5
 80006e0:	f000 f882 	bl	80007e8 <read_reg>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <PMW3901_read_deltas+0xc8>)
 80006ea:	701a      	strb	r2, [r3, #0]
	delay_us(50);
 80006ec:	2032      	movs	r0, #50	; 0x32
 80006ee:	f000 fbab 	bl	8000e48 <delay_us>
	y_h = read_reg(0x06);
 80006f2:	2006      	movs	r0, #6
 80006f4:	f000 f878 	bl	80007e8 <read_reg>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <PMW3901_read_deltas+0xcc>)
 80006fe:	701a      	strb	r2, [r3, #0]
	delay_us(50);
 8000700:	2032      	movs	r0, #50	; 0x32
 8000702:	f000 fba1 	bl	8000e48 <delay_us>
	*squal = read_reg(0x07);
 8000706:	2007      	movs	r0, #7
 8000708:	f000 f86e 	bl	80007e8 <read_reg>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	701a      	strb	r2, [r3, #0]
	delay_us(50);
 8000714:	2032      	movs	r0, #50	; 0x32
 8000716:	f000 fb97 	bl	8000e48 <delay_us>
	*shutter_u = read_reg(0x0C);
 800071a:	200c      	movs	r0, #12
 800071c:	f000 f864 	bl	80007e8 <read_reg>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	701a      	strb	r2, [r3, #0]

	*delta_x = ((int16_t)x_h << 8) | x_l;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <PMW3901_read_deltas+0xc4>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <PMW3901_read_deltas+0xc0>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21a      	sxth	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	801a      	strh	r2, [r3, #0]
	*delta_y = ((int16_t)y_h << 8) | y_l;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <PMW3901_read_deltas+0xcc>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <PMW3901_read_deltas+0xc8>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b21a      	sxth	r2, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	801a      	strh	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000028 	.word	0x20000028
 8000760:	20000029 	.word	0x20000029
 8000764:	2000002a 	.word	0x2000002a
 8000768:	2000002b 	.word	0x2000002b

0800076c <write_reg>:

void write_reg(uint8_t addr, uint8_t val) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
	addr |= 0x80u;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000782:	71fb      	strb	r3, [r7, #7]

	GPIOA->BSRR |= 1 << 20;
 8000784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800078e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000792:	6193      	str	r3, [r2, #24]
	delay_us(50);
 8000794:	2032      	movs	r0, #50	; 0x32
 8000796:	f000 fb57 	bl	8000e48 <delay_us>

	SPI_write(addr);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f905 	bl	80009ac <SPI_write>

	delay_us(50);
 80007a2:	2032      	movs	r0, #50	; 0x32
 80007a4:	f000 fb50 	bl	8000e48 <delay_us>

	SPI_write(val);
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f8fe 	bl	80009ac <SPI_write>

	while((SPI1->SR >> 7) & 1);
 80007b0:	bf00      	nop
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <write_reg+0x78>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	09db      	lsrs	r3, r3, #7
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f8      	bne.n	80007b2 <write_reg+0x46>

	delay_us(50);
 80007c0:	2032      	movs	r0, #50	; 0x32
 80007c2:	f000 fb41 	bl	8000e48 <delay_us>
	GPIOA->BSRR |= 1 << 4;
 80007c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6193      	str	r3, [r2, #24]

	delay_us(200);
 80007d6:	20c8      	movs	r0, #200	; 0xc8
 80007d8:	f000 fb36 	bl	8000e48 <delay_us>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40013000 	.word	0x40013000

080007e8 <read_reg>:

uint8_t read_reg(uint8_t addr) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	addr &= ~0x80u;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007f8:	71fb      	strb	r3, [r7, #7]

	GPIOA->BSRR |= 1 << 20;
 80007fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000808:	6193      	str	r3, [r2, #24]
	delay_us(50);
 800080a:	2032      	movs	r0, #50	; 0x32
 800080c:	f000 fb1c 	bl	8000e48 <delay_us>

	SPI_write(addr);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f8ca 	bl	80009ac <SPI_write>

	delay_us(50);
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f000 fb15 	bl	8000e48 <delay_us>

	while (!((SPI1->SR) & (1 << 1)));
 800081e:	bf00      	nop
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <read_reg+0x9c>)
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f9      	beq.n	8000820 <read_reg+0x38>
	while (((SPI1->SR) & (1 << 7)));
 800082c:	bf00      	nop
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <read_reg+0x9c>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f9      	bne.n	800082e <read_reg+0x46>

	uint16_t temp = *(volatile uint8_t *)(&SPI1->DR);
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <read_reg+0xa0>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	81fb      	strh	r3, [r7, #14]
	temp = SPI1->SR;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <read_reg+0x9c>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	81fb      	strh	r3, [r7, #14]

	SPI_write(0);
 8000848:	2000      	movs	r0, #0
 800084a:	f000 f8af 	bl	80009ac <SPI_write>

	while (!((SPI1->SR)  & (1 << 0)));
 800084e:	bf00      	nop
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <read_reg+0x9c>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f9      	beq.n	8000850 <read_reg+0x68>

	ret = *(volatile uint8_t *)(&SPI1->DR);
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <read_reg+0xa0>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	737b      	strb	r3, [r7, #13]

	delay_us(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f000 faf0 	bl	8000e48 <delay_us>
	GPIOA->BSRR |= 1 << 4;
 8000868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6193      	str	r3, [r2, #24]

	return ret;
 8000878:	7b7b      	ldrb	r3, [r7, #13]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40013000 	.word	0x40013000
 8000888:	4001300c 	.word	0x4001300c

0800088c <SPI_init>:

void SPI_init() {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 1 << 12;
 8000890:	4b43      	ldr	r3, [pc, #268]	; (80009a0 <SPI_init+0x114>)
 8000892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000894:	4a42      	ldr	r2, [pc, #264]	; (80009a0 <SPI_init+0x114>)
 8000896:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800089a:	6613      	str	r3, [r2, #96]	; 0x60

	//PB3 - AF - SPI1_SCK
	GPIOB->AFR[0] |= 0b0101 << 12;
 800089c:	4b41      	ldr	r3, [pc, #260]	; (80009a4 <SPI_init+0x118>)
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	4a40      	ldr	r2, [pc, #256]	; (80009a4 <SPI_init+0x118>)
 80008a2:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80008a6:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 1 << 7;
 80008a8:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <SPI_init+0x118>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <SPI_init+0x118>)
 80008ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 6);
 80008b4:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <SPI_init+0x118>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a3a      	ldr	r2, [pc, #232]	; (80009a4 <SPI_init+0x118>)
 80008ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008be:	6013      	str	r3, [r2, #0]

	//PB4 - AF - SPI1_MISO
	GPIOB->AFR[0] |= 0b0101 << 16;
 80008c0:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <SPI_init+0x118>)
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	4a37      	ldr	r2, [pc, #220]	; (80009a4 <SPI_init+0x118>)
 80008c6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80008ca:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 1 << 9;
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <SPI_init+0x118>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a34      	ldr	r2, [pc, #208]	; (80009a4 <SPI_init+0x118>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 8);
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <SPI_init+0x118>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <SPI_init+0x118>)
 80008de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008e2:	6013      	str	r3, [r2, #0]

	//PB5 - AF - SPI1_MOSI
	GPIOB->AFR[0] |= 0b0101 << 20;
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <SPI_init+0x118>)
 80008e6:	6a1b      	ldr	r3, [r3, #32]
 80008e8:	4a2e      	ldr	r2, [pc, #184]	; (80009a4 <SPI_init+0x118>)
 80008ea:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80008ee:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 1 << 11;
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <SPI_init+0x118>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <SPI_init+0x118>)
 80008f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008fa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 10);
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <SPI_init+0x118>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <SPI_init+0x118>)
 8000902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000906:	6013      	str	r3, [r2, #0]
//	GPIOA->AFR[0] |= 0b0101 << 16;
//	GPIOA->MODER |= 1 << 9;
//	GPIOA->MODER &= ~(1 << 8);

	// PA4 - GPO
	GPIOA->MODER &= ~(1 << 9);
 8000908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000912:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000916:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1 << 8;
 8000918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR &= ~(1 << 9);
 8000928:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000932:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000936:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 1 << 8;
 8000938:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	60d3      	str	r3, [r2, #12]

	SPI1->CR1 = 0;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <SPI_init+0x11c>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]

	//Baud rate: /128
	SPI1->CR1 |= 0b111 << 3;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <SPI_init+0x11c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <SPI_init+0x11c>)
 8000954:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000958:	6013      	str	r3, [r2, #0]

	//SPI Master
	SPI1->CR1 |= 1 << 2;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <SPI_init+0x11c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <SPI_init+0x11c>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6013      	str	r3, [r2, #0]

	//SW CS control
	SPI1->CR1 |= 1 << 9;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <SPI_init+0x11c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <SPI_init+0x11c>)
 800096c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000970:	6013      	str	r3, [r2, #0]

	//CS enable
	SPI1->CR2 |= 1 << 2;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <SPI_init+0x11c>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <SPI_init+0x11c>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6053      	str	r3, [r2, #4]

	//8-bit data
//	SPI1->CR2 |= 0b0011 << 8;

	//8-bit RX threshold
	SPI1->CR2 |= 1 << 12;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <SPI_init+0x11c>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <SPI_init+0x11c>)
 8000984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000988:	6053      	str	r3, [r2, #4]

	//SPI enable
	SPI1->CR1 |= 1 << 6;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <SPI_init+0x11c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <SPI_init+0x11c>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6013      	str	r3, [r2, #0]
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000400 	.word	0x48000400
 80009a8:	40013000 	.word	0x40013000

080009ac <SPI_write>:

void SPI_write(uint8_t data) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	while(((SPI1->SR >> 1) & 1) == 0);
 80009b6:	bf00      	nop
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <SPI_write+0x2c>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f8      	beq.n	80009b8 <SPI_write+0xc>
//	SPI1->DR = data;
	*(volatile uint8_t *)(&SPI1->DR) = data;
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SPI_write+0x30>)
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	7013      	strb	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40013000 	.word	0x40013000
 80009dc:	4001300c 	.word	0x4001300c

080009e0 <UART_init>:
#include "UART.h"
#include "main.h"

void UART_init(float freq) {
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	ed87 0a01 	vstr	s0, [r7, #4]
    RCC->APB1ENR1 |= 1 << 17;
 80009ea:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <UART_init+0xf0>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	4a38      	ldr	r2, [pc, #224]	; (8000ad0 <UART_init+0xf0>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOA->AFR[0] |= 0b0111 << 8;
 80009f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009fa:	6a1b      	ldr	r3, [r3, #32]
 80009fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a00:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a04:	6213      	str	r3, [r2, #32]
    GPIOA->MODER |= 1<<5;
 8000a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1<<4);
 8000a16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a20:	f023 0310 	bic.w	r3, r3, #16
 8000a24:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] |= 0b0111 << 12;
 8000a26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a30:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a34:	6213      	str	r3, [r2, #32]
    GPIOA->MODER |= 1<<7;
 8000a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1<<6);
 8000a46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a54:	6013      	str	r3, [r2, #0]

    USART2->CR1 &= ~(1);
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <UART_init+0xf4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <UART_init+0xf4>)
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6013      	str	r3, [r2, #0]
    USART2->CR1 = 0x00000000;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <UART_init+0xf4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
    USART2->CR1 |= 1;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <UART_init+0xf4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <UART_init+0xf4>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]
    USART2->CR2 = 0x00000000;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <UART_init+0xf4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
    USART2->CR3 = 0x00000000;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <UART_init+0xf4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]

    float f = 170000000.0 / freq;
 8000a80:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000ad8 <UART_init+0xf8>
 8000a84:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a8c:	edc7 7a03 	vstr	s15, [r7, #12]
	USART2->BRR = (uint32_t)f;
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <UART_init+0xf4>)
 8000a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a9a:	ee17 2a90 	vmov	r2, s15
 8000a9e:	60da      	str	r2, [r3, #12]
    USART2->PRESC &= ~(0b1111);
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <UART_init+0xf4>)
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <UART_init+0xf4>)
 8000aa6:	f023 030f 	bic.w	r3, r3, #15
 8000aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

    //Enable UART
    USART2->CR1 |= 1<<2;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <UART_init+0xf4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <UART_init+0xf4>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= 1<<3;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <UART_init+0xf4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <UART_init+0xf4>)
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	4d221fe8 	.word	0x4d221fe8

08000adc <UART_send>:

void UART_send(uint8_t ch) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    while((USART2->ISR & (1 << 7)) == 0);
 8000ae6:	bf00      	nop
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <UART_send+0x2c>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f9      	beq.n	8000ae8 <UART_send+0xc>
	USART2->TDR = ch;
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <UART_send+0x2c>)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40004400 	.word	0x40004400

08000b0c <UART_send_str>:

void UART_send_str(char str[]) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    int i;
    for(i = 0; str[i] != '\0'; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e009      	b.n	8000b2e <UART_send_str+0x22>
        UART_send(str[i]);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffda 	bl	8000adc <UART_send>
    for(i = 0; str[i] != '\0'; i++) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1ef      	bne.n	8000b1a <UART_send_str+0xe>
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <UART_write_int>:

void UART_write_int(int64_t a) {
 8000b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	e9c7 0100 	strd	r0, r1, [r7]
    long int tens;

    if(a < 0) {
 8000b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	da0b      	bge.n	8000b70 <UART_write_int+0x2c>
        a *= (-1);
 8000b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f1d2 0800 	rsbs	r8, r2, #0
 8000b62:	eb61 0903 	sbc.w	r9, r1, r3
 8000b66:	e9c7 8900 	strd	r8, r9, [r7]
        UART_send('-');
 8000b6a:	202d      	movs	r0, #45	; 0x2d
 8000b6c:	f7ff ffb6 	bl	8000adc <UART_send>
    }
    //else UART_send('+');

    for(tens = 1; tens <= a; tens *= 10);
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e005      	b.n	8000b82 <UART_write_int+0x3e>
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	17da      	asrs	r2, r3, #31
 8000b86:	461c      	mov	r4, r3
 8000b88:	4615      	mov	r5, r2
 8000b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b8e:	42a2      	cmp	r2, r4
 8000b90:	41ab      	sbcs	r3, r5
 8000b92:	daf0      	bge.n	8000b76 <UART_write_int+0x32>
    if(a != 0) tens /= 10;
 8000b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	d02a      	beq.n	8000bf2 <UART_write_int+0xae>
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <UART_write_int+0xc0>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]
    for(; tens > 0; tens /= 10) {
 8000bac:	e021      	b.n	8000bf2 <UART_write_int+0xae>
        UART_send(((a / tens) % 10) + 48);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	17da      	asrs	r2, r3, #31
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	4693      	mov	fp, r2
 8000bb6:	4652      	mov	r2, sl
 8000bb8:	465b      	mov	r3, fp
 8000bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bbe:	f7ff fb2b 	bl	8000218 <__aeabi_ldivmod>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 020a 	mov.w	r2, #10
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	f7ff fb21 	bl	8000218 <__aeabi_ldivmod>
 8000bd6:	b2d3      	uxtb	r3, r2
 8000bd8:	3330      	adds	r3, #48	; 0x30
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff7d 	bl	8000adc <UART_send>
    for(; tens > 0; tens /= 10) {
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <UART_write_int+0xc0>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1092      	asrs	r2, r2, #2
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	dcda      	bgt.n	8000bae <UART_write_int+0x6a>
    }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c04:	66666667 	.word	0x66666667

08000c08 <main>:
#include "UART.h"
#include "I2C.h"
#include "SPI.h"
#include <math.h>

int main(void) {
 8000c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000c10:	f000 fa1f 	bl	8001052 <HAL_Init>

	SystemClock_Config();
 8000c14:	f000 f944 	bl	8000ea0 <SystemClock_Config>

	GPIO_init();
 8000c18:	f000 f894 	bl	8000d44 <GPIO_init>

	GPIOF->MODER &= ~(1 << 1);
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <main+0x11c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a40      	ldr	r2, [pc, #256]	; (8000d24 <main+0x11c>)
 8000c22:	f023 0302 	bic.w	r3, r3, #2
 8000c26:	6013      	str	r3, [r2, #0]
	GPIOF->MODER &= ~1;
 8000c28:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <main+0x11c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a3d      	ldr	r2, [pc, #244]	; (8000d24 <main+0x11c>)
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

	GPIOF->MODER &= ~(1 << 3);
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <main+0x11c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <main+0x11c>)
 8000c3a:	f023 0308 	bic.w	r3, r3, #8
 8000c3e:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= 1 << 2;
 8000c40:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <main+0x11c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a37      	ldr	r2, [pc, #220]	; (8000d24 <main+0x11c>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6013      	str	r3, [r2, #0]

//	GPIOF->BSRR |= 1 << 17;
	GPIOF->BSRR |= 1 << 1;
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <main+0x11c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a34      	ldr	r2, [pc, #208]	; (8000d24 <main+0x11c>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6193      	str	r3, [r2, #24]

	TIM6_init();
 8000c58:	f000 f884 	bl	8000d64 <TIM6_init>

	UART_init(115200);
 8000c5c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000d28 <main+0x120>
 8000c60:	f7ff febe 	bl	80009e0 <UART_init>
	I2C_init(0);
 8000c64:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8000d2c <main+0x124>
 8000c68:	f7ff fc90 	bl	800058c <I2C_init>
	SPI_init();
 8000c6c:	f7ff fe0e 	bl	800088c <SPI_init>

	GPIOF->BSRR |= 1 << 17;
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <main+0x11c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a2b      	ldr	r2, [pc, #172]	; (8000d24 <main+0x11c>)
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7a:	6193      	str	r3, [r2, #24]
	delay_ms(25);
 8000c7c:	2019      	movs	r0, #25
 8000c7e:	f000 f8b3 	bl	8000de8 <delay_ms>
	GPIOF->BSRR |= 1 << 1;
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <main+0x11c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <main+0x11c>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6193      	str	r3, [r2, #24]

	delay_ms(100);
 8000c8e:	2064      	movs	r0, #100	; 0x64
 8000c90:	f000 f8aa 	bl	8000de8 <delay_ms>

	PMW3901_init();
 8000c94:	f7ff fc96 	bl	80005c4 <PMW3901_init>

	delay_ms(100);
 8000c98:	2064      	movs	r0, #100	; 0x64
 8000c9a:	f000 f8a5 	bl	8000de8 <delay_ms>

	int16_t delta_x, delta_y;
	uint8_t squal, shutter_u;
	while(1) {
		PMW3901_read_deltas(&delta_x, &delta_y, &squal, &shutter_u);
 8000c9e:	f107 030a 	add.w	r3, r7, #10
 8000ca2:	f107 020b 	add.w	r2, r7, #11
 8000ca6:	f107 010c 	add.w	r1, r7, #12
 8000caa:	f107 000e 	add.w	r0, r7, #14
 8000cae:	f7ff fcf5 	bl	800069c <PMW3901_read_deltas>
		UART_send_str("x: ");
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <main+0x128>)
 8000cb4:	f7ff ff2a 	bl	8000b0c <UART_send_str>
		UART_write_int(delta_x);
 8000cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	17da      	asrs	r2, r3, #31
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cc8:	f7ff ff3c 	bl	8000b44 <UART_write_int>
		UART_send_str("\ty: ");
 8000ccc:	4819      	ldr	r0, [pc, #100]	; (8000d34 <main+0x12c>)
 8000cce:	f7ff ff1d 	bl	8000b0c <UART_send_str>
		UART_write_int(delta_y);
 8000cd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	17da      	asrs	r2, r3, #31
 8000cda:	469a      	mov	sl, r3
 8000cdc:	4693      	mov	fp, r2
 8000cde:	4650      	mov	r0, sl
 8000ce0:	4659      	mov	r1, fp
 8000ce2:	f7ff ff2f 	bl	8000b44 <UART_write_int>
		UART_send_str("\tQ: ");
 8000ce6:	4814      	ldr	r0, [pc, #80]	; (8000d38 <main+0x130>)
 8000ce8:	f7ff ff10 	bl	8000b0c <UART_send_str>
		UART_write_int(squal);
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4698      	mov	r8, r3
 8000cf4:	4691      	mov	r9, r2
 8000cf6:	4640      	mov	r0, r8
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	f7ff ff23 	bl	8000b44 <UART_write_int>
		UART_send_str("\tS: ");
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <main+0x134>)
 8000d00:	f7ff ff04 	bl	8000b0c <UART_send_str>
		UART_write_int(shutter_u);
 8000d04:	7abb      	ldrb	r3, [r7, #10]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	461c      	mov	r4, r3
 8000d0c:	4615      	mov	r5, r2
 8000d0e:	4620      	mov	r0, r4
 8000d10:	4629      	mov	r1, r5
 8000d12:	f7ff ff17 	bl	8000b44 <UART_write_int>
		UART_send_str("\n");
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <main+0x138>)
 8000d18:	f7ff fef8 	bl	8000b0c <UART_send_str>

//		UART_write_int(read_reg(0x00));
//		UART_send_str("\n");

		delay_ms(100);
 8000d1c:	2064      	movs	r0, #100	; 0x64
 8000d1e:	f000 f863 	bl	8000de8 <delay_ms>
		PMW3901_read_deltas(&delta_x, &delta_y, &squal, &shutter_u);
 8000d22:	e7bc      	b.n	8000c9e <main+0x96>
 8000d24:	48001400 	.word	0x48001400
 8000d28:	47e10000 	.word	0x47e10000
 8000d2c:	00000000 	.word	0x00000000
 8000d30:	08001eac 	.word	0x08001eac
 8000d34:	08001eb0 	.word	0x08001eb0
 8000d38:	08001eb8 	.word	0x08001eb8
 8000d3c:	08001ec0 	.word	0x08001ec0
 8000d40:	08001ec8 	.word	0x08001ec8

08000d44 <GPIO_init>:
#include <math.h>

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void GPIO_init() {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 0b1111111;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <GPIO_init+0x1c>)
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <GPIO_init+0x1c>)
 8000d4e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000d52:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <TIM6_init>:
    // TIM4->CR1 |= 1;
    NVIC_SetPriority(TIM4_IRQn, 5);
    NVIC_EnableIRQ(TIM4_IRQn);
}

void TIM6_init() {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= 1 << 4;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <TIM6_init+0x74>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <TIM6_init+0x74>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58

    TIM6->CR1 = 0;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <TIM6_init+0x78>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
    TIM6->CR2 = 0;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <TIM6_init+0x78>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]

    float freq = 10000;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <TIM6_init+0x7c>)
 8000d84:	607b      	str	r3, [r7, #4]
    float f = (float)SYSCLK_FREQ / freq;
 8000d86:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000de4 <TIM6_init+0x80>
 8000d8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d92:	edc7 7a00 	vstr	s15, [r7]
    // TIM6->ARR |= ((uint32_t)f & 0x000FFFFF);
    // TIM6->ARR = (uint32_t)f;
    TIM6->ARR |= 0xFFFFF;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <TIM6_init+0x78>)
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <TIM6_init+0x78>)
 8000d9c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000da0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM6->PSC = (uint16_t)f - 1;
 8000da6:	edd7 7a00 	vldr	s15, [r7]
 8000daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dae:	ee17 3a90 	vmov	r3, s15
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	1e5a      	subs	r2, r3, #1
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <TIM6_init+0x78>)
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28

    TIM6->CNT = 0;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <TIM6_init+0x78>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24

    TIM6->EGR |= 1;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <TIM6_init+0x78>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <TIM6_init+0x78>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6153      	str	r3, [r2, #20]

    // TIM6->CR1 |= 1;
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40001000 	.word	0x40001000
 8000de0:	461c4000 	.word	0x461c4000
 8000de4:	4d221fe8 	.word	0x4d221fe8

08000de8 <delay_ms>:

void delay_ms(uint16_t d) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	TIM6->CNT = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <delay_ms+0x5c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = 17000 - 1;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <delay_ms+0x5c>)
 8000dfa:	f244 2267 	movw	r2, #16999	; 0x4267
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->EGR |= 1;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <delay_ms+0x5c>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <delay_ms+0x5c>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= 1;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <delay_ms+0x5c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <delay_ms+0x5c>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
	while(TIM6->CNT < d*10);
 8000e18:	bf00      	nop
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <delay_ms+0x5c>)
 8000e1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d3f6      	bcc.n	8000e1a <delay_ms+0x32>
	TIM6->CR1 &= ~1;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <delay_ms+0x5c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <delay_ms+0x5c>)
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	40001000 	.word	0x40001000

08000e48 <delay_us>:

void delay_us(uint16_t d) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
	TIM6->CNT = 0;
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <delay_us+0x54>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = 170 - 1;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <delay_us+0x54>)
 8000e5a:	22a9      	movs	r2, #169	; 0xa9
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->EGR |= 1;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <delay_us+0x54>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <delay_us+0x54>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= 1;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <delay_us+0x54>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <delay_us+0x54>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6013      	str	r3, [r2, #0]
	while(TIM6->CNT < d);
 8000e76:	bf00      	nop
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <delay_us+0x54>)
 8000e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3fa      	bcc.n	8000e78 <delay_us+0x30>
	TIM6->CR1 &= ~1;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <delay_us+0x54>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <delay_us+0x54>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40001000 	.word	0x40001000

08000ea0 <SystemClock_Config>:
    TIM8->CNT = 0;

    TIM8->CR1 |= 1;
}

void SystemClock_Config(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2238      	movs	r2, #56	; 0x38
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 ffe8 	bl	8001e84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 fa1a 	bl	80012fc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed2:	2340      	movs	r3, #64	; 0x40
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eda:	2302      	movs	r3, #2
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 21;
 8000ee2:	2315      	movs	r3, #21
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 faa4 	bl	8001444 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x66>
	{
	Error_Handler();
 8000f02:	f000 f818 	bl	8000f36 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	607b      	str	r3, [r7, #4]
	                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fda8 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x8e>
	{
	Error_Handler();
 8000f2a:	f000 f804 	bl	8000f36 <Error_Handler>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3750      	adds	r7, #80	; 0x50
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <Error_Handler>:

void Error_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3a:	b672      	cpsid	i
}
 8000f3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_MspInit+0x44>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_MspInit+0x44>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6613      	str	r3, [r2, #96]	; 0x60
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_MspInit+0x44>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_MspInit+0x44>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f890 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001002:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f000 ff05 	bl	8001e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f7ff fde9 	bl	8000c08 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001044:	08001eec 	.word	0x08001eec
  ldr r2, =_sbss
 8001048:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800104c:	20000030 	.word	0x20000030

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>

08001052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f91b 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f80e 	bl	8001084 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001074:	f7ff ff64 	bl	8000f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	79fb      	ldrb	r3, [r7, #7]

}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_InitTick+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d022      	beq.n	80010de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_InitTick+0x6c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_InitTick+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f918 	bl	80012e2 <HAL_SYSTICK_Config>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10f      	bne.n	80010d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	d809      	bhi.n	80010d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010be:	2200      	movs	r2, #0
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295
 80010c6:	f000 f8f2 	bl	80012ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_InitTick+0x70>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e004      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <HAL_IncTick+0x1c>)
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	2000002c 	.word	0x2000002c
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000002c 	.word	0x2000002c

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff47 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff5e 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffb2 	bl	8001254 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d141      	bne.n	800138e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800130a:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001316:	d131      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001318:	4b47      	ldr	r3, [pc, #284]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800131e:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001324:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001330:	4a41      	ldr	r2, [pc, #260]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001336:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2232      	movs	r2, #50	; 0x32
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	4a3f      	ldr	r2, [pc, #252]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9b      	lsrs	r3, r3, #18
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134e:	e002      	b.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3b01      	subs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001362:	d102      	bne.n	800136a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f2      	bne.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d158      	bne.n	800142a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e057      	b.n	800142c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001388:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800138c:	e04d      	b.n	800142a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001394:	d141      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a2:	d131      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013aa:	4a23      	ldr	r2, [pc, #140]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2232      	movs	r2, #50	; 0x32
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013da:	e002      	b.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3b01      	subs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d102      	bne.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f2      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001402:	d112      	bne.n	800142a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e011      	b.n	800142c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001418:	e007      	b.n	800142a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001428:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40007000 	.word	0x40007000
 800143c:	20000000 	.word	0x20000000
 8001440:	431bde83 	.word	0x431bde83

08001444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e306      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d075      	beq.n	800154e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001462:	4b97      	ldr	r3, [pc, #604]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146c:	4b94      	ldr	r3, [pc, #592]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d102      	bne.n	8001482 <HAL_RCC_OscConfig+0x3e>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d002      	beq.n	8001488 <HAL_RCC_OscConfig+0x44>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d10b      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d05b      	beq.n	800154c <HAL_RCC_OscConfig+0x108>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d157      	bne.n	800154c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e2e1      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d106      	bne.n	80014b8 <HAL_RCC_OscConfig+0x74>
 80014aa:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a84      	ldr	r2, [pc, #528]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e01d      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7e      	ldr	r2, [pc, #504]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7b      	ldr	r2, [pc, #492]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014dc:	4b78      	ldr	r3, [pc, #480]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a77      	ldr	r2, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a74      	ldr	r2, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fe0e 	bl	800111c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fe0a 	bl	800111c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e2a6      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0xc0>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fdfa 	bl	800111c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fdf6 	bl	800111c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e292      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800153e:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0xe8>
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d075      	beq.n	8001646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155a:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d102      	bne.n	800157a <HAL_RCC_OscConfig+0x136>
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d002      	beq.n	8001580 <HAL_RCC_OscConfig+0x13c>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d11f      	bne.n	80015c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	4b4f      	ldr	r3, [pc, #316]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_OscConfig+0x154>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e265      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	4946      	ldr	r1, [pc, #280]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015ac:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <HAL_RCC_OscConfig+0x280>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fd67 	bl	8001084 <HAL_InitTick>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d043      	beq.n	8001644 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e251      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d023      	beq.n	8001610 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c8:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a3c      	ldr	r2, [pc, #240]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fda2 	bl	800111c <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fd9e 	bl	800111c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e23a      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	061b      	lsls	r3, r3, #24
 8001608:	492d      	ldr	r1, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
 800160e:	e01a      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800161a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fd7e 	bl	800111c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fd7a 	bl	800111c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e216      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x1e0>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d041      	beq.n	80016d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01c      	beq.n	8001694 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800165c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7ff fd57 	bl	800111c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff fd53 	bl	800111c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1ef      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ef      	beq.n	8001672 <HAL_RCC_OscConfig+0x22e>
 8001692:	e020      	b.n	80016d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fd3a 	bl	800111c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016aa:	e00d      	b.n	80016c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fd36 	bl	800111c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d906      	bls.n	80016c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1d2      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ea      	bne.n	80016ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80a6 	beq.w	8001830 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016e8:	4b84      	ldr	r3, [pc, #528]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2b4>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x2b6>
 80016f8:	2300      	movs	r3, #0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00d      	beq.n	800171a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a7e      	ldr	r2, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001716:	2301      	movs	r3, #1
 8001718:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_OscConfig+0x4bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001726:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x4bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a75      	ldr	r2, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x4bc>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7ff fcf3 	bl	800111c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7ff fcef 	bl	800111c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e18b      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174c:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0x4bc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d108      	bne.n	8001772 <HAL_RCC_OscConfig+0x32e>
 8001760:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	4a65      	ldr	r2, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001770:	e024      	b.n	80017bc <HAL_RCC_OscConfig+0x378>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d110      	bne.n	800179c <HAL_RCC_OscConfig+0x358>
 800177a:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	4a5e      	ldr	r2, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178a:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001790:	4a5a      	ldr	r2, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179a:	e00f      	b.n	80017bc <HAL_RCC_OscConfig+0x378>
 800179c:	4b57      	ldr	r3, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	4a56      	ldr	r2, [pc, #344]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d016      	beq.n	80017f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fcaa 	bl	800111c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff fca6 	bl	800111c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e140      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ed      	beq.n	80017cc <HAL_RCC_OscConfig+0x388>
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff fc93 	bl	800111c <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fc8f 	bl	800111c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e129      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ed      	bne.n	80017fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	4a34      	ldr	r2, [pc, #208]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 800182a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d03c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01c      	beq.n	800187e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fc62 	bl	800111c <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185c:	f7ff fc5e 	bl	800111c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0fa      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ef      	beq.n	800185c <HAL_RCC_OscConfig+0x418>
 800187c:	e01b      	b.n	80018b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fc45 	bl	800111c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001896:	f7ff fc41 	bl	800111c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0dd      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80018aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ef      	bne.n	8001896 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80d1 	beq.w	8001a62 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	f000 808b 	beq.w	80019e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d15e      	bne.n	8001994 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fc1b 	bl	800111c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	e00c      	b.n	8001904 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff fc17 	bl	800111c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d905      	bls.n	8001904 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0b3      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
 80018fc:	40021000 	.word	0x40021000
 8001900:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ec      	bne.n	80018ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001910:	4b56      	ldr	r3, [pc, #344]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <HAL_RCC_OscConfig+0x62c>)
 8001916:	4013      	ands	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6a11      	ldr	r1, [r2, #32]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001920:	3a01      	subs	r2, #1
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800192a:	0212      	lsls	r2, r2, #8
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001932:	0852      	lsrs	r2, r2, #1
 8001934:	3a01      	subs	r2, #1
 8001936:	0552      	lsls	r2, r2, #21
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800193e:	0852      	lsrs	r2, r2, #1
 8001940:	3a01      	subs	r2, #1
 8001942:	0652      	lsls	r2, r2, #25
 8001944:	4311      	orrs	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800194a:	06d2      	lsls	r2, r2, #27
 800194c:	430a      	orrs	r2, r1
 800194e:	4947      	ldr	r1, [pc, #284]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001950:	4313      	orrs	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fbd6 	bl	800111c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff fbd2 	bl	800111c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e06e      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x530>
 8001992:	e066      	b.n	8001a62 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a34      	ldr	r2, [pc, #208]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 800199a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 80019a6:	f023 0303 	bic.w	r3, r3, #3
 80019aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019ac:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a2e      	ldr	r2, [pc, #184]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 80019b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fbae 	bl	800111c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff fbaa 	bl	800111c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e046      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x580>
 80019e2:	e03e      	b.n	8001a62 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e039      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_RCC_OscConfig+0x628>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d12c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d123      	bne.n	8001a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d11b      	bne.n	8001a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d113      	bne.n	8001a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	019f800c 	.word	0x019f800c

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e11e      	b.n	8001cca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	498c      	ldr	r1, [pc, #560]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e106      	b.n	8001cca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d073      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d129      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad0:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0f4      	b.n	8001cca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ae0:	f000 f966 	bl	8001db0 <RCC_GetSysClockFreqFromPLLSource>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4a7c      	ldr	r2, [pc, #496]	; (8001cdc <HAL_RCC_ClockConfig+0x268>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d93f      	bls.n	8001b6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d033      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d12f      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b16:	4a70      	ldr	r2, [pc, #448]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e024      	b.n	8001b6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0c6      	b.n	8001cca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0be      	b.n	8001cca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b4c:	f000 f8ce 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <HAL_RCC_ClockConfig+0x268>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d909      	bls.n	8001b6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b62:	4a5d      	ldr	r2, [pc, #372]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4957      	ldr	r1, [pc, #348]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b80:	f7ff facc 	bl	800111c <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7ff fac8 	bl	800111c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e095      	b.n	8001cca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 020c 	and.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1eb      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d023      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001be0:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001be8:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4936      	ldr	r1, [pc, #216]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b80      	cmp	r3, #128	; 0x80
 8001c08:	d105      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d21d      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c24:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 020f 	bic.w	r2, r3, #15
 8001c2c:	4929      	ldr	r1, [pc, #164]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c34:	f7ff fa72 	bl	800111c <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7ff fa6e 	bl	800111c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e03b      	b.n	8001cca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1ed      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4917      	ldr	r1, [pc, #92]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	490f      	ldr	r1, [pc, #60]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9e:	f000 f825 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <HAL_RCC_ClockConfig+0x26c>)
 8001cb0:	5ccb      	ldrb	r3, [r1, r3]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_RCC_ClockConfig+0x270>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x274>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f9de 	bl	8001084 <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	04c4b400 	.word	0x04c4b400
 8001ce0:	08001ecc 	.word	0x08001ecc
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e047      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	e03e      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d136      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3301      	adds	r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4a:	68d2      	ldr	r2, [r2, #12]
 8001d4c:	0a12      	lsrs	r2, r2, #8
 8001d4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
      break;
 8001d58:	e00c      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d64:	68d2      	ldr	r2, [r2, #12]
 8001d66:	0a12      	lsrs	r2, r2, #8
 8001d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
      break;
 8001d72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0e5b      	lsrs	r3, r3, #25
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e001      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d94:	693b      	ldr	r3, [r7, #16]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	007a1200 	.word	0x007a1200

08001db0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d10c      	bne.n	8001dee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd4:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dde:	68d2      	ldr	r2, [r2, #12]
 8001de0:	0a12      	lsrs	r2, r2, #8
 8001de2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
    break;
 8001dec:	e00c      	b.n	8001e08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df8:	68d2      	ldr	r2, [r2, #12]
 8001dfa:	0a12      	lsrs	r2, r2, #8
 8001dfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    break;
 8001e06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0e5b      	lsrs	r3, r3, #25
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e22:	687b      	ldr	r3, [r7, #4]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	007a1200 	.word	0x007a1200
 8001e38:	00f42400 	.word	0x00f42400

08001e3c <__libc_init_array>:
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	4d0d      	ldr	r5, [pc, #52]	; (8001e74 <__libc_init_array+0x38>)
 8001e40:	4c0d      	ldr	r4, [pc, #52]	; (8001e78 <__libc_init_array+0x3c>)
 8001e42:	1b64      	subs	r4, r4, r5
 8001e44:	10a4      	asrs	r4, r4, #2
 8001e46:	2600      	movs	r6, #0
 8001e48:	42a6      	cmp	r6, r4
 8001e4a:	d109      	bne.n	8001e60 <__libc_init_array+0x24>
 8001e4c:	4d0b      	ldr	r5, [pc, #44]	; (8001e7c <__libc_init_array+0x40>)
 8001e4e:	4c0c      	ldr	r4, [pc, #48]	; (8001e80 <__libc_init_array+0x44>)
 8001e50:	f000 f820 	bl	8001e94 <_init>
 8001e54:	1b64      	subs	r4, r4, r5
 8001e56:	10a4      	asrs	r4, r4, #2
 8001e58:	2600      	movs	r6, #0
 8001e5a:	42a6      	cmp	r6, r4
 8001e5c:	d105      	bne.n	8001e6a <__libc_init_array+0x2e>
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
 8001e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e64:	4798      	blx	r3
 8001e66:	3601      	adds	r6, #1
 8001e68:	e7ee      	b.n	8001e48 <__libc_init_array+0xc>
 8001e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e6e:	4798      	blx	r3
 8001e70:	3601      	adds	r6, #1
 8001e72:	e7f2      	b.n	8001e5a <__libc_init_array+0x1e>
 8001e74:	08001ee4 	.word	0x08001ee4
 8001e78:	08001ee4 	.word	0x08001ee4
 8001e7c:	08001ee4 	.word	0x08001ee4
 8001e80:	08001ee8 	.word	0x08001ee8

08001e84 <memset>:
 8001e84:	4402      	add	r2, r0
 8001e86:	4603      	mov	r3, r0
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <memset+0xa>
 8001e8c:	4770      	bx	lr
 8001e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e92:	e7f9      	b.n	8001e88 <memset+0x4>

08001e94 <_init>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	bf00      	nop
 8001e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9a:	bc08      	pop	{r3}
 8001e9c:	469e      	mov	lr, r3
 8001e9e:	4770      	bx	lr

08001ea0 <_fini>:
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea2:	bf00      	nop
 8001ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea6:	bc08      	pop	{r3}
 8001ea8:	469e      	mov	lr, r3
 8001eaa:	4770      	bx	lr

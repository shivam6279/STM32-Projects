
ESC_G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006060  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006278  08006278  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006280  08006280  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006280  08006280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000000c  08006294  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08006294  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001759f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a1  00000000  00000000  000375db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00039e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f874  00000000  00000000  0003c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001691f  00000000  00000000  0005beac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d75a7  00000000  00000000  000727cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149d72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005850  00000000  00000000  00149dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006220 	.word	0x08006220

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006220 	.word	0x08006220

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
  * @retval int
  */
volatile uint16_t val1[2], val2[2];

int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fea4 	bl	800126e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f855 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fba1 	bl	8000c70 <MX_GPIO_Init>
  MX_DMA_Init();
 800052e:	f000 fb6d 	bl	8000c0c <MX_DMA_Init>
  MX_ADC1_Init();
 8000532:	f000 f89b 	bl	800066c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000536:	f000 f925 	bl	8000784 <MX_ADC2_Init>
  MX_TIM1_Init();
 800053a:	f000 f99d 	bl	8000878 <MX_TIM1_Init>
  MX_TIM2_Init();
 800053e:	f000 fa6f 	bl	8000a20 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000542:	f000 fae1 	bl	8000b08 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000546:	f000 fb15 	bl	8000b74 <MX_USART2_UART_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	4819      	ldr	r0, [pc, #100]	; (80005b4 <main+0x98>)
 800054e:	f003 ff15 	bl	800437c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000552:	2100      	movs	r1, #0
 8000554:	4817      	ldr	r0, [pc, #92]	; (80005b4 <main+0x98>)
 8000556:	f004 fe67 	bl	8005228 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800055a:	2104      	movs	r1, #4
 800055c:	4815      	ldr	r0, [pc, #84]	; (80005b4 <main+0x98>)
 800055e:	f003 ff0d 	bl	800437c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000562:	2104      	movs	r1, #4
 8000564:	4813      	ldr	r0, [pc, #76]	; (80005b4 <main+0x98>)
 8000566:	f004 fe5f 	bl	8005228 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800056a:	2108      	movs	r1, #8
 800056c:	4811      	ldr	r0, [pc, #68]	; (80005b4 <main+0x98>)
 800056e:	f003 ff05 	bl	800437c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000572:	2108      	movs	r1, #8
 8000574:	480f      	ldr	r0, [pc, #60]	; (80005b4 <main+0x98>)
 8000576:	f004 fe57 	bl	8005228 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_Base_Start(&htim1);
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <main+0x98>)
 800057c:	f003 fe3a 	bl	80041f4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8000580:	480d      	ldr	r0, [pc, #52]	; (80005b8 <main+0x9c>)
 8000582:	f003 fe37 	bl	80041f4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <main+0xa0>)
 8000588:	f003 fe34 	bl	80041f4 <HAL_TIM_Base_Start>

 	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)val1, 2);
 800058c:	2202      	movs	r2, #2
 800058e:	490c      	ldr	r1, [pc, #48]	; (80005c0 <main+0xa4>)
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <main+0xa8>)
 8000592:	f001 fa89 	bl	8001aa8 <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
 8000596:	2202      	movs	r2, #2
 8000598:	490b      	ldr	r1, [pc, #44]	; (80005c8 <main+0xac>)
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <main+0xb0>)
 800059c:	f001 fa84 	bl	8001aa8 <HAL_ADC_Start_DMA>
 	unsigned char temp[35];

// 	TIM1->CCER |= TIM_CCER_CC1NP;
// 	TIM1->CCER |= TIM_CCER_CC2NP;
// 	TIM1->CCER |= TIM_CCER_CC3NP;
 	TIM1->CCR1 = 250;
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <main+0xb4>)
 80005a2:	22fa      	movs	r2, #250	; 0xfa
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 250;
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <main+0xb4>)
 80005a8:	22fa      	movs	r2, #250	; 0xfa
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 250;
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0xb4>)
 80005ae:	22fa      	movs	r2, #250	; 0xfa
 80005b0:	63da      	str	r2, [r3, #60]	; 0x3c
	while(1);
 80005b2:	e7fe      	b.n	80005b2 <main+0x96>
 80005b4:	200001c0 	.word	0x200001c0
 80005b8:	2000020c 	.word	0x2000020c
 80005bc:	20000258 	.word	0x20000258
 80005c0:	20000334 	.word	0x20000334
 80005c4:	20000028 	.word	0x20000028
 80005c8:	20000338 	.word	0x20000338
 80005cc:	20000094 	.word	0x20000094
 80005d0:	40012c00 	.word	0x40012c00

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	2238      	movs	r2, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fe14 	bl	8006210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f002 fddc 	bl	80031b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2340      	movs	r3, #64	; 0x40
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000612:	2301      	movs	r3, #1
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000616:	2315      	movs	r3, #21
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fe66 	bl	80032fc <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000636:	f000 fb63 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f96a 	bl	800392c <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800065e:	f000 fb4f 	bl	8000d00 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f005 fdc3 	bl	8006210 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068a:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <MX_ADC1_Init+0x10c>)
 800068c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000690:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000692:	4b39      	ldr	r3, [pc, #228]	; (8000778 <MX_ADC1_Init+0x10c>)
 8000694:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <MX_ADC1_Init+0x10c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ac:	4b32      	ldr	r3, [pc, #200]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b31      	ldr	r3, [pc, #196]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b8:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 2;
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006da:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_ADC1_Init+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fe:	481e      	ldr	r0, [pc, #120]	; (8000778 <MX_ADC1_Init+0x10c>)
 8000700:	f001 f848 	bl	8001794 <HAL_ADC_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800070a:	f000 faf9 	bl	8000d00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	4619      	mov	r1, r3
 8000718:	4817      	ldr	r0, [pc, #92]	; (8000778 <MX_ADC1_Init+0x10c>)
 800071a:	f001 ffa3 	bl	8002664 <HAL_ADCEx_MultiModeConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000724:	f000 faec 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x110>)
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072c:	2306      	movs	r3, #6
 800072e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000734:	237f      	movs	r3, #127	; 0x7f
 8000736:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000738:	2304      	movs	r3, #4
 800073a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_ADC1_Init+0x10c>)
 8000746:	f001 fa81 	bl	8001c4c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000750:	f000 fad6 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_ADC1_Init+0x114>)
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000758:	230c      	movs	r3, #12
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_ADC1_Init+0x10c>)
 8000762:	f001 fa73 	bl	8001c4c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800076c:	f000 fac8 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	; 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000028 	.word	0x20000028
 800077c:	08600004 	.word	0x08600004
 8000780:	10c00010 	.word	0x10c00010

08000784 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2220      	movs	r2, #32
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f005 fd3d 	bl	8006210 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <MX_ADC2_Init+0xe4>)
 8000798:	4a34      	ldr	r2, [pc, #208]	; (800086c <MX_ADC2_Init+0xe8>)
 800079a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800079c:	4b32      	ldr	r3, [pc, #200]	; (8000868 <MX_ADC2_Init+0xe4>)
 800079e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007be:	2204      	movs	r2, #4
 80007c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.NbrOfDiscConversion = 2;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007de:	2202      	movs	r2, #2
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007e4:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_ADC2_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC2_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_ADC2_Init+0xe4>)
 800080a:	f000 ffc3 	bl	8001794 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000814:	f000 fa74 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_ADC2_Init+0xec>)
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2306      	movs	r3, #6
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000824:	237f      	movs	r3, #127	; 0x7f
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000828:	2304      	movs	r3, #4
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_ADC2_Init+0xe4>)
 8000836:	f001 fa09 	bl	8001c4c <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC2_Init+0xc0>
  {
    Error_Handler();
 8000840:	f000 fa5e 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_ADC2_Init+0xf0>)
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000848:	230c      	movs	r3, #12
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC2_Init+0xe4>)
 8000852:	f001 f9fb 	bl	8001c4c <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 800085c:	f000 fa50 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000094 	.word	0x20000094
 800086c:	50000100 	.word	0x50000100
 8000870:	04300002 	.word	0x04300002
 8000874:	47520000 	.word	0x47520000

08000878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	; 0x70
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000898:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	615a      	str	r2, [r3, #20]
 80008aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2234      	movs	r2, #52	; 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 fcac 	bl	8006210 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b8:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008ba:	4a58      	ldr	r2, [pc, #352]	; (8000a1c <MX_TIM1_Init+0x1a4>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008c4:	4b54      	ldr	r3, [pc, #336]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008c6:	2220      	movs	r2, #32
 80008c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1750;
 80008ca:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008cc:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80008d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b51      	ldr	r3, [pc, #324]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d8:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e4:	484c      	ldr	r0, [pc, #304]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80008e6:	f003 fc2d 	bl	8004144 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008f0:	f000 fa06 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008fe:	4619      	mov	r1, r3
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 8000902:	f003 ff4f 	bl	80047a4 <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800090c:	f000 f9f8 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000910:	4841      	ldr	r0, [pc, #260]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 8000912:	f003 fcd1 	bl	80042b8 <HAL_TIM_PWM_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800091c:	f000 f9f0 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000920:	2320      	movs	r3, #32
 8000922:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000930:	4619      	mov	r1, r3
 8000932:	4839      	ldr	r0, [pc, #228]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 8000934:	f004 fd2c 	bl	8005390 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800093e:	f000 f9df 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000942:	2360      	movs	r3, #96	; 0x60
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	482c      	ldr	r0, [pc, #176]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 8000968:	f003 fe08 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000972:	f000 f9c5 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000976:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800097a:	2204      	movs	r2, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4826      	ldr	r0, [pc, #152]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 8000980:	f003 fdfc 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800098a:	f000 f9b9 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000992:	2208      	movs	r2, #8
 8000994:	4619      	mov	r1, r3
 8000996:	4820      	ldr	r0, [pc, #128]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 8000998:	f003 fdf0 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80009a2:	f000 f9ad 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009aa:	220c      	movs	r2, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	481a      	ldr	r0, [pc, #104]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80009b0:	f003 fde4 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80009ba:	f000 f9a1 	bl	8000d00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 80009fc:	f004 fd4a 	bl	8005494 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000a06:	f000 f97b 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <MX_TIM1_Init+0x1a0>)
 8000a0c:	f000 faea 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000a10:	bf00      	nop
 8000a12:	3770      	adds	r7, #112	; 0x70
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200001c0 	.word	0x200001c0
 8000a1c:	40012c00 	.word	0x40012c00

08000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	; 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a5c:	22a7      	movs	r2, #167	; 0xa7
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7a:	4822      	ldr	r0, [pc, #136]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a7c:	f003 fb62 	bl	8004144 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 f93b 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a94:	4619      	mov	r1, r3
 8000a96:	481b      	ldr	r0, [pc, #108]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000a98:	f003 fe84 	bl	80047a4 <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000aa2:	f000 f92d 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aa6:	4817      	ldr	r0, [pc, #92]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000aa8:	f003 fc06 	bl	80042b8 <HAL_TIM_PWM_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 f925 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480f      	ldr	r0, [pc, #60]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000ac6:	f004 fc63 	bl	8005390 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ad0:	f000 f916 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad4:	2360      	movs	r3, #96	; 0x60
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_TIM2_Init+0xe4>)
 8000aec:	f003 fd46 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000af6:	f000 f903 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	; 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000020c 	.word	0x2000020c

08000b08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_TIM6_Init+0x64>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <MX_TIM6_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_TIM6_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_TIM6_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_TIM6_Init+0x64>)
 8000b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b30:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_TIM6_Init+0x64>)
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_TIM6_Init+0x64>)
 8000b3a:	f003 fb03 	bl	8004144 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b44:	f000 f8dc 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_TIM6_Init+0x64>)
 8000b56:	f004 fc1b 	bl	8005390 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b60:	f000 f8ce 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000258 	.word	0x20000258
 8000b70:	40001000 	.word	0x40001000

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_USART2_UART_Init+0x94>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000bbe:	f004 fd2e 	bl	800561e <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 f89a 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000bd0:	f005 fa30 	bl	8006034 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bda:	f000 f891 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000be2:	f005 fa65 	bl	80060b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 f888 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_USART2_UART_Init+0x90>)
 8000bf2:	f005 f9e6 	bl	8005fc2 <HAL_UARTEx_DisableFifoMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f880 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200002a4 	.word	0x200002a4
 8000c08:	40004400 	.word	0x40004400

08000c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_DMA_Init+0x60>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <MX_DMA_Init+0x60>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_DMA_Init+0x60>)
 8000c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_DMA_Init+0x60>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <MX_DMA_Init+0x60>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6493      	str	r3, [r2, #72]	; 0x48
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_DMA_Init+0x60>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	200b      	movs	r0, #11
 8000c48:	f001 fe8b 	bl	8002962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c4c:	200b      	movs	r0, #11
 8000c4e:	f001 fea2 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200c      	movs	r0, #12
 8000c58:	f001 fe83 	bl	8002962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c5c:	200c      	movs	r0, #12
 8000c5e:	f001 fe9a 	bl	8002996 <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_GPIO_Init+0x88>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0x8c>)
 8000cea:	f002 f8e1 	bl	8002eb0 <HAL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_MspInit+0x44>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_MspInit+0x44>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x44>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x44>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09c      	sub	sp, #112	; 0x70
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	2244      	movs	r2, #68	; 0x44
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 fa4b 	bl	8006210 <memset>
  if(hadc->Instance==ADC1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d82:	d169      	bne.n	8000e58 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d8e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 ffe5 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000da0:	f7ff ffae 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000da4:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <HAL_ADC_MspInit+0x1e8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a64      	ldr	r2, [pc, #400]	; (8000f3c <HAL_ADC_MspInit+0x1e8>)
 8000dac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dae:	4b63      	ldr	r3, [pc, #396]	; (8000f3c <HAL_ADC_MspInit+0x1e8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10b      	bne.n	8000dce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000db6:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a61      	ldr	r2, [pc, #388]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000dbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b5f      	ldr	r3, [pc, #380]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b5c      	ldr	r3, [pc, #368]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000de6:	230a      	movs	r3, #10
 8000de8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f002 f858 	bl	8002eb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e00:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e02:	4a51      	ldr	r2, [pc, #324]	; (8000f48 <HAL_ADC_MspInit+0x1f4>)
 8000e04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e06:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e08:	2205      	movs	r2, #5
 8000e0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0c:	4b4d      	ldr	r3, [pc, #308]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e12:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1e:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e2e:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e30:	2220      	movs	r2, #32
 8000e32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e34:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e3a:	4842      	ldr	r0, [pc, #264]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e3c:	f001 fdc6 	bl	80029cc <HAL_DMA_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000e46:	f7ff ff5b 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a3d      	ldr	r2, [pc, #244]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e4e:	655a      	str	r2, [r3, #84]	; 0x54
 8000e50:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <HAL_ADC_MspInit+0x1f0>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e56:	e06d      	b.n	8000f34 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a3b      	ldr	r2, [pc, #236]	; (8000f4c <HAL_ADC_MspInit+0x1f8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d168      	bne.n	8000f34 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e6c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 ff76 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000e7e:	f7ff ff3f 	bl	8000d00 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <HAL_ADC_MspInit+0x1e8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a2c      	ldr	r2, [pc, #176]	; (8000f3c <HAL_ADC_MspInit+0x1e8>)
 8000e8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_ADC_MspInit+0x1e8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10b      	bne.n	8000eac <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_ADC_MspInit+0x1ec>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000ec4:	2311      	movs	r3, #17
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f001 ffe9 	bl	8002eb0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_ADC_MspInit+0x200>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000ee6:	2224      	movs	r2, #36	; 0x24
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f02:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000f0e:	2220      	movs	r2, #32
 8000f10:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000f1a:	f001 fd57 	bl	80029cc <HAL_DMA_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8000f24:	f7ff feec 	bl	8000d00 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000f2c:	655a      	str	r2, [r3, #84]	; 0x54
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_ADC_MspInit+0x1fc>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000f34:	bf00      	nop
 8000f36:	3770      	adds	r7, #112	; 0x70
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000033c 	.word	0x2000033c
 8000f40:	40021000 	.word	0x40021000
 8000f44:	20000100 	.word	0x20000100
 8000f48:	40020008 	.word	0x40020008
 8000f4c:	50000100 	.word	0x50000100
 8000f50:	20000160 	.word	0x20000160
 8000f54:	4002001c 	.word	0x4002001c

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_TIM_Base_MspInit+0x80>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10c      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f74:	6613      	str	r3, [r2, #96]	; 0x60
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f82:	e022      	b.n	8000fca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
}
 8000fa6:	e010      	b.n	8000fca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <HAL_TIM_Base_MspInit+0x88>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10b      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_TIM_Base_MspInit+0x84>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40012c00 	.word	0x40012c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40001000 	.word	0x40001000

08000fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <HAL_TIM_MspPostInit+0xd8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d155      	bne.n	80010b2 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0320 	and.w	r3, r3, #32
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800105e:	2306      	movs	r3, #6
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <HAL_TIM_MspPostInit+0xe0>)
 800106a:	f001 ff21 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800106e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001080:	2306      	movs	r3, #6
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f001 ff0f 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_TIM_MspPostInit+0xe4>)
 80010ae:	f001 feff 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48001400 	.word	0x48001400
 80010c8:	48000400 	.word	0x48000400

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	; 0x68
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2244      	movs	r2, #68	; 0x44
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 f88f 	bl	8006210 <memset>
  if(huart->Instance==USART2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_UART_MspInit+0xa8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d137      	bne.n	800116c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fe2b 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001114:	f7ff fdf4 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_UART_MspInit+0xac>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_UART_MspInit+0xac>)
 800111e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001122:	6593      	str	r3, [r2, #88]	; 0x58
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_MspInit+0xac>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0xac>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_UART_MspInit+0xac>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_MspInit+0xac>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001148:	f248 0304 	movw	r3, #32772	; 0x8004
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115a:	2307      	movs	r3, #7
 800115c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f001 fea2 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3768      	adds	r7, #104	; 0x68
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40004400 	.word	0x40004400
 8001178:	40021000 	.word	0x40021000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f8a4 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <DMA1_Channel1_IRQHandler+0x10>)
 80011d6:	f001 fd1c 	bl	8002c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000100 	.word	0x20000100

080011e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <DMA1_Channel2_IRQHandler+0x10>)
 80011ea:	f001 fd12 	bl	8002c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000160 	.word	0x20000160

080011f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800121e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopForever+0x6>)
  ldr r1, =_edata
 8001222:	490e      	ldr	r1, [pc, #56]	; (800125c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <LoopForever+0xe>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001238:	4c0b      	ldr	r4, [pc, #44]	; (8001268 <LoopForever+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001246:	f7ff ffd7 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f004 ffbd 	bl	80061c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124e:	f7ff f965 	bl	800051c <main>

08001252 <LoopForever>:

LoopForever:
    b LoopForever
 8001252:	e7fe      	b.n	8001252 <LoopForever>
  ldr   r0, =_estack
 8001254:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001260:	08006288 	.word	0x08006288
  ldr r2, =_sbss
 8001264:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001268:	20000344 	.word	0x20000344

0800126c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_2_IRQHandler>

0800126e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f001 fb67 	bl	800294c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f80e 	bl	80012a0 <HAL_InitTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	e001      	b.n	8001294 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001290:	f7ff fd3c 	bl	8000d0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001294:	79fb      	ldrb	r3, [r7, #7]

}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_InitTick+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d022      	beq.n	80012fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_InitTick+0x6c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_InitTick+0x68>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fb72 	bl	80029b2 <HAL_SYSTICK_Config>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10f      	bne.n	80012f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	d809      	bhi.n	80012ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012da:	2200      	movs	r2, #0
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	f04f 30ff 	mov.w	r0, #4294967295
 80012e2:	f001 fb3e 	bl	8002962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_InitTick+0x70>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e007      	b.n	80012fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e004      	b.n	80012fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000008 	.word	0x20000008
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4a03      	ldr	r2, [pc, #12]	; (8001330 <HAL_IncTick+0x1c>)
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	20000340 	.word	0x20000340
 8001334:	20000008 	.word	0x20000008

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000340 	.word	0x20000340

08001350 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	609a      	str	r2, [r3, #8]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3360      	adds	r3, #96	; 0x60
 80013ca:	461a      	mov	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <LL_ADC_SetOffset+0x44>)
 80013da:	4013      	ands	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	4313      	orrs	r3, r2
 80013e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	03fff000 	.word	0x03fff000

08001400 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3360      	adds	r3, #96	; 0x60
 800140e:	461a      	mov	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3360      	adds	r3, #96	; 0x60
 800143c:	461a      	mov	r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	431a      	orrs	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001462:	b480      	push	{r7}
 8001464:	b087      	sub	sp, #28
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3360      	adds	r3, #96	; 0x60
 8001472:	461a      	mov	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	431a      	orrs	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3360      	adds	r3, #96	; 0x60
 80014a8:	461a      	mov	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80014c2:	bf00      	nop
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	615a      	str	r2, [r3, #20]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800151a:	b480      	push	{r7}
 800151c:	b087      	sub	sp, #28
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3330      	adds	r3, #48	; 0x30
 800152a:	461a      	mov	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	4413      	add	r3, r2
 8001538:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	211f      	movs	r1, #31
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0e9b      	lsrs	r3, r3, #26
 8001552:	f003 011f 	and.w	r1, r3, #31
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001572:	b480      	push	{r7}
 8001574:	b087      	sub	sp, #28
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3314      	adds	r3, #20
 8001582:	461a      	mov	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	0e5b      	lsrs	r3, r3, #25
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	0d1b      	lsrs	r3, r3, #20
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2107      	movs	r1, #7
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	0d1b      	lsrs	r3, r3, #20
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	431a      	orrs	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10a      	bne.n	80015f2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80015f0:	e00a      	b.n	8001608 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fe:	43db      	mvns	r3, r3
 8001600:	401a      	ands	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	407f0000 	.word	0x407f0000

08001618 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 031f 	and.w	r3, r3, #31
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6093      	str	r3, [r2, #8]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800166c:	d101      	bne.n	8001672 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001690:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001694:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016bc:	d101      	bne.n	80016c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <LL_ADC_IsEnabled+0x18>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <LL_ADC_IsEnabled+0x1a>
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800172e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001732:	f043 0204 	orr.w	r2, r3, #4
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b04      	cmp	r3, #4
 8001758:	d101      	bne.n	800175e <LL_ADC_REG_IsConversionOngoing+0x18>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b08      	cmp	r3, #8
 800177e:	d101      	bne.n	8001784 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e177      	b.n	8001a9e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fac9 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff3f 	bl	8001658 <LL_ADC_IsDeepPowerDownEnabled>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff25 	bl	8001634 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff5a 	bl	80016a8 <LL_ADC_IsInternalRegulatorEnabled>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d115      	bne.n	8001826 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff3e 	bl	8001680 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001804:	4b9c      	ldr	r3, [pc, #624]	; (8001a78 <HAL_ADC_Init+0x2e4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	4a9c      	ldr	r2, [pc, #624]	; (8001a7c <HAL_ADC_Init+0x2e8>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	3301      	adds	r3, #1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001818:	e002      	b.n	8001820 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3b01      	subs	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff3c 	bl	80016a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183a:	f043 0210 	orr.w	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff75 	bl	8001746 <LL_ADC_REG_IsConversionOngoing>
 800185c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 8110 	bne.w	8001a8c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 810c 	bne.w	8001a8c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800187c:	f043 0202 	orr.w	r2, r3, #2
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff35 	bl	80016f8 <LL_ADC_IsEnabled>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d111      	bne.n	80018b8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001894:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001898:	f7ff ff2e 	bl	80016f8 <LL_ADC_IsEnabled>
 800189c:	4604      	mov	r4, r0
 800189e:	4878      	ldr	r0, [pc, #480]	; (8001a80 <HAL_ADC_Init+0x2ec>)
 80018a0:	f7ff ff2a 	bl	80016f8 <LL_ADC_IsEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4323      	orrs	r3, r4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4874      	ldr	r0, [pc, #464]	; (8001a84 <HAL_ADC_Init+0x2f0>)
 80018b4:	f7ff fd4c 	bl	8001350 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7f5b      	ldrb	r3, [r3, #29]
 80018bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d106      	bne.n	80018f4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	3b01      	subs	r3, #1
 80018ec:	045b      	lsls	r3, r3, #17
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <HAL_ADC_Init+0x2f4>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	430b      	orrs	r3, r1
 8001922:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff01 	bl	8001746 <LL_ADC_REG_IsConversionOngoing>
 8001944:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff0e 	bl	800176c <LL_ADC_INJ_IsConversionOngoing>
 8001950:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d16d      	bne.n	8001a34 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d16a      	bne.n	8001a34 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001962:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800196a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800197a:	f023 0302 	bic.w	r3, r3, #2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	430b      	orrs	r3, r1
 8001986:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d017      	beq.n	80019c0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800199e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6911      	ldr	r1, [r2, #16]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80019be:	e013      	b.n	80019e8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d118      	bne.n	8001a24 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a14:	430a      	orrs	r2, r1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	e007      	b.n	8001a34 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10c      	bne.n	8001a56 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f023 010f 	bic.w	r1, r3, #15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	1e5a      	subs	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
 8001a54:	e007      	b.n	8001a66 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 020f 	bic.w	r2, r2, #15
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a76:	e011      	b.n	8001a9c <HAL_ADC_Init+0x308>
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	053e2d63 	.word	0x053e2d63
 8001a80:	50000100 	.word	0x50000100
 8001a84:	50000300 	.word	0x50000300
 8001a88:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	bf00      	nop

08001aa8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab4:	4851      	ldr	r0, [pc, #324]	; (8001bfc <HAL_ADC_Start_DMA+0x154>)
 8001ab6:	f7ff fdaf 	bl	8001618 <LL_ADC_GetMultimode>
 8001aba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fe40 	bl	8001746 <LL_ADC_REG_IsConversionOngoing>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 808f 	bne.w	8001bec <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_Start_DMA+0x34>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e08a      	b.n	8001bf2 <HAL_ADC_Start_DMA+0x14a>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d002      	beq.n	8001af6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d173      	bne.n	8001bde <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fc98 	bl	800242c <ADC_Enable>
 8001afc:	4603      	mov	r3, r0
 8001afe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d166      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a38      	ldr	r2, [pc, #224]	; (8001c00 <HAL_ADC_Start_DMA+0x158>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d002      	beq.n	8001b2a <HAL_ADC_Start_DMA+0x82>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	e001      	b.n	8001b2e <HAL_ADC_Start_DMA+0x86>
 8001b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d002      	beq.n	8001b3c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	f023 0206 	bic.w	r2, r3, #6
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	661a      	str	r2, [r3, #96]	; 0x60
 8001b60:	e002      	b.n	8001b68 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <HAL_ADC_Start_DMA+0x15c>)
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <HAL_ADC_Start_DMA+0x160>)
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_ADC_Start_DMA+0x164>)
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	221c      	movs	r2, #28
 8001b86:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0210 	orr.w	r2, r2, #16
 8001b9e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3340      	adds	r3, #64	; 0x40
 8001bba:	4619      	mov	r1, r3
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f000 ffac 	bl	8002b1c <HAL_DMA_Start_IT>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fda6 	bl	800171e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bd2:	e00d      	b.n	8001bf0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001bdc:	e008      	b.n	8001bf0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001bea:	e001      	b.n	8001bf0 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
 8001bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	50000300 	.word	0x50000300
 8001c00:	50000100 	.word	0x50000100
 8001c04:	080024f1 	.word	0x080024f1
 8001c08:	080025c9 	.word	0x080025c9
 8001c0c:	080025e5 	.word	0x080025e5

08001c10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0b6      	sub	sp, #216	; 0xd8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x22>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e3c8      	b.n	8002400 <HAL_ADC_ConfigChannel+0x7b4>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fd63 	bl	8001746 <LL_ADC_REG_IsConversionOngoing>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 83ad 	bne.w	80023e2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f7ff fc40 	bl	800151a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fd51 	bl	8001746 <LL_ADC_REG_IsConversionOngoing>
 8001ca4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd5d 	bl	800176c <LL_ADC_INJ_IsConversionOngoing>
 8001cb2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 81d9 	bne.w	8002072 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 81d4 	bne.w	8002072 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd2:	d10f      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7ff fc47 	bl	8001572 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fbee 	bl	80014ce <LL_ADC_SetSamplingTimeCommonConfig>
 8001cf2:	e00e      	b.n	8001d12 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6819      	ldr	r1, [r3, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	461a      	mov	r2, r3
 8001d02:	f7ff fc36 	bl	8001572 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fbde 	bl	80014ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d022      	beq.n	8001d7a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6919      	ldr	r1, [r3, #16]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d44:	f7ff fb38 	bl	80013b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6919      	ldr	r1, [r3, #16]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fb84 	bl	8001462 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7f1b      	ldrb	r3, [r3, #28]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x124>
 8001d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x126>
 8001d70:	2300      	movs	r3, #0
 8001d72:	461a      	mov	r2, r3
 8001d74:	f7ff fb90 	bl	8001498 <LL_ADC_SetOffsetSaturation>
 8001d78:	e17b      	b.n	8002072 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fb3d 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10a      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x15a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fb32 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	e01e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x198>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fb27 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	e004      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1b0>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0e9b      	lsrs	r3, r3, #26
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	e018      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1e2>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001e20:	2320      	movs	r3, #32
 8001e22:	e004      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d106      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff faf6 	bl	800142c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fada 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x220>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff facf 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	e01e      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x25e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fac4 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e004      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x276>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	e018      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x2a8>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e004      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fa93 	bl	800142c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fa77 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x2e6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2102      	movs	r1, #2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fa6c 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	e01e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x324>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2102      	movs	r1, #2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fa61 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e004      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x33c>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	e016      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x36a>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e004      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d106      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fa32 	bl	800142c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2103      	movs	r1, #3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fa16 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x3a8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fa0b 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	f003 021f 	and.w	r2, r3, #31
 8001ff2:	e017      	b.n	8002024 <HAL_ADC_ConfigChannel+0x3d8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2103      	movs	r1, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fa00 	bl	8001400 <LL_ADC_GetOffsetChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800200c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e003      	b.n	8002022 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800201a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_ConfigChannel+0x3f0>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	e011      	b.n	8002060 <HAL_ADC_ConfigChannel+0x414>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800204a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800204c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e003      	b.n	8002060 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002060:	429a      	cmp	r2, r3
 8002062:	d106      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	2103      	movs	r1, #3
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f9dd 	bl	800142c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb3e 	bl	80016f8 <LL_ADC_IsEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 8140 	bne.w	8002304 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	461a      	mov	r2, r3
 8002092:	f7ff fa99 	bl	80015c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4a8f      	ldr	r2, [pc, #572]	; (80022d8 <HAL_ADC_ConfigChannel+0x68c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	f040 8131 	bne.w	8002304 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10b      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x47e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	3301      	adds	r3, #1
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b09      	cmp	r3, #9
 80020c0:	bf94      	ite	ls
 80020c2:	2301      	movls	r3, #1
 80020c4:	2300      	movhi	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e019      	b.n	80020fe <HAL_ADC_ConfigChannel+0x4b2>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020da:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e003      	b.n	80020ee <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80020e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	bf94      	ite	ls
 80020f8:	2301      	movls	r3, #1
 80020fa:	2300      	movhi	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d079      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_ADC_ConfigChannel+0x4d2>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0e9b      	lsrs	r3, r3, #26
 8002114:	3301      	adds	r3, #1
 8002116:	069b      	lsls	r3, r3, #26
 8002118:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211c:	e015      	b.n	800214a <HAL_ADC_ConfigChannel+0x4fe>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800212c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e003      	b.n	8002142 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800213a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	069b      	lsls	r3, r3, #26
 8002146:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_ADC_ConfigChannel+0x51e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	3301      	adds	r3, #1
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	e017      	b.n	800219a <HAL_ADC_ConfigChannel+0x54e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800217c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e003      	b.n	800218e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3301      	adds	r3, #1
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2101      	movs	r1, #1
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	ea42 0103 	orr.w	r1, r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x574>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0e9b      	lsrs	r3, r3, #26
 80021b0:	3301      	adds	r3, #1
 80021b2:	f003 021f 	and.w	r2, r3, #31
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	e018      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x5a6>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80021dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f003 021f 	and.w	r2, r3, #31
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f2:	430b      	orrs	r3, r1
 80021f4:	e081      	b.n	80022fa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x5c6>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	3301      	adds	r3, #1
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002210:	e015      	b.n	800223e <HAL_ADC_ConfigChannel+0x5f2>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e003      	b.n	8002236 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	3301      	adds	r3, #1
 8002238:	069b      	lsls	r3, r3, #26
 800223a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_ADC_ConfigChannel+0x612>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	3301      	adds	r3, #1
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	e017      	b.n	800228e <HAL_ADC_ConfigChannel+0x642>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	61fb      	str	r3, [r7, #28]
  return result;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e003      	b.n	8002282 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	ea42 0103 	orr.w	r1, r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10d      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x66e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	0e9b      	lsrs	r3, r3, #26
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 021f 	and.w	r2, r3, #31
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	3b1e      	subs	r3, #30
 80022b2:	051b      	lsls	r3, r3, #20
 80022b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b8:	e01e      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x6ac>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	613b      	str	r3, [r7, #16]
  return result;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e006      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x698>
 80022d6:	bf00      	nop
 80022d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f003 021f 	and.w	r2, r3, #31
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	3b1e      	subs	r3, #30
 80022f2:	051b      	lsls	r3, r3, #20
 80022f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f8:	430b      	orrs	r3, r1
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	6892      	ldr	r2, [r2, #8]
 80022fe:	4619      	mov	r1, r3
 8002300:	f7ff f937 	bl	8001572 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <HAL_ADC_ConfigChannel+0x7bc>)
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d071      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002310:	483e      	ldr	r0, [pc, #248]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 8002312:	f7ff f843 	bl	800139c <LL_ADC_GetCommonPathInternalCh>
 8002316:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <HAL_ADC_ConfigChannel+0x7c4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_ADC_ConfigChannel+0x6e2>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3a      	ldr	r2, [pc, #232]	; (8002414 <HAL_ADC_ConfigChannel+0x7c8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d127      	bne.n	800237e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800232e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d121      	bne.n	800237e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002342:	d157      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002348:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800234c:	4619      	mov	r1, r3
 800234e:	482f      	ldr	r0, [pc, #188]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 8002350:	f7ff f811 	bl	8001376 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002354:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_ADC_ConfigChannel+0x7cc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	4a30      	ldr	r2, [pc, #192]	; (800241c <HAL_ADC_ConfigChannel+0x7d0>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800236e:	e002      	b.n	8002376 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3b01      	subs	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f9      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800237c:	e03a      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_ADC_ConfigChannel+0x7d4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d113      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x764>
 8002388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800238c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_ADC_ConfigChannel+0x7d8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02a      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800239e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a6:	4619      	mov	r1, r3
 80023a8:	4818      	ldr	r0, [pc, #96]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 80023aa:	f7fe ffe4 	bl	8001376 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023ae:	e021      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_ADC_ConfigChannel+0x7dc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d11c      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a16      	ldr	r2, [pc, #88]	; (8002424 <HAL_ADC_ConfigChannel+0x7d8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d011      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d8:	4619      	mov	r1, r3
 80023da:	480c      	ldr	r0, [pc, #48]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 80023dc:	f7fe ffcb 	bl	8001376 <LL_ADC_SetCommonPathInternalCh>
 80023e0:	e008      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	f043 0220 	orr.w	r2, r3, #32
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002400:	4618      	mov	r0, r3
 8002402:	37d8      	adds	r7, #216	; 0xd8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	80080000 	.word	0x80080000
 800240c:	50000300 	.word	0x50000300
 8002410:	c3210000 	.word	0xc3210000
 8002414:	90c00010 	.word	0x90c00010
 8002418:	20000000 	.word	0x20000000
 800241c:	053e2d63 	.word	0x053e2d63
 8002420:	c7520000 	.word	0xc7520000
 8002424:	50000100 	.word	0x50000100
 8002428:	cb840000 	.word	0xcb840000

0800242c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff f95d 	bl	80016f8 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d14d      	bne.n	80024e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <ADC_Enable+0xc0>)
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e039      	b.n	80024e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f92c 	bl	80016d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002478:	f7fe ff5e 	bl	8001338 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800247e:	e028      	b.n	80024d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f937 	bl	80016f8 <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f91b 	bl	80016d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800249a:	f7fe ff4d 	bl	8001338 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d1cf      	bne.n	8002480 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	8000003f 	.word	0x8000003f

080024f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002506:	2b00      	cmp	r3, #0
 8002508:	d14b      	bne.n	80025a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d021      	beq.n	8002568 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe ffe3 	bl	80014f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d032      	beq.n	800259a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d12b      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11f      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	65da      	str	r2, [r3, #92]	; 0x5c
 8002566:	e018      	b.n	800259a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d111      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff fb38 	bl	8001c10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025a0:	e00e      	b.n	80025c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff fb42 	bl	8001c38 <HAL_ADC_ErrorCallback>
}
 80025b4:	e004      	b.n	80025c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff fb24 	bl	8001c24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff fb14 	bl	8001c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <LL_ADC_IsEnabled>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsEnabled+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsEnabled+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_IsConversionOngoing>:
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d101      	bne.n	8002656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b0a1      	sub	sp, #132	; 0x84
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e08b      	b.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800268a:	2300      	movs	r3, #0
 800268c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800268e:	2300      	movs	r3, #0
 8002690:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269a:	d102      	bne.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800269c:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	e001      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e06a      	b.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffb9 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026cc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffb3 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d14c      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d149      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80026e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d028      	beq.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002702:	035b      	lsls	r3, r3, #13
 8002704:	430b      	orrs	r3, r1
 8002706:	431a      	orrs	r2, r3
 8002708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800270a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800270c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002710:	f7ff ff82 	bl	8002618 <LL_ADC_IsEnabled>
 8002714:	4604      	mov	r4, r0
 8002716:	4823      	ldr	r0, [pc, #140]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002718:	f7ff ff7e 	bl	8002618 <LL_ADC_IsEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	4323      	orrs	r3, r4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d133      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800272c:	f023 030f 	bic.w	r3, r3, #15
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	6811      	ldr	r1, [r2, #0]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	430a      	orrs	r2, r1
 800273a:	431a      	orrs	r2, r3
 800273c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002740:	e024      	b.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002752:	f7ff ff61 	bl	8002618 <LL_ADC_IsEnabled>
 8002756:	4604      	mov	r4, r0
 8002758:	4812      	ldr	r0, [pc, #72]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800275a:	f7ff ff5d 	bl	8002618 <LL_ADC_IsEnabled>
 800275e:	4603      	mov	r3, r0
 8002760:	4323      	orrs	r3, r4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d112      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800276e:	f023 030f 	bic.w	r3, r3, #15
 8002772:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002774:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002776:	e009      	b.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800278a:	e000      	b.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800278c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002796:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800279a:	4618      	mov	r0, r3
 800279c:	3784      	adds	r7, #132	; 0x84
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd90      	pop	{r4, r7, pc}
 80027a2:	bf00      	nop
 80027a4:	50000100 	.word	0x50000100
 80027a8:	50000300 	.word	0x50000300

080027ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db0b      	blt.n	800283a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <__NVIC_EnableIRQ+0x38>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2001      	movs	r0, #1
 8002832:	fa00 f202 	lsl.w	r2, r0, r2
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100

0800284c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db0a      	blt.n	8002876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	490c      	ldr	r1, [pc, #48]	; (8002898 <__NVIC_SetPriority+0x4c>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	440b      	add	r3, r1
 8002870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002874:	e00a      	b.n	800288c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4908      	ldr	r1, [pc, #32]	; (800289c <__NVIC_SetPriority+0x50>)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	3b04      	subs	r3, #4
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	440b      	add	r3, r1
 800288a:	761a      	strb	r2, [r3, #24]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000e100 	.word	0xe000e100
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f1c3 0307 	rsb	r3, r3, #7
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	bf28      	it	cs
 80028be:	2304      	movcs	r3, #4
 80028c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d902      	bls.n	80028d0 <NVIC_EncodePriority+0x30>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3b03      	subs	r3, #3
 80028ce:	e000      	b.n	80028d2 <NVIC_EncodePriority+0x32>
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	401a      	ands	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	4313      	orrs	r3, r2
         );
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002918:	d301      	bcc.n	800291e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291a:	2301      	movs	r3, #1
 800291c:	e00f      	b.n	800293e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <SysTick_Config+0x40>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002926:	210f      	movs	r1, #15
 8002928:	f04f 30ff 	mov.w	r0, #4294967295
 800292c:	f7ff ff8e 	bl	800284c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <SysTick_Config+0x40>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SysTick_Config+0x40>)
 8002938:	2207      	movs	r2, #7
 800293a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	e000e010 	.word	0xe000e010

0800294c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff29 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff40 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff90 	bl	80028a0 <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5f 	bl	800284c <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff33 	bl	8002810 <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa4 	bl	8002908 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e08d      	b.n	8002afa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <HAL_DMA_Init+0x138>)
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d80f      	bhi.n	8002a0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b45      	ldr	r3, [pc, #276]	; (8002b08 <HAL_DMA_Init+0x13c>)
 80029f2:	4413      	add	r3, r2
 80029f4:	4a45      	ldr	r2, [pc, #276]	; (8002b0c <HAL_DMA_Init+0x140>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	009a      	lsls	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a42      	ldr	r2, [pc, #264]	; (8002b10 <HAL_DMA_Init+0x144>)
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
 8002a08:	e00e      	b.n	8002a28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <HAL_DMA_Init+0x148>)
 8002a12:	4413      	add	r3, r2
 8002a14:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <HAL_DMA_Init+0x140>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	009a      	lsls	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <HAL_DMA_Init+0x14c>)
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9b6 	bl	8002dec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a88:	d102      	bne.n	8002a90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aa4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <HAL_DMA_Init+0x104>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d80c      	bhi.n	8002ad0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f9d6 	bl	8002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	e008      	b.n	8002ae2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40020407 	.word	0x40020407
 8002b08:	bffdfff8 	.word	0xbffdfff8
 8002b0c:	cccccccd 	.word	0xcccccccd
 8002b10:	40020000 	.word	0x40020000
 8002b14:	bffdfbf8 	.word	0xbffdfbf8
 8002b18:	40020400 	.word	0x40020400

08002b1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Start_IT+0x20>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e066      	b.n	8002c0a <HAL_DMA_Start_IT+0xee>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d155      	bne.n	8002bfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f8fb 	bl	8002d70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 020e 	orr.w	r2, r2, #14
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e00f      	b.n	8002bb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0204 	bic.w	r2, r2, #4
 8002ba2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 020a 	orr.w	r2, r2, #10
 8002bb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e005      	b.n	8002c08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2204      	movs	r2, #4
 8002c34:	409a      	lsls	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d026      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x7a>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d021      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0204 	bic.w	r2, r2, #4
 8002c64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f003 021f 	and.w	r2, r3, #31
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2104      	movs	r1, #4
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d071      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c8a:	e06c      	b.n	8002d66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2202      	movs	r2, #2
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d02e      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d029      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 020a 	bic.w	r2, r2, #10
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2102      	movs	r1, #2
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d038      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cfc:	e033      	b.n	8002d66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2208      	movs	r2, #8
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02a      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d025      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 020e 	bic.w	r2, r2, #14
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
}
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f003 021f 	and.w	r2, r3, #31
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d108      	bne.n	8002dd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dce:	e007      	b.n	8002de0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d802      	bhi.n	8002e06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e00:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e001      	b.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e08:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3b08      	subs	r3, #8
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	009a      	lsls	r2, r3, #2
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e36:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2201      	movs	r2, #1
 8002e40:	409a      	lsls	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40020407 	.word	0x40020407
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020820 	.word	0x40020820
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	40020880 	.word	0x40020880

08002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	2201      	movs	r2, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	1000823f 	.word	0x1000823f
 8002eac:	40020940 	.word	0x40020940

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ebe:	e15a      	b.n	8003176 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 814c 	beq.w	8003170 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d005      	beq.n	8002ef0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d130      	bne.n	8002f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f26:	2201      	movs	r2, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0201 	and.w	r2, r3, #1
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d017      	beq.n	8002f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2203      	movs	r2, #3
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d123      	bne.n	8002fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	6939      	ldr	r1, [r7, #16]
 8002fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2203      	movs	r2, #3
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0203 	and.w	r2, r3, #3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80a6 	beq.w	8003170 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003024:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <HAL_GPIO_Init+0x2e4>)
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	4a5a      	ldr	r2, [pc, #360]	; (8003194 <HAL_GPIO_Init+0x2e4>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6613      	str	r3, [r2, #96]	; 0x60
 8003030:	4b58      	ldr	r3, [pc, #352]	; (8003194 <HAL_GPIO_Init+0x2e4>)
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303c:	4a56      	ldr	r2, [pc, #344]	; (8003198 <HAL_GPIO_Init+0x2e8>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	3302      	adds	r3, #2
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003066:	d01f      	beq.n	80030a8 <HAL_GPIO_Init+0x1f8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a4c      	ldr	r2, [pc, #304]	; (800319c <HAL_GPIO_Init+0x2ec>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d019      	beq.n	80030a4 <HAL_GPIO_Init+0x1f4>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <HAL_GPIO_Init+0x2f0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <HAL_GPIO_Init+0x1f0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_GPIO_Init+0x2f4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00d      	beq.n	800309c <HAL_GPIO_Init+0x1ec>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_GPIO_Init+0x2f8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <HAL_GPIO_Init+0x1e8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a48      	ldr	r2, [pc, #288]	; (80031ac <HAL_GPIO_Init+0x2fc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_GPIO_Init+0x1e4>
 8003090:	2305      	movs	r3, #5
 8003092:	e00a      	b.n	80030aa <HAL_GPIO_Init+0x1fa>
 8003094:	2306      	movs	r3, #6
 8003096:	e008      	b.n	80030aa <HAL_GPIO_Init+0x1fa>
 8003098:	2304      	movs	r3, #4
 800309a:	e006      	b.n	80030aa <HAL_GPIO_Init+0x1fa>
 800309c:	2303      	movs	r3, #3
 800309e:	e004      	b.n	80030aa <HAL_GPIO_Init+0x1fa>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e002      	b.n	80030aa <HAL_GPIO_Init+0x1fa>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_GPIO_Init+0x1fa>
 80030a8:	2300      	movs	r3, #0
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	f002 0203 	and.w	r2, r2, #3
 80030b0:	0092      	lsls	r2, r2, #2
 80030b2:	4093      	lsls	r3, r2
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ba:	4937      	ldr	r1, [pc, #220]	; (8003198 <HAL_GPIO_Init+0x2e8>)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_GPIO_Init+0x300>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030ec:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <HAL_GPIO_Init+0x300>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_GPIO_Init+0x300>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003116:	4a26      	ldr	r2, [pc, #152]	; (80031b0 <HAL_GPIO_Init+0x300>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_GPIO_Init+0x300>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_GPIO_Init+0x300>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_GPIO_Init+0x300>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800316a:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <HAL_GPIO_Init+0x300>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3301      	adds	r3, #1
 8003174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f ae9d 	bne.w	8002ec0 <HAL_GPIO_Init+0x10>
  }
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40021000 	.word	0x40021000
 8003198:	40010000 	.word	0x40010000
 800319c:	48000400 	.word	0x48000400
 80031a0:	48000800 	.word	0x48000800
 80031a4:	48000c00 	.word	0x48000c00
 80031a8:	48001000 	.word	0x48001000
 80031ac:	48001400 	.word	0x48001400
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d141      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b4b      	ldr	r3, [pc, #300]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d131      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d0:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d6:	4a46      	ldr	r2, [pc, #280]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e0:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e8:	4a41      	ldr	r2, [pc, #260]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f0:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2232      	movs	r2, #50	; 0x32
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	e002      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321a:	d102      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d158      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e057      	b.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003244:	e04d      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324c:	d141      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d131      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003262:	4a23      	ldr	r2, [pc, #140]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2232      	movs	r2, #50	; 0x32
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	e002      	b.n	800329a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3b01      	subs	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d102      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f2      	bne.n	8003294 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	d112      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e011      	b.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032d0:	e007      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40007000 	.word	0x40007000
 80032f4:	20000000 	.word	0x20000000
 80032f8:	431bde83 	.word	0x431bde83

080032fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e306      	b.n	800391c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d075      	beq.n	8003406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b97      	ldr	r3, [pc, #604]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003324:	4b94      	ldr	r3, [pc, #592]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d102      	bne.n	800333a <HAL_RCC_OscConfig+0x3e>
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d002      	beq.n	8003340 <HAL_RCC_OscConfig+0x44>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d10b      	bne.n	8003358 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	4b8d      	ldr	r3, [pc, #564]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d05b      	beq.n	8003404 <HAL_RCC_OscConfig+0x108>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d157      	bne.n	8003404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e2e1      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d106      	bne.n	8003370 <HAL_RCC_OscConfig+0x74>
 8003362:	4b85      	ldr	r3, [pc, #532]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a84      	ldr	r2, [pc, #528]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xb0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4b7f      	ldr	r3, [pc, #508]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7e      	ldr	r2, [pc, #504]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b7c      	ldr	r3, [pc, #496]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7b      	ldr	r2, [pc, #492]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xb0>
 8003394:	4b78      	ldr	r3, [pc, #480]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a77      	ldr	r2, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b75      	ldr	r3, [pc, #468]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a74      	ldr	r2, [pc, #464]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fd ffc0 	bl	8001338 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fd ffbc 	bl	8001338 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e2a6      	b.n	800391c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ce:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xc0>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd ffac 	bl	8001338 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fd ffa8 	bl	8001338 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e292      	b.n	800391c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f6:	4b60      	ldr	r3, [pc, #384]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0xe8>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d075      	beq.n	80034fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003412:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800341c:	4b56      	ldr	r3, [pc, #344]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b0c      	cmp	r3, #12
 800342a:	d102      	bne.n	8003432 <HAL_RCC_OscConfig+0x136>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d002      	beq.n	8003438 <HAL_RCC_OscConfig+0x13c>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11f      	bne.n	8003478 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003438:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_OscConfig+0x154>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e265      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	4b49      	ldr	r3, [pc, #292]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	4946      	ldr	r1, [pc, #280]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003464:	4b45      	ldr	r3, [pc, #276]	; (800357c <HAL_RCC_OscConfig+0x280>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd ff19 	bl	80012a0 <HAL_InitTick>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d043      	beq.n	80034fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e251      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d023      	beq.n	80034c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a3c      	ldr	r2, [pc, #240]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd ff54 	bl	8001338 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003494:	f7fd ff50 	bl	8001338 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e23a      	b.n	800391c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a6:	4b34      	ldr	r3, [pc, #208]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	061b      	lsls	r3, r3, #24
 80034c0:	492d      	ldr	r1, [pc, #180]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
 80034c6:	e01a      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fd ff30 	bl	8001338 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034dc:	f7fd ff2c 	bl	8001338 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e216      	b.n	800391c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x1e0>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d041      	beq.n	800358e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01c      	beq.n	800354c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003518:	4a17      	ldr	r2, [pc, #92]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fd ff09 	bl	8001338 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352a:	f7fd ff05 	bl	8001338 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1ef      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0ef      	beq.n	800352a <HAL_RCC_OscConfig+0x22e>
 800354a:	e020      	b.n	800358e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800354e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003552:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fd feec 	bl	8001338 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003562:	e00d      	b.n	8003580 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7fd fee8 	bl	8001338 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d906      	bls.n	8003580 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1d2      	b.n	800391c <HAL_RCC_OscConfig+0x620>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003580:	4b8c      	ldr	r3, [pc, #560]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ea      	bne.n	8003564 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80a6 	beq.w	80036e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035a0:	4b84      	ldr	r3, [pc, #528]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_OscConfig+0x2b4>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x2b6>
 80035b0:	2300      	movs	r3, #0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b7f      	ldr	r3, [pc, #508]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	4a7e      	ldr	r2, [pc, #504]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6593      	str	r3, [r2, #88]	; 0x58
 80035c2:	4b7c      	ldr	r3, [pc, #496]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d2:	4b79      	ldr	r3, [pc, #484]	; (80037b8 <HAL_RCC_OscConfig+0x4bc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035de:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <HAL_RCC_OscConfig+0x4bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a75      	ldr	r2, [pc, #468]	; (80037b8 <HAL_RCC_OscConfig+0x4bc>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fea5 	bl	8001338 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fd fea1 	bl	8001338 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e18b      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003604:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCC_OscConfig+0x4bc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d108      	bne.n	800362a <HAL_RCC_OscConfig+0x32e>
 8003618:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	4a65      	ldr	r2, [pc, #404]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003628:	e024      	b.n	8003674 <HAL_RCC_OscConfig+0x378>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b05      	cmp	r3, #5
 8003630:	d110      	bne.n	8003654 <HAL_RCC_OscConfig+0x358>
 8003632:	4b60      	ldr	r3, [pc, #384]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a5e      	ldr	r2, [pc, #376]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003642:	4b5c      	ldr	r3, [pc, #368]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	4a5a      	ldr	r2, [pc, #360]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003652:	e00f      	b.n	8003674 <HAL_RCC_OscConfig+0x378>
 8003654:	4b57      	ldr	r3, [pc, #348]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003664:	4b53      	ldr	r3, [pc, #332]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a52      	ldr	r2, [pc, #328]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d016      	beq.n	80036aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fd fe5c 	bl	8001338 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd fe58 	bl	8001338 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e140      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369a:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ed      	beq.n	8003684 <HAL_RCC_OscConfig+0x388>
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fd fe45 	bl	8001338 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd fe41 	bl	8001338 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e129      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c8:	4b3a      	ldr	r3, [pc, #232]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ed      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d6:	7ffb      	ldrb	r3, [r7, #31]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d03c      	beq.n	800376e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01c      	beq.n	8003736 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036fc:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003702:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fd fe14 	bl	8001338 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003714:	f7fd fe10 	bl	8001338 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e0fa      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ef      	beq.n	8003714 <HAL_RCC_OscConfig+0x418>
 8003734:	e01b      	b.n	800376e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003736:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373c:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fd fdf7 	bl	8001338 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800374e:	f7fd fdf3 	bl	8001338 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0dd      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ef      	bne.n	800374e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80d1 	beq.w	800391a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b0c      	cmp	r3, #12
 8003782:	f000 808b 	beq.w	800389c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d15e      	bne.n	800384c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <HAL_RCC_OscConfig+0x4b8>)
 8003794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fd fdcd 	bl	8001338 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	e00c      	b.n	80037bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fd fdc9 	bl	8001338 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d905      	bls.n	80037bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0b3      	b.n	800391c <HAL_RCC_OscConfig+0x620>
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ec      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c8:	4b56      	ldr	r3, [pc, #344]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_RCC_OscConfig+0x62c>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6a11      	ldr	r1, [r2, #32]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d8:	3a01      	subs	r2, #1
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	4311      	orrs	r1, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037e2:	0212      	lsls	r2, r2, #8
 80037e4:	4311      	orrs	r1, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ea:	0852      	lsrs	r2, r2, #1
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0552      	lsls	r2, r2, #21
 80037f0:	4311      	orrs	r1, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0652      	lsls	r2, r2, #25
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003802:	06d2      	lsls	r2, r2, #27
 8003804:	430a      	orrs	r2, r1
 8003806:	4947      	ldr	r1, [pc, #284]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b45      	ldr	r3, [pc, #276]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a44      	ldr	r2, [pc, #272]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 8003812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003818:	4b42      	ldr	r3, [pc, #264]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a41      	ldr	r2, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003822:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd fd88 	bl	8001338 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd fd84 	bl	8001338 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e06e      	b.n	800391c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x530>
 800384a:	e066      	b.n	800391a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384c:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a34      	ldr	r2, [pc, #208]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 8003852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003856:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4a31      	ldr	r2, [pc, #196]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003864:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a2e      	ldr	r2, [pc, #184]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 800386a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd fd60 	bl	8001338 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fd5c 	bl	8001338 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e046      	b.n	800391c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x580>
 800389a:	e03e      	b.n	800391a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e039      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCC_OscConfig+0x628>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0203 	and.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d12c      	bne.n	8003916 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	3b01      	subs	r3, #1
 80038c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d123      	bne.n	8003916 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11b      	bne.n	8003916 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d113      	bne.n	8003916 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	3b01      	subs	r3, #1
 80038fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d109      	bne.n	8003916 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	3b01      	subs	r3, #1
 8003910:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	019f800c 	.word	0x019f800c

0800392c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e11e      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b91      	ldr	r3, [pc, #580]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d910      	bls.n	8003974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b8e      	ldr	r3, [pc, #568]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 020f 	bic.w	r2, r3, #15
 800395a:	498c      	ldr	r1, [pc, #560]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b8a      	ldr	r3, [pc, #552]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e106      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d073      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d129      	bne.n	80039dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003988:	4b81      	ldr	r3, [pc, #516]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0f4      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003998:	f000 f99e 	bl	8003cd8 <RCC_GetSysClockFreqFromPLLSource>
 800399c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4a7c      	ldr	r2, [pc, #496]	; (8003b94 <HAL_RCC_ClockConfig+0x268>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d93f      	bls.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039a6:	4b7a      	ldr	r3, [pc, #488]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d033      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d12f      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039c6:	4b72      	ldr	r3, [pc, #456]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	4a70      	ldr	r2, [pc, #448]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e024      	b.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e4:	4b6a      	ldr	r3, [pc, #424]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0c6      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f4:	4b66      	ldr	r3, [pc, #408]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0be      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a04:	f000 f8ce 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4a61      	ldr	r2, [pc, #388]	; (8003b94 <HAL_RCC_ClockConfig+0x268>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d909      	bls.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a12:	4b5f      	ldr	r3, [pc, #380]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1a:	4a5d      	ldr	r2, [pc, #372]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a26:	4b5a      	ldr	r3, [pc, #360]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 0203 	bic.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4957      	ldr	r1, [pc, #348]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fd fc7e 	bl	8001338 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7fd fc7a 	bl	8001338 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e095      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	4b4e      	ldr	r3, [pc, #312]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 020c 	and.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1eb      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d023      	beq.n	8003abc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a80:	4b43      	ldr	r3, [pc, #268]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a98:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003aa0:	4a3b      	ldr	r2, [pc, #236]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4936      	ldr	r1, [pc, #216]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
 8003aba:	e008      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ac2:	4b33      	ldr	r3, [pc, #204]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	4a32      	ldr	r2, [pc, #200]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003acc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ace:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d21d      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 020f 	bic.w	r2, r3, #15
 8003ae4:	4929      	ldr	r1, [pc, #164]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aec:	f7fd fc24 	bl	8001338 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fd fc20 	bl	8001338 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e03b      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1ed      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4917      	ldr	r1, [pc, #92]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490f      	ldr	r1, [pc, #60]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b56:	f000 f825 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490c      	ldr	r1, [pc, #48]	; (8003b98 <HAL_RCC_ClockConfig+0x26c>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <HAL_RCC_ClockConfig+0x270>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x274>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fb90 	bl	80012a0 <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	04c4b400 	.word	0x04c4b400
 8003b98:	08006238 	.word	0x08006238
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d102      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e047      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bc8:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	e03e      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d136      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c02:	68d2      	ldr	r2, [r2, #12]
 8003c04:	0a12      	lsrs	r2, r2, #8
 8003c06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
      break;
 8003c10:	e00c      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c12:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	0a12      	lsrs	r2, r2, #8
 8003c20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
      break;
 8003c2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0e5b      	lsrs	r3, r3, #25
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e001      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c4c:	693b      	ldr	r3, [r7, #16]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	007a1200 	.word	0x007a1200

08003c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4904      	ldr	r1, [pc, #16]	; (8003ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08006248 	.word	0x08006248

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cb0:	f7ff ffda 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0adb      	lsrs	r3, r3, #11
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4904      	ldr	r1, [pc, #16]	; (8003cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	08006248 	.word	0x08006248

08003cd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d10c      	bne.n	8003d16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d06:	68d2      	ldr	r2, [r2, #12]
 8003d08:	0a12      	lsrs	r2, r2, #8
 8003d0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	617b      	str	r3, [r7, #20]
    break;
 8003d14:	e00c      	b.n	8003d30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	0a12      	lsrs	r2, r2, #8
 8003d24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
    break;
 8003d2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0e5b      	lsrs	r3, r3, #25
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d4a:	687b      	ldr	r3, [r7, #4]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	007a1200 	.word	0x007a1200
 8003d60:	00f42400 	.word	0x00f42400

08003d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d70:	2300      	movs	r3, #0
 8003d72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8098 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d82:	2300      	movs	r3, #0
 8003d84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d86:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10d      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003daa:	2301      	movs	r3, #1
 8003dac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dae:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a39      	ldr	r2, [pc, #228]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dba:	f7fd fabd 	bl	8001338 <HAL_GetTick>
 8003dbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fd fab9 	bl	8001338 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	74fb      	strb	r3, [r7, #19]
        break;
 8003dd4:	e005      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ef      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d159      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003de8:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01e      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d019      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e04:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e30:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fd fa79 	bl	8001338 <HAL_GetTick>
 8003e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e48:	e00b      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd fa75 	bl	8001338 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d902      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e60:	e006      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ec      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	74bb      	strb	r3, [r7, #18]
 8003e92:	e005      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea0:	7c7b      	ldrb	r3, [r7, #17]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4ba6      	ldr	r3, [pc, #664]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	4aa5      	ldr	r2, [pc, #660]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ebe:	4ba0      	ldr	r3, [pc, #640]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f023 0203 	bic.w	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	499c      	ldr	r1, [pc, #624]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee0:	4b97      	ldr	r3, [pc, #604]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f023 020c 	bic.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4994      	ldr	r1, [pc, #592]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f02:	4b8f      	ldr	r3, [pc, #572]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	498b      	ldr	r1, [pc, #556]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f24:	4b86      	ldr	r3, [pc, #536]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	4983      	ldr	r1, [pc, #524]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f46:	4b7e      	ldr	r3, [pc, #504]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	497a      	ldr	r1, [pc, #488]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f68:	4b75      	ldr	r3, [pc, #468]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	4972      	ldr	r1, [pc, #456]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f8a:	4b6d      	ldr	r3, [pc, #436]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4969      	ldr	r1, [pc, #420]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fac:	4b64      	ldr	r3, [pc, #400]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4961      	ldr	r1, [pc, #388]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fce:	4b5c      	ldr	r3, [pc, #368]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	4958      	ldr	r1, [pc, #352]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	4950      	ldr	r1, [pc, #320]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400e:	d105      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a4a      	ldr	r2, [pc, #296]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004028:	4b45      	ldr	r3, [pc, #276]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	4942      	ldr	r1, [pc, #264]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004046:	d105      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004048:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a3c      	ldr	r2, [pc, #240]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004052:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004060:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	4934      	ldr	r1, [pc, #208]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800407e:	d105      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a2e      	ldr	r2, [pc, #184]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004098:	4b29      	ldr	r3, [pc, #164]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a6:	4926      	ldr	r1, [pc, #152]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a20      	ldr	r2, [pc, #128]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	4918      	ldr	r1, [pc, #96]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ee:	d105      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	490a      	ldr	r1, [pc, #40]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004132:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004134:	7cbb      	ldrb	r3, [r7, #18]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e049      	b.n	80041ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fc fef4 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f000 fc08 	bl	8004998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d001      	beq.n	800420c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e042      	b.n	8004292 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <HAL_TIM_Base_Start+0xac>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d018      	beq.n	8004250 <HAL_TIM_Base_Start+0x5c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d013      	beq.n	8004250 <HAL_TIM_Base_Start+0x5c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_TIM_Base_Start+0xb0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <HAL_TIM_Base_Start+0x5c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_TIM_Base_Start+0xb4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_TIM_Base_Start+0x5c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <HAL_TIM_Base_Start+0xb8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_TIM_Base_Start+0x5c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <HAL_TIM_Base_Start+0xbc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d115      	bne.n	800427c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_TIM_Base_Start+0xc0>)
 8004258:	4013      	ands	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b06      	cmp	r3, #6
 8004260:	d015      	beq.n	800428e <HAL_TIM_Base_Start+0x9a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d011      	beq.n	800428e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	e008      	b.n	800428e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e000      	b.n	8004290 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	00010007 	.word	0x00010007

080042b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e049      	b.n	800435e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f841 	bl	8004366 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 fb4e 	bl	8004998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_TIM_PWM_Start+0x24>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e03c      	b.n	800441a <HAL_TIM_PWM_Start+0x9e>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d109      	bne.n	80043ba <HAL_TIM_PWM_Start+0x3e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e02f      	b.n	800441a <HAL_TIM_PWM_Start+0x9e>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d109      	bne.n	80043d4 <HAL_TIM_PWM_Start+0x58>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e022      	b.n	800441a <HAL_TIM_PWM_Start+0x9e>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b0c      	cmp	r3, #12
 80043d8:	d109      	bne.n	80043ee <HAL_TIM_PWM_Start+0x72>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	bf14      	ite	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	2300      	moveq	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	e015      	b.n	800441a <HAL_TIM_PWM_Start+0x9e>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d109      	bne.n	8004408 <HAL_TIM_PWM_Start+0x8c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e008      	b.n	800441a <HAL_TIM_PWM_Start+0x9e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e097      	b.n	8004552 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <HAL_TIM_PWM_Start+0xb6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004430:	e023      	b.n	800447a <HAL_TIM_PWM_Start+0xfe>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d104      	bne.n	8004442 <HAL_TIM_PWM_Start+0xc6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004440:	e01b      	b.n	800447a <HAL_TIM_PWM_Start+0xfe>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0xd6>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xfe>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b0c      	cmp	r3, #12
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0xe6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xfe>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b10      	cmp	r3, #16
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xf6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xfe>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 feaa 	bl	80051dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a33      	ldr	r2, [pc, #204]	; (800455c <HAL_TIM_PWM_Start+0x1e0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_TIM_PWM_Start+0x13e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a32      	ldr	r2, [pc, #200]	; (8004560 <HAL_TIM_PWM_Start+0x1e4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00e      	beq.n	80044ba <HAL_TIM_PWM_Start+0x13e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a30      	ldr	r2, [pc, #192]	; (8004564 <HAL_TIM_PWM_Start+0x1e8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_TIM_PWM_Start+0x13e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2f      	ldr	r2, [pc, #188]	; (8004568 <HAL_TIM_PWM_Start+0x1ec>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <HAL_TIM_PWM_Start+0x13e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a2d      	ldr	r2, [pc, #180]	; (800456c <HAL_TIM_PWM_Start+0x1f0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_Start+0x142>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_TIM_PWM_Start+0x144>
 80044be:	2300      	movs	r3, #0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <HAL_TIM_PWM_Start+0x1e0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d018      	beq.n	8004510 <HAL_TIM_PWM_Start+0x194>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d013      	beq.n	8004510 <HAL_TIM_PWM_Start+0x194>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a20      	ldr	r2, [pc, #128]	; (8004570 <HAL_TIM_PWM_Start+0x1f4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00e      	beq.n	8004510 <HAL_TIM_PWM_Start+0x194>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_TIM_PWM_Start+0x1f8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIM_PWM_Start+0x194>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <HAL_TIM_PWM_Start+0x1e4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIM_PWM_Start+0x194>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a16      	ldr	r2, [pc, #88]	; (8004564 <HAL_TIM_PWM_Start+0x1e8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d115      	bne.n	800453c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_TIM_PWM_Start+0x1fc>)
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b06      	cmp	r3, #6
 8004520:	d015      	beq.n	800454e <HAL_TIM_PWM_Start+0x1d2>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d011      	beq.n	800454e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453a:	e008      	b.n	800454e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e000      	b.n	8004550 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40013400 	.word	0x40013400
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	00010007 	.word	0x00010007

0800457c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004596:	2302      	movs	r3, #2
 8004598:	e0ff      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b14      	cmp	r3, #20
 80045a6:	f200 80f0 	bhi.w	800478a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	08004605 	.word	0x08004605
 80045b4:	0800478b 	.word	0x0800478b
 80045b8:	0800478b 	.word	0x0800478b
 80045bc:	0800478b 	.word	0x0800478b
 80045c0:	08004645 	.word	0x08004645
 80045c4:	0800478b 	.word	0x0800478b
 80045c8:	0800478b 	.word	0x0800478b
 80045cc:	0800478b 	.word	0x0800478b
 80045d0:	08004687 	.word	0x08004687
 80045d4:	0800478b 	.word	0x0800478b
 80045d8:	0800478b 	.word	0x0800478b
 80045dc:	0800478b 	.word	0x0800478b
 80045e0:	080046c7 	.word	0x080046c7
 80045e4:	0800478b 	.word	0x0800478b
 80045e8:	0800478b 	.word	0x0800478b
 80045ec:	0800478b 	.word	0x0800478b
 80045f0:	08004709 	.word	0x08004709
 80045f4:	0800478b 	.word	0x0800478b
 80045f8:	0800478b 	.word	0x0800478b
 80045fc:	0800478b 	.word	0x0800478b
 8004600:	08004749 	.word	0x08004749
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fa54 	bl	8004ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0208 	orr.w	r2, r2, #8
 800461e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0204 	bic.w	r2, r2, #4
 800462e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6999      	ldr	r1, [r3, #24]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	619a      	str	r2, [r3, #24]
      break;
 8004642:	e0a5      	b.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fac4 	bl	8004bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6999      	ldr	r1, [r3, #24]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]
      break;
 8004684:	e084      	b.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fb2d 	bl	8004cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0208 	orr.w	r2, r2, #8
 80046a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0204 	bic.w	r2, r2, #4
 80046b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69d9      	ldr	r1, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	61da      	str	r2, [r3, #28]
      break;
 80046c4:	e064      	b.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fb95 	bl	8004dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69d9      	ldr	r1, [r3, #28]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	021a      	lsls	r2, r3, #8
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	61da      	str	r2, [r3, #28]
      break;
 8004706:	e043      	b.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fbfe 	bl	8004f10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004746:	e023      	b.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fc42 	bl	8004fd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004762:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004772:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	021a      	lsls	r2, r3, #8
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004788:	e002      	b.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
      break;
 800478e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004798:	7dfb      	ldrb	r3, [r7, #23]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop

080047a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIM_ConfigClockSource+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e0de      	b.n	800497e <HAL_TIM_ConfigClockSource+0x1da>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80047de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a63      	ldr	r2, [pc, #396]	; (8004988 <HAL_TIM_ConfigClockSource+0x1e4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	f000 80a9 	beq.w	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004800:	4a61      	ldr	r2, [pc, #388]	; (8004988 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	f200 80ae 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004808:	4a60      	ldr	r2, [pc, #384]	; (800498c <HAL_TIM_ConfigClockSource+0x1e8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	f000 80a1 	beq.w	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004810:	4a5e      	ldr	r2, [pc, #376]	; (800498c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	f200 80a6 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004818:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_TIM_ConfigClockSource+0x1ec>)
 800481a:	4293      	cmp	r3, r2
 800481c:	f000 8099 	beq.w	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004820:	4a5b      	ldr	r2, [pc, #364]	; (8004990 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f200 809e 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004828:	4a5a      	ldr	r2, [pc, #360]	; (8004994 <HAL_TIM_ConfigClockSource+0x1f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	f000 8091 	beq.w	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004830:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	f200 8096 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004838:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800483c:	f000 8089 	beq.w	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004840:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004844:	f200 808e 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484c:	d03e      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0x128>
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004852:	f200 8087 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485a:	f000 8086 	beq.w	800496a <HAL_TIM_ConfigClockSource+0x1c6>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	d87f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004864:	2b70      	cmp	r3, #112	; 0x70
 8004866:	d01a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xfa>
 8004868:	2b70      	cmp	r3, #112	; 0x70
 800486a:	d87b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 800486c:	2b60      	cmp	r3, #96	; 0x60
 800486e:	d050      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x16e>
 8004870:	2b60      	cmp	r3, #96	; 0x60
 8004872:	d877      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004874:	2b50      	cmp	r3, #80	; 0x50
 8004876:	d03c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x14e>
 8004878:	2b50      	cmp	r3, #80	; 0x50
 800487a:	d873      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d058      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x18e>
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d86f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004884:	2b30      	cmp	r3, #48	; 0x30
 8004886:	d064      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004888:	2b30      	cmp	r3, #48	; 0x30
 800488a:	d86b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 800488c:	2b20      	cmp	r3, #32
 800488e:	d060      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d867      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d05a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x1ae>
 800489c:	e062      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f000 fc75 	bl	800519c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
      break;
 80048ca:	e04f      	b.n	800496c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f000 fc5e 	bl	800519c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ee:	609a      	str	r2, [r3, #8]
      break;
 80048f0:	e03c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 fbd0 	bl	80050a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2150      	movs	r1, #80	; 0x50
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fc29 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004910:	e02c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	461a      	mov	r2, r3
 8004920:	f000 fbef 	bl	8005102 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2160      	movs	r1, #96	; 0x60
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fc19 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004930:	e01c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	461a      	mov	r2, r3
 8004940:	f000 fbb0 	bl	80050a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2140      	movs	r1, #64	; 0x40
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fc09 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004950:	e00c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 fc00 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004962:	e003      	b.n	800496c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      break;
 8004968:	e000      	b.n	800496c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800496a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	00100070 	.word	0x00100070
 800498c:	00100040 	.word	0x00100040
 8004990:	00100030 	.word	0x00100030
 8004994:	00100020 	.word	0x00100020

08004998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3c      	ldr	r2, [pc, #240]	; (8004a9c <TIM_Base_SetConfig+0x104>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00f      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d00b      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a39      	ldr	r2, [pc, #228]	; (8004aa0 <TIM_Base_SetConfig+0x108>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <TIM_Base_SetConfig+0x10c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <TIM_Base_SetConfig+0x110>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2d      	ldr	r2, [pc, #180]	; (8004a9c <TIM_Base_SetConfig+0x104>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01b      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d017      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2a      	ldr	r2, [pc, #168]	; (8004aa0 <TIM_Base_SetConfig+0x108>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <TIM_Base_SetConfig+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a28      	ldr	r2, [pc, #160]	; (8004aa8 <TIM_Base_SetConfig+0x110>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <TIM_Base_SetConfig+0x114>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <TIM_Base_SetConfig+0x118>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <TIM_Base_SetConfig+0x11c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <TIM_Base_SetConfig+0x104>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00f      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <TIM_Base_SetConfig+0x110>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <TIM_Base_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <TIM_Base_SetConfig+0x118>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <TIM_Base_SetConfig+0x11c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0201 	bic.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 0302 	bic.w	r3, r3, #2
 8004b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <TIM_OC1_SetConfig+0x10c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <TIM_OC1_SetConfig+0x80>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <TIM_OC1_SetConfig+0x110>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_OC1_SetConfig+0x80>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2a      	ldr	r2, [pc, #168]	; (8004bcc <TIM_OC1_SetConfig+0x114>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_OC1_SetConfig+0x80>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <TIM_OC1_SetConfig+0x118>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC1_SetConfig+0x80>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <TIM_OC1_SetConfig+0x11c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10c      	bne.n	8004b52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0308 	bic.w	r3, r3, #8
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1b      	ldr	r2, [pc, #108]	; (8004bc4 <TIM_OC1_SetConfig+0x10c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00f      	beq.n	8004b7a <TIM_OC1_SetConfig+0xc2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <TIM_OC1_SetConfig+0x110>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_OC1_SetConfig+0xc2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <TIM_OC1_SetConfig+0x114>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_OC1_SetConfig+0xc2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <TIM_OC1_SetConfig+0x118>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_OC1_SetConfig+0xc2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <TIM_OC1_SetConfig+0x11c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d111      	bne.n	8004b9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	621a      	str	r2, [r3, #32]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800

08004bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f023 0210 	bic.w	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0320 	bic.w	r3, r3, #32
 8004c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <TIM_OC2_SetConfig+0x100>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC2_SetConfig+0x6c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <TIM_OC2_SetConfig+0x104>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10d      	bne.n	8004c60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <TIM_OC2_SetConfig+0x100>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_OC2_SetConfig+0xb0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <TIM_OC2_SetConfig+0x104>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_OC2_SetConfig+0xb0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <TIM_OC2_SetConfig+0x108>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_OC2_SetConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <TIM_OC2_SetConfig+0x10c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_OC2_SetConfig+0xb0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <TIM_OC2_SetConfig+0x110>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d113      	bne.n	8004cb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40013400 	.word	0x40013400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40014800 	.word	0x40014800

08004cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <TIM_OC3_SetConfig+0xfc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC3_SetConfig+0x6a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <TIM_OC3_SetConfig+0x100>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <TIM_OC3_SetConfig+0xfc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00f      	beq.n	8004d9a <TIM_OC3_SetConfig+0xae>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <TIM_OC3_SetConfig+0x100>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <TIM_OC3_SetConfig+0xae>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <TIM_OC3_SetConfig+0x104>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <TIM_OC3_SetConfig+0xae>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <TIM_OC3_SetConfig+0x108>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_OC3_SetConfig+0xae>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <TIM_OC3_SetConfig+0x10c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d113      	bne.n	8004dc2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40013400 	.word	0x40013400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800

08004dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	031b      	lsls	r3, r3, #12
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a28      	ldr	r2, [pc, #160]	; (8004efc <TIM_OC4_SetConfig+0x100>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC4_SetConfig+0x6c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <TIM_OC4_SetConfig+0x104>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10d      	bne.n	8004e84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <TIM_OC4_SetConfig+0x100>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00f      	beq.n	8004eac <TIM_OC4_SetConfig+0xb0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <TIM_OC4_SetConfig+0x104>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_OC4_SetConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <TIM_OC4_SetConfig+0x108>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_OC4_SetConfig+0xb0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <TIM_OC4_SetConfig+0x10c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_OC4_SetConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <TIM_OC4_SetConfig+0x110>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d113      	bne.n	8004ed4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	019b      	lsls	r3, r3, #6
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40013400 	.word	0x40013400
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <TIM_OC5_SetConfig+0xb4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00f      	beq.n	8004f8a <TIM_OC5_SetConfig+0x7a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <TIM_OC5_SetConfig+0xb8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <TIM_OC5_SetConfig+0x7a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <TIM_OC5_SetConfig+0xbc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <TIM_OC5_SetConfig+0x7a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <TIM_OC5_SetConfig+0xc0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC5_SetConfig+0x7a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a13      	ldr	r2, [pc, #76]	; (8004fd4 <TIM_OC5_SetConfig+0xc4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d109      	bne.n	8004f9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800501e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	051b      	lsls	r3, r3, #20
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a18      	ldr	r2, [pc, #96]	; (8005090 <TIM_OC6_SetConfig+0xb8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00f      	beq.n	8005054 <TIM_OC6_SetConfig+0x7c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <TIM_OC6_SetConfig+0xbc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_OC6_SetConfig+0x7c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <TIM_OC6_SetConfig+0xc0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_OC6_SetConfig+0x7c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a15      	ldr	r2, [pc, #84]	; (800509c <TIM_OC6_SetConfig+0xc4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC6_SetConfig+0x7c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <TIM_OC6_SetConfig+0xc8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d109      	bne.n	8005068 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800

080050a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 030a 	bic.w	r3, r3, #10
 80050e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0210 	bic.w	r2, r3, #16
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800512c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	031b      	lsls	r3, r3, #12
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800513e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	f043 0307 	orr.w	r3, r3, #7
 8005188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	021a      	lsls	r2, r3, #8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	431a      	orrs	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	609a      	str	r2, [r3, #8]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2201      	movs	r2, #1
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1a      	ldr	r2, [r3, #32]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	401a      	ands	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1a      	ldr	r2, [r3, #32]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 031f 	and.w	r3, r3, #31
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	431a      	orrs	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <HAL_TIMEx_PWMN_Start+0x24>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e022      	b.n	8005292 <HAL_TIMEx_PWMN_Start+0x6a>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d109      	bne.n	8005266 <HAL_TIMEx_PWMN_Start+0x3e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	bf14      	ite	ne
 800525e:	2301      	movne	r3, #1
 8005260:	2300      	moveq	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e015      	b.n	8005292 <HAL_TIMEx_PWMN_Start+0x6a>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d109      	bne.n	8005280 <HAL_TIMEx_PWMN_Start+0x58>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e008      	b.n	8005292 <HAL_TIMEx_PWMN_Start+0x6a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e069      	b.n	800536e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <HAL_TIMEx_PWMN_Start+0x82>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a8:	e013      	b.n	80052d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d104      	bne.n	80052ba <HAL_TIMEx_PWMN_Start+0x92>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b8:	e00b      	b.n	80052d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d104      	bne.n	80052ca <HAL_TIMEx_PWMN_Start+0xa2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c8:	e003      	b.n	80052d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2204      	movs	r2, #4
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f97a 	bl	80055d4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a20      	ldr	r2, [pc, #128]	; (8005378 <HAL_TIMEx_PWMN_Start+0x150>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d018      	beq.n	800532c <HAL_TIMEx_PWMN_Start+0x104>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d013      	beq.n	800532c <HAL_TIMEx_PWMN_Start+0x104>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <HAL_TIMEx_PWMN_Start+0x154>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00e      	beq.n	800532c <HAL_TIMEx_PWMN_Start+0x104>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <HAL_TIMEx_PWMN_Start+0x158>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_TIMEx_PWMN_Start+0x104>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <HAL_TIMEx_PWMN_Start+0x15c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_TIMEx_PWMN_Start+0x104>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_TIMEx_PWMN_Start+0x160>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d115      	bne.n	8005358 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	4b16      	ldr	r3, [pc, #88]	; (800538c <HAL_TIMEx_PWMN_Start+0x164>)
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d015      	beq.n	800536a <HAL_TIMEx_PWMN_Start+0x142>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005344:	d011      	beq.n	800536a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	e008      	b.n	800536a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e000      	b.n	800536c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40013400 	.word	0x40013400
 8005388:	40014000 	.word	0x40014000
 800538c:	00010007 	.word	0x00010007

08005390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e065      	b.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2c      	ldr	r2, [pc, #176]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d108      	bne.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d013      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a17      	ldr	r2, [pc, #92]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a12      	ldr	r2, [pc, #72]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10c      	bne.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40012c00 	.word	0x40012c00
 8005484:	40013400 	.word	0x40013400
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40014000 	.word	0x40014000

08005494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e087      	b.n	80055c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a27      	ldr	r2, [pc, #156]	; (80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d106      	bne.n	800554c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d126      	bne.n	80055ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	051b      	lsls	r3, r3, #20
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d106      	bne.n	80055ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400

080055d4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	2204      	movs	r2, #4
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	401a      	ands	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1a      	ldr	r2, [r3, #32]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	431a      	orrs	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e042      	b.n	80056b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fb fd42 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2224      	movs	r2, #36	; 0x24
 800564c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f82d 	bl	80056c0 <UART_SetConfig>
 8005666:	4603      	mov	r3, r0
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e022      	b.n	80056b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 faed 	bl	8005c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800568c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800569c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fb74 	bl	8005d9c <UART_CheckIdleState>
 80056b4:	4603      	mov	r3, r0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c4:	b08c      	sub	sp, #48	; 0x30
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	431a      	orrs	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	431a      	orrs	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4bab      	ldr	r3, [pc, #684]	; (800599c <UART_SetConfig+0x2dc>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4aa0      	ldr	r2, [pc, #640]	; (80059a0 <UART_SetConfig+0x2e0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005728:	4313      	orrs	r3, r2
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005736:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005740:	430b      	orrs	r3, r1
 8005742:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	f023 010f 	bic.w	r1, r3, #15
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a91      	ldr	r2, [pc, #580]	; (80059a4 <UART_SetConfig+0x2e4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d125      	bne.n	80057b0 <UART_SetConfig+0xf0>
 8005764:	4b90      	ldr	r3, [pc, #576]	; (80059a8 <UART_SetConfig+0x2e8>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	2b03      	cmp	r3, #3
 8005770:	d81a      	bhi.n	80057a8 <UART_SetConfig+0xe8>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <UART_SetConfig+0xb8>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	08005789 	.word	0x08005789
 800577c:	08005799 	.word	0x08005799
 8005780:	08005791 	.word	0x08005791
 8005784:	080057a1 	.word	0x080057a1
 8005788:	2301      	movs	r3, #1
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578e:	e0d6      	b.n	800593e <UART_SetConfig+0x27e>
 8005790:	2302      	movs	r3, #2
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005796:	e0d2      	b.n	800593e <UART_SetConfig+0x27e>
 8005798:	2304      	movs	r3, #4
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e0ce      	b.n	800593e <UART_SetConfig+0x27e>
 80057a0:	2308      	movs	r3, #8
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e0ca      	b.n	800593e <UART_SetConfig+0x27e>
 80057a8:	2310      	movs	r3, #16
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e0c6      	b.n	800593e <UART_SetConfig+0x27e>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a7d      	ldr	r2, [pc, #500]	; (80059ac <UART_SetConfig+0x2ec>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d138      	bne.n	800582c <UART_SetConfig+0x16c>
 80057ba:	4b7b      	ldr	r3, [pc, #492]	; (80059a8 <UART_SetConfig+0x2e8>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f003 030c 	and.w	r3, r3, #12
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d82d      	bhi.n	8005824 <UART_SetConfig+0x164>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x110>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	08005805 	.word	0x08005805
 80057d4:	08005825 	.word	0x08005825
 80057d8:	08005825 	.word	0x08005825
 80057dc:	08005825 	.word	0x08005825
 80057e0:	08005815 	.word	0x08005815
 80057e4:	08005825 	.word	0x08005825
 80057e8:	08005825 	.word	0x08005825
 80057ec:	08005825 	.word	0x08005825
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	08005825 	.word	0x08005825
 80057f8:	08005825 	.word	0x08005825
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800581d 	.word	0x0800581d
 8005804:	2300      	movs	r3, #0
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580a:	e098      	b.n	800593e <UART_SetConfig+0x27e>
 800580c:	2302      	movs	r3, #2
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005812:	e094      	b.n	800593e <UART_SetConfig+0x27e>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e090      	b.n	800593e <UART_SetConfig+0x27e>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e08c      	b.n	800593e <UART_SetConfig+0x27e>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e088      	b.n	800593e <UART_SetConfig+0x27e>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a5f      	ldr	r2, [pc, #380]	; (80059b0 <UART_SetConfig+0x2f0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d125      	bne.n	8005882 <UART_SetConfig+0x1c2>
 8005836:	4b5c      	ldr	r3, [pc, #368]	; (80059a8 <UART_SetConfig+0x2e8>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005840:	2b30      	cmp	r3, #48	; 0x30
 8005842:	d016      	beq.n	8005872 <UART_SetConfig+0x1b2>
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d818      	bhi.n	800587a <UART_SetConfig+0x1ba>
 8005848:	2b20      	cmp	r3, #32
 800584a:	d00a      	beq.n	8005862 <UART_SetConfig+0x1a2>
 800584c:	2b20      	cmp	r3, #32
 800584e:	d814      	bhi.n	800587a <UART_SetConfig+0x1ba>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <UART_SetConfig+0x19a>
 8005854:	2b10      	cmp	r3, #16
 8005856:	d008      	beq.n	800586a <UART_SetConfig+0x1aa>
 8005858:	e00f      	b.n	800587a <UART_SetConfig+0x1ba>
 800585a:	2300      	movs	r3, #0
 800585c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005860:	e06d      	b.n	800593e <UART_SetConfig+0x27e>
 8005862:	2302      	movs	r3, #2
 8005864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005868:	e069      	b.n	800593e <UART_SetConfig+0x27e>
 800586a:	2304      	movs	r3, #4
 800586c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005870:	e065      	b.n	800593e <UART_SetConfig+0x27e>
 8005872:	2308      	movs	r3, #8
 8005874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005878:	e061      	b.n	800593e <UART_SetConfig+0x27e>
 800587a:	2310      	movs	r3, #16
 800587c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005880:	e05d      	b.n	800593e <UART_SetConfig+0x27e>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a4b      	ldr	r2, [pc, #300]	; (80059b4 <UART_SetConfig+0x2f4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d125      	bne.n	80058d8 <UART_SetConfig+0x218>
 800588c:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <UART_SetConfig+0x2e8>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005896:	2bc0      	cmp	r3, #192	; 0xc0
 8005898:	d016      	beq.n	80058c8 <UART_SetConfig+0x208>
 800589a:	2bc0      	cmp	r3, #192	; 0xc0
 800589c:	d818      	bhi.n	80058d0 <UART_SetConfig+0x210>
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d00a      	beq.n	80058b8 <UART_SetConfig+0x1f8>
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d814      	bhi.n	80058d0 <UART_SetConfig+0x210>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <UART_SetConfig+0x1f0>
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d008      	beq.n	80058c0 <UART_SetConfig+0x200>
 80058ae:	e00f      	b.n	80058d0 <UART_SetConfig+0x210>
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b6:	e042      	b.n	800593e <UART_SetConfig+0x27e>
 80058b8:	2302      	movs	r3, #2
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e03e      	b.n	800593e <UART_SetConfig+0x27e>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e03a      	b.n	800593e <UART_SetConfig+0x27e>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e036      	b.n	800593e <UART_SetConfig+0x27e>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e032      	b.n	800593e <UART_SetConfig+0x27e>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a30      	ldr	r2, [pc, #192]	; (80059a0 <UART_SetConfig+0x2e0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d12a      	bne.n	8005938 <UART_SetConfig+0x278>
 80058e2:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <UART_SetConfig+0x2e8>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f0:	d01a      	beq.n	8005928 <UART_SetConfig+0x268>
 80058f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f6:	d81b      	bhi.n	8005930 <UART_SetConfig+0x270>
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fc:	d00c      	beq.n	8005918 <UART_SetConfig+0x258>
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005902:	d815      	bhi.n	8005930 <UART_SetConfig+0x270>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <UART_SetConfig+0x250>
 8005908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590c:	d008      	beq.n	8005920 <UART_SetConfig+0x260>
 800590e:	e00f      	b.n	8005930 <UART_SetConfig+0x270>
 8005910:	2300      	movs	r3, #0
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e012      	b.n	800593e <UART_SetConfig+0x27e>
 8005918:	2302      	movs	r3, #2
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e00e      	b.n	800593e <UART_SetConfig+0x27e>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e00a      	b.n	800593e <UART_SetConfig+0x27e>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e006      	b.n	800593e <UART_SetConfig+0x27e>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e002      	b.n	800593e <UART_SetConfig+0x27e>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <UART_SetConfig+0x2e0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	f040 80a8 	bne.w	8005a9a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800594a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800594e:	2b08      	cmp	r3, #8
 8005950:	d834      	bhi.n	80059bc <UART_SetConfig+0x2fc>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x298>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	0800597d 	.word	0x0800597d
 800595c:	080059bd 	.word	0x080059bd
 8005960:	08005985 	.word	0x08005985
 8005964:	080059bd 	.word	0x080059bd
 8005968:	0800598b 	.word	0x0800598b
 800596c:	080059bd 	.word	0x080059bd
 8005970:	080059bd 	.word	0x080059bd
 8005974:	080059bd 	.word	0x080059bd
 8005978:	08005993 	.word	0x08005993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597c:	f7fe f980 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005982:	e021      	b.n	80059c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <UART_SetConfig+0x2f8>)
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005988:	e01e      	b.n	80059c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7fe f90b 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 800598e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005990:	e01a      	b.n	80059c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005998:	e016      	b.n	80059c8 <UART_SetConfig+0x308>
 800599a:	bf00      	nop
 800599c:	cfff69f3 	.word	0xcfff69f3
 80059a0:	40008000 	.word	0x40008000
 80059a4:	40013800 	.word	0x40013800
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40004400 	.word	0x40004400
 80059b0:	40004800 	.word	0x40004800
 80059b4:	40004c00 	.word	0x40004c00
 80059b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 812a 	beq.w	8005c24 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	4a9e      	ldr	r2, [pc, #632]	; (8005c50 <UART_SetConfig+0x590>)
 80059d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059da:	461a      	mov	r2, r3
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	4413      	add	r3, r2
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d305      	bcc.n	8005a00 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d903      	bls.n	8005a08 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a06:	e10d      	b.n	8005c24 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	60fa      	str	r2, [r7, #12]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	4a8e      	ldr	r2, [pc, #568]	; (8005c50 <UART_SetConfig+0x590>)
 8005a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a2a:	f7fa fbf5 	bl	8000218 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4610      	mov	r0, r2
 8005a34:	4619      	mov	r1, r3
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	020b      	lsls	r3, r1, #8
 8005a40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a44:	0202      	lsls	r2, r0, #8
 8005a46:	6979      	ldr	r1, [r7, #20]
 8005a48:	6849      	ldr	r1, [r1, #4]
 8005a4a:	0849      	lsrs	r1, r1, #1
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	4605      	mov	r5, r0
 8005a52:	eb12 0804 	adds.w	r8, r2, r4
 8005a56:	eb43 0905 	adc.w	r9, r3, r5
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	469a      	mov	sl, r3
 8005a62:	4693      	mov	fp, r2
 8005a64:	4652      	mov	r2, sl
 8005a66:	465b      	mov	r3, fp
 8005a68:	4640      	mov	r0, r8
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	f7fa fbd4 	bl	8000218 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4613      	mov	r3, r2
 8005a76:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a7e:	d308      	bcc.n	8005a92 <UART_SetConfig+0x3d2>
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a86:	d204      	bcs.n	8005a92 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	60da      	str	r2, [r3, #12]
 8005a90:	e0c8      	b.n	8005c24 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a98:	e0c4      	b.n	8005c24 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa2:	d167      	bne.n	8005b74 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d828      	bhi.n	8005afe <UART_SetConfig+0x43e>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x3f4>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005aff 	.word	0x08005aff
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aff 	.word	0x08005aff
 8005acc:	08005aff 	.word	0x08005aff
 8005ad0:	08005aff 	.word	0x08005aff
 8005ad4:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fe f8d2 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ade:	e014      	b.n	8005b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7fe f8e4 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8005ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae6:	e010      	b.n	8005b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b5a      	ldr	r3, [pc, #360]	; (8005c54 <UART_SetConfig+0x594>)
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005aec:	e00d      	b.n	8005b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aee:	f7fe f859 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8005af2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005af4:	e009      	b.n	8005b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005afc:	e005      	b.n	8005b0a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8089 	beq.w	8005c24 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	4a4e      	ldr	r2, [pc, #312]	; (8005c50 <UART_SetConfig+0x590>)
 8005b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b24:	005a      	lsls	r2, r3, #1
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	441a      	add	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d916      	bls.n	8005b6c <UART_SetConfig+0x4ac>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d212      	bcs.n	8005b6c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f023 030f 	bic.w	r3, r3, #15
 8005b4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	8bfb      	ldrh	r3, [r7, #30]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	8bfa      	ldrh	r2, [r7, #30]
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	e05b      	b.n	8005c24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b72:	e057      	b.n	8005c24 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d828      	bhi.n	8005bce <UART_SetConfig+0x50e>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0x4c4>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	08005bcf 	.word	0x08005bcf
 8005b94:	08005bbf 	.word	0x08005bbf
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005bcf 	.word	0x08005bcf
 8005ba0:	08005bcf 	.word	0x08005bcf
 8005ba4:	08005bc7 	.word	0x08005bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba8:	f7fe f86a 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bae:	e014      	b.n	8005bda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb0:	f7fe f87c 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8005bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bb6:	e010      	b.n	8005bda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb8:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <UART_SetConfig+0x594>)
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bbc:	e00d      	b.n	8005bda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bbe:	f7fd fff1 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8005bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bc4:	e009      	b.n	8005bda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bcc:	e005      	b.n	8005bda <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d021      	beq.n	8005c24 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <UART_SetConfig+0x590>)
 8005be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bea:	461a      	mov	r2, r3
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	441a      	add	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	2b0f      	cmp	r3, #15
 8005c08:	d909      	bls.n	8005c1e <UART_SetConfig+0x55e>
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d205      	bcs.n	8005c1e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e002      	b.n	8005c24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c40:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3730      	adds	r7, #48	; 0x30
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c4e:	bf00      	nop
 8005c50:	08006250 	.word	0x08006250
 8005c54:	00f42400 	.word	0x00f42400

08005c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d56:	d10a      	bne.n	8005d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dac:	f7fb fac4 	bl	8001338 <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d10e      	bne.n	8005dde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f82f 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e025      	b.n	8005e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d10e      	bne.n	8005e0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f819 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e00f      	b.n	8005e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b09c      	sub	sp, #112	; 0x70
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e42:	e0a9      	b.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	f000 80a5 	beq.w	8005f98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fb fa73 	bl	8001338 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d140      	bne.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e78:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e6      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e069      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d051      	beq.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f02:	d149      	bne.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e6      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f60:	623a      	str	r2, [r7, #32]
 8005f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	69f9      	ldr	r1, [r7, #28]
 8005f66:	6a3a      	ldr	r2, [r7, #32]
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e010      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	f43f af46 	beq.w	8005e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3770      	adds	r7, #112	; 0x70
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e027      	b.n	8006028 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006006:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006048:	2302      	movs	r3, #2
 800604a:	e02d      	b.n	80060a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2224      	movs	r2, #36	; 0x24
 8006058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f84f 	bl	800612c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e02d      	b.n	8006124 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f811 	bl	800612c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006138:	2b00      	cmp	r3, #0
 800613a:	d108      	bne.n	800614e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800614c:	e031      	b.n	80061b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800614e:	2308      	movs	r3, #8
 8006150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006152:	2308      	movs	r3, #8
 8006154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	0e5b      	lsrs	r3, r3, #25
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	0f5b      	lsrs	r3, r3, #29
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	7b3a      	ldrb	r2, [r7, #12]
 800617a:	4911      	ldr	r1, [pc, #68]	; (80061c0 <UARTEx_SetNbDataToProcess+0x94>)
 800617c:	5c8a      	ldrb	r2, [r1, r2]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006182:	7b3a      	ldrb	r2, [r7, #12]
 8006184:	490f      	ldr	r1, [pc, #60]	; (80061c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006188:	fb93 f3f2 	sdiv	r3, r3, r2
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	7b7a      	ldrb	r2, [r7, #13]
 8006198:	4909      	ldr	r1, [pc, #36]	; (80061c0 <UARTEx_SetNbDataToProcess+0x94>)
 800619a:	5c8a      	ldrb	r2, [r1, r2]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061a0:	7b7a      	ldrb	r2, [r7, #13]
 80061a2:	4908      	ldr	r1, [pc, #32]	; (80061c4 <UARTEx_SetNbDataToProcess+0x98>)
 80061a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	08006268 	.word	0x08006268
 80061c4:	08006270 	.word	0x08006270

080061c8 <__libc_init_array>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4d0d      	ldr	r5, [pc, #52]	; (8006200 <__libc_init_array+0x38>)
 80061cc:	4c0d      	ldr	r4, [pc, #52]	; (8006204 <__libc_init_array+0x3c>)
 80061ce:	1b64      	subs	r4, r4, r5
 80061d0:	10a4      	asrs	r4, r4, #2
 80061d2:	2600      	movs	r6, #0
 80061d4:	42a6      	cmp	r6, r4
 80061d6:	d109      	bne.n	80061ec <__libc_init_array+0x24>
 80061d8:	4d0b      	ldr	r5, [pc, #44]	; (8006208 <__libc_init_array+0x40>)
 80061da:	4c0c      	ldr	r4, [pc, #48]	; (800620c <__libc_init_array+0x44>)
 80061dc:	f000 f820 	bl	8006220 <_init>
 80061e0:	1b64      	subs	r4, r4, r5
 80061e2:	10a4      	asrs	r4, r4, #2
 80061e4:	2600      	movs	r6, #0
 80061e6:	42a6      	cmp	r6, r4
 80061e8:	d105      	bne.n	80061f6 <__libc_init_array+0x2e>
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
 80061ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f0:	4798      	blx	r3
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7ee      	b.n	80061d4 <__libc_init_array+0xc>
 80061f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fa:	4798      	blx	r3
 80061fc:	3601      	adds	r6, #1
 80061fe:	e7f2      	b.n	80061e6 <__libc_init_array+0x1e>
 8006200:	08006280 	.word	0x08006280
 8006204:	08006280 	.word	0x08006280
 8006208:	08006280 	.word	0x08006280
 800620c:	08006284 	.word	0x08006284

08006210 <memset>:
 8006210:	4402      	add	r2, r0
 8006212:	4603      	mov	r3, r0
 8006214:	4293      	cmp	r3, r2
 8006216:	d100      	bne.n	800621a <memset+0xa>
 8006218:	4770      	bx	lr
 800621a:	f803 1b01 	strb.w	r1, [r3], #1
 800621e:	e7f9      	b.n	8006214 <memset+0x4>

08006220 <_init>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr

0800622c <_fini>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr


ESC_G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007114  08007114  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800711c  0800711c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000070  08007194  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007194  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017745  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295e  00000000  00000000  000377e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003a148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbae  00000000  00000000  0003c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017115  00000000  00000000  0005c4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9416  00000000  00000000  000735f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ca09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca8  00000000  00000000  0014ca5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007074 	.word	0x08007074

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007074 	.word	0x08007074

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
  * @retval int
  */
volatile uint16_t val1[2], val2[2];

int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 f85c 	bl	8001686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f9d7 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fd23 	bl	800101c <MX_GPIO_Init>
  MX_DMA_Init();
 80005d6:	f000 fcef 	bl	8000fb8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005da:	f000 fa1d 	bl	8000a18 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005de:	f000 faa7 	bl	8000b30 <MX_ADC2_Init>
  MX_TIM1_Init();
 80005e2:	f000 fb1f 	bl	8000c24 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005e6:	f000 fbf1 	bl	8000dcc <MX_TIM2_Init>
  MX_TIM6_Init();
 80005ea:	f000 fc63 	bl	8000eb4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 fc97 	bl	8000f20 <MX_USART2_UART_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005f2:	2100      	movs	r1, #0
 80005f4:	4895      	ldr	r0, [pc, #596]	; (800084c <main+0x288>)
 80005f6:	f004 f8cd 	bl	8004794 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80005fa:	2100      	movs	r1, #0
 80005fc:	4893      	ldr	r0, [pc, #588]	; (800084c <main+0x288>)
 80005fe:	f005 f81f 	bl	8005640 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000602:	2104      	movs	r1, #4
 8000604:	4891      	ldr	r0, [pc, #580]	; (800084c <main+0x288>)
 8000606:	f004 f8c5 	bl	8004794 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800060a:	2104      	movs	r1, #4
 800060c:	488f      	ldr	r0, [pc, #572]	; (800084c <main+0x288>)
 800060e:	f005 f817 	bl	8005640 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000612:	2108      	movs	r1, #8
 8000614:	488d      	ldr	r0, [pc, #564]	; (800084c <main+0x288>)
 8000616:	f004 f8bd 	bl	8004794 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800061a:	2108      	movs	r1, #8
 800061c:	488b      	ldr	r0, [pc, #556]	; (800084c <main+0x288>)
 800061e:	f005 f80f 	bl	8005640 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Base_Start(&htim1);
 8000622:	488a      	ldr	r0, [pc, #552]	; (800084c <main+0x288>)
 8000624:	f003 fff2 	bl	800460c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000628:	4889      	ldr	r0, [pc, #548]	; (8000850 <main+0x28c>)
 800062a:	f003 ffef 	bl	800460c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 800062e:	4889      	ldr	r0, [pc, #548]	; (8000854 <main+0x290>)
 8000630:	f003 ffec 	bl	800460c <HAL_TIM_Base_Start>

 	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)val1, 2);
 8000634:	2202      	movs	r2, #2
 8000636:	4988      	ldr	r1, [pc, #544]	; (8000858 <main+0x294>)
 8000638:	4888      	ldr	r0, [pc, #544]	; (800085c <main+0x298>)
 800063a:	f001 fc41 	bl	8001ec0 <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
 800063e:	2202      	movs	r2, #2
 8000640:	4987      	ldr	r1, [pc, #540]	; (8000860 <main+0x29c>)
 8000642:	4888      	ldr	r0, [pc, #544]	; (8000864 <main+0x2a0>)
 8000644:	f001 fc3c 	bl	8001ec0 <HAL_ADC_Start_DMA>
//	while(1);

	//U, V, W: TIM1, TIM2, TIM3
	//U, V, W, X: val2[0], val1[0], val1[1], val2[1]

 	c = snprintf(temp, sizeof(temp),"U, V, W, X\n");
 8000648:	463b      	mov	r3, r7
 800064a:	4a87      	ldr	r2, [pc, #540]	; (8000868 <main+0x2a4>)
 800064c:	2123      	movs	r1, #35	; 0x23
 800064e:	4618      	mov	r0, r3
 8000650:	f006 f88e 	bl	8006770 <sniprintf>
 8000654:	6338      	str	r0, [r7, #48]	; 0x30
	HAL_UART_Transmit(&huart2, temp, c, 100);
 8000656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000658:	b29a      	uxth	r2, r3
 800065a:	4639      	mov	r1, r7
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	4883      	ldr	r0, [pc, #524]	; (800086c <main+0x2a8>)
 8000660:	f005 fa39 	bl	8005ad6 <HAL_UART_Transmit>
//		c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val2[0], val1[0], val1[1], val2[1]);
//		HAL_UART_Transmit(&huart2, temp, c, 100);
//		HAL_Delay(2);
//	}

 	unsigned int t = 5000, p = 80, cc = 0;
 8000664:	f241 3388 	movw	r3, #5000	; 0x1388
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800066a:	2350      	movs	r3, #80	; 0x50
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
 	while (1) {
 		TIM1->CCER |= TIM_CCER_CC1NP;
 8000672:	4b7f      	ldr	r3, [pc, #508]	; (8000870 <main+0x2ac>)
 8000674:	6a1b      	ldr	r3, [r3, #32]
 8000676:	4a7e      	ldr	r2, [pc, #504]	; (8000870 <main+0x2ac>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 800067e:	4b7c      	ldr	r3, [pc, #496]	; (8000870 <main+0x2ac>)
 8000680:	6a1b      	ldr	r3, [r3, #32]
 8000682:	4a7b      	ldr	r2, [pc, #492]	; (8000870 <main+0x2ac>)
 8000684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000688:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 800068a:	4b79      	ldr	r3, [pc, #484]	; (8000870 <main+0x2ac>)
 800068c:	6a1b      	ldr	r3, [r3, #32]
 800068e:	4a78      	ldr	r2, [pc, #480]	; (8000870 <main+0x2ac>)
 8000690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000694:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 8000696:	4b76      	ldr	r3, [pc, #472]	; (8000870 <main+0x2ac>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a75      	ldr	r2, [pc, #468]	; (8000870 <main+0x2ac>)
 800069c:	f043 0320 	orr.w	r3, r3, #32
 80006a0:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80006a2:	4b73      	ldr	r3, [pc, #460]	; (8000870 <main+0x2ac>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = p;
 80006a8:	4a71      	ldr	r2, [pc, #452]	; (8000870 <main+0x2ac>)
 80006aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ac:	6393      	str	r3, [r2, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80006ae:	4b70      	ldr	r3, [pc, #448]	; (8000870 <main+0x2ac>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	63da      	str	r2, [r3, #60]	; 0x3c

 		for(i=0;i<5;i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
 80006b8:	e023      	b.n	8000702 <main+0x13e>
 			__HAL_TIM_SET_COUNTER(&htim2,0);
 80006ba:	4b65      	ldr	r3, [pc, #404]	; (8000850 <main+0x28c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
 			c = snprintf(temp, sizeof(temp),"%d, %d\n", val2[0], val2[1]);
 80006c2:	4b67      	ldr	r3, [pc, #412]	; (8000860 <main+0x29c>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b65      	ldr	r3, [pc, #404]	; (8000860 <main+0x29c>)
 80006cc:	885b      	ldrh	r3, [r3, #2]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4638      	mov	r0, r7
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	4a67      	ldr	r2, [pc, #412]	; (8000874 <main+0x2b0>)
 80006d8:	2123      	movs	r1, #35	; 0x23
 80006da:	f006 f849 	bl	8006770 <sniprintf>
 80006de:	6338      	str	r0, [r7, #48]	; 0x30
			HAL_UART_Transmit(&huart2, temp, c, 100);
 80006e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4639      	mov	r1, r7
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	4860      	ldr	r0, [pc, #384]	; (800086c <main+0x2a8>)
 80006ea:	f005 f9f4 	bl	8005ad6 <HAL_UART_Transmit>
			while (__HAL_TIM_GET_COUNTER(&htim2) < 1000);
 80006ee:	bf00      	nop
 80006f0:	4b57      	ldr	r3, [pc, #348]	; (8000850 <main+0x28c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006fa:	d3f9      	bcc.n	80006f0 <main+0x12c>
 		for(i=0;i<5;i++) {
 80006fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fe:	3301      	adds	r3, #1
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
 8000702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000704:	2b04      	cmp	r3, #4
 8000706:	ddd8      	ble.n	80006ba <main+0xf6>
//			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
//		} else {
//			while(val2[0] < val2[1]);
//		}

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000708:	4b59      	ldr	r3, [pc, #356]	; (8000870 <main+0x2ac>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a58      	ldr	r2, [pc, #352]	; (8000870 <main+0x2ac>)
 800070e:	f023 0308 	bic.w	r3, r3, #8
 8000712:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000714:	4b56      	ldr	r3, [pc, #344]	; (8000870 <main+0x2ac>)
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	4a55      	ldr	r2, [pc, #340]	; (8000870 <main+0x2ac>)
 800071a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800071e:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC3NP;
 8000720:	4b53      	ldr	r3, [pc, #332]	; (8000870 <main+0x2ac>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	4a52      	ldr	r2, [pc, #328]	; (8000870 <main+0x2ac>)
 8000726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800072a:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 800072c:	4b50      	ldr	r3, [pc, #320]	; (8000870 <main+0x2ac>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a4f      	ldr	r2, [pc, #316]	; (8000870 <main+0x2ac>)
 8000732:	f043 0320 	orr.w	r3, r3, #32
 8000736:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 8000738:	4b4d      	ldr	r3, [pc, #308]	; (8000870 <main+0x2ac>)
 800073a:	2200      	movs	r2, #0
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = p;
 800073e:	4a4c      	ldr	r2, [pc, #304]	; (8000870 <main+0x2ac>)
 8000740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000742:	6393      	str	r3, [r2, #56]	; 0x38
 		TIM1->CCR3 = 0;
 8000744:	4b4a      	ldr	r3, [pc, #296]	; (8000870 <main+0x2ac>)
 8000746:	2200      	movs	r2, #0
 8000748:	63da      	str	r2, [r3, #60]	; 0x3c
// 		for(i=0;i<10;i++) {
// 			c = snprintf(temp, sizeof(temp),"%d, %d\n", val1[1], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
// 		}

 		if(cc < 50) {
 800074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074c:	2b31      	cmp	r3, #49	; 0x31
 800074e:	d80b      	bhi.n	8000768 <main+0x1a4>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8000750:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <main+0x28c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 8000758:	bf00      	nop
 800075a:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <main+0x28c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000762:	429a      	cmp	r2, r3
 8000764:	d8f9      	bhi.n	800075a <main+0x196>
 8000766:	e008      	b.n	800077a <main+0x1b6>
		} else {
			while(val1[1] > val2[1]);
 8000768:	bf00      	nop
 800076a:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <main+0x294>)
 800076c:	885b      	ldrh	r3, [r3, #2]
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <main+0x29c>)
 8000772:	885b      	ldrh	r3, [r3, #2]
 8000774:	b29b      	uxth	r3, r3
 8000776:	429a      	cmp	r2, r3
 8000778:	d8f7      	bhi.n	800076a <main+0x1a6>
		}

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 800077a:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <main+0x2ac>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a3c      	ldr	r2, [pc, #240]	; (8000870 <main+0x2ac>)
 8000780:	f023 0308 	bic.w	r3, r3, #8
 8000784:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC2NP;
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <main+0x2ac>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a39      	ldr	r2, [pc, #228]	; (8000870 <main+0x2ac>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000792:	4b37      	ldr	r3, [pc, #220]	; (8000870 <main+0x2ac>)
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	4a36      	ldr	r2, [pc, #216]	; (8000870 <main+0x2ac>)
 8000798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800079c:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <main+0x2ac>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <main+0x2ac>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <main+0x2ac>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <main+0x2ac>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 80007b6:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <main+0x2ac>)
 80007b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ba:	63d3      	str	r3, [r2, #60]	; 0x3c
// 		for(i=0;i<10;i++) {
// 			c = snprintf(temp, sizeof(temp),"%d, %d\n", val1[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
// 		}

 		if(cc < 50) {
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	2b31      	cmp	r3, #49	; 0x31
 80007c0:	d80b      	bhi.n	80007da <main+0x216>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <main+0x28c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80007ca:	bf00      	nop
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <main+0x28c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f9      	bhi.n	80007cc <main+0x208>
 80007d8:	e008      	b.n	80007ec <main+0x228>
		} else {
			while(val1[0] < val2[1]);
 80007da:	bf00      	nop
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <main+0x294>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <main+0x29c>)
 80007e4:	885b      	ldrh	r3, [r3, #2]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3f7      	bcc.n	80007dc <main+0x218>
		}

 		TIM1->CCER |= TIM_CCER_CC1NP;
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <main+0x2ac>)
 80007ee:	6a1b      	ldr	r3, [r3, #32]
 80007f0:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <main+0x2ac>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <main+0x2ac>)
 80007fa:	6a1b      	ldr	r3, [r3, #32]
 80007fc:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <main+0x2ac>)
 80007fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000802:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <main+0x2ac>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <main+0x2ac>)
 800080a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800080e:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <main+0x2ac>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a16      	ldr	r2, [pc, #88]	; (8000870 <main+0x2ac>)
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <main+0x2ac>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <main+0x2ac>)
 8000824:	2200      	movs	r2, #0
 8000826:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 8000828:	4a11      	ldr	r2, [pc, #68]	; (8000870 <main+0x2ac>)
 800082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082c:	63d3      	str	r3, [r2, #60]	; 0x3c
// 		for(i=0;i<10;i++) {
// 			c = snprintf(temp, sizeof(temp),"%d, %d\n", val2[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
// 		}

 		if(cc < 50) {
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	2b31      	cmp	r3, #49	; 0x31
 8000832:	d821      	bhi.n	8000878 <main+0x2b4>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <main+0x28c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 800083c:	bf00      	nop
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <main+0x28c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000846:	429a      	cmp	r2, r3
 8000848:	d8f9      	bhi.n	800083e <main+0x27a>
 800084a:	e01e      	b.n	800088a <main+0x2c6>
 800084c:	20000224 	.word	0x20000224
 8000850:	20000270 	.word	0x20000270
 8000854:	200002bc 	.word	0x200002bc
 8000858:	20000398 	.word	0x20000398
 800085c:	2000008c 	.word	0x2000008c
 8000860:	2000039c 	.word	0x2000039c
 8000864:	200000f8 	.word	0x200000f8
 8000868:	0800708c 	.word	0x0800708c
 800086c:	20000308 	.word	0x20000308
 8000870:	40012c00 	.word	0x40012c00
 8000874:	08007098 	.word	0x08007098
		} else {
			while(val2[0] > val2[1]);
 8000878:	bf00      	nop
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <main+0x3ac>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <main+0x3ac>)
 8000882:	885b      	ldrh	r3, [r3, #2]
 8000884:	b29b      	uxth	r3, r3
 8000886:	429a      	cmp	r2, r3
 8000888:	d8f7      	bhi.n	800087a <main+0x2b6>
		}

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <main+0x3b0>)
 800088c:	6a1b      	ldr	r3, [r3, #32]
 800088e:	4a39      	ldr	r2, [pc, #228]	; (8000974 <main+0x3b0>)
 8000890:	f023 0308 	bic.w	r3, r3, #8
 8000894:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <main+0x3b0>)
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	4a36      	ldr	r2, [pc, #216]	; (8000974 <main+0x3b0>)
 800089c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008a0:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC3NP;
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <main+0x3b0>)
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	4a33      	ldr	r2, [pc, #204]	; (8000974 <main+0x3b0>)
 80008a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ac:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <main+0x3b0>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a30      	ldr	r2, [pc, #192]	; (8000974 <main+0x3b0>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = p;
 80008ba:	4a2e      	ldr	r2, [pc, #184]	; (8000974 <main+0x3b0>)
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	6353      	str	r3, [r2, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <main+0x3b0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <main+0x3b0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	63da      	str	r2, [r3, #60]	; 0x3c
// 		for(i=0;i<10;i++) {
// 			c = snprintf(temp, sizeof(temp),"%d, %d\n", val1[1], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
// 		}

 		if(cc < 50) {
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	2b31      	cmp	r3, #49	; 0x31
 80008d0:	d80b      	bhi.n	80008ea <main+0x326>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <main+0x3b4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 80008da:	bf00      	nop
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <main+0x3b4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f9      	bhi.n	80008dc <main+0x318>
 80008e8:	e008      	b.n	80008fc <main+0x338>
		} else {
			while(val1[1] < val2[1]);
 80008ea:	bf00      	nop
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <main+0x3b8>)
 80008ee:	885b      	ldrh	r3, [r3, #2]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <main+0x3ac>)
 80008f4:	885b      	ldrh	r3, [r3, #2]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d3f7      	bcc.n	80008ec <main+0x328>
		}

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <main+0x3b0>)
 80008fe:	6a1b      	ldr	r3, [r3, #32]
 8000900:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <main+0x3b0>)
 8000902:	f023 0308 	bic.w	r3, r3, #8
 8000906:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC2NP;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <main+0x3b0>)
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	4a19      	ldr	r2, [pc, #100]	; (8000974 <main+0x3b0>)
 800090e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000912:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <main+0x3b0>)
 8000916:	6a1b      	ldr	r3, [r3, #32]
 8000918:	4a16      	ldr	r2, [pc, #88]	; (8000974 <main+0x3b0>)
 800091a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800091e:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <main+0x3b0>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <main+0x3b0>)
 8000926:	f043 0320 	orr.w	r3, r3, #32
 800092a:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = p;
 800092c:	4a11      	ldr	r2, [pc, #68]	; (8000974 <main+0x3b0>)
 800092e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000930:	6353      	str	r3, [r2, #52]	; 0x34
 		TIM1->CCR2 = 0;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <main+0x3b0>)
 8000934:	2200      	movs	r2, #0
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = 0;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <main+0x3b0>)
 800093a:	2200      	movs	r2, #0
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
// 		for(i=0;i<10;i++) {
// 			c = snprintf(temp, sizeof(temp),"%d, %d\n", val1[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
// 		}

 		if(cc < 50) {
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	2b31      	cmp	r3, #49	; 0x31
 8000942:	d80b      	bhi.n	800095c <main+0x398>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <main+0x3b4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 800094c:	bf00      	nop
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <main+0x3b4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000956:	429a      	cmp	r2, r3
 8000958:	d8f9      	bhi.n	800094e <main+0x38a>
 800095a:	e68a      	b.n	8000672 <main+0xae>
 		} else {
 			while(val1[0] > val2[1]);
 800095c:	bf00      	nop
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <main+0x3b8>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	b29a      	uxth	r2, r3
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <main+0x3ac>)
 8000966:	885b      	ldrh	r3, [r3, #2]
 8000968:	b29b      	uxth	r3, r3
 800096a:	429a      	cmp	r2, r3
 800096c:	d8f7      	bhi.n	800095e <main+0x39a>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 800096e:	e680      	b.n	8000672 <main+0xae>
 8000970:	2000039c 	.word	0x2000039c
 8000974:	40012c00 	.word	0x40012c00
 8000978:	20000270 	.word	0x20000270
 800097c:	20000398 	.word	0x20000398

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	; 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0318 	add.w	r3, r7, #24
 800098a:	2238      	movs	r2, #56	; 0x38
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f005 fee6 	bl	8006760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f002 fe12 	bl	80035cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b2:	2340      	movs	r3, #64	; 0x40
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ba:	2302      	movs	r3, #2
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009be:	2301      	movs	r3, #1
 80009c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80009c2:	2315      	movs	r3, #21
 80009c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fe9c 	bl	8003714 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009e2:	f000 fb63 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2303      	movs	r3, #3
 80009ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2104      	movs	r1, #4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 f9a0 	bl	8003d44 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a0a:	f000 fb4f 	bl	80010ac <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	; 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f005 fe95 	bl	8006760 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4c:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a52:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a58:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 2;
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a86:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aaa:	481e      	ldr	r0, [pc, #120]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000aac:	f001 f87e 	bl	8001bac <HAL_ADC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000ab6:	f000 faf9 	bl	80010ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000ac6:	f001 ffd9 	bl	8002a7c <HAL_ADCEx_MultiModeConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000ad0:	f000 faec 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC1_Init+0x110>)
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ae0:	237f      	movs	r3, #127	; 0x7f
 8000ae2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000af2:	f001 fab7 	bl	8002064 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000afc:	f000 fad6 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_ADC1_Init+0x114>)
 8000b02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b04:	230c      	movs	r3, #12
 8000b06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_ADC1_Init+0x10c>)
 8000b0e:	f001 faa9 	bl	8002064 <HAL_ADC_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000b18:	f000 fac8 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3730      	adds	r7, #48	; 0x30
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	08600004 	.word	0x08600004
 8000b2c:	10c00010 	.word	0x10c00010

08000b30 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2220      	movs	r2, #32
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f005 fe0f 	bl	8006760 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b44:	4a34      	ldr	r2, [pc, #208]	; (8000c18 <MX_ADC2_Init+0xe8>)
 8000b46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b48:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b50:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.NbrOfDiscConversion = 2;
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b90:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bb4:	4817      	ldr	r0, [pc, #92]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000bb6:	f000 fff9 	bl	8001bac <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000bc0:	f000 fa74 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_ADC2_Init+0xec>)
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd0:	237f      	movs	r3, #127	; 0x7f
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000be2:	f001 fa3f 	bl	8002064 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC2_Init+0xc0>
  {
    Error_Handler();
 8000bec:	f000 fa5e 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_ADC2_Init+0xf0>)
 8000bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_ADC2_Init+0xe4>)
 8000bfe:	f001 fa31 	bl	8002064 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 8000c08:	f000 fa50 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000f8 	.word	0x200000f8
 8000c18:	50000100 	.word	0x50000100
 8000c1c:	04300002 	.word	0x04300002
 8000c20:	47520000 	.word	0x47520000

08000c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09c      	sub	sp, #112	; 0x70
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2234      	movs	r2, #52	; 0x34
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f005 fd7e 	bl	8006760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c64:	4b57      	ldr	r3, [pc, #348]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c66:	4a58      	ldr	r2, [pc, #352]	; (8000dc8 <MX_TIM1_Init+0x1a4>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c70:	4b54      	ldr	r3, [pc, #336]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1750;
 8000c76:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c78:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8000c7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c84:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c8a:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c90:	484c      	ldr	r0, [pc, #304]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000c92:	f003 fc63 	bl	800455c <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 fa06 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ca6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000caa:	4619      	mov	r1, r3
 8000cac:	4845      	ldr	r0, [pc, #276]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000cae:	f003 ff85 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cb8:	f000 f9f8 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cbc:	4841      	ldr	r0, [pc, #260]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000cbe:	f003 fd07 	bl	80046d0 <HAL_TIM_PWM_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000cc8:	f000 f9f0 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4839      	ldr	r0, [pc, #228]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000ce0:	f004 fd62 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cea:	f000 f9df 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cee:	2360      	movs	r3, #96	; 0x60
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	482c      	ldr	r0, [pc, #176]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000d14:	f003 fe3e 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d1e:	f000 f9c5 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d26:	2204      	movs	r2, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000d2c:	f003 fe32 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d36:	f000 f9b9 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000d44:	f003 fe26 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000d4e:	f000 f9ad 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d56:	220c      	movs	r2, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000d5c:	f003 fe1a 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d66:	f000 f9a1 	bl	80010ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000da8:	f004 fd80 	bl	80058ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000db2:	f000 f97b 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <MX_TIM1_Init+0x1a0>)
 8000db8:	f000 faea 	bl	8001390 <HAL_TIM_MspPostInit>

}
 8000dbc:	bf00      	nop
 8000dbe:	3770      	adds	r7, #112	; 0x70
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000224 	.word	0x20000224
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e08:	22a7      	movs	r2, #167	; 0xa7
 8000e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e26:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e28:	f003 fb98 	bl	800455c <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e32:	f000 f93b 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e40:	4619      	mov	r1, r3
 8000e42:	481b      	ldr	r0, [pc, #108]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e44:	f003 feba 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e4e:	f000 f92d 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e52:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e54:	f003 fc3c 	bl	80046d0 <HAL_TIM_PWM_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e5e:	f000 f925 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e72:	f004 fc99 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e7c:	f000 f916 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e80:	2360      	movs	r3, #96	; 0x60
 8000e82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e98:	f003 fd7c 	bl	8004994 <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ea2:	f000 f903 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	3738      	adds	r7, #56	; 0x38
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000270 	.word	0x20000270

08000eb4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_TIM6_Init+0x64>)
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <MX_TIM6_Init+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_TIM6_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_TIM6_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_TIM6_Init+0x64>)
 8000ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000edc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_TIM6_Init+0x64>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_TIM6_Init+0x64>)
 8000ee6:	f003 fb39 	bl	800455c <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ef0:	f000 f8dc 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_TIM6_Init+0x64>)
 8000f02:	f004 fc51 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f000 f8ce 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200002bc 	.word	0x200002bc
 8000f1c:	40001000 	.word	0x40001000

08000f20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <MX_USART2_UART_Init+0x94>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f6a:	f004 fd64 	bl	8005a36 <HAL_UART_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f74:	f000 f89a 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f7c:	f005 fafc 	bl	8006578 <HAL_UARTEx_SetTxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f000 f891 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f8e:	f005 fb31 	bl	80065f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f000 f888 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART2_UART_Init+0x90>)
 8000f9e:	f005 fab2 	bl	8006506 <HAL_UARTEx_DisableFifoMode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f000 f880 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000308 	.word	0x20000308
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_DMA_Init+0x60>)
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <MX_DMA_Init+0x60>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6493      	str	r3, [r2, #72]	; 0x48
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_DMA_Init+0x60>)
 8000fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_DMA_Init+0x60>)
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <MX_DMA_Init+0x60>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6493      	str	r3, [r2, #72]	; 0x48
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_DMA_Init+0x60>)
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	200b      	movs	r0, #11
 8000ff4:	f001 fec1 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f001 fed8 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	200c      	movs	r0, #12
 8001004:	f001 feb9 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001008:	200c      	movs	r0, #12
 800100a:	f001 fed0 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_GPIO_Init+0x88>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_GPIO_Init+0x88>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800107a:	2310      	movs	r3, #16
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800108a:	2302      	movs	r3, #2
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_GPIO_Init+0x8c>)
 8001096:	f002 f917 	bl	80032c8 <HAL_GPIO_Init>

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x44>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x44>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x44>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b09c      	sub	sp, #112	; 0x70
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	2244      	movs	r2, #68	; 0x44
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f005 fb1d 	bl	8006760 <memset>
  if(hadc->Instance==ADC1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800112e:	d169      	bne.n	8001204 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001134:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001136:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800113a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4618      	mov	r0, r3
 8001142:	f003 f81b 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800114c:	f7ff ffae 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001150:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a64      	ldr	r2, [pc, #400]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 8001158:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10b      	bne.n	800117a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001162:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a61      	ldr	r2, [pc, #388]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001168:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a5b      	ldr	r2, [pc, #364]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001192:	230a      	movs	r3, #10
 8001194:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f002 f88e 	bl	80032c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011ac:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011ae:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_ADC_MspInit+0x1f4>)
 80011b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011b2:	4b4f      	ldr	r3, [pc, #316]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011b4:	2205      	movs	r2, #5
 80011b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b8:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c4:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011da:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011dc:	2220      	movs	r2, #32
 80011de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e0:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e6:	4842      	ldr	r0, [pc, #264]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011e8:	f001 fdfc 	bl	8002de4 <HAL_DMA_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80011f2:	f7ff ff5b 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011fa:	655a      	str	r2, [r3, #84]	; 0x54
 80011fc:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001202:	e06d      	b.n	80012e0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d168      	bne.n	80012e0 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800120e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001212:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001214:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001218:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	4618      	mov	r0, r3
 8001220:	f002 ffac 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800122a:	f7ff ff3f 	bl	80010ac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 8001236:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10b      	bne.n	8001258 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	4a23      	ldr	r2, [pc, #140]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001270:	2311      	movs	r3, #17
 8001272:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	2303      	movs	r3, #3
 8001276:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f002 f81f 	bl	80032c8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 800128c:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_ADC_MspInit+0x200>)
 800128e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 8001292:	2224      	movs	r2, #36	; 0x24
 8001294:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ae:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012ba:	2220      	movs	r2, #32
 80012bc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012c6:	f001 fd8d 	bl	8002de4 <HAL_DMA_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80012d0:	f7ff feec 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012e0:	bf00      	nop
 80012e2:	3770      	adds	r7, #112	; 0x70
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200003a0 	.word	0x200003a0
 80012ec:	40021000 	.word	0x40021000
 80012f0:	20000164 	.word	0x20000164
 80012f4:	40020008 	.word	0x40020008
 80012f8:	50000100 	.word	0x50000100
 80012fc:	200001c4 	.word	0x200001c4
 8001300:	4002001c 	.word	0x4002001c

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_TIM_Base_MspInit+0x80>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10c      	bne.n	8001330 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 800131c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001320:	6613      	str	r3, [r2, #96]	; 0x60
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800132e:	e022      	b.n	8001376 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001338:	d10c      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6593      	str	r3, [r2, #88]	; 0x58
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
}
 8001352:	e010      	b.n	8001376 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_TIM_Base_MspInit+0x88>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10b      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	6593      	str	r3, [r2, #88]	; 0x58
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_TIM_Base_MspInit+0x84>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
}
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40012c00 	.word	0x40012c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40001000 	.word	0x40001000

08001390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <HAL_TIM_MspPostInit+0xd8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d155      	bne.n	800145e <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a2d      	ldr	r2, [pc, #180]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_TIM_MspPostInit+0xdc>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013fa:	2301      	movs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800140a:	2306      	movs	r3, #6
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4816      	ldr	r0, [pc, #88]	; (8001470 <HAL_TIM_MspPostInit+0xe0>)
 8001416:	f001 ff57 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800141a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800142c:	2306      	movs	r3, #6
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f001 ff45 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800144e:	2306      	movs	r3, #6
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <HAL_TIM_MspPostInit+0xe4>)
 800145a:	f001 ff35 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012c00 	.word	0x40012c00
 800146c:	40021000 	.word	0x40021000
 8001470:	48001400 	.word	0x48001400
 8001474:	48000400 	.word	0x48000400

08001478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b09a      	sub	sp, #104	; 0x68
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2244      	movs	r2, #68	; 0x44
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f005 f961 	bl	8006760 <memset>
  if(huart->Instance==USART2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_UART_MspInit+0xa8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d137      	bne.n	8001518 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fe61 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c0:	f7ff fdf4 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_UART_MspInit+0xac>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	4a16      	ldr	r2, [pc, #88]	; (8001524 <HAL_UART_MspInit+0xac>)
 80014ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_UART_MspInit+0xac>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_UART_MspInit+0xac>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	4a10      	ldr	r2, [pc, #64]	; (8001524 <HAL_UART_MspInit+0xac>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_UART_MspInit+0xac>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80014f4:	f248 0304 	movw	r3, #32772	; 0x8004
 80014f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001506:	2307      	movs	r3, #7
 8001508:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f001 fed8 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3768      	adds	r7, #104	; 0x68
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40004400 	.word	0x40004400
 8001524:	40021000 	.word	0x40021000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 f8da 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <DMA1_Channel1_IRQHandler+0x10>)
 8001582:	f001 fd52 	bl	800302a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000164 	.word	0x20000164

08001590 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA1_Channel2_IRQHandler+0x10>)
 8001596:	f001 fd48 	bl	800302a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001c4 	.word	0x200001c4

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f005 f89a 	bl	800670c <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20008000 	.word	0x20008000
 8001604:	00000400 	.word	0x00000400
 8001608:	200003a4 	.word	0x200003a4
 800160c:	200003c0 	.word	0x200003c0

08001610 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001636:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <LoopForever+0x6>)
  ldr r1, =_edata
 800163a:	490e      	ldr	r1, [pc, #56]	; (8001674 <LoopForever+0xa>)
  ldr r2, =_sidata
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <LoopForever+0xe>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001650:	4c0b      	ldr	r4, [pc, #44]	; (8001680 <LoopForever+0x16>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800165e:	f7ff ffd7 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f005 f859 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001666:	f7fe ffad 	bl	80005c4 <main>

0800166a <LoopForever>:

LoopForever:
    b LoopForever
 800166a:	e7fe      	b.n	800166a <LoopForever>
  ldr   r0, =_estack
 800166c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001678:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 800167c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001680:	200003bc 	.word	0x200003bc

08001684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>

08001686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f001 fb67 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f80e 	bl	80016b8 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	e001      	b.n	80016ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a8:	f7ff fd06 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ac:	79fb      	ldrb	r3, [r7, #7]

}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_InitTick+0x68>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d022      	beq.n	8001712 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_InitTick+0x6c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_InitTick+0x68>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 fb72 	bl	8002dca <HAL_SYSTICK_Config>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10f      	bne.n	800170c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	d809      	bhi.n	8001706 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f2:	2200      	movs	r2, #0
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	f04f 30ff 	mov.w	r0, #4294967295
 80016fa:	f001 fb3e 	bl	8002d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_InitTick+0x70>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e007      	b.n	8001716 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e004      	b.n	8001716 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e001      	b.n	8001716 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000008 	.word	0x20000008
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x1c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x20>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4413      	add	r3, r2
 800173a:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x1c>)
 800173c:	6013      	str	r3, [r2, #0]
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	200003a8 	.word	0x200003a8
 800174c:	20000008 	.word	0x20000008

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200003a8 	.word	0x200003a8

08001768 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	609a      	str	r2, [r3, #8]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3360      	adds	r3, #96	; 0x60
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <LL_ADC_SetOffset+0x44>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	4313      	orrs	r3, r2
 8001800:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001808:	bf00      	nop
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	03fff000 	.word	0x03fff000

08001818 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3360      	adds	r3, #96	; 0x60
 8001826:	461a      	mov	r2, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3360      	adds	r3, #96	; 0x60
 8001854:	461a      	mov	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800187a:	b480      	push	{r7}
 800187c:	b087      	sub	sp, #28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3360      	adds	r3, #96	; 0x60
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	431a      	orrs	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3360      	adds	r3, #96	; 0x60
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	615a      	str	r2, [r3, #20]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001932:	b480      	push	{r7}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3330      	adds	r3, #48	; 0x30
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	211f      	movs	r1, #31
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	401a      	ands	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	f003 011f 	and.w	r1, r3, #31
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3314      	adds	r3, #20
 800199a:	461a      	mov	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0e5b      	lsrs	r3, r3, #25
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	0d1b      	lsrs	r3, r3, #20
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	2107      	movs	r1, #7
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0d1b      	lsrs	r3, r3, #20
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	431a      	orrs	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019d4:	bf00      	nop
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d10a      	bne.n	8001a0a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	431a      	orrs	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001a08:	e00a      	b.n	8001a20 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	407f0000 	.word	0x407f0000

08001a30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6093      	str	r3, [r2, #8]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_IsEnabled+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_IsEnabled+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b4a:	f043 0204 	orr.w	r2, r3, #4
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e177      	b.n	8001eb6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fa93 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff3f 	bl	8001a70 <LL_ADC_IsDeepPowerDownEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff25 	bl	8001a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff5a 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff3e 	bl	8001a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c1c:	4b9c      	ldr	r3, [pc, #624]	; (8001e90 <HAL_ADC_Init+0x2e4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	4a9c      	ldr	r2, [pc, #624]	; (8001e94 <HAL_ADC_Init+0x2e8>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff3c 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	f043 0210 	orr.w	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff75 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001c74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 8110 	bne.w	8001ea4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 810c 	bne.w	8001ea4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff35 	bl	8001b10 <LL_ADC_IsEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cb0:	f7ff ff2e 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	4878      	ldr	r0, [pc, #480]	; (8001e98 <HAL_ADC_Init+0x2ec>)
 8001cb8:	f7ff ff2a 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4323      	orrs	r3, r4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4874      	ldr	r0, [pc, #464]	; (8001e9c <HAL_ADC_Init+0x2f0>)
 8001ccc:	f7ff fd4c 	bl	8001768 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7f5b      	ldrb	r3, [r3, #29]
 8001cd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ce0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ce6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d106      	bne.n	8001d0c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	3b01      	subs	r3, #1
 8001d04:	045b      	lsls	r3, r3, #17
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_ADC_Init+0x2f4>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff01 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff0e 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 8001d68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d16d      	bne.n	8001e4c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d16a      	bne.n	8001e4c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d82:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d92:	f023 0302 	bic.w	r3, r3, #2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d017      	beq.n	8001dd8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001db6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dc0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6911      	ldr	r1, [r2, #16]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001dd6:	e013      	b.n	8001e00 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001de6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dfc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d118      	bne.n	8001e3c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e20:	4311      	orrs	r1, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	e007      	b.n	8001e4c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10c      	bne.n	8001e6e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f023 010f 	bic.w	r1, r3, #15
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6c:	e007      	b.n	8001e7e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020f 	bic.w	r2, r2, #15
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e8e:	e011      	b.n	8001eb4 <HAL_ADC_Init+0x308>
 8001e90:	20000000 	.word	0x20000000
 8001e94:	053e2d63 	.word	0x053e2d63
 8001e98:	50000100 	.word	0x50000100
 8001e9c:	50000300 	.word	0x50000300
 8001ea0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	bf00      	nop

08001ec0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ecc:	4851      	ldr	r0, [pc, #324]	; (8002014 <HAL_ADC_Start_DMA+0x154>)
 8001ece:	f7ff fdaf 	bl	8001a30 <LL_ADC_GetMultimode>
 8001ed2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe40 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 808f 	bne.w	8002004 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_Start_DMA+0x34>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e08a      	b.n	800200a <HAL_ADC_Start_DMA+0x14a>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d002      	beq.n	8001f0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b09      	cmp	r3, #9
 8001f0c:	d173      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fc98 	bl	8002844 <ADC_Enable>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d166      	bne.n	8001fec <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a38      	ldr	r2, [pc, #224]	; (8002018 <HAL_ADC_Start_DMA+0x158>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d002      	beq.n	8001f42 <HAL_ADC_Start_DMA+0x82>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e001      	b.n	8001f46 <HAL_ADC_Start_DMA+0x86>
 8001f42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d002      	beq.n	8001f54 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f70:	f023 0206 	bic.w	r2, r3, #6
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	661a      	str	r2, [r3, #96]	; 0x60
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <HAL_ADC_Start_DMA+0x15c>)
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <HAL_ADC_Start_DMA+0x160>)
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_ADC_Start_DMA+0x164>)
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	221c      	movs	r2, #28
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0210 	orr.w	r2, r2, #16
 8001fb6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3340      	adds	r3, #64	; 0x40
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f000 ffac 	bl	8002f34 <HAL_DMA_Start_IT>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fda6 	bl	8001b36 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fea:	e00d      	b.n	8002008 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001ff4:	e008      	b.n	8002008 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002002:	e001      	b.n	8002008 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002004:	2302      	movs	r3, #2
 8002006:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002008:	7dfb      	ldrb	r3, [r7, #23]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	50000300 	.word	0x50000300
 8002018:	50000100 	.word	0x50000100
 800201c:	08002909 	.word	0x08002909
 8002020:	080029e1 	.word	0x080029e1
 8002024:	080029fd 	.word	0x080029fd

08002028 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0b6      	sub	sp, #216	; 0xd8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x22>
 8002082:	2302      	movs	r3, #2
 8002084:	e3c8      	b.n	8002818 <HAL_ADC_ConfigChannel+0x7b4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fd63 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 83ad 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f7ff fc40 	bl	8001932 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fd51 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 80020bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fd5d 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 80020ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 81d9 	bne.w	800248a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 81d4 	bne.w	800248a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ea:	d10f      	bne.n	800210c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff fc47 	bl	800198a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fbee 	bl	80018e6 <LL_ADC_SetSamplingTimeCommonConfig>
 800210a:	e00e      	b.n	800212a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	461a      	mov	r2, r3
 800211a:	f7ff fc36 	bl	800198a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fbde 	bl	80018e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d022      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6919      	ldr	r1, [r3, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215c:	f7ff fb38 	bl	80017d0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff fb84 	bl	800187a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7f1b      	ldrb	r3, [r3, #28]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x124>
 8002182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002186:	e000      	b.n	800218a <HAL_ADC_ConfigChannel+0x126>
 8002188:	2300      	movs	r3, #0
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fb90 	bl	80018b0 <LL_ADC_SetOffsetSaturation>
 8002190:	e17b      	b.n	800248a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fb3d 	bl	8001818 <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_ADC_ConfigChannel+0x15a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fb32 	bl	8001818 <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	e01e      	b.n	80021fc <HAL_ADC_ConfigChannel+0x198>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fb27 	bl	8001818 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e004      	b.n	80021fa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80021f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1b0>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	e018      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1e2>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e004      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800223c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002246:	429a      	cmp	r2, r3
 8002248:	d106      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff faf6 	bl	8001844 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fada 	bl	8001818 <LL_ADC_GetOffsetChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x220>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff facf 	bl	8001818 <LL_ADC_GetOffsetChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	f003 021f 	and.w	r2, r3, #31
 8002282:	e01e      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x25e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fac4 	bl	8001818 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e004      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80022b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_ConfigChannel+0x276>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	e018      	b.n	800230c <HAL_ADC_ConfigChannel+0x2a8>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e004      	b.n	800230c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fa93 	bl	8001844 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fa77 	bl	8001818 <LL_ADC_GetOffsetChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x2e6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fa6c 	bl	8001818 <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	e01e      	b.n	8002388 <HAL_ADC_ConfigChannel+0x324>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fa61 	bl	8001818 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800236c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800237c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x33c>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	e016      	b.n	80023ce <HAL_ADC_ConfigChannel+0x36a>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e004      	b.n	80023ce <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fa32 	bl	8001844 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2103      	movs	r1, #3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fa16 	bl	8001818 <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x3a8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2103      	movs	r1, #3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fa0b 	bl	8001818 <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	e017      	b.n	800243c <HAL_ADC_ConfigChannel+0x3d8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2103      	movs	r1, #3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fa00 	bl	8001818 <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002426:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e003      	b.n	800243a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x3f0>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	e011      	b.n	8002478 <HAL_ADC_ConfigChannel+0x414>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002464:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f9dd 	bl	8001844 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fb3e 	bl	8001b10 <LL_ADC_IsEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 8140 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f7ff fa99 	bl	80019e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a8f      	ldr	r2, [pc, #572]	; (80026f0 <HAL_ADC_ConfigChannel+0x68c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	f040 8131 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x47e>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	bf94      	ite	ls
 80024da:	2301      	movls	r3, #1
 80024dc:	2300      	movhi	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e019      	b.n	8002516 <HAL_ADC_ConfigChannel+0x4b2>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80024fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b09      	cmp	r3, #9
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002516:	2b00      	cmp	r3, #0
 8002518:	d079      	beq.n	800260e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x4d2>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	3301      	adds	r3, #1
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002534:	e015      	b.n	8002562 <HAL_ADC_ConfigChannel+0x4fe>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002546:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800254e:	2320      	movs	r3, #32
 8002550:	e003      	b.n	800255a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	3301      	adds	r3, #1
 800255c:	069b      	lsls	r3, r3, #26
 800255e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x51e>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	3301      	adds	r3, #1
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	e017      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x54e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800259a:	2320      	movs	r3, #32
 800259c:	e003      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800259e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	ea42 0103 	orr.w	r1, r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x574>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 021f 	and.w	r2, r3, #31
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	051b      	lsls	r3, r3, #20
 80025d6:	e018      	b.n	800260a <HAL_ADC_ConfigChannel+0x5a6>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80025f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260a:	430b      	orrs	r3, r1
 800260c:	e081      	b.n	8002712 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <HAL_ADC_ConfigChannel+0x5c6>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	3301      	adds	r3, #1
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002628:	e015      	b.n	8002656 <HAL_ADC_ConfigChannel+0x5f2>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e003      	b.n	800264e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3301      	adds	r3, #1
 8002650:	069b      	lsls	r3, r3, #26
 8002652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x612>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	e017      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x642>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	61fb      	str	r3, [r7, #28]
  return result;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	ea42 0103 	orr.w	r1, r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x66e>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	051b      	lsls	r3, r3, #20
 80026cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d0:	e01e      	b.n	8002710 <HAL_ADC_ConfigChannel+0x6ac>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	613b      	str	r3, [r7, #16]
  return result;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e006      	b.n	80026fc <HAL_ADC_ConfigChannel+0x698>
 80026ee:	bf00      	nop
 80026f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b1e      	subs	r3, #30
 800270a:	051b      	lsls	r3, r3, #20
 800270c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002710:	430b      	orrs	r3, r1
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	4619      	mov	r1, r3
 8002718:	f7ff f937 	bl	800198a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_ADC_ConfigChannel+0x7bc>)
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d071      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002728:	483e      	ldr	r0, [pc, #248]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 800272a:	f7ff f843 	bl	80017b4 <LL_ADC_GetCommonPathInternalCh>
 800272e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <HAL_ADC_ConfigChannel+0x7c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x6e2>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a3a      	ldr	r2, [pc, #232]	; (800282c <HAL_ADC_ConfigChannel+0x7c8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d127      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800274a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d121      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275a:	d157      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002764:	4619      	mov	r1, r3
 8002766:	482f      	ldr	r0, [pc, #188]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 8002768:	f7ff f811 	bl	800178e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_ADC_ConfigChannel+0x7cc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	4a30      	ldr	r2, [pc, #192]	; (8002834 <HAL_ADC_ConfigChannel+0x7d0>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002786:	e002      	b.n	800278e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002794:	e03a      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a27      	ldr	r2, [pc, #156]	; (8002838 <HAL_ADC_ConfigChannel+0x7d4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d113      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x764>
 80027a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_ADC_ConfigChannel+0x7d8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02a      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	4619      	mov	r1, r3
 80027c0:	4818      	ldr	r0, [pc, #96]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 80027c2:	f7fe ffe4 	bl	800178e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c6:	e021      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11c      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_ADC_ConfigChannel+0x7d8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d011      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f0:	4619      	mov	r1, r3
 80027f2:	480c      	ldr	r0, [pc, #48]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 80027f4:	f7fe ffcb 	bl	800178e <LL_ADC_SetCommonPathInternalCh>
 80027f8:	e008      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002814:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002818:	4618      	mov	r0, r3
 800281a:	37d8      	adds	r7, #216	; 0xd8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	80080000 	.word	0x80080000
 8002824:	50000300 	.word	0x50000300
 8002828:	c3210000 	.word	0xc3210000
 800282c:	90c00010 	.word	0x90c00010
 8002830:	20000000 	.word	0x20000000
 8002834:	053e2d63 	.word	0x053e2d63
 8002838:	c7520000 	.word	0xc7520000
 800283c:	50000100 	.word	0x50000100
 8002840:	cb840000 	.word	0xcb840000

08002844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f95d 	bl	8001b10 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d14d      	bne.n	80028f8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <ADC_Enable+0xc0>)
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e039      	b.n	80028fa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f92c 	bl	8001ae8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002890:	f7fe ff5e 	bl	8001750 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002896:	e028      	b.n	80028ea <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f937 	bl	8001b10 <LL_ADC_IsEnabled>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f91b 	bl	8001ae8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028b2:	f7fe ff4d 	bl	8001750 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d914      	bls.n	80028ea <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d00d      	beq.n	80028ea <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e007      	b.n	80028fa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d1cf      	bne.n	8002898 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	8000003f 	.word	0x8000003f

08002908 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800291e:	2b00      	cmp	r3, #0
 8002920:	d14b      	bne.n	80029ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d021      	beq.n	8002980 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe ffe3 	bl	800190c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d032      	beq.n	80029b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12b      	bne.n	80029b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11f      	bne.n	80029b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	65da      	str	r2, [r3, #92]	; 0x5c
 800297e:	e018      	b.n	80029b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d111      	bne.n	80029b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff fb38 	bl	8002028 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029b8:	e00e      	b.n	80029d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fb42 	bl	8002050 <HAL_ADC_ErrorCallback>
}
 80029cc:	e004      	b.n	80029d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fb24 	bl	800203c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	f043 0204 	orr.w	r2, r3, #4
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff fb14 	bl	8002050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <LL_ADC_IsEnabled>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <LL_ADC_IsEnabled+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_ADC_IsEnabled+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d101      	bne.n	8002a6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b0a1      	sub	sp, #132	; 0x84
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e08b      	b.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab2:	d102      	bne.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ab4:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	e001      	b.n	8002abe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e06a      	b.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ffb9 	bl	8002a56 <LL_ADC_REG_IsConversionOngoing>
 8002ae4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ffb3 	bl	8002a56 <LL_ADC_REG_IsConversionOngoing>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d14c      	bne.n	8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d149      	bne.n	8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002afc:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002afe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d028      	beq.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b1a:	035b      	lsls	r3, r3, #13
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b28:	f7ff ff82 	bl	8002a30 <LL_ADC_IsEnabled>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	4823      	ldr	r0, [pc, #140]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b30:	f7ff ff7e 	bl	8002a30 <LL_ADC_IsEnabled>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4323      	orrs	r3, r4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d133      	bne.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b44:	f023 030f 	bic.w	r3, r3, #15
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	6811      	ldr	r1, [r2, #0]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	6892      	ldr	r2, [r2, #8]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	431a      	orrs	r2, r3
 8002b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b56:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b58:	e024      	b.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b66:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b6a:	f7ff ff61 	bl	8002a30 <LL_ADC_IsEnabled>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4812      	ldr	r0, [pc, #72]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b72:	f7ff ff5d 	bl	8002a30 <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4323      	orrs	r3, r4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d112      	bne.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b86:	f023 030f 	bic.w	r3, r3, #15
 8002b8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b8c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b8e:	e009      	b.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ba2:	e000      	b.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3784      	adds	r7, #132	; 0x84
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	50000100 	.word	0x50000100
 8002bc0:	50000300 	.word	0x50000300

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <__NVIC_EnableIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	; (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f7ff ff8e 	bl	8002c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff29 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff40 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff90 	bl	8002cb8 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5f 	bl	8002c64 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff33 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ffa4 	bl	8002d20 <SysTick_Config>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e08d      	b.n	8002f12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_DMA_Init+0x138>)
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d80f      	bhi.n	8002e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b45      	ldr	r3, [pc, #276]	; (8002f20 <HAL_DMA_Init+0x13c>)
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <HAL_DMA_Init+0x140>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	009a      	lsls	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a42      	ldr	r2, [pc, #264]	; (8002f28 <HAL_DMA_Init+0x144>)
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e20:	e00e      	b.n	8002e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <HAL_DMA_Init+0x148>)
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <HAL_DMA_Init+0x140>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	009a      	lsls	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a3c      	ldr	r2, [pc, #240]	; (8002f30 <HAL_DMA_Init+0x14c>)
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9b6 	bl	8003204 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea0:	d102      	bne.n	8002ea8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ebc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_DMA_Init+0x104>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d80c      	bhi.n	8002ee8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9d6 	bl	8003280 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	e008      	b.n	8002efa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40020407 	.word	0x40020407
 8002f20:	bffdfff8 	.word	0xbffdfff8
 8002f24:	cccccccd 	.word	0xcccccccd
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	bffdfbf8 	.word	0xbffdfbf8
 8002f30:	40020400 	.word	0x40020400

08002f34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_DMA_Start_IT+0x20>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e066      	b.n	8003022 <HAL_DMA_Start_IT+0xee>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d155      	bne.n	8003014 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f8fb 	bl	8003188 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 020e 	orr.w	r2, r2, #14
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e00f      	b.n	8002fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0204 	bic.w	r2, r2, #4
 8002fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 020a 	orr.w	r2, r2, #10
 8002fca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003000:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e005      	b.n	8003020 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003020:	7dfb      	ldrb	r3, [r7, #23]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2204      	movs	r2, #4
 800304c:	409a      	lsls	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d026      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x7a>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d021      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0204 	bic.w	r2, r2, #4
 800307c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2104      	movs	r1, #4
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	2b00      	cmp	r3, #0
 8003098:	d071      	beq.n	800317e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030a2:	e06c      	b.n	800317e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2202      	movs	r2, #2
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d02e      	beq.n	8003116 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d029      	beq.n	8003116 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 020a 	bic.w	r2, r2, #10
 80030de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	2102      	movs	r1, #2
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d038      	beq.n	800317e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003114:	e033      	b.n	800317e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2208      	movs	r2, #8
 8003120:	409a      	lsls	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d025      	beq.n	8003180 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 020e 	bic.w	r2, r2, #14
 8003142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800317e:	bf00      	nop
 8003180:	bf00      	nop
}
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800319e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d108      	bne.n	80031e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031e6:	e007      	b.n	80031f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	60da      	str	r2, [r3, #12]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d802      	bhi.n	800321e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e001      	b.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003220:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	3b08      	subs	r3, #8
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	461a      	mov	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a0b      	ldr	r2, [pc, #44]	; (800327c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800324e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2201      	movs	r2, #1
 8003258:	409a      	lsls	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40020407 	.word	0x40020407
 8003270:	40020800 	.word	0x40020800
 8003274:	40020820 	.word	0x40020820
 8003278:	cccccccd 	.word	0xcccccccd
 800327c:	40020880 	.word	0x40020880

08003280 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	461a      	mov	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80032a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2201      	movs	r2, #1
 80032ae:	409a      	lsls	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	1000823f 	.word	0x1000823f
 80032c4:	40020940 	.word	0x40020940

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032d6:	e15a      	b.n	800358e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	4013      	ands	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 814c 	beq.w	8003588 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d005      	beq.n	8003308 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003304:	2b02      	cmp	r3, #2
 8003306:	d130      	bne.n	800336a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800333e:	2201      	movs	r2, #1
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 0201 	and.w	r2, r3, #1
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b03      	cmp	r3, #3
 8003374:	d017      	beq.n	80033a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d123      	bne.n	80033fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	08da      	lsrs	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	08da      	lsrs	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3208      	adds	r2, #8
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0203 	and.w	r2, r3, #3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a6 	beq.w	8003588 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343c:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_GPIO_Init+0x2e4>)
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	4a5a      	ldr	r2, [pc, #360]	; (80035ac <HAL_GPIO_Init+0x2e4>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6613      	str	r3, [r2, #96]	; 0x60
 8003448:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_GPIO_Init+0x2e4>)
 800344a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003454:	4a56      	ldr	r2, [pc, #344]	; (80035b0 <HAL_GPIO_Init+0x2e8>)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800347e:	d01f      	beq.n	80034c0 <HAL_GPIO_Init+0x1f8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a4c      	ldr	r2, [pc, #304]	; (80035b4 <HAL_GPIO_Init+0x2ec>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d019      	beq.n	80034bc <HAL_GPIO_Init+0x1f4>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_GPIO_Init+0x2f0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d013      	beq.n	80034b8 <HAL_GPIO_Init+0x1f0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <HAL_GPIO_Init+0x2f4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00d      	beq.n	80034b4 <HAL_GPIO_Init+0x1ec>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a49      	ldr	r2, [pc, #292]	; (80035c0 <HAL_GPIO_Init+0x2f8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <HAL_GPIO_Init+0x1e8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a48      	ldr	r2, [pc, #288]	; (80035c4 <HAL_GPIO_Init+0x2fc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_GPIO_Init+0x1e4>
 80034a8:	2305      	movs	r3, #5
 80034aa:	e00a      	b.n	80034c2 <HAL_GPIO_Init+0x1fa>
 80034ac:	2306      	movs	r3, #6
 80034ae:	e008      	b.n	80034c2 <HAL_GPIO_Init+0x1fa>
 80034b0:	2304      	movs	r3, #4
 80034b2:	e006      	b.n	80034c2 <HAL_GPIO_Init+0x1fa>
 80034b4:	2303      	movs	r3, #3
 80034b6:	e004      	b.n	80034c2 <HAL_GPIO_Init+0x1fa>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e002      	b.n	80034c2 <HAL_GPIO_Init+0x1fa>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_GPIO_Init+0x1fa>
 80034c0:	2300      	movs	r3, #0
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	f002 0203 	and.w	r2, r2, #3
 80034c8:	0092      	lsls	r2, r2, #2
 80034ca:	4093      	lsls	r3, r2
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d2:	4937      	ldr	r1, [pc, #220]	; (80035b0 <HAL_GPIO_Init+0x2e8>)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034e0:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_GPIO_Init+0x300>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003504:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <HAL_GPIO_Init+0x300>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800350a:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_GPIO_Init+0x300>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800352e:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <HAL_GPIO_Init+0x300>)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_GPIO_Init+0x300>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_GPIO_Init+0x300>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800355e:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <HAL_GPIO_Init+0x300>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	43db      	mvns	r3, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003582:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <HAL_GPIO_Init+0x300>)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f ae9d 	bne.w	80032d8 <HAL_GPIO_Init+0x10>
  }
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40010000 	.word	0x40010000
 80035b4:	48000400 	.word	0x48000400
 80035b8:	48000800 	.word	0x48000800
 80035bc:	48000c00 	.word	0x48000c00
 80035c0:	48001000 	.word	0x48001000
 80035c4:	48001400 	.word	0x48001400
 80035c8:	40010400 	.word	0x40010400

080035cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d141      	bne.n	800365e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035da:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d131      	bne.n	800364c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e8:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ee:	4a46      	ldr	r2, [pc, #280]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f8:	4b43      	ldr	r3, [pc, #268]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003600:	4a41      	ldr	r2, [pc, #260]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003608:	4b40      	ldr	r3, [pc, #256]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2232      	movs	r2, #50	; 0x32
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	4a3f      	ldr	r2, [pc, #252]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	0c9b      	lsrs	r3, r3, #18
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800361e:	e002      	b.n	8003626 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3b01      	subs	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003626:	4b38      	ldr	r3, [pc, #224]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003632:	d102      	bne.n	800363a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f2      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800363a:	4b33      	ldr	r3, [pc, #204]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	d158      	bne.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e057      	b.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800364c:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003652:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800365c:	e04d      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003664:	d141      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003666:	4b28      	ldr	r3, [pc, #160]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003672:	d131      	bne.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003674:	4b24      	ldr	r3, [pc, #144]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003684:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2232      	movs	r2, #50	; 0x32
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	0c9b      	lsrs	r3, r3, #18
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036aa:	e002      	b.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d102      	bne.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f2      	bne.n	80036ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d112      	bne.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e011      	b.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036e8:	e007      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f2:	4a05      	ldr	r2, [pc, #20]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40007000 	.word	0x40007000
 800370c:	20000000 	.word	0x20000000
 8003710:	431bde83 	.word	0x431bde83

08003714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e306      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d075      	beq.n	800381e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b97      	ldr	r3, [pc, #604]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	4b94      	ldr	r3, [pc, #592]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d102      	bne.n	8003752 <HAL_RCC_OscConfig+0x3e>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d002      	beq.n	8003758 <HAL_RCC_OscConfig+0x44>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d10b      	bne.n	8003770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b8d      	ldr	r3, [pc, #564]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05b      	beq.n	800381c <HAL_RCC_OscConfig+0x108>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d157      	bne.n	800381c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e2e1      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x74>
 800377a:	4b85      	ldr	r3, [pc, #532]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a84      	ldr	r2, [pc, #528]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x98>
 8003792:	4b7f      	ldr	r3, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7e      	ldr	r2, [pc, #504]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7b      	ldr	r2, [pc, #492]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 80037ac:	4b78      	ldr	r3, [pc, #480]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a77      	ldr	r2, [pc, #476]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b75      	ldr	r3, [pc, #468]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a74      	ldr	r2, [pc, #464]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd ffc0 	bl	8001750 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fd ffbc 	bl	8001750 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e2a6      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b6a      	ldr	r3, [pc, #424]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0xc0>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd ffac 	bl	8001750 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd ffa8 	bl	8001750 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e292      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380e:	4b60      	ldr	r3, [pc, #384]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0xe8>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382a:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003834:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x136>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d002      	beq.n	8003850 <HAL_RCC_OscConfig+0x13c>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11f      	bne.n	8003890 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_OscConfig+0x154>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e265      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	4946      	ldr	r1, [pc, #280]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800387c:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_RCC_OscConfig+0x280>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd ff19 	bl	80016b8 <HAL_InitTick>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d043      	beq.n	8003914 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e251      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d023      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd ff54 	bl	8001750 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fd ff50 	bl	8001750 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e23a      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038be:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	492d      	ldr	r1, [pc, #180]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
 80038de:	e01a      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd ff30 	bl	8001750 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fd ff2c 	bl	8001750 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e216      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1e0>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d041      	beq.n	80039a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd ff09 	bl	8001750 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003942:	f7fd ff05 	bl	8001750 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1ef      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ef      	beq.n	8003942 <HAL_RCC_OscConfig+0x22e>
 8003962:	e020      	b.n	80039a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd feec 	bl	8001750 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800397a:	e00d      	b.n	8003998 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fd fee8 	bl	8001750 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d906      	bls.n	8003998 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1d2      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ea      	bne.n	800397c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80a6 	beq.w	8003b00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b4:	2300      	movs	r3, #0
 80039b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2b4>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x2b6>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d118      	bne.n	8003a28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7fd fea5 	bl	8001750 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fd fea1 	bl	8001750 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e18b      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	4b6c      	ldr	r3, [pc, #432]	; (8003bd0 <HAL_RCC_OscConfig+0x4bc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_RCC_OscConfig+0x32e>
 8003a30:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a40:	e024      	b.n	8003a8c <HAL_RCC_OscConfig+0x378>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d110      	bne.n	8003a6c <HAL_RCC_OscConfig+0x358>
 8003a4a:	4b60      	ldr	r3, [pc, #384]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	4a5e      	ldr	r2, [pc, #376]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	4a5a      	ldr	r2, [pc, #360]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCC_OscConfig+0x378>
 8003a6c:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd fe5c 	bl	8001750 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fe58 	bl	8001750 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e140      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ed      	beq.n	8003a9c <HAL_RCC_OscConfig+0x388>
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fe45 	bl	8001750 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd fe41 	bl	8001750 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e129      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae0:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ed      	bne.n	8003aca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01c      	beq.n	8003b4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b1a:	4a2c      	ldr	r2, [pc, #176]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd fe14 	bl	8001750 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2c:	f7fd fe10 	bl	8001750 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0fa      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <HAL_RCC_OscConfig+0x418>
 8003b4c:	e01b      	b.n	8003b86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fdf7 	bl	8001750 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b66:	f7fd fdf3 	bl	8001750 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0dd      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ef      	bne.n	8003b66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80d1 	beq.w	8003d32 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	f000 808b 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d15e      	bne.n	8003c64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fdcd 	bl	8001750 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fdc9 	bl	8001750 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d905      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0b3      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd4:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ec      	bne.n	8003bba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4b56      	ldr	r3, [pc, #344]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <HAL_RCC_OscConfig+0x62c>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6a11      	ldr	r1, [r2, #32]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bfa:	0212      	lsls	r2, r2, #8
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c02:	0852      	lsrs	r2, r2, #1
 8003c04:	3a01      	subs	r2, #1
 8003c06:	0552      	lsls	r2, r2, #21
 8003c08:	4311      	orrs	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c0e:	0852      	lsrs	r2, r2, #1
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0652      	lsls	r2, r2, #25
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c1a:	06d2      	lsls	r2, r2, #27
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	4947      	ldr	r1, [pc, #284]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c24:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a44      	ldr	r2, [pc, #272]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c30:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a41      	ldr	r2, [pc, #260]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fd88 	bl	8001750 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fd fd84 	bl	8001750 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e06e      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x530>
 8003c62:	e066      	b.n	8003d32 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a31      	ldr	r2, [pc, #196]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c7c:	4b2f      	ldr	r3, [pc, #188]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a2e      	ldr	r2, [pc, #184]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003c82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fd60 	bl	8001750 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fd fd5c 	bl	8001750 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e046      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x580>
 8003cb2:	e03e      	b.n	8003d32 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e039      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <HAL_RCC_OscConfig+0x628>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d12c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d123      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d11b      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d113      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	019f800c 	.word	0x019f800c

08003d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e11e      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b91      	ldr	r3, [pc, #580]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	498c      	ldr	r1, [pc, #560]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b8a      	ldr	r3, [pc, #552]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e106      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d073      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d129      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da0:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0f4      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003db0:	f000 f99e 	bl	80040f0 <RCC_GetSysClockFreqFromPLLSource>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d93f      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d033      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12f      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dde:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de6:	4a70      	ldr	r2, [pc, #448]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e024      	b.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0c6      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0c:	4b66      	ldr	r3, [pc, #408]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0be      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e1c:	f000 f8ce 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4a61      	ldr	r2, [pc, #388]	; (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d909      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4957      	ldr	r1, [pc, #348]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fd fc7e 	bl	8001750 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fd fc7a 	bl	8001750 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e095      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b4e      	ldr	r3, [pc, #312]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ea2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4936      	ldr	r1, [pc, #216]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eda:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4a32      	ldr	r2, [pc, #200]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d21d      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 020f 	bic.w	r2, r3, #15
 8003efc:	4929      	ldr	r1, [pc, #164]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f04:	f7fd fc24 	bl	8001750 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fd fc20 	bl	8001750 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e03b      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1ed      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4917      	ldr	r1, [pc, #92]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490f      	ldr	r1, [pc, #60]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f6e:	f000 f825 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490c      	ldr	r1, [pc, #48]	; (8003fb0 <HAL_RCC_ClockConfig+0x26c>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x270>)
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x274>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd fb90 	bl	80016b8 <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	04c4b400 	.word	0x04c4b400
 8003fb0:	080070a0 	.word	0x080070a0
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	20000004 	.word	0x20000004

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e047      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e03e      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d136      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3301      	adds	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d10c      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004010:	4a1a      	ldr	r2, [pc, #104]	; (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401a:	68d2      	ldr	r2, [r2, #12]
 800401c:	0a12      	lsrs	r2, r2, #8
 800401e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e00c      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a10      	ldr	r2, [pc, #64]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	0a12      	lsrs	r2, r2, #8
 8004038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
      break;
 8004042:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0e5b      	lsrs	r3, r3, #25
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e001      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004064:	693b      	ldr	r3, [r7, #16]
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	00f42400 	.word	0x00f42400
 800407c:	007a1200 	.word	0x007a1200

08004080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000000 	.word	0x20000000

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800409c:	f7ff fff0 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4904      	ldr	r1, [pc, #16]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	080070b0 	.word	0x080070b0

080040c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040c8:	f7ff ffda 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0adb      	lsrs	r3, r3, #11
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4904      	ldr	r1, [pc, #16]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	080070b0 	.word	0x080070b0

080040f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040f6:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d10c      	bne.n	800412e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004114:	4a17      	ldr	r2, [pc, #92]	; (8004174 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411e:	68d2      	ldr	r2, [r2, #12]
 8004120:	0a12      	lsrs	r2, r2, #8
 8004122:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	617b      	str	r3, [r7, #20]
    break;
 800412c:	e00c      	b.n	8004148 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	0a12      	lsrs	r2, r2, #8
 800413c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
    break;
 8004146:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	0e5b      	lsrs	r3, r3, #25
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004162:	687b      	ldr	r3, [r7, #4]
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40021000 	.word	0x40021000
 8004174:	007a1200 	.word	0x007a1200
 8004178:	00f42400 	.word	0x00f42400

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004184:	2300      	movs	r3, #0
 8004186:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004188:	2300      	movs	r3, #0
 800418a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8098 	beq.w	80042ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b40      	ldr	r3, [pc, #256]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	4a3f      	ldr	r2, [pc, #252]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6593      	str	r3, [r2, #88]	; 0x58
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c6:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a39      	ldr	r2, [pc, #228]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041d2:	f7fd fabd 	bl	8001750 <HAL_GetTick>
 80041d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041d8:	e009      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041da:	f7fd fab9 	bl	8001750 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d902      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	74fb      	strb	r3, [r7, #19]
        break;
 80041ec:	e005      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ef      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d159      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004200:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01e      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	d019      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800421c:	4b23      	ldr	r3, [pc, #140]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	4a1f      	ldr	r2, [pc, #124]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004238:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004248:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fd fa79 	bl	8001750 <HAL_GetTick>
 800425e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004260:	e00b      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd fa75 	bl	8001750 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d902      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	74fb      	strb	r3, [r7, #19]
            break;
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ec      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	4903      	ldr	r1, [pc, #12]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042a4:	e008      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	74bb      	strb	r3, [r7, #18]
 80042aa:	e005      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b8:	7c7b      	ldrb	r3, [r7, #17]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d105      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042be:	4ba6      	ldr	r3, [pc, #664]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	4aa5      	ldr	r2, [pc, #660]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042d6:	4ba0      	ldr	r3, [pc, #640]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f023 0203 	bic.w	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	499c      	ldr	r1, [pc, #624]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042f8:	4b97      	ldr	r3, [pc, #604]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f023 020c 	bic.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4994      	ldr	r1, [pc, #592]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800431a:	4b8f      	ldr	r3, [pc, #572]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	498b      	ldr	r1, [pc, #556]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800433c:	4b86      	ldr	r3, [pc, #536]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	4983      	ldr	r1, [pc, #524]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800435e:	4b7e      	ldr	r3, [pc, #504]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	497a      	ldr	r1, [pc, #488]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004380:	4b75      	ldr	r3, [pc, #468]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	4972      	ldr	r1, [pc, #456]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043a2:	4b6d      	ldr	r3, [pc, #436]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4969      	ldr	r1, [pc, #420]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043c4:	4b64      	ldr	r3, [pc, #400]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4961      	ldr	r1, [pc, #388]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043e6:	4b5c      	ldr	r3, [pc, #368]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	4958      	ldr	r1, [pc, #352]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004408:	4b53      	ldr	r3, [pc, #332]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	4950      	ldr	r1, [pc, #320]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004426:	d105      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004428:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004432:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004440:	4b45      	ldr	r3, [pc, #276]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	4942      	ldr	r1, [pc, #264]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	4b3d      	ldr	r3, [pc, #244]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004478:	4b37      	ldr	r3, [pc, #220]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4934      	ldr	r1, [pc, #208]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004498:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a2e      	ldr	r2, [pc, #184]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	4926      	ldr	r1, [pc, #152]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a20      	ldr	r2, [pc, #128]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	4918      	ldr	r1, [pc, #96]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004506:	d105      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a12      	ldr	r2, [pc, #72]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004512:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d015      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	490a      	ldr	r1, [pc, #40]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800453e:	d105      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800454c:	7cbb      	ldrb	r3, [r7, #18]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e049      	b.n	8004602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc febe 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fc08 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d001      	beq.n	8004624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e042      	b.n	80046aa <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <HAL_TIM_Base_Start+0xac>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d018      	beq.n	8004668 <HAL_TIM_Base_Start+0x5c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463e:	d013      	beq.n	8004668 <HAL_TIM_Base_Start+0x5c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <HAL_TIM_Base_Start+0xb0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00e      	beq.n	8004668 <HAL_TIM_Base_Start+0x5c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <HAL_TIM_Base_Start+0xb4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_TIM_Base_Start+0x5c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_TIM_Base_Start+0xb8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_TIM_Base_Start+0x5c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <HAL_TIM_Base_Start+0xbc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d115      	bne.n	8004694 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_TIM_Base_Start+0xc0>)
 8004670:	4013      	ands	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b06      	cmp	r3, #6
 8004678:	d015      	beq.n	80046a6 <HAL_TIM_Base_Start+0x9a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d011      	beq.n	80046a6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	e008      	b.n	80046a6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	00010007 	.word	0x00010007

080046d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e049      	b.n	8004776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f841 	bl	800477e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 fb4e 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x24>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e03c      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d109      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x3e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e02f      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x58>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e022      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d109      	bne.n	8004806 <HAL_TIM_PWM_Start+0x72>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	e015      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x8c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e008      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e097      	b.n	800496a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xb6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	e023      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xc6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004858:	e01b      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xd6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	e013      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b0c      	cmp	r3, #12
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start+0xe6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004878:	e00b      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b10      	cmp	r3, #16
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xf6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004888:	e003      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2201      	movs	r2, #1
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 feaa 	bl	80055f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a33      	ldr	r2, [pc, #204]	; (8004974 <HAL_TIM_PWM_Start+0x1e0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <HAL_TIM_PWM_Start+0x13e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a32      	ldr	r2, [pc, #200]	; (8004978 <HAL_TIM_PWM_Start+0x1e4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00e      	beq.n	80048d2 <HAL_TIM_PWM_Start+0x13e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a30      	ldr	r2, [pc, #192]	; (800497c <HAL_TIM_PWM_Start+0x1e8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d009      	beq.n	80048d2 <HAL_TIM_PWM_Start+0x13e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2f      	ldr	r2, [pc, #188]	; (8004980 <HAL_TIM_PWM_Start+0x1ec>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIM_PWM_Start+0x13e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <HAL_TIM_PWM_Start+0x1f0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x142>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_TIM_PWM_Start+0x144>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a20      	ldr	r2, [pc, #128]	; (8004974 <HAL_TIM_PWM_Start+0x1e0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_TIM_PWM_Start+0x194>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fe:	d013      	beq.n	8004928 <HAL_TIM_PWM_Start+0x194>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a20      	ldr	r2, [pc, #128]	; (8004988 <HAL_TIM_PWM_Start+0x1f4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_TIM_PWM_Start+0x194>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <HAL_TIM_PWM_Start+0x1f8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_TIM_PWM_Start+0x194>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a17      	ldr	r2, [pc, #92]	; (8004978 <HAL_TIM_PWM_Start+0x1e4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_TIM_PWM_Start+0x194>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <HAL_TIM_PWM_Start+0x1e8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d115      	bne.n	8004954 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	4b18      	ldr	r3, [pc, #96]	; (8004990 <HAL_TIM_PWM_Start+0x1fc>)
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b06      	cmp	r3, #6
 8004938:	d015      	beq.n	8004966 <HAL_TIM_PWM_Start+0x1d2>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004940:	d011      	beq.n	8004966 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	e008      	b.n	8004966 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e000      	b.n	8004968 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	00010007 	.word	0x00010007

08004994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0ff      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b14      	cmp	r3, #20
 80049be:	f200 80f0 	bhi.w	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004ba3 	.word	0x08004ba3
 80049d0:	08004ba3 	.word	0x08004ba3
 80049d4:	08004ba3 	.word	0x08004ba3
 80049d8:	08004a5d 	.word	0x08004a5d
 80049dc:	08004ba3 	.word	0x08004ba3
 80049e0:	08004ba3 	.word	0x08004ba3
 80049e4:	08004ba3 	.word	0x08004ba3
 80049e8:	08004a9f 	.word	0x08004a9f
 80049ec:	08004ba3 	.word	0x08004ba3
 80049f0:	08004ba3 	.word	0x08004ba3
 80049f4:	08004ba3 	.word	0x08004ba3
 80049f8:	08004adf 	.word	0x08004adf
 80049fc:	08004ba3 	.word	0x08004ba3
 8004a00:	08004ba3 	.word	0x08004ba3
 8004a04:	08004ba3 	.word	0x08004ba3
 8004a08:	08004b21 	.word	0x08004b21
 8004a0c:	08004ba3 	.word	0x08004ba3
 8004a10:	08004ba3 	.word	0x08004ba3
 8004a14:	08004ba3 	.word	0x08004ba3
 8004a18:	08004b61 	.word	0x08004b61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fa54 	bl	8004ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0204 	bic.w	r2, r2, #4
 8004a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6999      	ldr	r1, [r3, #24]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	619a      	str	r2, [r3, #24]
      break;
 8004a5a:	e0a5      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fac4 	bl	8004ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	619a      	str	r2, [r3, #24]
      break;
 8004a9c:	e084      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fb2d 	bl	8005104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0208 	orr.w	r2, r2, #8
 8004ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0204 	bic.w	r2, r2, #4
 8004ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69d9      	ldr	r1, [r3, #28]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	61da      	str	r2, [r3, #28]
      break;
 8004adc:	e064      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fb95 	bl	8005214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	021a      	lsls	r2, r3, #8
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	61da      	str	r2, [r3, #28]
      break;
 8004b1e:	e043      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fbfe 	bl	8005328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0208 	orr.w	r2, r2, #8
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0204 	bic.w	r2, r2, #4
 8004b4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b5e:	e023      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fc42 	bl	80053f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ba0:	e002      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop

08004bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e0de      	b.n	8004d96 <HAL_TIM_ConfigClockSource+0x1da>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a63      	ldr	r2, [pc, #396]	; (8004da0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f000 80a9 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c18:	4a61      	ldr	r2, [pc, #388]	; (8004da0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	f200 80ae 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c20:	4a60      	ldr	r2, [pc, #384]	; (8004da4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f000 80a1 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c28:	4a5e      	ldr	r2, [pc, #376]	; (8004da4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f200 80a6 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c30:	4a5d      	ldr	r2, [pc, #372]	; (8004da8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	f000 8099 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c38:	4a5b      	ldr	r2, [pc, #364]	; (8004da8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	f200 809e 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c40:	4a5a      	ldr	r2, [pc, #360]	; (8004dac <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	f000 8091 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c48:	4a58      	ldr	r2, [pc, #352]	; (8004dac <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	f200 8096 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c54:	f000 8089 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c5c:	f200 808e 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c64:	d03e      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0x128>
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6a:	f200 8087 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	f000 8086 	beq.w	8004d82 <HAL_TIM_ConfigClockSource+0x1c6>
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d87f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d01a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c80:	2b70      	cmp	r3, #112	; 0x70
 8004c82:	d87b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c84:	2b60      	cmp	r3, #96	; 0x60
 8004c86:	d050      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x16e>
 8004c88:	2b60      	cmp	r3, #96	; 0x60
 8004c8a:	d877      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c8c:	2b50      	cmp	r3, #80	; 0x50
 8004c8e:	d03c      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x14e>
 8004c90:	2b50      	cmp	r3, #80	; 0x50
 8004c92:	d873      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d058      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x18e>
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d86f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d064      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004ca0:	2b30      	cmp	r3, #48	; 0x30
 8004ca2:	d86b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d060      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d867      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05c      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d05a      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8004cb4:	e062      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6899      	ldr	r1, [r3, #8]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f000 fc75 	bl	80055b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	609a      	str	r2, [r3, #8]
      break;
 8004ce2:	e04f      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6899      	ldr	r1, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f000 fc5e 	bl	80055b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d06:	609a      	str	r2, [r3, #8]
      break;
 8004d08:	e03c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 fbd0 	bl	80054bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2150      	movs	r1, #80	; 0x50
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fc29 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d28:	e02c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fbef 	bl	800551a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2160      	movs	r1, #96	; 0x60
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fc19 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d48:	e01c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fbb0 	bl	80054bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2140      	movs	r1, #64	; 0x40
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fc09 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d68:	e00c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f000 fc00 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d7a:	e003      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d80:	e000      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	00100070 	.word	0x00100070
 8004da4:	00100040 	.word	0x00100040
 8004da8:	00100030 	.word	0x00100030
 8004dac:	00100020 	.word	0x00100020

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3c      	ldr	r2, [pc, #240]	; (8004eb4 <TIM_Base_SetConfig+0x104>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00f      	beq.n	8004de8 <TIM_Base_SetConfig+0x38>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d00b      	beq.n	8004de8 <TIM_Base_SetConfig+0x38>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a39      	ldr	r2, [pc, #228]	; (8004eb8 <TIM_Base_SetConfig+0x108>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <TIM_Base_SetConfig+0x38>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a38      	ldr	r2, [pc, #224]	; (8004ebc <TIM_Base_SetConfig+0x10c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a37      	ldr	r2, [pc, #220]	; (8004ec0 <TIM_Base_SetConfig+0x110>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <TIM_Base_SetConfig+0x104>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01b      	beq.n	8004e3a <TIM_Base_SetConfig+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d017      	beq.n	8004e3a <TIM_Base_SetConfig+0x8a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <TIM_Base_SetConfig+0x108>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a29      	ldr	r2, [pc, #164]	; (8004ebc <TIM_Base_SetConfig+0x10c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <TIM_Base_SetConfig+0x110>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <TIM_Base_SetConfig+0x118>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <TIM_Base_SetConfig+0x11c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <TIM_Base_SetConfig+0x104>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00f      	beq.n	8004e98 <TIM_Base_SetConfig+0xe8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <TIM_Base_SetConfig+0x110>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_Base_SetConfig+0xe8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_Base_SetConfig+0xe8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a0f      	ldr	r2, [pc, #60]	; (8004ec8 <TIM_Base_SetConfig+0x118>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_Base_SetConfig+0xe8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <TIM_Base_SetConfig+0x11c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d103      	bne.n	8004ea0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40013400 	.word	0x40013400
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800

08004ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0302 	bic.w	r3, r3, #2
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	; (8004fdc <TIM_OC1_SetConfig+0x10c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00f      	beq.n	8004f50 <TIM_OC1_SetConfig+0x80>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <TIM_OC1_SetConfig+0x110>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <TIM_OC1_SetConfig+0x80>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <TIM_OC1_SetConfig+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_OC1_SetConfig+0x80>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <TIM_OC1_SetConfig+0x118>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC1_SetConfig+0x80>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a28      	ldr	r2, [pc, #160]	; (8004fec <TIM_OC1_SetConfig+0x11c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10c      	bne.n	8004f6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0308 	bic.w	r3, r3, #8
 8004f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 0304 	bic.w	r3, r3, #4
 8004f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <TIM_OC1_SetConfig+0x10c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_OC1_SetConfig+0xc2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <TIM_OC1_SetConfig+0x110>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_OC1_SetConfig+0xc2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <TIM_OC1_SetConfig+0x114>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_OC1_SetConfig+0xc2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <TIM_OC1_SetConfig+0x118>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_OC1_SetConfig+0xc2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	; (8004fec <TIM_OC1_SetConfig+0x11c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d111      	bne.n	8004fb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0210 	bic.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0320 	bic.w	r3, r3, #32
 800503e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <TIM_OC2_SetConfig+0x100>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC2_SetConfig+0x6c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <TIM_OC2_SetConfig+0x104>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <TIM_OC2_SetConfig+0x100>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00f      	beq.n	80050a0 <TIM_OC2_SetConfig+0xb0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <TIM_OC2_SetConfig+0x104>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_OC2_SetConfig+0xb0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <TIM_OC2_SetConfig+0x108>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_OC2_SetConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1a      	ldr	r2, [pc, #104]	; (80050fc <TIM_OC2_SetConfig+0x10c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC2_SetConfig+0xb0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a19      	ldr	r2, [pc, #100]	; (8005100 <TIM_OC2_SetConfig+0x110>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40013400 	.word	0x40013400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a27      	ldr	r2, [pc, #156]	; (8005200 <TIM_OC3_SetConfig+0xfc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0x6a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a26      	ldr	r2, [pc, #152]	; (8005204 <TIM_OC3_SetConfig+0x100>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10d      	bne.n	800518a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1c      	ldr	r2, [pc, #112]	; (8005200 <TIM_OC3_SetConfig+0xfc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_OC3_SetConfig+0xae>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <TIM_OC3_SetConfig+0x100>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_OC3_SetConfig+0xae>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1a      	ldr	r2, [pc, #104]	; (8005208 <TIM_OC3_SetConfig+0x104>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC3_SetConfig+0xae>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a19      	ldr	r2, [pc, #100]	; (800520c <TIM_OC3_SetConfig+0x108>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC3_SetConfig+0xae>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <TIM_OC3_SetConfig+0x10c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d113      	bne.n	80051da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800

08005214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a28      	ldr	r2, [pc, #160]	; (8005314 <TIM_OC4_SetConfig+0x100>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC4_SetConfig+0x6c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a27      	ldr	r2, [pc, #156]	; (8005318 <TIM_OC4_SetConfig+0x104>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10d      	bne.n	800529c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	031b      	lsls	r3, r3, #12
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <TIM_OC4_SetConfig+0x100>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_OC4_SetConfig+0xb0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <TIM_OC4_SetConfig+0x104>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC4_SetConfig+0xb0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <TIM_OC4_SetConfig+0x108>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC4_SetConfig+0xb0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <TIM_OC4_SetConfig+0x10c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC4_SetConfig+0xb0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <TIM_OC4_SetConfig+0x110>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d113      	bne.n	80052ec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	019b      	lsls	r3, r3, #6
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800

08005328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800536c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	041b      	lsls	r3, r3, #16
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <TIM_OC5_SetConfig+0xb4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_OC5_SetConfig+0x7a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC5_SetConfig+0xb8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_OC5_SetConfig+0x7a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <TIM_OC5_SetConfig+0xbc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_OC5_SetConfig+0x7a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <TIM_OC5_SetConfig+0xc0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC5_SetConfig+0x7a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <TIM_OC5_SetConfig+0xc4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d109      	bne.n	80053b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40013400 	.word	0x40013400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800541e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	051b      	lsls	r3, r3, #20
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <TIM_OC6_SetConfig+0xb8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00f      	beq.n	800546c <TIM_OC6_SetConfig+0x7c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a17      	ldr	r2, [pc, #92]	; (80054ac <TIM_OC6_SetConfig+0xbc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00b      	beq.n	800546c <TIM_OC6_SetConfig+0x7c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <TIM_OC6_SetConfig+0xc0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_OC6_SetConfig+0x7c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <TIM_OC6_SetConfig+0xc4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC6_SetConfig+0x7c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <TIM_OC6_SetConfig+0xc8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d109      	bne.n	8005480 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40013400 	.word	0x40013400
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800

080054bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f023 0201 	bic.w	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 030a 	bic.w	r3, r3, #10
 80054f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551a:	b480      	push	{r7}
 800551c:	b087      	sub	sp, #28
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0210 	bic.w	r2, r3, #16
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	031b      	lsls	r3, r3, #12
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	f043 0307 	orr.w	r3, r3, #7
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	609a      	str	r2, [r3, #8]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	609a      	str	r2, [r3, #8]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2201      	movs	r2, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_TIMEx_PWMN_Start+0x24>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	bf14      	ite	ne
 800565c:	2301      	movne	r3, #1
 800565e:	2300      	moveq	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	e022      	b.n	80056aa <HAL_TIMEx_PWMN_Start+0x6a>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d109      	bne.n	800567e <HAL_TIMEx_PWMN_Start+0x3e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	bf14      	ite	ne
 8005676:	2301      	movne	r3, #1
 8005678:	2300      	moveq	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	e015      	b.n	80056aa <HAL_TIMEx_PWMN_Start+0x6a>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d109      	bne.n	8005698 <HAL_TIMEx_PWMN_Start+0x58>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e008      	b.n	80056aa <HAL_TIMEx_PWMN_Start+0x6a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e069      	b.n	8005786 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <HAL_TIMEx_PWMN_Start+0x82>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	e013      	b.n	80056ea <HAL_TIMEx_PWMN_Start+0xaa>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d104      	bne.n	80056d2 <HAL_TIMEx_PWMN_Start+0x92>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d0:	e00b      	b.n	80056ea <HAL_TIMEx_PWMN_Start+0xaa>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d104      	bne.n	80056e2 <HAL_TIMEx_PWMN_Start+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056e0:	e003      	b.n	80056ea <HAL_TIMEx_PWMN_Start+0xaa>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2204      	movs	r2, #4
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f97a 	bl	80059ec <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005706:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a20      	ldr	r2, [pc, #128]	; (8005790 <HAL_TIMEx_PWMN_Start+0x150>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d018      	beq.n	8005744 <HAL_TIMEx_PWMN_Start+0x104>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d013      	beq.n	8005744 <HAL_TIMEx_PWMN_Start+0x104>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <HAL_TIMEx_PWMN_Start+0x154>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00e      	beq.n	8005744 <HAL_TIMEx_PWMN_Start+0x104>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <HAL_TIMEx_PWMN_Start+0x158>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d009      	beq.n	8005744 <HAL_TIMEx_PWMN_Start+0x104>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <HAL_TIMEx_PWMN_Start+0x15c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <HAL_TIMEx_PWMN_Start+0x104>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_TIMEx_PWMN_Start+0x160>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d115      	bne.n	8005770 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <HAL_TIMEx_PWMN_Start+0x164>)
 800574c:	4013      	ands	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b06      	cmp	r3, #6
 8005754:	d015      	beq.n	8005782 <HAL_TIMEx_PWMN_Start+0x142>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d011      	beq.n	8005782 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	e008      	b.n	8005782 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e000      	b.n	8005784 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005782:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40013400 	.word	0x40013400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	00010007 	.word	0x00010007

080057a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057bc:	2302      	movs	r3, #2
 80057be:	e065      	b.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2c      	ldr	r2, [pc, #176]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2b      	ldr	r2, [pc, #172]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d108      	bne.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d018      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d013      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00e      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a12      	ldr	r2, [pc, #72]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10c      	bne.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005866:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40013400 	.word	0x40013400
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40014000 	.word	0x40014000

080058ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e087      	b.n	80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	041b      	lsls	r3, r3, #16
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a27      	ldr	r2, [pc, #156]	; (80059e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d106      	bne.n	8005964 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d126      	bne.n	80059c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	051b      	lsls	r3, r3, #20
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a0e      	ldr	r2, [pc, #56]	; (80059e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a0d      	ldr	r2, [pc, #52]	; (80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d106      	bne.n	80059c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	40013400 	.word	0x40013400

080059ec <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	2204      	movs	r2, #4
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1a      	ldr	r2, [r3, #32]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	401a      	ands	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e042      	b.n	8005ace <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb fd0c 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2224      	movs	r2, #36	; 0x24
 8005a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f8c3 	bl	8005c04 <UART_SetConfig>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e022      	b.n	8005ace <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fb83 	bl	800619c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fc0a 	bl	80062e0 <UART_CheckIdleState>
 8005acc:	4603      	mov	r3, r0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08a      	sub	sp, #40	; 0x28
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	f040 8083 	bne.w	8005bf8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_Transmit+0x28>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07b      	b.n	8005bfa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Transmit+0x3a>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e074      	b.n	8005bfa <HAL_UART_Transmit+0x124>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2221      	movs	r2, #33	; 0x21
 8005b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b28:	f7fb fe12 	bl	8001750 <HAL_GetTick>
 8005b2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b46:	d108      	bne.n	8005b5a <HAL_UART_Transmit+0x84>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e003      	b.n	8005b62 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005b6a:	e02c      	b.n	8005bc6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fbfd 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e039      	b.n	8005bfa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e007      	b.n	8005bb4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1cc      	bne.n	8005b6c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2140      	movs	r1, #64	; 0x40
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fbca 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e006      	b.n	8005bfa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c08:	b08c      	sub	sp, #48	; 0x30
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4bab      	ldr	r3, [pc, #684]	; (8005ee0 <UART_SetConfig+0x2dc>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4aa0      	ldr	r2, [pc, #640]	; (8005ee4 <UART_SetConfig+0x2e0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	f023 010f 	bic.w	r1, r3, #15
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a91      	ldr	r2, [pc, #580]	; (8005ee8 <UART_SetConfig+0x2e4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d125      	bne.n	8005cf4 <UART_SetConfig+0xf0>
 8005ca8:	4b90      	ldr	r3, [pc, #576]	; (8005eec <UART_SetConfig+0x2e8>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d81a      	bhi.n	8005cec <UART_SetConfig+0xe8>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0xb8>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005ccd 	.word	0x08005ccd
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd2:	e0d6      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cda:	e0d2      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce2:	e0ce      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cea:	e0ca      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e0c6      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a7d      	ldr	r2, [pc, #500]	; (8005ef0 <UART_SetConfig+0x2ec>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d138      	bne.n	8005d70 <UART_SetConfig+0x16c>
 8005cfe:	4b7b      	ldr	r3, [pc, #492]	; (8005eec <UART_SetConfig+0x2e8>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d82d      	bhi.n	8005d68 <UART_SetConfig+0x164>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x110>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	08005d69 	.word	0x08005d69
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e098      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d56:	e094      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	e090      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e08c      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e088      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a5f      	ldr	r2, [pc, #380]	; (8005ef4 <UART_SetConfig+0x2f0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d125      	bne.n	8005dc6 <UART_SetConfig+0x1c2>
 8005d7a:	4b5c      	ldr	r3, [pc, #368]	; (8005eec <UART_SetConfig+0x2e8>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d84:	2b30      	cmp	r3, #48	; 0x30
 8005d86:	d016      	beq.n	8005db6 <UART_SetConfig+0x1b2>
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d818      	bhi.n	8005dbe <UART_SetConfig+0x1ba>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d00a      	beq.n	8005da6 <UART_SetConfig+0x1a2>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d814      	bhi.n	8005dbe <UART_SetConfig+0x1ba>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <UART_SetConfig+0x19a>
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d008      	beq.n	8005dae <UART_SetConfig+0x1aa>
 8005d9c:	e00f      	b.n	8005dbe <UART_SetConfig+0x1ba>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da4:	e06d      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005da6:	2302      	movs	r3, #2
 8005da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dac:	e069      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005dae:	2304      	movs	r3, #4
 8005db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db4:	e065      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005db6:	2308      	movs	r3, #8
 8005db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dbc:	e061      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005dbe:	2310      	movs	r3, #16
 8005dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc4:	e05d      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4b      	ldr	r2, [pc, #300]	; (8005ef8 <UART_SetConfig+0x2f4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d125      	bne.n	8005e1c <UART_SetConfig+0x218>
 8005dd0:	4b46      	ldr	r3, [pc, #280]	; (8005eec <UART_SetConfig+0x2e8>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dda:	2bc0      	cmp	r3, #192	; 0xc0
 8005ddc:	d016      	beq.n	8005e0c <UART_SetConfig+0x208>
 8005dde:	2bc0      	cmp	r3, #192	; 0xc0
 8005de0:	d818      	bhi.n	8005e14 <UART_SetConfig+0x210>
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d00a      	beq.n	8005dfc <UART_SetConfig+0x1f8>
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d814      	bhi.n	8005e14 <UART_SetConfig+0x210>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <UART_SetConfig+0x1f0>
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d008      	beq.n	8005e04 <UART_SetConfig+0x200>
 8005df2:	e00f      	b.n	8005e14 <UART_SetConfig+0x210>
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfa:	e042      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e02:	e03e      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e04:	2304      	movs	r3, #4
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0a:	e03a      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e12:	e036      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e14:	2310      	movs	r3, #16
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1a:	e032      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a30      	ldr	r2, [pc, #192]	; (8005ee4 <UART_SetConfig+0x2e0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d12a      	bne.n	8005e7c <UART_SetConfig+0x278>
 8005e26:	4b31      	ldr	r3, [pc, #196]	; (8005eec <UART_SetConfig+0x2e8>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e34:	d01a      	beq.n	8005e6c <UART_SetConfig+0x268>
 8005e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e3a:	d81b      	bhi.n	8005e74 <UART_SetConfig+0x270>
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d00c      	beq.n	8005e5c <UART_SetConfig+0x258>
 8005e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e46:	d815      	bhi.n	8005e74 <UART_SetConfig+0x270>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <UART_SetConfig+0x250>
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e50:	d008      	beq.n	8005e64 <UART_SetConfig+0x260>
 8005e52:	e00f      	b.n	8005e74 <UART_SetConfig+0x270>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5a:	e012      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e62:	e00e      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e6a:	e00a      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e72:	e006      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7a:	e002      	b.n	8005e82 <UART_SetConfig+0x27e>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <UART_SetConfig+0x2e0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	f040 80a8 	bne.w	8005fde <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d834      	bhi.n	8005f00 <UART_SetConfig+0x2fc>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <UART_SetConfig+0x298>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005f01 	.word	0x08005f01
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005f01 	.word	0x08005f01
 8005eac:	08005ecf 	.word	0x08005ecf
 8005eb0:	08005f01 	.word	0x08005f01
 8005eb4:	08005f01 	.word	0x08005f01
 8005eb8:	08005f01 	.word	0x08005f01
 8005ebc:	08005ed7 	.word	0x08005ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec0:	f7fe f8ea 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8005ec4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ec6:	e021      	b.n	8005f0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <UART_SetConfig+0x2f8>)
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ecc:	e01e      	b.n	8005f0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ece:	f7fe f875 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8005ed2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ed4:	e01a      	b.n	8005f0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005edc:	e016      	b.n	8005f0c <UART_SetConfig+0x308>
 8005ede:	bf00      	nop
 8005ee0:	cfff69f3 	.word	0xcfff69f3
 8005ee4:	40008000 	.word	0x40008000
 8005ee8:	40013800 	.word	0x40013800
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40004400 	.word	0x40004400
 8005ef4:	40004800 	.word	0x40004800
 8005ef8:	40004c00 	.word	0x40004c00
 8005efc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 812a 	beq.w	8006168 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	4a9e      	ldr	r2, [pc, #632]	; (8006194 <UART_SetConfig+0x590>)
 8005f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d305      	bcc.n	8005f44 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f4a:	e10d      	b.n	8006168 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	2200      	movs	r2, #0
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	60fa      	str	r2, [r7, #12]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	4a8e      	ldr	r2, [pc, #568]	; (8006194 <UART_SetConfig+0x590>)
 8005f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2200      	movs	r2, #0
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f6e:	f7fa f9a7 	bl	80002c0 <__aeabi_uldivmod>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4610      	mov	r0, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	020b      	lsls	r3, r1, #8
 8005f84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f88:	0202      	lsls	r2, r0, #8
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	6849      	ldr	r1, [r1, #4]
 8005f8e:	0849      	lsrs	r1, r1, #1
 8005f90:	2000      	movs	r0, #0
 8005f92:	460c      	mov	r4, r1
 8005f94:	4605      	mov	r5, r0
 8005f96:	eb12 0804 	adds.w	r8, r2, r4
 8005f9a:	eb43 0905 	adc.w	r9, r3, r5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	469a      	mov	sl, r3
 8005fa6:	4693      	mov	fp, r2
 8005fa8:	4652      	mov	r2, sl
 8005faa:	465b      	mov	r3, fp
 8005fac:	4640      	mov	r0, r8
 8005fae:	4649      	mov	r1, r9
 8005fb0:	f7fa f986 	bl	80002c0 <__aeabi_uldivmod>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4613      	mov	r3, r2
 8005fba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc2:	d308      	bcc.n	8005fd6 <UART_SetConfig+0x3d2>
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fca:	d204      	bcs.n	8005fd6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	60da      	str	r2, [r3, #12]
 8005fd4:	e0c8      	b.n	8006168 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fdc:	e0c4      	b.n	8006168 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe6:	d167      	bne.n	80060b8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d828      	bhi.n	8006042 <UART_SetConfig+0x43e>
 8005ff0:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0x3f4>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006025 	.word	0x08006025
 8006000:	0800602d 	.word	0x0800602d
 8006004:	08006043 	.word	0x08006043
 8006008:	08006033 	.word	0x08006033
 800600c:	08006043 	.word	0x08006043
 8006010:	08006043 	.word	0x08006043
 8006014:	08006043 	.word	0x08006043
 8006018:	0800603b 	.word	0x0800603b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601c:	f7fe f83c 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8006020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006022:	e014      	b.n	800604e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006024:	f7fe f84e 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8006028:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800602a:	e010      	b.n	800604e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800602c:	4b5a      	ldr	r3, [pc, #360]	; (8006198 <UART_SetConfig+0x594>)
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006030:	e00d      	b.n	800604e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006032:	f7fd ffc3 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8006036:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006038:	e009      	b.n	800604e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006040:	e005      	b.n	800604e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800604c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8089 	beq.w	8006168 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	4a4e      	ldr	r2, [pc, #312]	; (8006194 <UART_SetConfig+0x590>)
 800605c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006060:	461a      	mov	r2, r3
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	fbb3 f3f2 	udiv	r3, r3, r2
 8006068:	005a      	lsls	r2, r3, #1
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	441a      	add	r2, r3
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	fbb2 f3f3 	udiv	r3, r2, r3
 800607a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	d916      	bls.n	80060b0 <UART_SetConfig+0x4ac>
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006088:	d212      	bcs.n	80060b0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f023 030f 	bic.w	r3, r3, #15
 8006092:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	b29b      	uxth	r3, r3
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	b29a      	uxth	r2, r3
 80060a0:	8bfb      	ldrh	r3, [r7, #30]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	8bfa      	ldrh	r2, [r7, #30]
 80060ac:	60da      	str	r2, [r3, #12]
 80060ae:	e05b      	b.n	8006168 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060b6:	e057      	b.n	8006168 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d828      	bhi.n	8006112 <UART_SetConfig+0x50e>
 80060c0:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x4c4>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	08006113 	.word	0x08006113
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006113 	.word	0x08006113
 80060e0:	08006113 	.word	0x08006113
 80060e4:	08006113 	.word	0x08006113
 80060e8:	0800610b 	.word	0x0800610b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fd ffd4 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060f2:	e014      	b.n	800611e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fd ffe6 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 80060f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060fa:	e010      	b.n	800611e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060fc:	4b26      	ldr	r3, [pc, #152]	; (8006198 <UART_SetConfig+0x594>)
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006100:	e00d      	b.n	800611e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006102:	f7fd ff5b 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8006106:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006108:	e009      	b.n	800611e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006110:	e005      	b.n	800611e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800611c:	bf00      	nop
    }

    if (pclk != 0U)
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d021      	beq.n	8006168 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <UART_SetConfig+0x590>)
 800612a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800612e:	461a      	mov	r2, r3
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	fbb3 f2f2 	udiv	r2, r3, r2
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	441a      	add	r2, r3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	d909      	bls.n	8006162 <UART_SetConfig+0x55e>
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d205      	bcs.n	8006162 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	b29a      	uxth	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	e002      	b.n	8006168 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2201      	movs	r2, #1
 800616c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2201      	movs	r2, #1
 8006174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2200      	movs	r2, #0
 800617c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2200      	movs	r2, #0
 8006182:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006184:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006188:	4618      	mov	r0, r3
 800618a:	3730      	adds	r7, #48	; 0x30
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006192:	bf00      	nop
 8006194:	080070b8 	.word	0x080070b8
 8006198:	00f42400 	.word	0x00f42400

0800619c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629a:	d10a      	bne.n	80062b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f0:	f7fb fa2e 	bl	8001750 <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d10e      	bne.n	8006322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f82f 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e025      	b.n	800636e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b04      	cmp	r3, #4
 800632e:	d10e      	bne.n	800634e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f819 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e00f      	b.n	800636e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b09c      	sub	sp, #112	; 0x70
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006386:	e0a9      	b.n	80064dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	f000 80a5 	beq.w	80064dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fb f9dd 	bl	8001750 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80063a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d140      	bne.n	800642a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063bc:	667b      	str	r3, [r7, #100]	; 0x64
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	663b      	str	r3, [r7, #96]	; 0x60
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e069      	b.n	80064fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d051      	beq.n	80064dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006446:	d149      	bne.n	80064dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006450:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006466:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
 8006472:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3308      	adds	r3, #8
 800648a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	613b      	str	r3, [r7, #16]
   return(result);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	66bb      	str	r3, [r7, #104]	; 0x68
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064a4:	623a      	str	r2, [r7, #32]
 80064a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	6a3a      	ldr	r2, [r7, #32]
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e010      	b.n	80064fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69da      	ldr	r2, [r3, #28]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4013      	ands	r3, r2
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	f43f af46 	beq.w	8006388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3770      	adds	r7, #112	; 0x70
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_UARTEx_DisableFifoMode+0x16>
 8006518:	2302      	movs	r3, #2
 800651a:	e027      	b.n	800656c <HAL_UARTEx_DisableFifoMode+0x66>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800654a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800658c:	2302      	movs	r3, #2
 800658e:	e02d      	b.n	80065ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2224      	movs	r2, #36	; 0x24
 800659c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f84f 	bl	8006670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006608:	2302      	movs	r3, #2
 800660a:	e02d      	b.n	8006668 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2224      	movs	r2, #36	; 0x24
 8006618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f811 	bl	8006670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800667c:	2b00      	cmp	r3, #0
 800667e:	d108      	bne.n	8006692 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006690:	e031      	b.n	80066f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006692:	2308      	movs	r3, #8
 8006694:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006696:	2308      	movs	r3, #8
 8006698:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	0e5b      	lsrs	r3, r3, #25
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	0f5b      	lsrs	r3, r3, #29
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	7b3a      	ldrb	r2, [r7, #12]
 80066be:	4911      	ldr	r1, [pc, #68]	; (8006704 <UARTEx_SetNbDataToProcess+0x94>)
 80066c0:	5c8a      	ldrb	r2, [r1, r2]
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066c6:	7b3a      	ldrb	r2, [r7, #12]
 80066c8:	490f      	ldr	r1, [pc, #60]	; (8006708 <UARTEx_SetNbDataToProcess+0x98>)
 80066ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	7b7a      	ldrb	r2, [r7, #13]
 80066dc:	4909      	ldr	r1, [pc, #36]	; (8006704 <UARTEx_SetNbDataToProcess+0x94>)
 80066de:	5c8a      	ldrb	r2, [r1, r2]
 80066e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066e4:	7b7a      	ldrb	r2, [r7, #13]
 80066e6:	4908      	ldr	r1, [pc, #32]	; (8006708 <UARTEx_SetNbDataToProcess+0x98>)
 80066e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	080070d0 	.word	0x080070d0
 8006708:	080070d8 	.word	0x080070d8

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	2000000c 	.word	0x2000000c

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f000 fca2 	bl	8007074 <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	0800711c 	.word	0x0800711c
 8006754:	0800711c 	.word	0x0800711c
 8006758:	0800711c 	.word	0x0800711c
 800675c:	08007120 	.word	0x08007120

08006760 <memset>:
 8006760:	4402      	add	r2, r0
 8006762:	4603      	mov	r3, r0
 8006764:	4293      	cmp	r3, r2
 8006766:	d100      	bne.n	800676a <memset+0xa>
 8006768:	4770      	bx	lr
 800676a:	f803 1b01 	strb.w	r1, [r3], #1
 800676e:	e7f9      	b.n	8006764 <memset+0x4>

08006770 <sniprintf>:
 8006770:	b40c      	push	{r2, r3}
 8006772:	b530      	push	{r4, r5, lr}
 8006774:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <sniprintf+0x64>)
 8006776:	1e0c      	subs	r4, r1, #0
 8006778:	681d      	ldr	r5, [r3, #0]
 800677a:	b09d      	sub	sp, #116	; 0x74
 800677c:	da08      	bge.n	8006790 <sniprintf+0x20>
 800677e:	238b      	movs	r3, #139	; 0x8b
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	b01d      	add	sp, #116	; 0x74
 8006788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800678c:	b002      	add	sp, #8
 800678e:	4770      	bx	lr
 8006790:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006794:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006798:	bf14      	ite	ne
 800679a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800679e:	4623      	moveq	r3, r4
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067a8:	9002      	str	r0, [sp, #8]
 80067aa:	9006      	str	r0, [sp, #24]
 80067ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067b2:	ab21      	add	r3, sp, #132	; 0x84
 80067b4:	a902      	add	r1, sp, #8
 80067b6:	4628      	mov	r0, r5
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	f000 f869 	bl	8006890 <_svfiprintf_r>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	bfbc      	itt	lt
 80067c2:	238b      	movlt	r3, #139	; 0x8b
 80067c4:	602b      	strlt	r3, [r5, #0]
 80067c6:	2c00      	cmp	r4, #0
 80067c8:	d0dd      	beq.n	8006786 <sniprintf+0x16>
 80067ca:	9b02      	ldr	r3, [sp, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e7d9      	b.n	8006786 <sniprintf+0x16>
 80067d2:	bf00      	nop
 80067d4:	2000000c 	.word	0x2000000c

080067d8 <__ssputs_r>:
 80067d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	688e      	ldr	r6, [r1, #8]
 80067de:	429e      	cmp	r6, r3
 80067e0:	4682      	mov	sl, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	4690      	mov	r8, r2
 80067e6:	461f      	mov	r7, r3
 80067e8:	d838      	bhi.n	800685c <__ssputs_r+0x84>
 80067ea:	898a      	ldrh	r2, [r1, #12]
 80067ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067f0:	d032      	beq.n	8006858 <__ssputs_r+0x80>
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	6909      	ldr	r1, [r1, #16]
 80067f6:	eba5 0901 	sub.w	r9, r5, r1
 80067fa:	6965      	ldr	r5, [r4, #20]
 80067fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006804:	3301      	adds	r3, #1
 8006806:	444b      	add	r3, r9
 8006808:	106d      	asrs	r5, r5, #1
 800680a:	429d      	cmp	r5, r3
 800680c:	bf38      	it	cc
 800680e:	461d      	movcc	r5, r3
 8006810:	0553      	lsls	r3, r2, #21
 8006812:	d531      	bpl.n	8006878 <__ssputs_r+0xa0>
 8006814:	4629      	mov	r1, r5
 8006816:	f000 fb63 	bl	8006ee0 <_malloc_r>
 800681a:	4606      	mov	r6, r0
 800681c:	b950      	cbnz	r0, 8006834 <__ssputs_r+0x5c>
 800681e:	230c      	movs	r3, #12
 8006820:	f8ca 3000 	str.w	r3, [sl]
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006834:	6921      	ldr	r1, [r4, #16]
 8006836:	464a      	mov	r2, r9
 8006838:	f000 fabe 	bl	8006db8 <memcpy>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	6126      	str	r6, [r4, #16]
 800684a:	6165      	str	r5, [r4, #20]
 800684c:	444e      	add	r6, r9
 800684e:	eba5 0509 	sub.w	r5, r5, r9
 8006852:	6026      	str	r6, [r4, #0]
 8006854:	60a5      	str	r5, [r4, #8]
 8006856:	463e      	mov	r6, r7
 8006858:	42be      	cmp	r6, r7
 800685a:	d900      	bls.n	800685e <__ssputs_r+0x86>
 800685c:	463e      	mov	r6, r7
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	4632      	mov	r2, r6
 8006862:	4641      	mov	r1, r8
 8006864:	f000 fab6 	bl	8006dd4 <memmove>
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	1b9b      	subs	r3, r3, r6
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	4433      	add	r3, r6
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	2000      	movs	r0, #0
 8006876:	e7db      	b.n	8006830 <__ssputs_r+0x58>
 8006878:	462a      	mov	r2, r5
 800687a:	f000 fba5 	bl	8006fc8 <_realloc_r>
 800687e:	4606      	mov	r6, r0
 8006880:	2800      	cmp	r0, #0
 8006882:	d1e1      	bne.n	8006848 <__ssputs_r+0x70>
 8006884:	6921      	ldr	r1, [r4, #16]
 8006886:	4650      	mov	r0, sl
 8006888:	f000 fabe 	bl	8006e08 <_free_r>
 800688c:	e7c7      	b.n	800681e <__ssputs_r+0x46>
	...

08006890 <_svfiprintf_r>:
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	4698      	mov	r8, r3
 8006896:	898b      	ldrh	r3, [r1, #12]
 8006898:	061b      	lsls	r3, r3, #24
 800689a:	b09d      	sub	sp, #116	; 0x74
 800689c:	4607      	mov	r7, r0
 800689e:	460d      	mov	r5, r1
 80068a0:	4614      	mov	r4, r2
 80068a2:	d50e      	bpl.n	80068c2 <_svfiprintf_r+0x32>
 80068a4:	690b      	ldr	r3, [r1, #16]
 80068a6:	b963      	cbnz	r3, 80068c2 <_svfiprintf_r+0x32>
 80068a8:	2140      	movs	r1, #64	; 0x40
 80068aa:	f000 fb19 	bl	8006ee0 <_malloc_r>
 80068ae:	6028      	str	r0, [r5, #0]
 80068b0:	6128      	str	r0, [r5, #16]
 80068b2:	b920      	cbnz	r0, 80068be <_svfiprintf_r+0x2e>
 80068b4:	230c      	movs	r3, #12
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	e0d1      	b.n	8006a62 <_svfiprintf_r+0x1d2>
 80068be:	2340      	movs	r3, #64	; 0x40
 80068c0:	616b      	str	r3, [r5, #20]
 80068c2:	2300      	movs	r3, #0
 80068c4:	9309      	str	r3, [sp, #36]	; 0x24
 80068c6:	2320      	movs	r3, #32
 80068c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80068d0:	2330      	movs	r3, #48	; 0x30
 80068d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a7c <_svfiprintf_r+0x1ec>
 80068d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068da:	f04f 0901 	mov.w	r9, #1
 80068de:	4623      	mov	r3, r4
 80068e0:	469a      	mov	sl, r3
 80068e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e6:	b10a      	cbz	r2, 80068ec <_svfiprintf_r+0x5c>
 80068e8:	2a25      	cmp	r2, #37	; 0x25
 80068ea:	d1f9      	bne.n	80068e0 <_svfiprintf_r+0x50>
 80068ec:	ebba 0b04 	subs.w	fp, sl, r4
 80068f0:	d00b      	beq.n	800690a <_svfiprintf_r+0x7a>
 80068f2:	465b      	mov	r3, fp
 80068f4:	4622      	mov	r2, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ff6d 	bl	80067d8 <__ssputs_r>
 80068fe:	3001      	adds	r0, #1
 8006900:	f000 80aa 	beq.w	8006a58 <_svfiprintf_r+0x1c8>
 8006904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006906:	445a      	add	r2, fp
 8006908:	9209      	str	r2, [sp, #36]	; 0x24
 800690a:	f89a 3000 	ldrb.w	r3, [sl]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80a2 	beq.w	8006a58 <_svfiprintf_r+0x1c8>
 8006914:	2300      	movs	r3, #0
 8006916:	f04f 32ff 	mov.w	r2, #4294967295
 800691a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691e:	f10a 0a01 	add.w	sl, sl, #1
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	9307      	str	r3, [sp, #28]
 8006926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800692a:	931a      	str	r3, [sp, #104]	; 0x68
 800692c:	4654      	mov	r4, sl
 800692e:	2205      	movs	r2, #5
 8006930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006934:	4851      	ldr	r0, [pc, #324]	; (8006a7c <_svfiprintf_r+0x1ec>)
 8006936:	f7f9 fc73 	bl	8000220 <memchr>
 800693a:	9a04      	ldr	r2, [sp, #16]
 800693c:	b9d8      	cbnz	r0, 8006976 <_svfiprintf_r+0xe6>
 800693e:	06d0      	lsls	r0, r2, #27
 8006940:	bf44      	itt	mi
 8006942:	2320      	movmi	r3, #32
 8006944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006948:	0711      	lsls	r1, r2, #28
 800694a:	bf44      	itt	mi
 800694c:	232b      	movmi	r3, #43	; 0x2b
 800694e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006952:	f89a 3000 	ldrb.w	r3, [sl]
 8006956:	2b2a      	cmp	r3, #42	; 0x2a
 8006958:	d015      	beq.n	8006986 <_svfiprintf_r+0xf6>
 800695a:	9a07      	ldr	r2, [sp, #28]
 800695c:	4654      	mov	r4, sl
 800695e:	2000      	movs	r0, #0
 8006960:	f04f 0c0a 	mov.w	ip, #10
 8006964:	4621      	mov	r1, r4
 8006966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800696a:	3b30      	subs	r3, #48	; 0x30
 800696c:	2b09      	cmp	r3, #9
 800696e:	d94e      	bls.n	8006a0e <_svfiprintf_r+0x17e>
 8006970:	b1b0      	cbz	r0, 80069a0 <_svfiprintf_r+0x110>
 8006972:	9207      	str	r2, [sp, #28]
 8006974:	e014      	b.n	80069a0 <_svfiprintf_r+0x110>
 8006976:	eba0 0308 	sub.w	r3, r0, r8
 800697a:	fa09 f303 	lsl.w	r3, r9, r3
 800697e:	4313      	orrs	r3, r2
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	46a2      	mov	sl, r4
 8006984:	e7d2      	b.n	800692c <_svfiprintf_r+0x9c>
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	1d19      	adds	r1, r3, #4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	9103      	str	r1, [sp, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	bfbb      	ittet	lt
 8006992:	425b      	neglt	r3, r3
 8006994:	f042 0202 	orrlt.w	r2, r2, #2
 8006998:	9307      	strge	r3, [sp, #28]
 800699a:	9307      	strlt	r3, [sp, #28]
 800699c:	bfb8      	it	lt
 800699e:	9204      	strlt	r2, [sp, #16]
 80069a0:	7823      	ldrb	r3, [r4, #0]
 80069a2:	2b2e      	cmp	r3, #46	; 0x2e
 80069a4:	d10c      	bne.n	80069c0 <_svfiprintf_r+0x130>
 80069a6:	7863      	ldrb	r3, [r4, #1]
 80069a8:	2b2a      	cmp	r3, #42	; 0x2a
 80069aa:	d135      	bne.n	8006a18 <_svfiprintf_r+0x188>
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	1d1a      	adds	r2, r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	9203      	str	r2, [sp, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bfb8      	it	lt
 80069b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80069bc:	3402      	adds	r4, #2
 80069be:	9305      	str	r3, [sp, #20]
 80069c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a8c <_svfiprintf_r+0x1fc>
 80069c4:	7821      	ldrb	r1, [r4, #0]
 80069c6:	2203      	movs	r2, #3
 80069c8:	4650      	mov	r0, sl
 80069ca:	f7f9 fc29 	bl	8000220 <memchr>
 80069ce:	b140      	cbz	r0, 80069e2 <_svfiprintf_r+0x152>
 80069d0:	2340      	movs	r3, #64	; 0x40
 80069d2:	eba0 000a 	sub.w	r0, r0, sl
 80069d6:	fa03 f000 	lsl.w	r0, r3, r0
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	4303      	orrs	r3, r0
 80069de:	3401      	adds	r4, #1
 80069e0:	9304      	str	r3, [sp, #16]
 80069e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e6:	4826      	ldr	r0, [pc, #152]	; (8006a80 <_svfiprintf_r+0x1f0>)
 80069e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ec:	2206      	movs	r2, #6
 80069ee:	f7f9 fc17 	bl	8000220 <memchr>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d038      	beq.n	8006a68 <_svfiprintf_r+0x1d8>
 80069f6:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <_svfiprintf_r+0x1f4>)
 80069f8:	bb1b      	cbnz	r3, 8006a42 <_svfiprintf_r+0x1b2>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	3307      	adds	r3, #7
 80069fe:	f023 0307 	bic.w	r3, r3, #7
 8006a02:	3308      	adds	r3, #8
 8006a04:	9303      	str	r3, [sp, #12]
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	4433      	add	r3, r6
 8006a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0c:	e767      	b.n	80068de <_svfiprintf_r+0x4e>
 8006a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a12:	460c      	mov	r4, r1
 8006a14:	2001      	movs	r0, #1
 8006a16:	e7a5      	b.n	8006964 <_svfiprintf_r+0xd4>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	3401      	adds	r4, #1
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	f04f 0c0a 	mov.w	ip, #10
 8006a24:	4620      	mov	r0, r4
 8006a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a2a:	3a30      	subs	r2, #48	; 0x30
 8006a2c:	2a09      	cmp	r2, #9
 8006a2e:	d903      	bls.n	8006a38 <_svfiprintf_r+0x1a8>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0c5      	beq.n	80069c0 <_svfiprintf_r+0x130>
 8006a34:	9105      	str	r1, [sp, #20]
 8006a36:	e7c3      	b.n	80069c0 <_svfiprintf_r+0x130>
 8006a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e7f0      	b.n	8006a24 <_svfiprintf_r+0x194>
 8006a42:	ab03      	add	r3, sp, #12
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	462a      	mov	r2, r5
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <_svfiprintf_r+0x1f8>)
 8006a4a:	a904      	add	r1, sp, #16
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f3af 8000 	nop.w
 8006a52:	1c42      	adds	r2, r0, #1
 8006a54:	4606      	mov	r6, r0
 8006a56:	d1d6      	bne.n	8006a06 <_svfiprintf_r+0x176>
 8006a58:	89ab      	ldrh	r3, [r5, #12]
 8006a5a:	065b      	lsls	r3, r3, #25
 8006a5c:	f53f af2c 	bmi.w	80068b8 <_svfiprintf_r+0x28>
 8006a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a62:	b01d      	add	sp, #116	; 0x74
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	ab03      	add	r3, sp, #12
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	462a      	mov	r2, r5
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <_svfiprintf_r+0x1f8>)
 8006a70:	a904      	add	r1, sp, #16
 8006a72:	4638      	mov	r0, r7
 8006a74:	f000 f87a 	bl	8006b6c <_printf_i>
 8006a78:	e7eb      	b.n	8006a52 <_svfiprintf_r+0x1c2>
 8006a7a:	bf00      	nop
 8006a7c:	080070e0 	.word	0x080070e0
 8006a80:	080070ea 	.word	0x080070ea
 8006a84:	00000000 	.word	0x00000000
 8006a88:	080067d9 	.word	0x080067d9
 8006a8c:	080070e6 	.word	0x080070e6

08006a90 <_printf_common>:
 8006a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a94:	4616      	mov	r6, r2
 8006a96:	4699      	mov	r9, r3
 8006a98:	688a      	ldr	r2, [r1, #8]
 8006a9a:	690b      	ldr	r3, [r1, #16]
 8006a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	bfb8      	it	lt
 8006aa4:	4613      	movlt	r3, r2
 8006aa6:	6033      	str	r3, [r6, #0]
 8006aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aac:	4607      	mov	r7, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	b10a      	cbz	r2, 8006ab6 <_printf_common+0x26>
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	6033      	str	r3, [r6, #0]
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	0699      	lsls	r1, r3, #26
 8006aba:	bf42      	ittt	mi
 8006abc:	6833      	ldrmi	r3, [r6, #0]
 8006abe:	3302      	addmi	r3, #2
 8006ac0:	6033      	strmi	r3, [r6, #0]
 8006ac2:	6825      	ldr	r5, [r4, #0]
 8006ac4:	f015 0506 	ands.w	r5, r5, #6
 8006ac8:	d106      	bne.n	8006ad8 <_printf_common+0x48>
 8006aca:	f104 0a19 	add.w	sl, r4, #25
 8006ace:	68e3      	ldr	r3, [r4, #12]
 8006ad0:	6832      	ldr	r2, [r6, #0]
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	42ab      	cmp	r3, r5
 8006ad6:	dc26      	bgt.n	8006b26 <_printf_common+0x96>
 8006ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006adc:	1e13      	subs	r3, r2, #0
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	bf18      	it	ne
 8006ae2:	2301      	movne	r3, #1
 8006ae4:	0692      	lsls	r2, r2, #26
 8006ae6:	d42b      	bmi.n	8006b40 <_printf_common+0xb0>
 8006ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aec:	4649      	mov	r1, r9
 8006aee:	4638      	mov	r0, r7
 8006af0:	47c0      	blx	r8
 8006af2:	3001      	adds	r0, #1
 8006af4:	d01e      	beq.n	8006b34 <_printf_common+0xa4>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	68e5      	ldr	r5, [r4, #12]
 8006afa:	6832      	ldr	r2, [r6, #0]
 8006afc:	f003 0306 	and.w	r3, r3, #6
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	bf08      	it	eq
 8006b04:	1aad      	subeq	r5, r5, r2
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	6922      	ldr	r2, [r4, #16]
 8006b0a:	bf0c      	ite	eq
 8006b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b10:	2500      	movne	r5, #0
 8006b12:	4293      	cmp	r3, r2
 8006b14:	bfc4      	itt	gt
 8006b16:	1a9b      	subgt	r3, r3, r2
 8006b18:	18ed      	addgt	r5, r5, r3
 8006b1a:	2600      	movs	r6, #0
 8006b1c:	341a      	adds	r4, #26
 8006b1e:	42b5      	cmp	r5, r6
 8006b20:	d11a      	bne.n	8006b58 <_printf_common+0xc8>
 8006b22:	2000      	movs	r0, #0
 8006b24:	e008      	b.n	8006b38 <_printf_common+0xa8>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4652      	mov	r2, sl
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	47c0      	blx	r8
 8006b30:	3001      	adds	r0, #1
 8006b32:	d103      	bne.n	8006b3c <_printf_common+0xac>
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	e7c6      	b.n	8006ace <_printf_common+0x3e>
 8006b40:	18e1      	adds	r1, r4, r3
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	2030      	movs	r0, #48	; 0x30
 8006b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b4a:	4422      	add	r2, r4
 8006b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b54:	3302      	adds	r3, #2
 8006b56:	e7c7      	b.n	8006ae8 <_printf_common+0x58>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4638      	mov	r0, r7
 8006b60:	47c0      	blx	r8
 8006b62:	3001      	adds	r0, #1
 8006b64:	d0e6      	beq.n	8006b34 <_printf_common+0xa4>
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7d9      	b.n	8006b1e <_printf_common+0x8e>
	...

08006b6c <_printf_i>:
 8006b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b70:	7e0f      	ldrb	r7, [r1, #24]
 8006b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b74:	2f78      	cmp	r7, #120	; 0x78
 8006b76:	4691      	mov	r9, r2
 8006b78:	4680      	mov	r8, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	469a      	mov	sl, r3
 8006b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b82:	d807      	bhi.n	8006b94 <_printf_i+0x28>
 8006b84:	2f62      	cmp	r7, #98	; 0x62
 8006b86:	d80a      	bhi.n	8006b9e <_printf_i+0x32>
 8006b88:	2f00      	cmp	r7, #0
 8006b8a:	f000 80d8 	beq.w	8006d3e <_printf_i+0x1d2>
 8006b8e:	2f58      	cmp	r7, #88	; 0x58
 8006b90:	f000 80a3 	beq.w	8006cda <_printf_i+0x16e>
 8006b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b9c:	e03a      	b.n	8006c14 <_printf_i+0xa8>
 8006b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ba2:	2b15      	cmp	r3, #21
 8006ba4:	d8f6      	bhi.n	8006b94 <_printf_i+0x28>
 8006ba6:	a101      	add	r1, pc, #4	; (adr r1, 8006bac <_printf_i+0x40>)
 8006ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bac:	08006c05 	.word	0x08006c05
 8006bb0:	08006c19 	.word	0x08006c19
 8006bb4:	08006b95 	.word	0x08006b95
 8006bb8:	08006b95 	.word	0x08006b95
 8006bbc:	08006b95 	.word	0x08006b95
 8006bc0:	08006b95 	.word	0x08006b95
 8006bc4:	08006c19 	.word	0x08006c19
 8006bc8:	08006b95 	.word	0x08006b95
 8006bcc:	08006b95 	.word	0x08006b95
 8006bd0:	08006b95 	.word	0x08006b95
 8006bd4:	08006b95 	.word	0x08006b95
 8006bd8:	08006d25 	.word	0x08006d25
 8006bdc:	08006c49 	.word	0x08006c49
 8006be0:	08006d07 	.word	0x08006d07
 8006be4:	08006b95 	.word	0x08006b95
 8006be8:	08006b95 	.word	0x08006b95
 8006bec:	08006d47 	.word	0x08006d47
 8006bf0:	08006b95 	.word	0x08006b95
 8006bf4:	08006c49 	.word	0x08006c49
 8006bf8:	08006b95 	.word	0x08006b95
 8006bfc:	08006b95 	.word	0x08006b95
 8006c00:	08006d0f 	.word	0x08006d0f
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	1d1a      	adds	r2, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	602a      	str	r2, [r5, #0]
 8006c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0a3      	b.n	8006d60 <_printf_i+0x1f4>
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	6829      	ldr	r1, [r5, #0]
 8006c1c:	0606      	lsls	r6, r0, #24
 8006c1e:	f101 0304 	add.w	r3, r1, #4
 8006c22:	d50a      	bpl.n	8006c3a <_printf_i+0xce>
 8006c24:	680e      	ldr	r6, [r1, #0]
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	2e00      	cmp	r6, #0
 8006c2a:	da03      	bge.n	8006c34 <_printf_i+0xc8>
 8006c2c:	232d      	movs	r3, #45	; 0x2d
 8006c2e:	4276      	negs	r6, r6
 8006c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c34:	485e      	ldr	r0, [pc, #376]	; (8006db0 <_printf_i+0x244>)
 8006c36:	230a      	movs	r3, #10
 8006c38:	e019      	b.n	8006c6e <_printf_i+0x102>
 8006c3a:	680e      	ldr	r6, [r1, #0]
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c42:	bf18      	it	ne
 8006c44:	b236      	sxthne	r6, r6
 8006c46:	e7ef      	b.n	8006c28 <_printf_i+0xbc>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	1d19      	adds	r1, r3, #4
 8006c4e:	6029      	str	r1, [r5, #0]
 8006c50:	0601      	lsls	r1, r0, #24
 8006c52:	d501      	bpl.n	8006c58 <_printf_i+0xec>
 8006c54:	681e      	ldr	r6, [r3, #0]
 8006c56:	e002      	b.n	8006c5e <_printf_i+0xf2>
 8006c58:	0646      	lsls	r6, r0, #25
 8006c5a:	d5fb      	bpl.n	8006c54 <_printf_i+0xe8>
 8006c5c:	881e      	ldrh	r6, [r3, #0]
 8006c5e:	4854      	ldr	r0, [pc, #336]	; (8006db0 <_printf_i+0x244>)
 8006c60:	2f6f      	cmp	r7, #111	; 0x6f
 8006c62:	bf0c      	ite	eq
 8006c64:	2308      	moveq	r3, #8
 8006c66:	230a      	movne	r3, #10
 8006c68:	2100      	movs	r1, #0
 8006c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6e:	6865      	ldr	r5, [r4, #4]
 8006c70:	60a5      	str	r5, [r4, #8]
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	bfa2      	ittt	ge
 8006c76:	6821      	ldrge	r1, [r4, #0]
 8006c78:	f021 0104 	bicge.w	r1, r1, #4
 8006c7c:	6021      	strge	r1, [r4, #0]
 8006c7e:	b90e      	cbnz	r6, 8006c84 <_printf_i+0x118>
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	d04d      	beq.n	8006d20 <_printf_i+0x1b4>
 8006c84:	4615      	mov	r5, r2
 8006c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c8e:	5dc7      	ldrb	r7, [r0, r7]
 8006c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c94:	4637      	mov	r7, r6
 8006c96:	42bb      	cmp	r3, r7
 8006c98:	460e      	mov	r6, r1
 8006c9a:	d9f4      	bls.n	8006c86 <_printf_i+0x11a>
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d10b      	bne.n	8006cb8 <_printf_i+0x14c>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	07de      	lsls	r6, r3, #31
 8006ca4:	d508      	bpl.n	8006cb8 <_printf_i+0x14c>
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	6861      	ldr	r1, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	bfde      	ittt	le
 8006cae:	2330      	movle	r3, #48	; 0x30
 8006cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb8:	1b52      	subs	r2, r2, r5
 8006cba:	6122      	str	r2, [r4, #16]
 8006cbc:	f8cd a000 	str.w	sl, [sp]
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	aa03      	add	r2, sp, #12
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	f7ff fee2 	bl	8006a90 <_printf_common>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d14c      	bne.n	8006d6a <_printf_i+0x1fe>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	b004      	add	sp, #16
 8006cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cda:	4835      	ldr	r0, [pc, #212]	; (8006db0 <_printf_i+0x244>)
 8006cdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ce0:	6829      	ldr	r1, [r5, #0]
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ce8:	6029      	str	r1, [r5, #0]
 8006cea:	061d      	lsls	r5, r3, #24
 8006cec:	d514      	bpl.n	8006d18 <_printf_i+0x1ac>
 8006cee:	07df      	lsls	r7, r3, #31
 8006cf0:	bf44      	itt	mi
 8006cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf6:	6023      	strmi	r3, [r4, #0]
 8006cf8:	b91e      	cbnz	r6, 8006d02 <_printf_i+0x196>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	f023 0320 	bic.w	r3, r3, #32
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	2310      	movs	r3, #16
 8006d04:	e7b0      	b.n	8006c68 <_printf_i+0xfc>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	f043 0320 	orr.w	r3, r3, #32
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	2378      	movs	r3, #120	; 0x78
 8006d10:	4828      	ldr	r0, [pc, #160]	; (8006db4 <_printf_i+0x248>)
 8006d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d16:	e7e3      	b.n	8006ce0 <_printf_i+0x174>
 8006d18:	0659      	lsls	r1, r3, #25
 8006d1a:	bf48      	it	mi
 8006d1c:	b2b6      	uxthmi	r6, r6
 8006d1e:	e7e6      	b.n	8006cee <_printf_i+0x182>
 8006d20:	4615      	mov	r5, r2
 8006d22:	e7bb      	b.n	8006c9c <_printf_i+0x130>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	6826      	ldr	r6, [r4, #0]
 8006d28:	6961      	ldr	r1, [r4, #20]
 8006d2a:	1d18      	adds	r0, r3, #4
 8006d2c:	6028      	str	r0, [r5, #0]
 8006d2e:	0635      	lsls	r5, r6, #24
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	d501      	bpl.n	8006d38 <_printf_i+0x1cc>
 8006d34:	6019      	str	r1, [r3, #0]
 8006d36:	e002      	b.n	8006d3e <_printf_i+0x1d2>
 8006d38:	0670      	lsls	r0, r6, #25
 8006d3a:	d5fb      	bpl.n	8006d34 <_printf_i+0x1c8>
 8006d3c:	8019      	strh	r1, [r3, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	4615      	mov	r5, r2
 8006d44:	e7ba      	b.n	8006cbc <_printf_i+0x150>
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	1d1a      	adds	r2, r3, #4
 8006d4a:	602a      	str	r2, [r5, #0]
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	6862      	ldr	r2, [r4, #4]
 8006d50:	2100      	movs	r1, #0
 8006d52:	4628      	mov	r0, r5
 8006d54:	f7f9 fa64 	bl	8000220 <memchr>
 8006d58:	b108      	cbz	r0, 8006d5e <_printf_i+0x1f2>
 8006d5a:	1b40      	subs	r0, r0, r5
 8006d5c:	6060      	str	r0, [r4, #4]
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	6123      	str	r3, [r4, #16]
 8006d62:	2300      	movs	r3, #0
 8006d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d68:	e7a8      	b.n	8006cbc <_printf_i+0x150>
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	462a      	mov	r2, r5
 8006d6e:	4649      	mov	r1, r9
 8006d70:	4640      	mov	r0, r8
 8006d72:	47d0      	blx	sl
 8006d74:	3001      	adds	r0, #1
 8006d76:	d0ab      	beq.n	8006cd0 <_printf_i+0x164>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	079b      	lsls	r3, r3, #30
 8006d7c:	d413      	bmi.n	8006da6 <_printf_i+0x23a>
 8006d7e:	68e0      	ldr	r0, [r4, #12]
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	4298      	cmp	r0, r3
 8006d84:	bfb8      	it	lt
 8006d86:	4618      	movlt	r0, r3
 8006d88:	e7a4      	b.n	8006cd4 <_printf_i+0x168>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4640      	mov	r0, r8
 8006d92:	47d0      	blx	sl
 8006d94:	3001      	adds	r0, #1
 8006d96:	d09b      	beq.n	8006cd0 <_printf_i+0x164>
 8006d98:	3501      	adds	r5, #1
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	9903      	ldr	r1, [sp, #12]
 8006d9e:	1a5b      	subs	r3, r3, r1
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	dcf2      	bgt.n	8006d8a <_printf_i+0x21e>
 8006da4:	e7eb      	b.n	8006d7e <_printf_i+0x212>
 8006da6:	2500      	movs	r5, #0
 8006da8:	f104 0619 	add.w	r6, r4, #25
 8006dac:	e7f5      	b.n	8006d9a <_printf_i+0x22e>
 8006dae:	bf00      	nop
 8006db0:	080070f1 	.word	0x080070f1
 8006db4:	08007102 	.word	0x08007102

08006db8 <memcpy>:
 8006db8:	440a      	add	r2, r1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc0:	d100      	bne.n	8006dc4 <memcpy+0xc>
 8006dc2:	4770      	bx	lr
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	d1f9      	bne.n	8006dc6 <memcpy+0xe>
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <memmove>:
 8006dd4:	4288      	cmp	r0, r1
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	eb01 0402 	add.w	r4, r1, r2
 8006ddc:	d902      	bls.n	8006de4 <memmove+0x10>
 8006dde:	4284      	cmp	r4, r0
 8006de0:	4623      	mov	r3, r4
 8006de2:	d807      	bhi.n	8006df4 <memmove+0x20>
 8006de4:	1e43      	subs	r3, r0, #1
 8006de6:	42a1      	cmp	r1, r4
 8006de8:	d008      	beq.n	8006dfc <memmove+0x28>
 8006dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006df2:	e7f8      	b.n	8006de6 <memmove+0x12>
 8006df4:	4402      	add	r2, r0
 8006df6:	4601      	mov	r1, r0
 8006df8:	428a      	cmp	r2, r1
 8006dfa:	d100      	bne.n	8006dfe <memmove+0x2a>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e06:	e7f7      	b.n	8006df8 <memmove+0x24>

08006e08 <_free_r>:
 8006e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	d044      	beq.n	8006e98 <_free_r+0x90>
 8006e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e12:	9001      	str	r0, [sp, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f1a1 0404 	sub.w	r4, r1, #4
 8006e1a:	bfb8      	it	lt
 8006e1c:	18e4      	addlt	r4, r4, r3
 8006e1e:	f000 f913 	bl	8007048 <__malloc_lock>
 8006e22:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <_free_r+0x94>)
 8006e24:	9801      	ldr	r0, [sp, #4]
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	b933      	cbnz	r3, 8006e38 <_free_r+0x30>
 8006e2a:	6063      	str	r3, [r4, #4]
 8006e2c:	6014      	str	r4, [r2, #0]
 8006e2e:	b003      	add	sp, #12
 8006e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e34:	f000 b90e 	b.w	8007054 <__malloc_unlock>
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d908      	bls.n	8006e4e <_free_r+0x46>
 8006e3c:	6825      	ldr	r5, [r4, #0]
 8006e3e:	1961      	adds	r1, r4, r5
 8006e40:	428b      	cmp	r3, r1
 8006e42:	bf01      	itttt	eq
 8006e44:	6819      	ldreq	r1, [r3, #0]
 8006e46:	685b      	ldreq	r3, [r3, #4]
 8006e48:	1949      	addeq	r1, r1, r5
 8006e4a:	6021      	streq	r1, [r4, #0]
 8006e4c:	e7ed      	b.n	8006e2a <_free_r+0x22>
 8006e4e:	461a      	mov	r2, r3
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	b10b      	cbz	r3, 8006e58 <_free_r+0x50>
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	d9fa      	bls.n	8006e4e <_free_r+0x46>
 8006e58:	6811      	ldr	r1, [r2, #0]
 8006e5a:	1855      	adds	r5, r2, r1
 8006e5c:	42a5      	cmp	r5, r4
 8006e5e:	d10b      	bne.n	8006e78 <_free_r+0x70>
 8006e60:	6824      	ldr	r4, [r4, #0]
 8006e62:	4421      	add	r1, r4
 8006e64:	1854      	adds	r4, r2, r1
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	6011      	str	r1, [r2, #0]
 8006e6a:	d1e0      	bne.n	8006e2e <_free_r+0x26>
 8006e6c:	681c      	ldr	r4, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	6053      	str	r3, [r2, #4]
 8006e72:	4421      	add	r1, r4
 8006e74:	6011      	str	r1, [r2, #0]
 8006e76:	e7da      	b.n	8006e2e <_free_r+0x26>
 8006e78:	d902      	bls.n	8006e80 <_free_r+0x78>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	6003      	str	r3, [r0, #0]
 8006e7e:	e7d6      	b.n	8006e2e <_free_r+0x26>
 8006e80:	6825      	ldr	r5, [r4, #0]
 8006e82:	1961      	adds	r1, r4, r5
 8006e84:	428b      	cmp	r3, r1
 8006e86:	bf04      	itt	eq
 8006e88:	6819      	ldreq	r1, [r3, #0]
 8006e8a:	685b      	ldreq	r3, [r3, #4]
 8006e8c:	6063      	str	r3, [r4, #4]
 8006e8e:	bf04      	itt	eq
 8006e90:	1949      	addeq	r1, r1, r5
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	6054      	str	r4, [r2, #4]
 8006e96:	e7ca      	b.n	8006e2e <_free_r+0x26>
 8006e98:	b003      	add	sp, #12
 8006e9a:	bd30      	pop	{r4, r5, pc}
 8006e9c:	200003ac 	.word	0x200003ac

08006ea0 <sbrk_aligned>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4e0e      	ldr	r6, [pc, #56]	; (8006edc <sbrk_aligned+0x3c>)
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	6831      	ldr	r1, [r6, #0]
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	b911      	cbnz	r1, 8006eb2 <sbrk_aligned+0x12>
 8006eac:	f000 f8bc 	bl	8007028 <_sbrk_r>
 8006eb0:	6030      	str	r0, [r6, #0]
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f000 f8b7 	bl	8007028 <_sbrk_r>
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	d00a      	beq.n	8006ed4 <sbrk_aligned+0x34>
 8006ebe:	1cc4      	adds	r4, r0, #3
 8006ec0:	f024 0403 	bic.w	r4, r4, #3
 8006ec4:	42a0      	cmp	r0, r4
 8006ec6:	d007      	beq.n	8006ed8 <sbrk_aligned+0x38>
 8006ec8:	1a21      	subs	r1, r4, r0
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 f8ac 	bl	8007028 <_sbrk_r>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d101      	bne.n	8006ed8 <sbrk_aligned+0x38>
 8006ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ed8:	4620      	mov	r0, r4
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	200003b0 	.word	0x200003b0

08006ee0 <_malloc_r>:
 8006ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee4:	1ccd      	adds	r5, r1, #3
 8006ee6:	f025 0503 	bic.w	r5, r5, #3
 8006eea:	3508      	adds	r5, #8
 8006eec:	2d0c      	cmp	r5, #12
 8006eee:	bf38      	it	cc
 8006ef0:	250c      	movcc	r5, #12
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	db01      	blt.n	8006efc <_malloc_r+0x1c>
 8006ef8:	42a9      	cmp	r1, r5
 8006efa:	d905      	bls.n	8006f08 <_malloc_r+0x28>
 8006efc:	230c      	movs	r3, #12
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	2600      	movs	r6, #0
 8006f02:	4630      	mov	r0, r6
 8006f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f08:	4e2e      	ldr	r6, [pc, #184]	; (8006fc4 <_malloc_r+0xe4>)
 8006f0a:	f000 f89d 	bl	8007048 <__malloc_lock>
 8006f0e:	6833      	ldr	r3, [r6, #0]
 8006f10:	461c      	mov	r4, r3
 8006f12:	bb34      	cbnz	r4, 8006f62 <_malloc_r+0x82>
 8006f14:	4629      	mov	r1, r5
 8006f16:	4638      	mov	r0, r7
 8006f18:	f7ff ffc2 	bl	8006ea0 <sbrk_aligned>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	4604      	mov	r4, r0
 8006f20:	d14d      	bne.n	8006fbe <_malloc_r+0xde>
 8006f22:	6834      	ldr	r4, [r6, #0]
 8006f24:	4626      	mov	r6, r4
 8006f26:	2e00      	cmp	r6, #0
 8006f28:	d140      	bne.n	8006fac <_malloc_r+0xcc>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4638      	mov	r0, r7
 8006f30:	eb04 0803 	add.w	r8, r4, r3
 8006f34:	f000 f878 	bl	8007028 <_sbrk_r>
 8006f38:	4580      	cmp	r8, r0
 8006f3a:	d13a      	bne.n	8006fb2 <_malloc_r+0xd2>
 8006f3c:	6821      	ldr	r1, [r4, #0]
 8006f3e:	3503      	adds	r5, #3
 8006f40:	1a6d      	subs	r5, r5, r1
 8006f42:	f025 0503 	bic.w	r5, r5, #3
 8006f46:	3508      	adds	r5, #8
 8006f48:	2d0c      	cmp	r5, #12
 8006f4a:	bf38      	it	cc
 8006f4c:	250c      	movcc	r5, #12
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff ffa5 	bl	8006ea0 <sbrk_aligned>
 8006f56:	3001      	adds	r0, #1
 8006f58:	d02b      	beq.n	8006fb2 <_malloc_r+0xd2>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	442b      	add	r3, r5
 8006f5e:	6023      	str	r3, [r4, #0]
 8006f60:	e00e      	b.n	8006f80 <_malloc_r+0xa0>
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	1b52      	subs	r2, r2, r5
 8006f66:	d41e      	bmi.n	8006fa6 <_malloc_r+0xc6>
 8006f68:	2a0b      	cmp	r2, #11
 8006f6a:	d916      	bls.n	8006f9a <_malloc_r+0xba>
 8006f6c:	1961      	adds	r1, r4, r5
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	6025      	str	r5, [r4, #0]
 8006f72:	bf18      	it	ne
 8006f74:	6059      	strne	r1, [r3, #4]
 8006f76:	6863      	ldr	r3, [r4, #4]
 8006f78:	bf08      	it	eq
 8006f7a:	6031      	streq	r1, [r6, #0]
 8006f7c:	5162      	str	r2, [r4, r5]
 8006f7e:	604b      	str	r3, [r1, #4]
 8006f80:	4638      	mov	r0, r7
 8006f82:	f104 060b 	add.w	r6, r4, #11
 8006f86:	f000 f865 	bl	8007054 <__malloc_unlock>
 8006f8a:	f026 0607 	bic.w	r6, r6, #7
 8006f8e:	1d23      	adds	r3, r4, #4
 8006f90:	1af2      	subs	r2, r6, r3
 8006f92:	d0b6      	beq.n	8006f02 <_malloc_r+0x22>
 8006f94:	1b9b      	subs	r3, r3, r6
 8006f96:	50a3      	str	r3, [r4, r2]
 8006f98:	e7b3      	b.n	8006f02 <_malloc_r+0x22>
 8006f9a:	6862      	ldr	r2, [r4, #4]
 8006f9c:	42a3      	cmp	r3, r4
 8006f9e:	bf0c      	ite	eq
 8006fa0:	6032      	streq	r2, [r6, #0]
 8006fa2:	605a      	strne	r2, [r3, #4]
 8006fa4:	e7ec      	b.n	8006f80 <_malloc_r+0xa0>
 8006fa6:	4623      	mov	r3, r4
 8006fa8:	6864      	ldr	r4, [r4, #4]
 8006faa:	e7b2      	b.n	8006f12 <_malloc_r+0x32>
 8006fac:	4634      	mov	r4, r6
 8006fae:	6876      	ldr	r6, [r6, #4]
 8006fb0:	e7b9      	b.n	8006f26 <_malloc_r+0x46>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	f000 f84c 	bl	8007054 <__malloc_unlock>
 8006fbc:	e7a1      	b.n	8006f02 <_malloc_r+0x22>
 8006fbe:	6025      	str	r5, [r4, #0]
 8006fc0:	e7de      	b.n	8006f80 <_malloc_r+0xa0>
 8006fc2:	bf00      	nop
 8006fc4:	200003ac 	.word	0x200003ac

08006fc8 <_realloc_r>:
 8006fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4614      	mov	r4, r2
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	b921      	cbnz	r1, 8006fde <_realloc_r+0x16>
 8006fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd8:	4611      	mov	r1, r2
 8006fda:	f7ff bf81 	b.w	8006ee0 <_malloc_r>
 8006fde:	b92a      	cbnz	r2, 8006fec <_realloc_r+0x24>
 8006fe0:	f7ff ff12 	bl	8006e08 <_free_r>
 8006fe4:	4625      	mov	r5, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fec:	f000 f838 	bl	8007060 <_malloc_usable_size_r>
 8006ff0:	4284      	cmp	r4, r0
 8006ff2:	4607      	mov	r7, r0
 8006ff4:	d802      	bhi.n	8006ffc <_realloc_r+0x34>
 8006ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ffa:	d812      	bhi.n	8007022 <_realloc_r+0x5a>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4640      	mov	r0, r8
 8007000:	f7ff ff6e 	bl	8006ee0 <_malloc_r>
 8007004:	4605      	mov	r5, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d0ed      	beq.n	8006fe6 <_realloc_r+0x1e>
 800700a:	42bc      	cmp	r4, r7
 800700c:	4622      	mov	r2, r4
 800700e:	4631      	mov	r1, r6
 8007010:	bf28      	it	cs
 8007012:	463a      	movcs	r2, r7
 8007014:	f7ff fed0 	bl	8006db8 <memcpy>
 8007018:	4631      	mov	r1, r6
 800701a:	4640      	mov	r0, r8
 800701c:	f7ff fef4 	bl	8006e08 <_free_r>
 8007020:	e7e1      	b.n	8006fe6 <_realloc_r+0x1e>
 8007022:	4635      	mov	r5, r6
 8007024:	e7df      	b.n	8006fe6 <_realloc_r+0x1e>
	...

08007028 <_sbrk_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_sbrk_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7fa fab6 	bl	80015a4 <_sbrk>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_sbrk_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_sbrk_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	200003b4 	.word	0x200003b4

08007048 <__malloc_lock>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__malloc_lock+0x8>)
 800704a:	f000 b811 	b.w	8007070 <__retarget_lock_acquire_recursive>
 800704e:	bf00      	nop
 8007050:	200003b8 	.word	0x200003b8

08007054 <__malloc_unlock>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__malloc_unlock+0x8>)
 8007056:	f000 b80c 	b.w	8007072 <__retarget_lock_release_recursive>
 800705a:	bf00      	nop
 800705c:	200003b8 	.word	0x200003b8

08007060 <_malloc_usable_size_r>:
 8007060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007064:	1f18      	subs	r0, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfbc      	itt	lt
 800706a:	580b      	ldrlt	r3, [r1, r0]
 800706c:	18c0      	addlt	r0, r0, r3
 800706e:	4770      	bx	lr

08007070 <__retarget_lock_acquire_recursive>:
 8007070:	4770      	bx	lr

08007072 <__retarget_lock_release_recursive>:
 8007072:	4770      	bx	lr

08007074 <_init>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

08007080 <_fini>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr

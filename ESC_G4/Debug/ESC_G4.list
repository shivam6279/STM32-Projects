
ESC_G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002810  08002810  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002810  08002810  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002810  08002810  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08002824  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002824  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd8c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0b  00000000  00000000  0002cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee35  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5f5  00000000  00000000  0004ef85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d54d7  00000000  00000000  0005c57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131a51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e4  00000000  00000000  00131aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080027e8 	.word	0x080027e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080027e8 	.word	0x080027e8

08000218 <main>:
  * @retval int
  */
volatile uint16_t val1[2], val2[2];

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb5c 	bl	80008da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8e3 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9d9 	bl	80005dc <MX_GPIO_Init>
//  MX_DMA_Init();
//  MX_ADC1_Init();
//  MX_ADC2_Init();
  MX_TIM1_Init();
 800022a:	f000 f92b 	bl	8000484 <MX_TIM1_Init>
// 		c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val1[0], val1[1], val2[0], val2[1]);
// 		HAL_UART_Transmit(&huart2, temp, c, 100);
// 		HAL_Delay(25);
// 	}

 	unsigned int t = 5, p = 120;
 800022e:	2305      	movs	r3, #5
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	2378      	movs	r3, #120	; 0x78
 8000234:	603b      	str	r3, [r7, #0]
 	while (1) {
 		TIM1->CCER |= TIM_CCER_CC1NP;
 8000236:	4b6c      	ldr	r3, [pc, #432]	; (80003e8 <main+0x1d0>)
 8000238:	6a1b      	ldr	r3, [r3, #32]
 800023a:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <main+0x1d0>)
 800023c:	f043 0308 	orr.w	r3, r3, #8
 8000240:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000242:	4b69      	ldr	r3, [pc, #420]	; (80003e8 <main+0x1d0>)
 8000244:	6a1b      	ldr	r3, [r3, #32]
 8000246:	4a68      	ldr	r2, [pc, #416]	; (80003e8 <main+0x1d0>)
 8000248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800024c:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 800024e:	4b66      	ldr	r3, [pc, #408]	; (80003e8 <main+0x1d0>)
 8000250:	6a1b      	ldr	r3, [r3, #32]
 8000252:	4a65      	ldr	r2, [pc, #404]	; (80003e8 <main+0x1d0>)
 8000254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000258:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 800025a:	4b63      	ldr	r3, [pc, #396]	; (80003e8 <main+0x1d0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	4a62      	ldr	r2, [pc, #392]	; (80003e8 <main+0x1d0>)
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 8000266:	4b60      	ldr	r3, [pc, #384]	; (80003e8 <main+0x1d0>)
 8000268:	2200      	movs	r2, #0
 800026a:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = p;
 800026c:	4a5e      	ldr	r2, [pc, #376]	; (80003e8 <main+0x1d0>)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	6393      	str	r3, [r2, #56]	; 0x38
 		TIM1->CCR3 = 0;
 8000272:	4b5d      	ldr	r3, [pc, #372]	; (80003e8 <main+0x1d0>)
 8000274:	2200      	movs	r2, #0
 8000276:	63da      	str	r2, [r3, #60]	; 0x3c
//			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
//			c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val1[0], val1[1], val2[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
//			HAL_Delay(1);
//		}
 		HAL_Delay(t);
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f000 fb9f 	bl	80009bc <HAL_Delay>

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 800027e:	4b5a      	ldr	r3, [pc, #360]	; (80003e8 <main+0x1d0>)
 8000280:	6a1b      	ldr	r3, [r3, #32]
 8000282:	4a59      	ldr	r2, [pc, #356]	; (80003e8 <main+0x1d0>)
 8000284:	f023 0308 	bic.w	r3, r3, #8
 8000288:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 800028a:	4b57      	ldr	r3, [pc, #348]	; (80003e8 <main+0x1d0>)
 800028c:	6a1b      	ldr	r3, [r3, #32]
 800028e:	4a56      	ldr	r2, [pc, #344]	; (80003e8 <main+0x1d0>)
 8000290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000294:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC3NP;
 8000296:	4b54      	ldr	r3, [pc, #336]	; (80003e8 <main+0x1d0>)
 8000298:	6a1b      	ldr	r3, [r3, #32]
 800029a:	4a53      	ldr	r2, [pc, #332]	; (80003e8 <main+0x1d0>)
 800029c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002a0:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80002a2:	4b51      	ldr	r3, [pc, #324]	; (80003e8 <main+0x1d0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a50      	ldr	r2, [pc, #320]	; (80003e8 <main+0x1d0>)
 80002a8:	f043 0320 	orr.w	r3, r3, #32
 80002ac:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80002ae:	4b4e      	ldr	r3, [pc, #312]	; (80003e8 <main+0x1d0>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = p;
 80002b4:	4a4c      	ldr	r2, [pc, #304]	; (80003e8 <main+0x1d0>)
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	6393      	str	r3, [r2, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80002ba:	4b4b      	ldr	r3, [pc, #300]	; (80003e8 <main+0x1d0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	63da      	str	r2, [r3, #60]	; 0x3c
//			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
//			c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val1[0], val1[1], val2[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
//			HAL_Delay(1);
//		}
 		HAL_Delay(t);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f000 fb7b 	bl	80009bc <HAL_Delay>

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 80002c6:	4b48      	ldr	r3, [pc, #288]	; (80003e8 <main+0x1d0>)
 80002c8:	6a1b      	ldr	r3, [r3, #32]
 80002ca:	4a47      	ldr	r2, [pc, #284]	; (80003e8 <main+0x1d0>)
 80002cc:	f023 0308 	bic.w	r3, r3, #8
 80002d0:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC2NP;
 80002d2:	4b45      	ldr	r3, [pc, #276]	; (80003e8 <main+0x1d0>)
 80002d4:	6a1b      	ldr	r3, [r3, #32]
 80002d6:	4a44      	ldr	r2, [pc, #272]	; (80003e8 <main+0x1d0>)
 80002d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002dc:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80002de:	4b42      	ldr	r3, [pc, #264]	; (80003e8 <main+0x1d0>)
 80002e0:	6a1b      	ldr	r3, [r3, #32]
 80002e2:	4a41      	ldr	r2, [pc, #260]	; (80003e8 <main+0x1d0>)
 80002e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002e8:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80002ea:	4b3f      	ldr	r3, [pc, #252]	; (80003e8 <main+0x1d0>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a3e      	ldr	r2, [pc, #248]	; (80003e8 <main+0x1d0>)
 80002f0:	f043 0320 	orr.w	r3, r3, #32
 80002f4:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 80002f6:	4b3c      	ldr	r3, [pc, #240]	; (80003e8 <main+0x1d0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80002fc:	4b3a      	ldr	r3, [pc, #232]	; (80003e8 <main+0x1d0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 8000302:	4a39      	ldr	r2, [pc, #228]	; (80003e8 <main+0x1d0>)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	63d3      	str	r3, [r2, #60]	; 0x3c
//			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
//			c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val1[0], val1[1], val2[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
//			HAL_Delay(1);
//		}
 		HAL_Delay(t);
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f000 fb57 	bl	80009bc <HAL_Delay>

 		TIM1->CCER |= TIM_CCER_CC1NP;
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <main+0x1d0>)
 8000310:	6a1b      	ldr	r3, [r3, #32]
 8000312:	4a35      	ldr	r2, [pc, #212]	; (80003e8 <main+0x1d0>)
 8000314:	f043 0308 	orr.w	r3, r3, #8
 8000318:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 800031a:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <main+0x1d0>)
 800031c:	6a1b      	ldr	r3, [r3, #32]
 800031e:	4a32      	ldr	r2, [pc, #200]	; (80003e8 <main+0x1d0>)
 8000320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000324:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000326:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <main+0x1d0>)
 8000328:	6a1b      	ldr	r3, [r3, #32]
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <main+0x1d0>)
 800032c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000330:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 8000332:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <main+0x1d0>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <main+0x1d0>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 800033e:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <main+0x1d0>)
 8000340:	2200      	movs	r2, #0
 8000342:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <main+0x1d0>)
 8000346:	2200      	movs	r2, #0
 8000348:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 800034a:	4a27      	ldr	r2, [pc, #156]	; (80003e8 <main+0x1d0>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	63d3      	str	r3, [r2, #60]	; 0x3c
//			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
//			c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val1[0], val1[1], val2[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
//			HAL_Delay(1);
//		}
 		HAL_Delay(t);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f000 fb33 	bl	80009bc <HAL_Delay>

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000356:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <main+0x1d0>)
 8000358:	6a1b      	ldr	r3, [r3, #32]
 800035a:	4a23      	ldr	r2, [pc, #140]	; (80003e8 <main+0x1d0>)
 800035c:	f023 0308 	bic.w	r3, r3, #8
 8000360:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <main+0x1d0>)
 8000364:	6a1b      	ldr	r3, [r3, #32]
 8000366:	4a20      	ldr	r2, [pc, #128]	; (80003e8 <main+0x1d0>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC3NP;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <main+0x1d0>)
 8000370:	6a1b      	ldr	r3, [r3, #32]
 8000372:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <main+0x1d0>)
 8000374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000378:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <main+0x1d0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <main+0x1d0>)
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = p;
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <main+0x1d0>)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	6353      	str	r3, [r2, #52]	; 0x34
 		TIM1->CCR2 = 0;
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <main+0x1d0>)
 800038e:	2200      	movs	r2, #0
 8000390:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = 0;
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <main+0x1d0>)
 8000394:	2200      	movs	r2, #0
 8000396:	63da      	str	r2, [r3, #60]	; 0x3c
//			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
//			c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val1[0], val1[1], val2[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
//			HAL_Delay(1);
//		}
 		HAL_Delay(t);
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f000 fb0f 	bl	80009bc <HAL_Delay>

 		TIM1->CCER &= ~TIM_CCER_CC1NP;
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <main+0x1d0>)
 80003a0:	6a1b      	ldr	r3, [r3, #32]
 80003a2:	4a11      	ldr	r2, [pc, #68]	; (80003e8 <main+0x1d0>)
 80003a4:	f023 0308 	bic.w	r3, r3, #8
 80003a8:	6213      	str	r3, [r2, #32]
 		TIM1->CCER |= TIM_CCER_CC2NP;
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <main+0x1d0>)
 80003ac:	6a1b      	ldr	r3, [r3, #32]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <main+0x1d0>)
 80003b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b4:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <main+0x1d0>)
 80003b8:	6a1b      	ldr	r3, [r3, #32]
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <main+0x1d0>)
 80003bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003c0:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <main+0x1d0>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <main+0x1d0>)
 80003c8:	f043 0320 	orr.w	r3, r3, #32
 80003cc:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = p;
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <main+0x1d0>)
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	6353      	str	r3, [r2, #52]	; 0x34
 		TIM1->CCR2 = 0;
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <main+0x1d0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = 0;
 80003da:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <main+0x1d0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	63da      	str	r2, [r3, #60]	; 0x3c
//			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)val2, 2);
//			c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val1[0], val1[1], val2[0], val2[1]);
//			HAL_UART_Transmit(&huart2, temp, c, 100);
//			HAL_Delay(1);
//		}
 		HAL_Delay(t);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f000 faeb 	bl	80009bc <HAL_Delay>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 80003e6:	e726      	b.n	8000236 <main+0x1e>
 80003e8:	40012c00 	.word	0x40012c00

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b094      	sub	sp, #80	; 0x50
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2238      	movs	r2, #56	; 0x38
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 f9ec 	bl	80027d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800040e:	2000      	movs	r0, #0
 8000410:	f000 fe0a 	bl	8001028 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000414:	2302      	movs	r3, #2
 8000416:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041e:	2340      	movs	r3, #64	; 0x40
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000422:	2302      	movs	r3, #2
 8000424:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000426:	2302      	movs	r3, #2
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800042a:	2301      	movs	r3, #1
 800042c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 800042e:	2315      	movs	r3, #21
 8000430:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000432:	2302      	movs	r3, #2
 8000434:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000436:	2302      	movs	r3, #2
 8000438:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800043a:	2302      	movs	r3, #2
 800043c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	f107 0318 	add.w	r3, r7, #24
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fe94 	bl	8001170 <HAL_RCC_OscConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800044e:	f000 f90d 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000452:	230f      	movs	r3, #15
 8000454:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000456:	2303      	movs	r3, #3
 8000458:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2104      	movs	r1, #4
 800046a:	4618      	mov	r0, r3
 800046c:	f001 f998 	bl	80017a0 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000476:	f000 f8f9 	bl	800066c <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3750      	adds	r7, #80	; 0x50
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b098      	sub	sp, #96	; 0x60
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000496:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2234      	movs	r2, #52	; 0x34
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 f991 	bl	80027d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b6:	4b47      	ldr	r3, [pc, #284]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004b8:	4a47      	ldr	r2, [pc, #284]	; (80005d8 <MX_TIM1_Init+0x154>)
 80004ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004bc:	4b45      	ldr	r3, [pc, #276]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b44      	ldr	r3, [pc, #272]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80004c8:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80004ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d6:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004e2:	483c      	ldr	r0, [pc, #240]	; (80005d4 <MX_TIM1_Init+0x150>)
 80004e4:	f001 fb40 	bl	8001b68 <HAL_TIM_PWM_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 f8bd 	bl	800066c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004f6:	2300      	movs	r3, #0
 80004f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000502:	4619      	mov	r1, r3
 8000504:	4833      	ldr	r0, [pc, #204]	; (80005d4 <MX_TIM1_Init+0x150>)
 8000506:	f002 f821 	bl	800254c <HAL_TIMEx_MasterConfigSynchronization>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000510:	f000 f8ac 	bl	800066c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000514:	2360      	movs	r3, #96	; 0x60
 8000516:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800051c:	2300      	movs	r3, #0
 800051e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000520:	2300      	movs	r3, #0
 8000522:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000528:	2300      	movs	r3, #0
 800052a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000530:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000534:	2200      	movs	r2, #0
 8000536:	4619      	mov	r1, r3
 8000538:	4826      	ldr	r0, [pc, #152]	; (80005d4 <MX_TIM1_Init+0x150>)
 800053a:	f001 fb6d 	bl	8001c18 <HAL_TIM_PWM_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000544:	f000 f892 	bl	800066c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000548:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800054c:	2204      	movs	r2, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4820      	ldr	r0, [pc, #128]	; (80005d4 <MX_TIM1_Init+0x150>)
 8000552:	f001 fb61 	bl	8001c18 <HAL_TIM_PWM_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800055c:	f000 f886 	bl	800066c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000560:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000564:	2208      	movs	r2, #8
 8000566:	4619      	mov	r1, r3
 8000568:	481a      	ldr	r0, [pc, #104]	; (80005d4 <MX_TIM1_Init+0x150>)
 800056a:	f001 fb55 	bl	8001c18 <HAL_TIM_PWM_ConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000574:	f000 f87a 	bl	800066c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800058c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000590:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800059e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4619      	mov	r1, r3
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <MX_TIM1_Init+0x150>)
 80005b6:	f002 f84b 	bl	8002650 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80005c0:	f000 f854 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <MX_TIM1_Init+0x150>)
 80005c6:	f000 f89b 	bl	8000700 <HAL_TIM_MspPostInit>

}
 80005ca:	bf00      	nop
 80005cc:	3760      	adds	r7, #96	; 0x60
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000e8 	.word	0x200000e8
 80005d8:	40012c00 	.word	0x40012c00

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_GPIO_Init+0x88>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <MX_GPIO_Init+0x88>)
 80005f8:	f043 0320 	orr.w	r3, r3, #32
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_GPIO_Init+0x88>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0320 	and.w	r3, r3, #32
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_GPIO_Init+0x88>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <MX_GPIO_Init+0x88>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_GPIO_Init+0x88>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_GPIO_Init+0x88>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <MX_GPIO_Init+0x88>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_GPIO_Init+0x88>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800063a:	2310      	movs	r3, #16
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_GPIO_Init+0x8c>)
 8000656:	f000 fb65 	bl	8000d24 <HAL_GPIO_Init>

}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	48000400 	.word	0x48000400

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	e7fe      	b.n	8000674 <Error_Handler+0x8>
	...

08000678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6613      	str	r3, [r2, #96]	; 0x60
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	6593      	str	r3, [r2, #88]	; 0x58
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x44>)
 80006a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_TIM_PWM_MspInit+0x38>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d10b      	bne.n	80006ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_TIM_PWM_MspInit+0x3c>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <HAL_TIM_PWM_MspInit+0x3c>)
 80006d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006dc:	6613      	str	r3, [r2, #96]	; 0x60
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_TIM_PWM_MspInit+0x3c>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40012c00 	.word	0x40012c00
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a2e      	ldr	r2, [pc, #184]	; (80007d8 <HAL_TIM_MspPostInit+0xd8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d155      	bne.n	80007ce <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a2d      	ldr	r2, [pc, #180]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a21      	ldr	r2, [pc, #132]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <HAL_TIM_MspPostInit+0xdc>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800077a:	2306      	movs	r3, #6
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <HAL_TIM_MspPostInit+0xe0>)
 8000786:	f000 facd 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800078a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800079c:	2306      	movs	r3, #6
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 fabb 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80007be:	2306      	movs	r3, #6
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <HAL_TIM_MspPostInit+0xe4>)
 80007ca:	f000 faab 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48001400 	.word	0x48001400
 80007e4:	48000400 	.word	0x48000400

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f8a4 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <DMA1_Channel1_IRQHandler+0x10>)
 8000842:	f000 f9c0 	bl	8000bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000028 	.word	0x20000028

08000850 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <DMA1_Channel2_IRQHandler+0x10>)
 8000856:	f000 f9b6 	bl	8000bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000088 	.word	0x20000088

08000864 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800088e:	490e      	ldr	r1, [pc, #56]	; (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a4:	4c0b      	ldr	r4, [pc, #44]	; (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b2:	f7ff ffd7 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f001 ff6b 	bl	8002790 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ba:	f7ff fcad 	bl	8000218 <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008cc:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d4:	20000138 	.word	0x20000138

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>

080008da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f93d 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ea:	200f      	movs	r0, #15
 80008ec:	f000 f80e 	bl	800090c <HAL_InitTick>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e001      	b.n	8000900 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008fc:	f7ff febc 	bl	8000678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000900:	79fb      	ldrb	r3, [r7, #7]

}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_InitTick+0x68>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d022      	beq.n	8000966 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_InitTick+0x6c>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_InitTick+0x68>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800092c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000930:	fbb2 f3f3 	udiv	r3, r2, r3
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f93a 	bl	8000bae <HAL_SYSTICK_Config>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10f      	bne.n	8000960 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d809      	bhi.n	800095a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000946:	2200      	movs	r2, #0
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	f04f 30ff 	mov.w	r0, #4294967295
 800094e:	f000 f914 	bl	8000b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_InitTick+0x70>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	e007      	b.n	800096a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	e004      	b.n	800096a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e001      	b.n	800096a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000008 	.word	0x20000008
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x1c>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x20>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4413      	add	r3, r2
 800098e:	4a03      	ldr	r2, [pc, #12]	; (800099c <HAL_IncTick+0x1c>)
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	20000134 	.word	0x20000134
 80009a0:	20000008 	.word	0x20000008

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000134 	.word	0x20000134

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff ffee 	bl	80009a4 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d004      	beq.n	80009e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_Delay+0x40>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e0:	bf00      	nop
 80009e2:	f7ff ffdf 	bl	80009a4 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d8f7      	bhi.n	80009e2 <HAL_Delay+0x26>
  {
  }
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000008 	.word	0x20000008

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff47 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5e 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff90 	bl	8000ab8 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5f 	bl	8000a64 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb2 	bl	8000b20 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	2204      	movs	r2, #4
 8000be8:	409a      	lsls	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d026      	beq.n	8000c40 <HAL_DMA_IRQHandler+0x7a>
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d021      	beq.n	8000c40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d107      	bne.n	8000c1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0204 	bic.w	r2, r2, #4
 8000c18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f003 021f 	and.w	r2, r3, #31
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	2104      	movs	r1, #4
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d071      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000c3e:	e06c      	b.n	8000d1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	f003 031f 	and.w	r3, r3, #31
 8000c48:	2202      	movs	r2, #2
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d02e      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d029      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0320 	and.w	r3, r3, #32
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10b      	bne.n	8000c84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 020a 	bic.w	r2, r2, #10
 8000c7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	2102      	movs	r1, #2
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d038      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000cb0:	e033      	b.n	8000d1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	2208      	movs	r2, #8
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d02a      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d025      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 020e 	bic.w	r2, r2, #14
 8000cde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
}
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d32:	e15a      	b.n	8000fea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 814c 	beq.w	8000fe4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d005      	beq.n	8000d64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d130      	bne.n	8000dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 0201 	and.w	r2, r3, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d017      	beq.n	8000e02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d123      	bne.n	8000e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	6939      	ldr	r1, [r7, #16]
 8000e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0203 	and.w	r2, r3, #3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 80a6 	beq.w	8000fe4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e98:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <HAL_GPIO_Init+0x2e4>)
 8000e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9c:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <HAL_GPIO_Init+0x2e4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea4:	4b58      	ldr	r3, [pc, #352]	; (8001008 <HAL_GPIO_Init+0x2e4>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb0:	4a56      	ldr	r2, [pc, #344]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eda:	d01f      	beq.n	8000f1c <HAL_GPIO_Init+0x1f8>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4c      	ldr	r2, [pc, #304]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d019      	beq.n	8000f18 <HAL_GPIO_Init+0x1f4>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a4b      	ldr	r2, [pc, #300]	; (8001014 <HAL_GPIO_Init+0x2f0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d013      	beq.n	8000f14 <HAL_GPIO_Init+0x1f0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <HAL_GPIO_Init+0x2f4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d00d      	beq.n	8000f10 <HAL_GPIO_Init+0x1ec>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a49      	ldr	r2, [pc, #292]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d007      	beq.n	8000f0c <HAL_GPIO_Init+0x1e8>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a48      	ldr	r2, [pc, #288]	; (8001020 <HAL_GPIO_Init+0x2fc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d101      	bne.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000f04:	2305      	movs	r3, #5
 8000f06:	e00a      	b.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f08:	2306      	movs	r3, #6
 8000f0a:	e008      	b.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e004      	b.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	f002 0203 	and.w	r2, r2, #3
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2e:	4937      	ldr	r1, [pc, #220]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f60:	4a30      	ldr	r2, [pc, #192]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8a:	4a26      	ldr	r2, [pc, #152]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f47f ae9d 	bne.w	8000d34 <HAL_GPIO_Init+0x10>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800
 8001018:	48000c00 	.word	0x48000c00
 800101c:	48001000 	.word	0x48001000
 8001020:	48001400 	.word	0x48001400
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d141      	bne.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001036:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800103e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001042:	d131      	bne.n	80010a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800104a:	4a46      	ldr	r2, [pc, #280]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800105c:	4a41      	ldr	r2, [pc, #260]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2232      	movs	r2, #50	; 0x32
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a3f      	ldr	r2, [pc, #252]	; (800116c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	0c9b      	lsrs	r3, r3, #18
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800107a:	e002      	b.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3b01      	subs	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800108e:	d102      	bne.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f2      	bne.n	800107c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a2:	d158      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e057      	b.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ae:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010b8:	e04d      	b.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c0:	d141      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ce:	d131      	bne.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e8:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2232      	movs	r2, #50	; 0x32
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0c9b      	lsrs	r3, r3, #18
 8001102:	3301      	adds	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001106:	e002      	b.n	800110e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3b01      	subs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111a:	d102      	bne.n	8001122 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f2      	bne.n	8001108 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112e:	d112      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e011      	b.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001144:	e007      	b.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001154:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40007000 	.word	0x40007000
 8001168:	20000000 	.word	0x20000000
 800116c:	431bde83 	.word	0x431bde83

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e306      	b.n	8001790 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118e:	4b97      	ldr	r3, [pc, #604]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001198:	4b94      	ldr	r3, [pc, #592]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x3e>
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d002      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b8d      	ldr	r3, [pc, #564]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e2e1      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b85      	ldr	r3, [pc, #532]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a84      	ldr	r2, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7b      	ldr	r2, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b78      	ldr	r3, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b75      	ldr	r3, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a74      	ldr	r2, [pc, #464]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fbbc 	bl	80009a4 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fbb8 	bl	80009a4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e2a6      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001242:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fba8 	bl	80009a4 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fba4 	bl	80009a4 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e292      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d075      	beq.n	8001372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x136>
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d002      	beq.n	80012ac <HAL_RCC_OscConfig+0x13c>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d11f      	bne.n	80012ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_OscConfig+0x154>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e265      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	061b      	lsls	r3, r3, #24
 80012d2:	4946      	ldr	r1, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012d8:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fb15 	bl	800090c <HAL_InitTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d043      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e251      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d023      	beq.n	800133c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3c      	ldr	r2, [pc, #240]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fb50 	bl	80009a4 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fb4c 	bl	80009a4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e23a      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	061b      	lsls	r3, r3, #24
 8001334:	492d      	ldr	r1, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
 800133a:	e01a      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fb2c 	bl	80009a4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fb28 	bl	80009a4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e216      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x1e0>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d041      	beq.n	8001402 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d01c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 8001388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138c:	4a17      	ldr	r2, [pc, #92]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fb05 	bl	80009a4 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fb01 	bl	80009a4 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1ef      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ef      	beq.n	800139e <HAL_RCC_OscConfig+0x22e>
 80013be:	e020      	b.n	8001402 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fae8 	bl	80009a4 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d6:	e00d      	b.n	80013f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fae4 	bl	80009a4 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d906      	bls.n	80013f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1d2      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f4:	4b8c      	ldr	r3, [pc, #560]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ea      	bne.n	80013d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80a6 	beq.w	800155c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001414:	4b84      	ldr	r3, [pc, #528]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_OscConfig+0x2b4>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x2b6>
 8001424:	2300      	movs	r3, #0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00d      	beq.n	8001446 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
 8001436:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001446:	4b79      	ldr	r3, [pc, #484]	; (800162c <HAL_RCC_OscConfig+0x4bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x4bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x4bc>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff faa1 	bl	80009a4 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff fa9d 	bl	80009a4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e18b      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001478:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x4bc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_RCC_OscConfig+0x32e>
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001492:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800149c:	e024      	b.n	80014e8 <HAL_RCC_OscConfig+0x378>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d110      	bne.n	80014c8 <HAL_RCC_OscConfig+0x358>
 80014a6:	4b60      	ldr	r3, [pc, #384]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ac:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014bc:	4a5a      	ldr	r2, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c6:	e00f      	b.n	80014e8 <HAL_RCC_OscConfig+0x378>
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ce:	4a56      	ldr	r2, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014de:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d016      	beq.n	800151e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fa58 	bl	80009a4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f6:	e00a      	b.n	800150e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7ff fa54 	bl	80009a4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e140      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150e:	4b46      	ldr	r3, [pc, #280]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ed      	beq.n	80014f8 <HAL_RCC_OscConfig+0x388>
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151e:	f7ff fa41 	bl	80009a4 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fa3d 	bl	80009a4 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e129      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ed      	bne.n	8001526 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800154a:	7ffb      	ldrb	r3, [r7, #31]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d03c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01c      	beq.n	80015aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001576:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fa10 	bl	80009a4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001588:	f7ff fa0c 	bl	80009a4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0fa      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 800159c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ef      	beq.n	8001588 <HAL_RCC_OscConfig+0x418>
 80015a8:	e01b      	b.n	80015e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80015ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff f9f3 	bl	80009a4 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c2:	f7ff f9ef 	bl	80009a4 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0dd      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ef      	bne.n	80015c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80d1 	beq.w	800178e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	f000 808b 	beq.w	8001710 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d15e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_RCC_OscConfig+0x4b8>)
 8001608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800160c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff f9c9 	bl	80009a4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001614:	e00c      	b.n	8001630 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff f9c5 	bl	80009a4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d905      	bls.n	8001630 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0b3      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
 8001628:	40021000 	.word	0x40021000
 800162c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ec      	bne.n	8001616 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <HAL_RCC_OscConfig+0x62c>)
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6a11      	ldr	r1, [r2, #32]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800164c:	3a01      	subs	r2, #1
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	4311      	orrs	r1, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001656:	0212      	lsls	r2, r2, #8
 8001658:	4311      	orrs	r1, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800165e:	0852      	lsrs	r2, r2, #1
 8001660:	3a01      	subs	r2, #1
 8001662:	0552      	lsls	r2, r2, #21
 8001664:	4311      	orrs	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800166a:	0852      	lsrs	r2, r2, #1
 800166c:	3a01      	subs	r2, #1
 800166e:	0652      	lsls	r2, r2, #25
 8001670:	4311      	orrs	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001676:	06d2      	lsls	r2, r2, #27
 8001678:	430a      	orrs	r2, r1
 800167a:	4947      	ldr	r1, [pc, #284]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a44      	ldr	r2, [pc, #272]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 8001686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 8001692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001696:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff f984 	bl	80009a4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff f980 	bl	80009a4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e06e      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x530>
 80016be:	e066      	b.n	800178e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a34      	ldr	r2, [pc, #208]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 80016c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016cc:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a31      	ldr	r2, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 80016d2:	f023 0303 	bic.w	r3, r3, #3
 80016d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 80016de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff f95c 	bl	80009a4 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff f958 	bl	80009a4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e046      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x580>
 800170e:	e03e      	b.n	800178e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e039      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_OscConfig+0x628>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	429a      	cmp	r2, r3
 800172e:	d12c      	bne.n	800178a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d123      	bne.n	800178a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d11b      	bne.n	800178a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d113      	bne.n	800178a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	3b01      	subs	r3, #1
 8001770:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d109      	bne.n	800178a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	019f800c 	.word	0x019f800c

080017a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e11e      	b.n	80019f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b91      	ldr	r3, [pc, #580]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d910      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 020f 	bic.w	r2, r3, #15
 80017ce:	498c      	ldr	r1, [pc, #560]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b8a      	ldr	r3, [pc, #552]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e106      	b.n	80019f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d073      	beq.n	80018dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d129      	bne.n	8001850 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0f4      	b.n	80019f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800180c:	f000 f966 	bl	8001adc <RCC_GetSysClockFreqFromPLLSource>
 8001810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4a7c      	ldr	r2, [pc, #496]	; (8001a08 <HAL_RCC_ClockConfig+0x268>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d93f      	bls.n	800189a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800181a:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800182e:	2b00      	cmp	r3, #0
 8001830:	d033      	beq.n	800189a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001836:	2b00      	cmp	r3, #0
 8001838:	d12f      	bne.n	800189a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800183a:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001842:	4a70      	ldr	r2, [pc, #448]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e024      	b.n	800189a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d107      	bne.n	8001868 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0c6      	b.n	80019f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0be      	b.n	80019f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001878:	f000 f8ce 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 800187c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4a61      	ldr	r2, [pc, #388]	; (8001a08 <HAL_RCC_ClockConfig+0x268>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d909      	bls.n	800189a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800188e:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4957      	ldr	r1, [pc, #348]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ac:	f7ff f87a 	bl	80009a4 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff f876 	bl	80009a4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e095      	b.n	80019f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d023      	beq.n	8001930 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a42      	ldr	r2, [pc, #264]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80018fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001914:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 8001916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4936      	ldr	r1, [pc, #216]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
 800192e:	e008      	b.n	8001942 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b80      	cmp	r3, #128	; 0x80
 8001934:	d105      	bne.n	8001942 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800193c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001940:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d21d      	bcs.n	800198c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 020f 	bic.w	r2, r3, #15
 8001958:	4929      	ldr	r1, [pc, #164]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001960:	f7ff f820 	bl	80009a4 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff f81c 	bl	80009a4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e03b      	b.n	80019f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_ClockConfig+0x260>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d1ed      	bne.n	8001968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4917      	ldr	r1, [pc, #92]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490f      	ldr	r1, [pc, #60]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ca:	f000 f825 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_ClockConfig+0x264>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490c      	ldr	r1, [pc, #48]	; (8001a0c <HAL_RCC_ClockConfig+0x26c>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe ff8c 	bl	800090c <HAL_InitTick>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	04c4b400 	.word	0x04c4b400
 8001a0c:	08002800 	.word	0x08002800
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e047      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e03e      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d136      	bne.n	8001abc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3301      	adds	r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a76:	68d2      	ldr	r2, [r2, #12]
 8001a78:	0a12      	lsrs	r2, r2, #8
 8001a7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
      break;
 8001a84:	e00c      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a90:	68d2      	ldr	r2, [r2, #12]
 8001a92:	0a12      	lsrs	r2, r2, #8
 8001a94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
      break;
 8001a9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0e5b      	lsrs	r3, r3, #25
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	e001      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ac0:	693b      	ldr	r3, [r7, #16]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	00f42400 	.word	0x00f42400
 8001ad8:	007a1200 	.word	0x007a1200

08001adc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d10c      	bne.n	8001b1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b0a:	68d2      	ldr	r2, [r2, #12]
 8001b0c:	0a12      	lsrs	r2, r2, #8
 8001b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
    break;
 8001b18:	e00c      	b.n	8001b34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b24:	68d2      	ldr	r2, [r2, #12]
 8001b26:	0a12      	lsrs	r2, r2, #8
 8001b28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    break;
 8001b32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0e5b      	lsrs	r3, r3, #25
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	00f42400 	.word	0x00f42400

08001b68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e049      	b.n	8001c0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fd96 	bl	80006c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f000 f94a 	bl	8001e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e0ff      	b.n	8001e36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b14      	cmp	r3, #20
 8001c42:	f200 80f0 	bhi.w	8001e26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001ca1 	.word	0x08001ca1
 8001c50:	08001e27 	.word	0x08001e27
 8001c54:	08001e27 	.word	0x08001e27
 8001c58:	08001e27 	.word	0x08001e27
 8001c5c:	08001ce1 	.word	0x08001ce1
 8001c60:	08001e27 	.word	0x08001e27
 8001c64:	08001e27 	.word	0x08001e27
 8001c68:	08001e27 	.word	0x08001e27
 8001c6c:	08001d23 	.word	0x08001d23
 8001c70:	08001e27 	.word	0x08001e27
 8001c74:	08001e27 	.word	0x08001e27
 8001c78:	08001e27 	.word	0x08001e27
 8001c7c:	08001d63 	.word	0x08001d63
 8001c80:	08001e27 	.word	0x08001e27
 8001c84:	08001e27 	.word	0x08001e27
 8001c88:	08001e27 	.word	0x08001e27
 8001c8c:	08001da5 	.word	0x08001da5
 8001c90:	08001e27 	.word	0x08001e27
 8001c94:	08001e27 	.word	0x08001e27
 8001c98:	08001e27 	.word	0x08001e27
 8001c9c:	08001de5 	.word	0x08001de5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f95a 	bl	8001f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0208 	orr.w	r2, r2, #8
 8001cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0204 	bic.w	r2, r2, #4
 8001cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6999      	ldr	r1, [r3, #24]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	619a      	str	r2, [r3, #24]
      break;
 8001cde:	e0a5      	b.n	8001e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f9ca 	bl	8002080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6999      	ldr	r1, [r3, #24]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	021a      	lsls	r2, r3, #8
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	619a      	str	r2, [r3, #24]
      break;
 8001d20:	e084      	b.n	8001e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fa33 	bl	8002194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0208 	orr.w	r2, r2, #8
 8001d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0204 	bic.w	r2, r2, #4
 8001d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69d9      	ldr	r1, [r3, #28]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	61da      	str	r2, [r3, #28]
      break;
 8001d60:	e064      	b.n	8001e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fa9b 	bl	80022a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69d9      	ldr	r1, [r3, #28]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	021a      	lsls	r2, r3, #8
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	61da      	str	r2, [r3, #28]
      break;
 8001da2:	e043      	b.n	8001e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fb04 	bl	80023b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001de2:	e023      	b.n	8001e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fb48 	bl	8002480 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	021a      	lsls	r2, r3, #8
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001e24:	e002      	b.n	8001e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	75fb      	strb	r3, [r7, #23]
      break;
 8001e2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3c      	ldr	r2, [pc, #240]	; (8001f44 <TIM_Base_SetConfig+0x104>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00f      	beq.n	8001e78 <TIM_Base_SetConfig+0x38>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5e:	d00b      	beq.n	8001e78 <TIM_Base_SetConfig+0x38>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a39      	ldr	r2, [pc, #228]	; (8001f48 <TIM_Base_SetConfig+0x108>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <TIM_Base_SetConfig+0x38>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a38      	ldr	r2, [pc, #224]	; (8001f4c <TIM_Base_SetConfig+0x10c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <TIM_Base_SetConfig+0x38>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a37      	ldr	r2, [pc, #220]	; (8001f50 <TIM_Base_SetConfig+0x110>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d108      	bne.n	8001e8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <TIM_Base_SetConfig+0x104>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01b      	beq.n	8001eca <TIM_Base_SetConfig+0x8a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e98:	d017      	beq.n	8001eca <TIM_Base_SetConfig+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <TIM_Base_SetConfig+0x108>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <TIM_Base_SetConfig+0x10c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00f      	beq.n	8001eca <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <TIM_Base_SetConfig+0x110>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <TIM_Base_SetConfig+0x8a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <TIM_Base_SetConfig+0x114>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <TIM_Base_SetConfig+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <TIM_Base_SetConfig+0x118>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d003      	beq.n	8001eca <TIM_Base_SetConfig+0x8a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a25      	ldr	r2, [pc, #148]	; (8001f5c <TIM_Base_SetConfig+0x11c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d108      	bne.n	8001edc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <TIM_Base_SetConfig+0x104>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00f      	beq.n	8001f28 <TIM_Base_SetConfig+0xe8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <TIM_Base_SetConfig+0x110>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0xe8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <TIM_Base_SetConfig+0x114>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0xe8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <TIM_Base_SetConfig+0x118>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0xe8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <TIM_Base_SetConfig+0x11c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d103      	bne.n	8001f30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	615a      	str	r2, [r3, #20]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40013400 	.word	0x40013400
 8001f54:	40014000 	.word	0x40014000
 8001f58:	40014400 	.word	0x40014400
 8001f5c:	40014800 	.word	0x40014800

08001f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f023 0201 	bic.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f023 0302 	bic.w	r3, r3, #2
 8001fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a2c      	ldr	r2, [pc, #176]	; (800206c <TIM_OC1_SetConfig+0x10c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00f      	beq.n	8001fe0 <TIM_OC1_SetConfig+0x80>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <TIM_OC1_SetConfig+0x110>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <TIM_OC1_SetConfig+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <TIM_OC1_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <TIM_OC1_SetConfig+0x80>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a29      	ldr	r2, [pc, #164]	; (8002078 <TIM_OC1_SetConfig+0x118>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_OC1_SetConfig+0x80>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <TIM_OC1_SetConfig+0x11c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d10c      	bne.n	8001ffa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f023 0308 	bic.w	r3, r3, #8
 8001fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <TIM_OC1_SetConfig+0x10c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00f      	beq.n	8002022 <TIM_OC1_SetConfig+0xc2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <TIM_OC1_SetConfig+0x110>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00b      	beq.n	8002022 <TIM_OC1_SetConfig+0xc2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <TIM_OC1_SetConfig+0x114>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <TIM_OC1_SetConfig+0xc2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <TIM_OC1_SetConfig+0x118>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <TIM_OC1_SetConfig+0xc2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <TIM_OC1_SetConfig+0x11c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d111      	bne.n	8002046 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	621a      	str	r2, [r3, #32]
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40013400 	.word	0x40013400
 8002074:	40014000 	.word	0x40014000
 8002078:	40014400 	.word	0x40014400
 800207c:	40014800 	.word	0x40014800

08002080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 0210 	bic.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f023 0320 	bic.w	r3, r3, #32
 80020ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a28      	ldr	r2, [pc, #160]	; (8002180 <TIM_OC2_SetConfig+0x100>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_OC2_SetConfig+0x6c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a27      	ldr	r2, [pc, #156]	; (8002184 <TIM_OC2_SetConfig+0x104>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d10d      	bne.n	8002108 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <TIM_OC2_SetConfig+0x100>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00f      	beq.n	8002130 <TIM_OC2_SetConfig+0xb0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <TIM_OC2_SetConfig+0x104>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00b      	beq.n	8002130 <TIM_OC2_SetConfig+0xb0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <TIM_OC2_SetConfig+0x108>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <TIM_OC2_SetConfig+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <TIM_OC2_SetConfig+0x10c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_OC2_SetConfig+0xb0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a19      	ldr	r2, [pc, #100]	; (8002190 <TIM_OC2_SetConfig+0x110>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d113      	bne.n	8002158 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800213e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	621a      	str	r2, [r3, #32]
}
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40012c00 	.word	0x40012c00
 8002184:	40013400 	.word	0x40013400
 8002188:	40014000 	.word	0x40014000
 800218c:	40014400 	.word	0x40014400
 8002190:	40014800 	.word	0x40014800

08002194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <TIM_OC3_SetConfig+0xfc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_OC3_SetConfig+0x6a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <TIM_OC3_SetConfig+0x100>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10d      	bne.n	800221a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <TIM_OC3_SetConfig+0xfc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00f      	beq.n	8002242 <TIM_OC3_SetConfig+0xae>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <TIM_OC3_SetConfig+0x100>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00b      	beq.n	8002242 <TIM_OC3_SetConfig+0xae>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <TIM_OC3_SetConfig+0x104>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <TIM_OC3_SetConfig+0xae>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a19      	ldr	r2, [pc, #100]	; (800229c <TIM_OC3_SetConfig+0x108>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <TIM_OC3_SetConfig+0xae>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <TIM_OC3_SetConfig+0x10c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d113      	bne.n	800226a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	621a      	str	r2, [r3, #32]
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40013400 	.word	0x40013400
 8002298:	40014000 	.word	0x40014000
 800229c:	40014400 	.word	0x40014400
 80022a0:	40014800 	.word	0x40014800

080022a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	031b      	lsls	r3, r3, #12
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <TIM_OC4_SetConfig+0x100>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_OC4_SetConfig+0x6c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <TIM_OC4_SetConfig+0x104>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d10d      	bne.n	800232c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	031b      	lsls	r3, r3, #12
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800232a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <TIM_OC4_SetConfig+0x100>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00f      	beq.n	8002354 <TIM_OC4_SetConfig+0xb0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <TIM_OC4_SetConfig+0x104>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00b      	beq.n	8002354 <TIM_OC4_SetConfig+0xb0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <TIM_OC4_SetConfig+0x108>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <TIM_OC4_SetConfig+0xb0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <TIM_OC4_SetConfig+0x10c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <TIM_OC4_SetConfig+0xb0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <TIM_OC4_SetConfig+0x110>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d113      	bne.n	800237c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800235a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002362:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	621a      	str	r2, [r3, #32]
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40013400 	.word	0x40013400
 80023ac:	40014000 	.word	0x40014000
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800

080023b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	041b      	lsls	r3, r3, #16
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a17      	ldr	r2, [pc, #92]	; (800246c <TIM_OC5_SetConfig+0xb4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <TIM_OC5_SetConfig+0x7a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a16      	ldr	r2, [pc, #88]	; (8002470 <TIM_OC5_SetConfig+0xb8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_OC5_SetConfig+0x7a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a15      	ldr	r2, [pc, #84]	; (8002474 <TIM_OC5_SetConfig+0xbc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_OC5_SetConfig+0x7a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <TIM_OC5_SetConfig+0xc0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_OC5_SetConfig+0x7a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <TIM_OC5_SetConfig+0xc4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d109      	bne.n	8002446 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	621a      	str	r2, [r3, #32]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40013400 	.word	0x40013400
 8002474:	40014000 	.word	0x40014000
 8002478:	40014400 	.word	0x40014400
 800247c:	40014800 	.word	0x40014800

08002480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	051b      	lsls	r3, r3, #20
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <TIM_OC6_SetConfig+0xb8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00f      	beq.n	80024fc <TIM_OC6_SetConfig+0x7c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <TIM_OC6_SetConfig+0xbc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00b      	beq.n	80024fc <TIM_OC6_SetConfig+0x7c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a16      	ldr	r2, [pc, #88]	; (8002540 <TIM_OC6_SetConfig+0xc0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <TIM_OC6_SetConfig+0x7c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <TIM_OC6_SetConfig+0xc4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_OC6_SetConfig+0x7c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <TIM_OC6_SetConfig+0xc8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d109      	bne.n	8002510 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	621a      	str	r2, [r3, #32]
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40013400 	.word	0x40013400
 8002540:	40014000 	.word	0x40014000
 8002544:	40014400 	.word	0x40014400
 8002548:	40014800 	.word	0x40014800

0800254c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e065      	b.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2c      	ldr	r2, [pc, #176]	; (800263c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800259e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d013      	beq.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a17      	ldr	r2, [pc, #92]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d10c      	bne.n	800261e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800260a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	4313      	orrs	r3, r2
 8002614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40013400 	.word	0x40013400
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800
 800264c:	40014000 	.word	0x40014000

08002650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002668:	2302      	movs	r3, #2
 800266a:	e087      	b.n	800277c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d106      	bne.n	8002708 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d126      	bne.n	800276a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	051b      	lsls	r3, r3, #20
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a0d      	ldr	r2, [pc, #52]	; (800278c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d106      	bne.n	800276a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40013400 	.word	0x40013400

08002790 <__libc_init_array>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	4d0d      	ldr	r5, [pc, #52]	; (80027c8 <__libc_init_array+0x38>)
 8002794:	4c0d      	ldr	r4, [pc, #52]	; (80027cc <__libc_init_array+0x3c>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	2600      	movs	r6, #0
 800279c:	42a6      	cmp	r6, r4
 800279e:	d109      	bne.n	80027b4 <__libc_init_array+0x24>
 80027a0:	4d0b      	ldr	r5, [pc, #44]	; (80027d0 <__libc_init_array+0x40>)
 80027a2:	4c0c      	ldr	r4, [pc, #48]	; (80027d4 <__libc_init_array+0x44>)
 80027a4:	f000 f820 	bl	80027e8 <_init>
 80027a8:	1b64      	subs	r4, r4, r5
 80027aa:	10a4      	asrs	r4, r4, #2
 80027ac:	2600      	movs	r6, #0
 80027ae:	42a6      	cmp	r6, r4
 80027b0:	d105      	bne.n	80027be <__libc_init_array+0x2e>
 80027b2:	bd70      	pop	{r4, r5, r6, pc}
 80027b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b8:	4798      	blx	r3
 80027ba:	3601      	adds	r6, #1
 80027bc:	e7ee      	b.n	800279c <__libc_init_array+0xc>
 80027be:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c2:	4798      	blx	r3
 80027c4:	3601      	adds	r6, #1
 80027c6:	e7f2      	b.n	80027ae <__libc_init_array+0x1e>
 80027c8:	08002810 	.word	0x08002810
 80027cc:	08002810 	.word	0x08002810
 80027d0:	08002810 	.word	0x08002810
 80027d4:	08002814 	.word	0x08002814

080027d8 <memset>:
 80027d8:	4402      	add	r2, r0
 80027da:	4603      	mov	r3, r0
 80027dc:	4293      	cmp	r3, r2
 80027de:	d100      	bne.n	80027e2 <memset+0xa>
 80027e0:	4770      	bx	lr
 80027e2:	f803 1b01 	strb.w	r1, [r3], #1
 80027e6:	e7f9      	b.n	80027dc <memset+0x4>

080027e8 <_init>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	bf00      	nop
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr

080027f4 <_fini>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	bf00      	nop
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr

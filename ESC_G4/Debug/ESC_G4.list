
ESC_G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006178  08006178  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006180  08006180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  08006194  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006194  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017343  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002776  00000000  00000000  0003737f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00039af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f68a  00000000  00000000  0003c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cef  00000000  00000000  0005b87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d739a  00000000  00000000  00071569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e0  00000000  00000000  00148954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006120 	.word	0x08006120

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006120 	.word	0x08006120

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_ADC_ConvCpltCallback>:
  */
volatile uint16_t adc_uvw[5000], adc_x[5000], i_1 = 0, i_2 = 0;
unsigned int p = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <ADC_Select_CH>:

void ADC_Select_CH(unsigned char ch)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	ADC1->CR &= ~ADC_CR_ADEN;
 800053a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 &= 0xFFFFF83F;
 800054a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000554:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= ch << ADC_SQR1_SQ1_Pos ;
 800055a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	0192      	lsls	r2, r2, #6
 8000564:	4611      	mov	r1, r2
 8000566:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800056a:	430b      	orrs	r3, r1
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->CR |= ADC_CR_ADEN;
 800056e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6093      	str	r3, [r2, #8]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <main>:
}

#define LPF 0.4f

int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

	HAL_Init();
 8000596:	f000 fe64 	bl	8001262 <HAL_Init>

	SystemClock_Config();
 800059a:	f000 f86b 	bl	8000674 <SystemClock_Config>

	MX_GPIO_Init();
 800059e:	f000 fb85 	bl	8000cac <MX_GPIO_Init>
	MX_ADC1_Init();
 80005a2:	f000 f8b3 	bl	800070c <MX_ADC1_Init>
	MX_ADC2_Init();
 80005a6:	f000 f91d 	bl	80007e4 <MX_ADC2_Init>
	MX_TIM1_Init();
 80005aa:	f000 f983 	bl	80008b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 80005ae:	f000 fa6f 	bl	8000a90 <MX_TIM2_Init>
	MX_TIM4_Init();
 80005b2:	f000 fae1 	bl	8000b78 <MX_TIM4_Init>
//	MX_TIM6_Init();
	MX_USART2_UART_Init();
 80005b6:	f000 fb2d 	bl	8000c14 <MX_USART2_UART_Init>

//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005ba:	2100      	movs	r1, #0
 80005bc:	4829      	ldr	r0, [pc, #164]	; (8000664 <main+0xd8>)
 80005be:	f003 fda7 	bl	8004110 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4827      	ldr	r0, [pc, #156]	; (8000664 <main+0xd8>)
 80005c6:	f004 fd73 	bl	80050b0 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005ca:	2104      	movs	r1, #4
 80005cc:	4825      	ldr	r0, [pc, #148]	; (8000664 <main+0xd8>)
 80005ce:	f003 fd9f 	bl	8004110 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80005d2:	2104      	movs	r1, #4
 80005d4:	4823      	ldr	r0, [pc, #140]	; (8000664 <main+0xd8>)
 80005d6:	f004 fd6b 	bl	80050b0 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005da:	2108      	movs	r1, #8
 80005dc:	4821      	ldr	r0, [pc, #132]	; (8000664 <main+0xd8>)
 80005de:	f003 fd97 	bl	8004110 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80005e2:	2108      	movs	r1, #8
 80005e4:	481f      	ldr	r0, [pc, #124]	; (8000664 <main+0xd8>)
 80005e6:	f004 fd63 	bl	80050b0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80005ea:	210c      	movs	r1, #12
 80005ec:	481d      	ldr	r0, [pc, #116]	; (8000664 <main+0xd8>)
 80005ee:	f003 fc2d 	bl	8003e4c <HAL_TIM_OC_Start>

	HAL_TIM_Base_Start(&htim1);
 80005f2:	481c      	ldr	r0, [pc, #112]	; (8000664 <main+0xd8>)
 80005f4:	f003 fb66 	bl	8003cc4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <main+0xdc>)
 80005fa:	f003 fb63 	bl	8003cc4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <main+0xe0>)
 8000600:	f003 fb60 	bl	8003cc4 <HAL_TIM_Base_Start>
	//U, V, W:
	//U, V, W, X:

	unsigned int i;
	unsigned char temp[100];
	unsigned int save[5000], save_i = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800060a:	f102 0204 	add.w	r2, r2, #4
 800060e:	6013      	str	r3, [r2, #0]
//		c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val2[0], val1[0], val1[1], val2[1]);
//		HAL_UART_Transmit(&huart2, temp, c, 100);
//		HAL_Delay(2);
//	}

	TIM1->CCR4 = 450;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <main+0xe4>)
 8000612:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000616:	641a      	str	r2, [r3, #64]	; 0x40
	ADC_Select_CH(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ff89 	bl	8000530 <ADC_Select_CH>

//	HAL_ADC_Start_IT(&hadc1);
//	HAL_ADC_Start_IT(&hadc2);

	TIM1->CCER &= ~TIM_CCER_CC1NP;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <main+0xe4>)
 8000620:	6a1b      	ldr	r3, [r3, #32]
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <main+0xe4>)
 8000624:	f023 0308 	bic.w	r3, r3, #8
 8000628:	6213      	str	r3, [r2, #32]
	TIM1->CCER &= ~TIM_CCER_CC2NP;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <main+0xe4>)
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <main+0xe4>)
 8000630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000634:	6213      	str	r3, [r2, #32]
	TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <main+0xe4>)
 8000638:	6a1b      	ldr	r3, [r3, #32]
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0xe4>)
 800063c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000640:	6213      	str	r3, [r2, #32]
	TIM1->EGR |= TIM_EGR_COMG;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0xe4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <main+0xe4>)
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	6153      	str	r3, [r2, #20]
	TIM1->CCR1 = 0; //CH1
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <main+0xe4>)
 8000650:	2200      	movs	r2, #0
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0; //CH2
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <main+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 1000; //CH4
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <main+0xe4>)
 800065c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000660:	63da      	str	r2, [r3, #60]	; 0x3c
	while(1);
 8000662:	e7fe      	b.n	8000662 <main+0xd6>
 8000664:	20000100 	.word	0x20000100
 8000668:	2000014c 	.word	0x2000014c
 800066c:	20000198 	.word	0x20000198
 8000670:	40012c00 	.word	0x40012c00

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2238      	movs	r2, #56	; 0x38
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fd44 	bl	8006110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000696:	2000      	movs	r0, #0
 8000698:	f002 faf4 	bl	8002c84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2340      	movs	r3, #64	; 0x40
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80006b6:	2315      	movs	r3, #21
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fb7e 	bl	8002dcc <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006d6:	f000 fb33 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fe82 	bl	80033fc <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006fe:	f000 fb1f 	bl	8000d40 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2220      	movs	r2, #32
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f005 fcf3 	bl	8006110 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <MX_ADC1_Init+0xd0>)
 800072c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000730:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000734:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_ADC1_Init+0xd0>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_ADC1_Init+0xd0>)
 800074e:	2201      	movs	r2, #1
 8000750:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000754:	2204      	movs	r2, #4
 8000756:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_ADC1_Init+0xd0>)
 800075a:	2200      	movs	r2, #0
 800075c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000760:	2200      	movs	r2, #0
 8000762:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000766:	2201      	movs	r2, #1
 8000768:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_ADC1_Init+0xd0>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000774:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_ADC1_Init+0xd0>)
 800077c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000780:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ADC1_Init+0xd0>)
 800078c:	2200      	movs	r2, #0
 800078e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_ADC1_Init+0xd0>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	4810      	ldr	r0, [pc, #64]	; (80007dc <MX_ADC1_Init+0xd0>)
 800079a:	f000 ffef 	bl	800177c <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80007a4:	f000 facc 	bl	8000d40 <Error_Handler>
//    Error_Handler();
//  }
//
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_ADC1_Init+0xd4>)
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2306      	movs	r3, #6
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b4:	237f      	movs	r3, #127	; 0x7f
 80007b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b8:	2304      	movs	r3, #4
 80007ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_ADC1_Init+0xd0>)
 80007c6:	f001 fb91 	bl	8001eec <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007d0:	f000 fab6 	bl	8000d40 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3730      	adds	r7, #48	; 0x30
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000028 	.word	0x20000028
 80007e0:	04300002 	.word	0x04300002

080007e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2220      	movs	r2, #32
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f005 fc8d 	bl	8006110 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_ADC2_Init+0xc4>)
 80007f8:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_ADC2_Init+0xc8>)
 80007fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_ADC2_Init+0xc4>)
 80007fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000802:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_ADC2_Init+0xc4>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_ADC2_Init+0xc4>)
 800081e:	2204      	movs	r2, #4
 8000820:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000824:	2200      	movs	r2, #0
 8000826:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_ADC2_Init+0xc4>)
 800082a:	2200      	movs	r2, #0
 800082c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000830:	2201      	movs	r2, #1
 8000832:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_ADC2_Init+0xc4>)
 800083e:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000846:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_ADC2_Init+0xc4>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_ADC2_Init+0xc4>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000864:	f000 ff8a 	bl	800177c <HAL_ADC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800086e:	f000 fa67 	bl	8000d40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_ADC2_Init+0xcc>)
 8000874:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000876:	2306      	movs	r3, #6
 8000878:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000882:	2304      	movs	r3, #4
 8000884:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC2_Init+0xc4>)
 8000890:	f001 fb2c 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800089a:	f000 fa51 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000094 	.word	0x20000094
 80008ac:	50000100 	.word	0x50000100
 80008b0:	47520000 	.word	0x47520000

080008b4 <MX_TIM1_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	; 0x70
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2234      	movs	r2, #52	; 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 fc0e 	bl	8006110 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f4:	4b64      	ldr	r3, [pc, #400]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 80008f6:	4a65      	ldr	r2, [pc, #404]	; (8000a8c <MX_TIM1_Init+0x1d8>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008fa:	4b63      	ldr	r3, [pc, #396]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 8000906:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000908:	f641 3258 	movw	r2, #7000	; 0x1b58
 800090c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b5e      	ldr	r3, [pc, #376]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000914:	4b5c      	ldr	r3, [pc, #368]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091a:	4b5b      	ldr	r3, [pc, #364]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000920:	4859      	ldr	r0, [pc, #356]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000922:	f003 f977 	bl	8003c14 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 fa08 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800093a:	4619      	mov	r1, r3
 800093c:	4852      	ldr	r0, [pc, #328]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 800093e:	f003 fe75 	bl	800462c <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000948:	f000 f9fa 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800094c:	484e      	ldr	r0, [pc, #312]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 800094e:	f003 fb7d 	bl	800404c <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000958:	f000 f9f2 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800095c:	484a      	ldr	r0, [pc, #296]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 800095e:	f003 fa13 	bl	8003d88 <HAL_TIM_OC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000968:	f000 f9ea 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800096c:	2370      	movs	r3, #112	; 0x70
 800096e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800097c:	4619      	mov	r1, r3
 800097e:	4842      	ldr	r0, [pc, #264]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000980:	f004 fc4a 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800098a:	f000 f9d9 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4835      	ldr	r0, [pc, #212]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 80009b4:	f003 fd26 	bl	8004404 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80009be:	f000 f9bf 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c6:	2204      	movs	r2, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	482f      	ldr	r0, [pc, #188]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 80009cc:	f003 fd1a 	bl	8004404 <HAL_TIM_PWM_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80009d6:	f000 f9b3 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009de:	2208      	movs	r2, #8
 80009e0:	4619      	mov	r1, r3
 80009e2:	4829      	ldr	r0, [pc, #164]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 80009e4:	f003 fd0e 	bl	8004404 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80009ee:	f000 f9a7 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009f2:	2330      	movs	r3, #48	; 0x30
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009fe:	220c      	movs	r2, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	4821      	ldr	r0, [pc, #132]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000a04:	f003 fc84 	bl	8004310 <HAL_TIM_OC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8000a0e:	f000 f997 	bl	8000d40 <Error_Handler>
  }
  HAL_TIMEx_OC_ConfigPulseOnCompare(&htim1, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000a18:	f004 fd20 	bl	800545c <HAL_TIMEx_OC_ConfigPulseOnCompare>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a2a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8000a38:	2332      	movs	r3, #50	; 0x32
 8000a3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000a6a:	f004 fc57 	bl	800531c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x1c4>
  {
    Error_Handler();
 8000a74:	f000 f964 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM1_Init+0x1d4>)
 8000a7a:	f000 fab3 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3770      	adds	r7, #112	; 0x70
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000100 	.word	0x20000100
 8000a8c:	40012c00 	.word	0x40012c00

08000a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000acc:	22aa      	movs	r2, #170	; 0xaa
 8000ace:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aea:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000aec:	f003 f892 	bl	8003c14 <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 f923 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481b      	ldr	r0, [pc, #108]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000b08:	f003 fd90 	bl	800462c <HAL_TIM_ConfigClockSource>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b12:	f000 f915 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b16:	4817      	ldr	r0, [pc, #92]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000b18:	f003 fa98 	bl	800404c <HAL_TIM_PWM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b22:	f000 f90d 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000b36:	f004 fb6f 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b40:	f000 f8fe 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_TIM2_Init+0xe4>)
 8000b5c:	f003 fc52 	bl	8004404 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b66:	f000 f8eb 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	3738      	adds	r7, #56	; 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000014c 	.word	0x2000014c

08000b78 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <MX_TIM4_Init+0x98>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000b9e:	22aa      	movs	r2, #170	; 0xaa
 8000ba0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bbe:	f003 f829 	bl	8003c14 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000bc8:	f000 f8ba 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bda:	f003 fd27 	bl	800462c <HAL_TIM_ConfigClockSource>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000be4:	f000 f8ac 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000bf6:	f004 fb0f 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 f89e 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000198 	.word	0x20000198
 8000c10:	40000800 	.word	0x40000800

08000c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <MX_USART2_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c5e:	f004 fc5e 	bl	800551e <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f86a 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c70:	f005 f960 	bl	8005f34 <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f861 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c82:	f005 f995 	bl	8005fb0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f858 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c92:	f005 f916 	bl	8005ec2 <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f850 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200001e4 	.word	0x200001e4
 8000ca8:	40004400 	.word	0x40004400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_GPIO_Init+0x8c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <MX_GPIO_Init+0x90>)
 8000d10:	f001 ffa0 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d14:	2310      	movs	r3, #16
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_GPIO_Init+0x90>)
 8000d2c:	f001 fe10 	bl	8002950 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b09e      	sub	sp, #120	; 0x78
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	2244      	movs	r2, #68	; 0x44
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 f9ab 	bl	8006110 <memset>
  if(hadc->Instance==ADC1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc2:	d146      	bne.n	8000e52 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fd2d 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000de0:	f7ff ffae 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <HAL_ADC_MspInit+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a4d      	ldr	r2, [pc, #308]	; (8000f20 <HAL_ADC_MspInit+0x18c>)
 8000dec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dee:	4b4c      	ldr	r3, [pc, #304]	; (8000f20 <HAL_ADC_MspInit+0x18c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d10b      	bne.n	8000e0e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000df6:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a4a      	ldr	r2, [pc, #296]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000dfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000e26:	230b      	movs	r3, #11
 8000e28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f001 fd88 	bl	8002950 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2012      	movs	r0, #18
 8000e46:	f001 fd4e 	bl	80028e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e4a:	2012      	movs	r0, #18
 8000e4c:	f001 fd65 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e50:	e062      	b.n	8000f18 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a34      	ldr	r2, [pc, #208]	; (8000f28 <HAL_ADC_MspInit+0x194>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d15d      	bne.n	8000f18 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e66:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fce1 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8000e78:	f7ff ff62 	bl	8000d40 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e7c:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <HAL_ADC_MspInit+0x18c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <HAL_ADC_MspInit+0x18c>)
 8000e84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <HAL_ADC_MspInit+0x18c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000e94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_ADC_MspInit+0x190>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4810      	ldr	r0, [pc, #64]	; (8000f2c <HAL_ADC_MspInit+0x198>)
 8000eea:	f001 fd31 	bl	8002950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000eee:	2370      	movs	r3, #112	; 0x70
 8000ef0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f001 fd24 	bl	8002950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2012      	movs	r0, #18
 8000f0e:	f001 fcea 	bl	80028e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f12:	2012      	movs	r0, #18
 8000f14:	f001 fd01 	bl	800291a <HAL_NVIC_EnableIRQ>
}
 8000f18:	bf00      	nop
 8000f1a:	3778      	adds	r7, #120	; 0x78
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000274 	.word	0x20000274
 8000f24:	40021000 	.word	0x40021000
 8000f28:	50000100 	.word	0x50000100
 8000f2c:	48001400 	.word	0x48001400

08000f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10c      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f5a:	e034      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d10c      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
}
 8000f7e:	e022      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <HAL_TIM_Base_MspInit+0xac>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10c      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
}
 8000fa2:	e010      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_TIM_Base_MspInit+0xb0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10b      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40012c00 	.word	0x40012c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40000800 	.word	0x40000800
 8000fe0:	40001000 	.word	0x40001000

08000fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <HAL_TIM_MspPostInit+0xd8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d155      	bne.n	80010b2 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0320 	and.w	r3, r3, #32
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <HAL_TIM_MspPostInit+0xdc>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800105e:	2306      	movs	r3, #6
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <HAL_TIM_MspPostInit+0xe0>)
 800106a:	f001 fc71 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800106e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001080:	2306      	movs	r3, #6
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f001 fc5f 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_TIM_MspPostInit+0xe4>)
 80010ae:	f001 fc4f 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48001400 	.word	0x48001400
 80010c8:	48000400 	.word	0x48000400

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	; 0x68
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2244      	movs	r2, #68	; 0x44
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 f80f 	bl	8006110 <memset>
  if(huart->Instance==USART2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_UART_MspInit+0xa8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d137      	bne.n	800116c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fb93 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001114:	f7ff fe14 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_UART_MspInit+0xac>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_UART_MspInit+0xac>)
 800111e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001122:	6593      	str	r3, [r2, #88]	; 0x58
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_MspInit+0xac>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0xac>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_UART_MspInit+0xac>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_MspInit+0xac>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001148:	f248 0304 	movw	r3, #32772	; 0x8004
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115a:	2307      	movs	r3, #7
 800115c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f001 fbf2 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3768      	adds	r7, #104	; 0x68
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40004400 	.word	0x40004400
 8001178:	40021000 	.word	0x40021000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f89e 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <ADC1_2_IRQHandler+0x14>)
 80011d6:	f000 fc5b 	bl	8001a90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <ADC1_2_IRQHandler+0x18>)
 80011dc:	f000 fc58 	bl	8001a90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000028 	.word	0x20000028
 80011e8:	20000094 	.word	0x20000094

080011ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001212:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0b      	ldr	r4, [pc, #44]	; (800125c <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800123a:	f7ff ffd7 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123e:	f004 ff43 	bl	80060c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001242:	f7ff f9a3 	bl	800058c <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   r0, =_estack
 8001248:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001254:	08006188 	.word	0x08006188
  ldr r2, =_sbss
 8001258:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800125c:	2000027c 	.word	0x2000027c

08001260 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <COMP1_2_3_IRQHandler>

08001262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f001 fb2f 	bl	80028d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f80e 	bl	8001294 <HAL_InitTick>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e001      	b.n	8001288 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001284:	f7ff fd62 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001288:	79fb      	ldrb	r3, [r7, #7]

}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_InitTick+0x68>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d022      	beq.n	80012ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_InitTick+0x6c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_InitTick+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fb3a 	bl	8002936 <HAL_SYSTICK_Config>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10f      	bne.n	80012e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	d809      	bhi.n	80012e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ce:	2200      	movs	r2, #0
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	f04f 30ff 	mov.w	r0, #4294967295
 80012d6:	f001 fb06 	bl	80028e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_InitTick+0x70>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e007      	b.n	80012f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e004      	b.n	80012f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e001      	b.n	80012f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x1c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x20>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4413      	add	r3, r2
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_IncTick+0x1c>)
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	20000278 	.word	0x20000278
 8001328:	20000008 	.word	0x20000008

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000278 	.word	0x20000278

08001344 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3360      	adds	r3, #96	; 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LL_ADC_SetOffset+0x44>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	03fff000 	.word	0x03fff000

080013f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3360      	adds	r3, #96	; 0x60
 8001402:	461a      	mov	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3360      	adds	r3, #96	; 0x60
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001456:	b480      	push	{r7}
 8001458:	b087      	sub	sp, #28
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3360      	adds	r3, #96	; 0x60
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	431a      	orrs	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3360      	adds	r3, #96	; 0x60
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	615a      	str	r2, [r3, #20]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800150e:	b480      	push	{r7}
 8001510:	b087      	sub	sp, #28
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3330      	adds	r3, #48	; 0x30
 800151e:	461a      	mov	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	211f      	movs	r1, #31
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0e9b      	lsrs	r3, r3, #26
 8001546:	f003 011f 	and.w	r1, r3, #31
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3314      	adds	r3, #20
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0e5b      	lsrs	r3, r3, #25
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0d1b      	lsrs	r3, r3, #20
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2107      	movs	r1, #7
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	401a      	ands	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0d1b      	lsrs	r3, r3, #20
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d10a      	bne.n	800160e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800160c:	e00a      	b.n	8001624 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161a:	43db      	mvns	r3, r3
 800161c:	401a      	ands	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	407f0000 	.word	0x407f0000

08001634 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 031f 	and.w	r3, r3, #31
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800167c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6093      	str	r3, [r2, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a4:	d101      	bne.n	80016aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016f4:	d101      	bne.n	80016fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <LL_ADC_IsEnabled+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_ADC_IsEnabled+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b04      	cmp	r3, #4
 8001740:	d101      	bne.n	8001746 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b08      	cmp	r3, #8
 8001766:	d101      	bne.n	800176c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e177      	b.n	8001a86 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff faf5 	bl	8000d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff67 	bl	8001690 <LL_ADC_IsDeepPowerDownEnabled>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff4d 	bl	800166c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff82 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff66 	bl	80016b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ec:	4b9c      	ldr	r3, [pc, #624]	; (8001a60 <HAL_ADC_Init+0x2e4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	4a9c      	ldr	r2, [pc, #624]	; (8001a64 <HAL_ADC_Init+0x2e8>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001800:	e002      	b.n	8001808 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff64 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001822:	f043 0210 	orr.w	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff75 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001844:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 8110 	bne.w	8001a74 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 810c 	bne.w	8001a74 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001864:	f043 0202 	orr.w	r2, r3, #2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff49 	bl	8001708 <LL_ADC_IsEnabled>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800187c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001880:	f7ff ff42 	bl	8001708 <LL_ADC_IsEnabled>
 8001884:	4604      	mov	r4, r0
 8001886:	4878      	ldr	r0, [pc, #480]	; (8001a68 <HAL_ADC_Init+0x2ec>)
 8001888:	f7ff ff3e 	bl	8001708 <LL_ADC_IsEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	4323      	orrs	r3, r4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4619      	mov	r1, r3
 800189a:	4874      	ldr	r0, [pc, #464]	; (8001a6c <HAL_ADC_Init+0x2f0>)
 800189c:	f7ff fd52 	bl	8001344 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7f5b      	ldrb	r3, [r3, #29]
 80018a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d106      	bne.n	80018dc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	3b01      	subs	r3, #1
 80018d4:	045b      	lsls	r3, r3, #17
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_ADC_Init+0x2f4>)
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff01 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 800192c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff0e 	bl	8001754 <LL_ADC_INJ_IsConversionOngoing>
 8001938:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d16d      	bne.n	8001a1c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d16a      	bne.n	8001a1c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800194a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001952:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001962:	f023 0302 	bic.w	r3, r3, #2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	430b      	orrs	r3, r1
 800196e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d017      	beq.n	80019a8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001986:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001990:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001994:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6911      	ldr	r1, [r2, #16]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80019a6:	e013      	b.n	80019d0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019cc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d118      	bne.n	8001a0c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019fc:	430a      	orrs	r2, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	e007      	b.n	8001a1c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10c      	bne.n	8001a3e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f023 010f 	bic.w	r1, r3, #15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3c:	e007      	b.n	8001a4e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020f 	bic.w	r2, r2, #15
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a5e:	e011      	b.n	8001a84 <HAL_ADC_Init+0x308>
 8001a60:	20000000 	.word	0x20000000
 8001a64:	053e2d63 	.word	0x053e2d63
 8001a68:	50000100 	.word	0x50000100
 8001a6c:	50000300 	.word	0x50000300
 8001a70:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	f043 0210 	orr.w	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	bf00      	nop

08001a90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aac:	4883      	ldr	r0, [pc, #524]	; (8001cbc <HAL_ADC_IRQHandler+0x22c>)
 8001aae:	f7ff fdc1 	bl	8001634 <LL_ADC_GetMultimode>
 8001ab2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d017      	beq.n	8001aee <HAL_ADC_IRQHandler+0x5e>
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fe1b 	bl	800271c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x72>
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8085 	beq.w	8001c18 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d07f      	beq.n	8001c18 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fcd7 	bl	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d064      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_ADC_IRQHandler+0x230>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d002      	beq.n	8001b50 <HAL_ADC_IRQHandler+0xc0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_IRQHandler+0xc4>
 8001b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d008      	beq.n	8001b6e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d002      	beq.n	8001b6e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b09      	cmp	r3, #9
 8001b6c:	d104      	bne.n	8001b78 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	623b      	str	r3, [r7, #32]
 8001b76:	e00d      	b.n	8001b94 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_ADC_IRQHandler+0x230>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d002      	beq.n	8001b88 <HAL_ADC_IRQHandler+0xf8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e001      	b.n	8001b8c <HAL_ADC_IRQHandler+0xfc>
 8001b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b8c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d135      	bne.n	8001c0a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d12e      	bne.n	8001c0a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fdbc 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11a      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 020c 	bic.w	r2, r2, #12
 8001bca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d112      	bne.n	8001c0a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf0:	e00b      	b.n	8001c0a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7fe fc86 	bl	800051c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	220c      	movs	r2, #12
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x19c>
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 809e 	beq.w	8001d74 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8098 	beq.w	8001d74 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fc80 	bl	8001566 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c66:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fc3b 	bl	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c72:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_ADC_IRQHandler+0x230>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x1f4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e001      	b.n	8001c88 <HAL_ADC_IRQHandler+0x1f8>
 8001c84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d002      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	d104      	bne.n	8001cac <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	e011      	b.n	8001cd0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_ADC_IRQHandler+0x230>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d006      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x234>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e005      	b.n	8001cc8 <HAL_ADC_IRQHandler+0x238>
 8001cbc:	50000300 	.word	0x50000300
 8001cc0:	50000100 	.word	0x50000100
 8001cc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cc8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d047      	beq.n	8001d66 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x260>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03f      	beq.n	8001d66 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d13a      	bne.n	8001d66 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b40      	cmp	r3, #64	; 0x40
 8001cfc:	d133      	bne.n	8001d66 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12e      	bne.n	8001d66 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fd21 	bl	8001754 <LL_ADC_INJ_IsConversionOngoing>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11a      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d26:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d112      	bne.n	8001d66 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d4c:	e00b      	b.n	8001d66 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	f043 0210 	orr.w	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fcb0 	bl	80026cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2260      	movs	r2, #96	; 0x60
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d011      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x312>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00c      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f895 	bl	8001ec4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x342>
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fc96 	bl	80026f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d012      	beq.n	8001e02 <HAL_ADC_IRQHandler+0x372>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00d      	beq.n	8001e02 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fc88 	bl	8002708 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d036      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x3ea>
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d031      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e014      	b.n	8001e4e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e2a:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <HAL_ADC_IRQHandler+0x430>)
 8001e2c:	f7ff fc10 	bl	8001650 <LL_ADC_GetMultiDMATransfer>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001e36:	2301      	movs	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	e008      	b.n	8001e4e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10e      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	f043 0202 	orr.w	r2, r3, #2
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f833 	bl	8001ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2210      	movs	r2, #16
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d018      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x426>
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d013      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9e:	f043 0208 	orr.w	r2, r3, #8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fc15 	bl	80026e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	50000300 	.word	0x50000300

08001ec4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0b6      	sub	sp, #216	; 0xd8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x22>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e3c8      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x7b4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fc07 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 83ad 	bne.w	8002682 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff faea 	bl	800150e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fbf5 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001f44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fc01 	bl	8001754 <LL_ADC_INJ_IsConversionOngoing>
 8001f52:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 81d9 	bne.w	8002312 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 81d4 	bne.w	8002312 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f72:	d10f      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff fb04 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fa98 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f92:	e00e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f7ff faf3 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fa88 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	08db      	lsrs	r3, r3, #3
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d022      	beq.n	800201a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6919      	ldr	r1, [r3, #16]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fe4:	f7ff f9e2 	bl	80013ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6919      	ldr	r1, [r3, #16]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f7ff fa2e 	bl	8001456 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6919      	ldr	r1, [r3, #16]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	7f1b      	ldrb	r3, [r3, #28]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x124>
 800200a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200e:	e000      	b.n	8002012 <HAL_ADC_ConfigChannel+0x126>
 8002010:	2300      	movs	r3, #0
 8002012:	461a      	mov	r2, r3
 8002014:	f7ff fa3a 	bl	800148c <LL_ADC_SetOffsetSaturation>
 8002018:	e17b      	b.n	8002312 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f9e7 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x15a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f9dc 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	e01e      	b.n	8002084 <HAL_ADC_ConfigChannel+0x198>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f9d1 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800206c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e004      	b.n	8002082 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1b0>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	e018      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1e2>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e004      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80020c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f9a0 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f984 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x220>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f979 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	e01e      	b.n	800214a <HAL_ADC_ConfigChannel+0x25e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f96e 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800212a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800212e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e004      	b.n	8002148 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800213e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x276>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	e018      	b.n	8002194 <HAL_ADC_ConfigChannel+0x2a8>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002176:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800217a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800217e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e004      	b.n	8002194 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800218a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f93d 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2102      	movs	r1, #2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f921 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x2e6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2102      	movs	r1, #2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f916 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	e01e      	b.n	8002210 <HAL_ADC_ConfigChannel+0x324>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2102      	movs	r1, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f90b 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e004      	b.n	800220e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x33c>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	e016      	b.n	8002256 <HAL_ADC_ConfigChannel+0x36a>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800223a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e004      	b.n	8002256 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800224c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002256:	429a      	cmp	r2, r3
 8002258:	d106      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f8dc 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2103      	movs	r1, #3
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f8c0 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10a      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x3a8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2103      	movs	r1, #3
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f8b5 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	e017      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x3d8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2103      	movs	r1, #3
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f8aa 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ae:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80022b6:	2320      	movs	r3, #32
 80022b8:	e003      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80022ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x3f0>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	e011      	b.n	8002300 <HAL_ADC_ConfigChannel+0x414>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e003      	b.n	8002300 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80022f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	2103      	movs	r1, #3
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f887 	bl	8001420 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f9f6 	bl	8001708 <LL_ADC_IsEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8140 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	461a      	mov	r2, r3
 8002332:	f7ff f957 	bl	80015e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a8f      	ldr	r2, [pc, #572]	; (8002578 <HAL_ADC_ConfigChannel+0x68c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	f040 8131 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10b      	bne.n	800236a <HAL_ADC_ConfigChannel+0x47e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2b09      	cmp	r3, #9
 8002360:	bf94      	ite	ls
 8002362:	2301      	movls	r3, #1
 8002364:	2300      	movhi	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e019      	b.n	800239e <HAL_ADC_ConfigChannel+0x4b2>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800237a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800237c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e003      	b.n	800238e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2b09      	cmp	r3, #9
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d079      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_ADC_ConfigChannel+0x4d2>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023bc:	e015      	b.n	80023ea <HAL_ADC_ConfigChannel+0x4fe>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80023d6:	2320      	movs	r3, #32
 80023d8:	e003      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	069b      	lsls	r3, r3, #26
 80023e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_ADC_ConfigChannel+0x51e>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	3301      	adds	r3, #1
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	e017      	b.n	800243a <HAL_ADC_ConfigChannel+0x54e>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	ea42 0103 	orr.w	r1, r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x574>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	3301      	adds	r3, #1
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	051b      	lsls	r3, r3, #20
 800245e:	e018      	b.n	8002492 <HAL_ADC_ConfigChannel+0x5a6>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800247c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f003 021f 	and.w	r2, r3, #31
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002492:	430b      	orrs	r3, r1
 8002494:	e081      	b.n	800259a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x5c6>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	3301      	adds	r3, #1
 80024aa:	069b      	lsls	r3, r3, #26
 80024ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b0:	e015      	b.n	80024de <HAL_ADC_ConfigChannel+0x5f2>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80024ca:	2320      	movs	r3, #32
 80024cc:	e003      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	069b      	lsls	r3, r3, #26
 80024da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x612>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	3301      	adds	r3, #1
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	e017      	b.n	800252e <HAL_ADC_ConfigChannel+0x642>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	61fb      	str	r3, [r7, #28]
  return result;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e003      	b.n	8002522 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	ea42 0103 	orr.w	r1, r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_ADC_ConfigChannel+0x66e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0e9b      	lsrs	r3, r3, #26
 8002544:	3301      	adds	r3, #1
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	3b1e      	subs	r3, #30
 8002552:	051b      	lsls	r3, r3, #20
 8002554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002558:	e01e      	b.n	8002598 <HAL_ADC_ConfigChannel+0x6ac>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	613b      	str	r3, [r7, #16]
  return result;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e006      	b.n	8002584 <HAL_ADC_ConfigChannel+0x698>
 8002576:	bf00      	nop
 8002578:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	3b1e      	subs	r3, #30
 8002592:	051b      	lsls	r3, r3, #20
 8002594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002598:	430b      	orrs	r3, r1
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fff4 	bl	800158c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_ADC_ConfigChannel+0x7bc>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d071      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b0:	483e      	ldr	r0, [pc, #248]	; (80026ac <HAL_ADC_ConfigChannel+0x7c0>)
 80025b2:	f7fe feed 	bl	8001390 <LL_ADC_GetCommonPathInternalCh>
 80025b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3c      	ldr	r2, [pc, #240]	; (80026b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x6e2>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <HAL_ADC_ConfigChannel+0x7c8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d127      	bne.n	800261e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d121      	bne.n	800261e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e2:	d157      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ec:	4619      	mov	r1, r3
 80025ee:	482f      	ldr	r0, [pc, #188]	; (80026ac <HAL_ADC_ConfigChannel+0x7c0>)
 80025f0:	f7fe febb 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f4:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_ADC_ConfigChannel+0x7cc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	4a30      	ldr	r2, [pc, #192]	; (80026bc <HAL_ADC_ConfigChannel+0x7d0>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800260e:	e002      	b.n	8002616 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3b01      	subs	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800261c:	e03a      	b.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d113      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x764>
 8002628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800262c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <HAL_ADC_ConfigChannel+0x7d8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02a      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800263e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002646:	4619      	mov	r1, r3
 8002648:	4818      	ldr	r0, [pc, #96]	; (80026ac <HAL_ADC_ConfigChannel+0x7c0>)
 800264a:	f7fe fe8e 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264e:	e021      	b.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d11c      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800265a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_ADC_ConfigChannel+0x7d8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d011      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002678:	4619      	mov	r1, r3
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <HAL_ADC_ConfigChannel+0x7c0>)
 800267c:	f7fe fe75 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
 8002680:	e008      	b.n	8002694 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800269c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	37d8      	adds	r7, #216	; 0xd8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	80080000 	.word	0x80080000
 80026ac:	50000300 	.word	0x50000300
 80026b0:	c3210000 	.word	0xc3210000
 80026b4:	90c00010 	.word	0x90c00010
 80026b8:	20000000 	.word	0x20000000
 80026bc:	053e2d63 	.word	0x053e2d63
 80026c0:	c7520000 	.word	0xc7520000
 80026c4:	50000100 	.word	0x50000100
 80026c8:	cb840000 	.word	0xcb840000

080026cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800275c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60d3      	str	r3, [r2, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db0b      	blt.n	80027be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4907      	ldr	r1, [pc, #28]	; (80027cc <__NVIC_EnableIRQ+0x38>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2001      	movs	r0, #1
 80027b6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db0a      	blt.n	80027fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	490c      	ldr	r1, [pc, #48]	; (800281c <__NVIC_SetPriority+0x4c>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	440b      	add	r3, r1
 80027f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f8:	e00a      	b.n	8002810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4908      	ldr	r1, [pc, #32]	; (8002820 <__NVIC_SetPriority+0x50>)
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3b04      	subs	r3, #4
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	440b      	add	r3, r1
 800280e:	761a      	strb	r2, [r3, #24]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f1c3 0307 	rsb	r3, r3, #7
 800283e:	2b04      	cmp	r3, #4
 8002840:	bf28      	it	cs
 8002842:	2304      	movcs	r3, #4
 8002844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3304      	adds	r3, #4
 800284a:	2b06      	cmp	r3, #6
 800284c:	d902      	bls.n	8002854 <NVIC_EncodePriority+0x30>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3b03      	subs	r3, #3
 8002852:	e000      	b.n	8002856 <NVIC_EncodePriority+0x32>
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	401a      	ands	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43d9      	mvns	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	4313      	orrs	r3, r2
         );
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289c:	d301      	bcc.n	80028a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289e:	2301      	movs	r3, #1
 80028a0:	e00f      	b.n	80028c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <SysTick_Config+0x40>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028aa:	210f      	movs	r1, #15
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f7ff ff8e 	bl	80027d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <SysTick_Config+0x40>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <SysTick_Config+0x40>)
 80028bc:	2207      	movs	r2, #7
 80028be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	e000e010 	.word	0xe000e010

080028d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff29 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff40 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff90 	bl	8002824 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5f 	bl	80027d0 <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff33 	bl	8002794 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa4 	bl	800288c <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800295e:	e15a      	b.n	8002c16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 814c 	beq.w	8002c10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d005      	beq.n	8002990 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800298c:	2b02      	cmp	r3, #2
 800298e:	d130      	bne.n	80029f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c6:	2201      	movs	r2, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 0201 	and.w	r2, r3, #1
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d017      	beq.n	8002a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d123      	bne.n	8002a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80a6 	beq.w	8002c10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac4:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <HAL_GPIO_Init+0x2e4>)
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	4a5a      	ldr	r2, [pc, #360]	; (8002c34 <HAL_GPIO_Init+0x2e4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad0:	4b58      	ldr	r3, [pc, #352]	; (8002c34 <HAL_GPIO_Init+0x2e4>)
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002adc:	4a56      	ldr	r2, [pc, #344]	; (8002c38 <HAL_GPIO_Init+0x2e8>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b06:	d01f      	beq.n	8002b48 <HAL_GPIO_Init+0x1f8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_GPIO_Init+0x2ec>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d019      	beq.n	8002b44 <HAL_GPIO_Init+0x1f4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a4b      	ldr	r2, [pc, #300]	; (8002c40 <HAL_GPIO_Init+0x2f0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <HAL_GPIO_Init+0x1f0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a4a      	ldr	r2, [pc, #296]	; (8002c44 <HAL_GPIO_Init+0x2f4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00d      	beq.n	8002b3c <HAL_GPIO_Init+0x1ec>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a49      	ldr	r2, [pc, #292]	; (8002c48 <HAL_GPIO_Init+0x2f8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d007      	beq.n	8002b38 <HAL_GPIO_Init+0x1e8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a48      	ldr	r2, [pc, #288]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_GPIO_Init+0x1e4>
 8002b30:	2305      	movs	r3, #5
 8002b32:	e00a      	b.n	8002b4a <HAL_GPIO_Init+0x1fa>
 8002b34:	2306      	movs	r3, #6
 8002b36:	e008      	b.n	8002b4a <HAL_GPIO_Init+0x1fa>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	e006      	b.n	8002b4a <HAL_GPIO_Init+0x1fa>
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e004      	b.n	8002b4a <HAL_GPIO_Init+0x1fa>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e002      	b.n	8002b4a <HAL_GPIO_Init+0x1fa>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_GPIO_Init+0x1fa>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	f002 0203 	and.w	r2, r2, #3
 8002b50:	0092      	lsls	r2, r2, #2
 8002b52:	4093      	lsls	r3, r2
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b5a:	4937      	ldr	r1, [pc, #220]	; (8002c38 <HAL_GPIO_Init+0x2e8>)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b8c:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b92:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bb6:	4a26      	ldr	r2, [pc, #152]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f47f ae9d 	bne.w	8002960 <HAL_GPIO_Init+0x10>
  }
}
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	48000400 	.word	0x48000400
 8002c40:	48000800 	.word	0x48000800
 8002c44:	48000c00 	.word	0x48000c00
 8002c48:	48001000 	.word	0x48001000
 8002c4c:	48001400 	.word	0x48001400
 8002c50:	40010400 	.word	0x40010400

08002c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
 8002c60:	4613      	mov	r3, r2
 8002c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d141      	bne.n	8002d16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c92:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9e:	d131      	bne.n	8002d04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca0:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca6:	4a46      	ldr	r2, [pc, #280]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb0:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb8:	4a41      	ldr	r2, [pc, #260]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2232      	movs	r2, #50	; 0x32
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	0c9b      	lsrs	r3, r3, #18
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd6:	e002      	b.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d102      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f2      	bne.n	8002cd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf2:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfe:	d158      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e057      	b.n	8002db4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0a:	4a2d      	ldr	r2, [pc, #180]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d14:	e04d      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1c:	d141      	bne.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2a:	d131      	bne.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d32:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d3c:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d44:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2232      	movs	r2, #50	; 0x32
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	0c9b      	lsrs	r3, r3, #18
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d62:	e002      	b.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d102      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f2      	bne.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d112      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e011      	b.n	8002db4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002da0:	e007      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	431bde83 	.word	0x431bde83

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e306      	b.n	80033ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dea:	4b97      	ldr	r3, [pc, #604]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df4:	4b94      	ldr	r3, [pc, #592]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3e>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d002      	beq.n	8002e10 <HAL_RCC_OscConfig+0x44>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d157      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e2e1      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x74>
 8002e32:	4b85      	ldr	r3, [pc, #532]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a84      	ldr	r2, [pc, #528]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b7c      	ldr	r3, [pc, #496]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7b      	ldr	r2, [pc, #492]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e64:	4b78      	ldr	r3, [pc, #480]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a77      	ldr	r2, [pc, #476]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b75      	ldr	r3, [pc, #468]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a74      	ldr	r2, [pc, #464]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fa52 	bl	800132c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fa4e 	bl	800132c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e2a6      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9e:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fa3e 	bl	800132c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fa3a 	bl	800132c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e292      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec6:	4b60      	ldr	r3, [pc, #384]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d075      	beq.n	8002fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eec:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_OscConfig+0x136>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d002      	beq.n	8002f08 <HAL_RCC_OscConfig+0x13c>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d11f      	bne.n	8002f48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f08:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_OscConfig+0x154>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e265      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b49      	ldr	r3, [pc, #292]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	4946      	ldr	r1, [pc, #280]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f34:	4b45      	ldr	r3, [pc, #276]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe f9ab 	bl	8001294 <HAL_InitTick>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d043      	beq.n	8002fcc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e251      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f50:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a3c      	ldr	r2, [pc, #240]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f9e6 	bl	800132c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe f9e2 	bl	800132c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e23a      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f76:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	492d      	ldr	r1, [pc, #180]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
 8002f96:	e01a      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2a      	ldr	r2, [pc, #168]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f9c2 	bl	800132c <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fe f9be 	bl	800132c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e216      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1e0>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d041      	beq.n	800305e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01c      	beq.n	800301c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe f99b 	bl	800132c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe f997 	bl	800132c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1ef      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ef      	beq.n	8002ffa <HAL_RCC_OscConfig+0x22e>
 800301a:	e020      	b.n	800305e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe f97e 	bl	800132c <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003032:	e00d      	b.n	8003050 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7fe f97a 	bl	800132c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d906      	bls.n	8003050 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1d2      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003050:	4b8c      	ldr	r3, [pc, #560]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ea      	bne.n	8003034 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a6 	beq.w	80031b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003070:	4b84      	ldr	r3, [pc, #528]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x2b4>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x2b6>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	4b7f      	ldr	r3, [pc, #508]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	4a7e      	ldr	r2, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003090:	6593      	str	r3, [r2, #88]	; 0x58
 8003092:	4b7c      	ldr	r3, [pc, #496]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a2:	4b79      	ldr	r3, [pc, #484]	; (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d118      	bne.n	80030e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ae:	4b76      	ldr	r3, [pc, #472]	; (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a75      	ldr	r2, [pc, #468]	; (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe f937 	bl	800132c <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fe f933 	bl	800132c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e18b      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d4:	4b6c      	ldr	r3, [pc, #432]	; (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d108      	bne.n	80030fa <HAL_RCC_OscConfig+0x32e>
 80030e8:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	4a65      	ldr	r2, [pc, #404]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f8:	e024      	b.n	8003144 <HAL_RCC_OscConfig+0x378>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d110      	bne.n	8003124 <HAL_RCC_OscConfig+0x358>
 8003102:	4b60      	ldr	r3, [pc, #384]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	4a5e      	ldr	r2, [pc, #376]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003112:	4b5c      	ldr	r3, [pc, #368]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	4a5a      	ldr	r2, [pc, #360]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003122:	e00f      	b.n	8003144 <HAL_RCC_OscConfig+0x378>
 8003124:	4b57      	ldr	r3, [pc, #348]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	4a56      	ldr	r2, [pc, #344]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe f8ee 	bl	800132c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe f8ea 	bl	800132c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e140      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316a:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ed      	beq.n	8003154 <HAL_RCC_OscConfig+0x388>
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe f8d7 	bl	800132c <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fe f8d3 	bl	800132c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e129      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003198:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ed      	bne.n	8003182 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b35      	ldr	r3, [pc, #212]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	4a34      	ldr	r2, [pc, #208]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d03c      	beq.n	800323e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01c      	beq.n	8003206 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d2:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe f8a6 	bl	800132c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e4:	f7fe f8a2 	bl	800132c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0fa      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ef      	beq.n	80031e4 <HAL_RCC_OscConfig+0x418>
 8003204:	e01b      	b.n	800323e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fe f889 	bl	800132c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321e:	f7fe f885 	bl	800132c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0dd      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ef      	bne.n	800321e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80d1 	beq.w	80033ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b0c      	cmp	r3, #12
 8003252:	f000 808b 	beq.w	800336c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d15e      	bne.n	800331c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a08      	ldr	r2, [pc, #32]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe f85f 	bl	800132c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003270:	e00c      	b.n	800328c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe f85b 	bl	800132c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d905      	bls.n	800328c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0b3      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328c:	4b59      	ldr	r3, [pc, #356]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ec      	bne.n	8003272 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003298:	4b56      	ldr	r3, [pc, #344]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <HAL_RCC_OscConfig+0x62c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6a11      	ldr	r1, [r2, #32]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032b2:	0212      	lsls	r2, r2, #8
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0552      	lsls	r2, r2, #21
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032c6:	0852      	lsrs	r2, r2, #1
 80032c8:	3a01      	subs	r2, #1
 80032ca:	0652      	lsls	r2, r2, #25
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032d2:	06d2      	lsls	r2, r2, #27
 80032d4:	430a      	orrs	r2, r1
 80032d6:	4947      	ldr	r1, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	4b45      	ldr	r3, [pc, #276]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a44      	ldr	r2, [pc, #272]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a41      	ldr	r2, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe f81a 	bl	800132c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe f816 	bl	800132c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e06e      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x530>
 800331a:	e066      	b.n	80033ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 8003322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003326:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003328:	4b32      	ldr	r3, [pc, #200]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a2e      	ldr	r2, [pc, #184]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 800333a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd fff2 	bl	800132c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fd ffee 	bl	800132c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e046      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x580>
 800336a:	e03e      	b.n	80033ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e039      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_RCC_OscConfig+0x628>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	429a      	cmp	r2, r3
 800338a:	d12c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	3b01      	subs	r3, #1
 8003398:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d123      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d11b      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d113      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d109      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	019f800c 	.word	0x019f800c

080033fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e11e      	b.n	8003652 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b91      	ldr	r3, [pc, #580]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b8e      	ldr	r3, [pc, #568]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 020f 	bic.w	r2, r3, #15
 800342a:	498c      	ldr	r1, [pc, #560]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b8a      	ldr	r3, [pc, #552]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e106      	b.n	8003652 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d073      	beq.n	8003538 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d129      	bne.n	80034ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003458:	4b81      	ldr	r3, [pc, #516]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0f4      	b.n	8003652 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003468:	f000 f99e 	bl	80037a8 <RCC_GetSysClockFreqFromPLLSource>
 800346c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4a7c      	ldr	r2, [pc, #496]	; (8003664 <HAL_RCC_ClockConfig+0x268>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d93f      	bls.n	80034f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003476:	4b7a      	ldr	r3, [pc, #488]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d033      	beq.n	80034f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d12f      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003496:	4b72      	ldr	r3, [pc, #456]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800349e:	4a70      	ldr	r2, [pc, #448]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e024      	b.n	80034f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0c6      	b.n	8003652 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c4:	4b66      	ldr	r3, [pc, #408]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0be      	b.n	8003652 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034d4:	f000 f8ce 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4a61      	ldr	r2, [pc, #388]	; (8003664 <HAL_RCC_ClockConfig+0x268>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d909      	bls.n	80034f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ea:	4a5d      	ldr	r2, [pc, #372]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 80034ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4957      	ldr	r1, [pc, #348]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003508:	f7fd ff10 	bl	800132c <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7fd ff0c 	bl	800132c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e095      	b.n	8003652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b4e      	ldr	r3, [pc, #312]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 020c 	and.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	429a      	cmp	r2, r3
 8003536:	d1eb      	bne.n	8003510 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d023      	beq.n	800358c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a42      	ldr	r2, [pc, #264]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800355a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003568:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003570:	4a3b      	ldr	r2, [pc, #236]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003576:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4936      	ldr	r1, [pc, #216]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
 800358a:	e008      	b.n	800359e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d105      	bne.n	800359e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003592:	4b33      	ldr	r3, [pc, #204]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4a32      	ldr	r2, [pc, #200]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800359c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d21d      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 020f 	bic.w	r2, r3, #15
 80035b4:	4929      	ldr	r1, [pc, #164]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035bc:	f7fd feb6 	bl	800132c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7fd feb2 	bl	800132c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e03b      	b.n	8003652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x260>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1ed      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4917      	ldr	r1, [pc, #92]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	490f      	ldr	r1, [pc, #60]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003626:	f000 f825 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800362a:	4602      	mov	r2, r0
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_ClockConfig+0x264>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	490c      	ldr	r1, [pc, #48]	; (8003668 <HAL_RCC_ClockConfig+0x26c>)
 8003638:	5ccb      	ldrb	r3, [r1, r3]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x270>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x274>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fe22 	bl	8001294 <HAL_InitTick>
 8003650:	4603      	mov	r3, r0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40022000 	.word	0x40022000
 8003660:	40021000 	.word	0x40021000
 8003664:	04c4b400 	.word	0x04c4b400
 8003668:	08006138 	.word	0x08006138
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b04      	cmp	r3, #4
 8003684:	d102      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e047      	b.n	800371c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b08      	cmp	r3, #8
 8003696:	d102      	bne.n	800369e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003698:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_RCC_GetSysClockFreq+0xc0>)
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	e03e      	b.n	800371c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800369e:	4b23      	ldr	r3, [pc, #140]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d136      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3301      	adds	r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d2:	68d2      	ldr	r2, [r2, #12]
 80036d4:	0a12      	lsrs	r2, r2, #8
 80036d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	617b      	str	r3, [r7, #20]
      break;
 80036e0:	e00c      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ec:	68d2      	ldr	r2, [r2, #12]
 80036ee:	0a12      	lsrs	r2, r2, #8
 80036f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
      break;
 80036fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0e5b      	lsrs	r3, r3, #25
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	e001      	b.n	800371c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800371c:	693b      	ldr	r3, [r7, #16]
}
 800371e:	4618      	mov	r0, r3
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	00f42400 	.word	0x00f42400
 8003734:	007a1200 	.word	0x007a1200

08003738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <HAL_RCC_GetHCLKFreq+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000000 	.word	0x20000000

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003754:	f7ff fff0 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4904      	ldr	r1, [pc, #16]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	08006148 	.word	0x08006148

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003780:	f7ff ffda 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0adb      	lsrs	r3, r3, #11
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4904      	ldr	r1, [pc, #16]	; (80037a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08006148 	.word	0x08006148

080037a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d10c      	bne.n	80037e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	4a14      	ldr	r2, [pc, #80]	; (8003828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037d6:	68d2      	ldr	r2, [r2, #12]
 80037d8:	0a12      	lsrs	r2, r2, #8
 80037da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	617b      	str	r3, [r7, #20]
    break;
 80037e4:	e00c      	b.n	8003800 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	0a12      	lsrs	r2, r2, #8
 80037f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
    break;
 80037fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	0e5b      	lsrs	r3, r3, #25
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800381a:	687b      	ldr	r3, [r7, #4]
}
 800381c:	4618      	mov	r0, r3
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40021000 	.word	0x40021000
 800382c:	007a1200 	.word	0x007a1200
 8003830:	00f42400 	.word	0x00f42400

08003834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800383c:	2300      	movs	r3, #0
 800383e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003840:	2300      	movs	r3, #0
 8003842:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8098 	beq.w	8003982 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10d      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003862:	4b40      	ldr	r3, [pc, #256]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	4a3f      	ldr	r2, [pc, #252]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6593      	str	r3, [r2, #88]	; 0x58
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	2301      	movs	r3, #1
 800387c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387e:	4b3a      	ldr	r3, [pc, #232]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a39      	ldr	r2, [pc, #228]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800388a:	f7fd fd4f 	bl	800132c <HAL_GetTick>
 800388e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003890:	e009      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fd fd4b 	bl	800132c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d902      	bls.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	74fb      	strb	r3, [r7, #19]
        break;
 80038a4:	e005      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a6:	4b30      	ldr	r3, [pc, #192]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ef      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d159      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01e      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d019      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038d4:	4b23      	ldr	r3, [pc, #140]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f0:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003900:	4a18      	ldr	r2, [pc, #96]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fd fd0b 	bl	800132c <HAL_GetTick>
 8003916:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003918:	e00b      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fd fd07 	bl	800132c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d902      	bls.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	74fb      	strb	r3, [r7, #19]
            break;
 8003930:	e006      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ec      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800395c:	e008      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	74bb      	strb	r3, [r7, #18]
 8003962:	e005      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003964:	40021000 	.word	0x40021000
 8003968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003970:	7c7b      	ldrb	r3, [r7, #17]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4ba6      	ldr	r3, [pc, #664]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	4aa5      	ldr	r2, [pc, #660]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800398e:	4ba0      	ldr	r3, [pc, #640]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f023 0203 	bic.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	499c      	ldr	r1, [pc, #624]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b0:	4b97      	ldr	r3, [pc, #604]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 020c 	bic.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4994      	ldr	r1, [pc, #592]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d2:	4b8f      	ldr	r3, [pc, #572]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	498b      	ldr	r1, [pc, #556]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039f4:	4b86      	ldr	r3, [pc, #536]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	4983      	ldr	r1, [pc, #524]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a16:	4b7e      	ldr	r3, [pc, #504]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	497a      	ldr	r1, [pc, #488]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a38:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	4972      	ldr	r1, [pc, #456]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4969      	ldr	r1, [pc, #420]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7c:	4b64      	ldr	r3, [pc, #400]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4961      	ldr	r1, [pc, #388]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a9e:	4b5c      	ldr	r3, [pc, #368]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	4958      	ldr	r1, [pc, #352]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	4950      	ldr	r1, [pc, #320]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af8:	4b45      	ldr	r3, [pc, #276]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4942      	ldr	r1, [pc, #264]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b16:	d105      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b18:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a3c      	ldr	r2, [pc, #240]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d015      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b30:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4934      	ldr	r1, [pc, #208]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d015      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	4926      	ldr	r1, [pc, #152]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b86:	d105      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	4918      	ldr	r1, [pc, #96]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc0:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	490a      	ldr	r1, [pc, #40]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c04:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e049      	b.n	8003cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd f978 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 fde4 	bl	8004820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e042      	b.n	8003d62 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_TIM_Base_Start+0xac>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_TIM_Base_Start+0x5c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf6:	d013      	beq.n	8003d20 <HAL_TIM_Base_Start+0x5c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_TIM_Base_Start+0xb0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_TIM_Base_Start+0x5c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <HAL_TIM_Base_Start+0xb4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_TIM_Base_Start+0x5c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <HAL_TIM_Base_Start+0xb8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_TIM_Base_Start+0x5c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_TIM_Base_Start+0xbc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d115      	bne.n	8003d4c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <HAL_TIM_Base_Start+0xc0>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d015      	beq.n	8003d5e <HAL_TIM_Base_Start+0x9a>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d011      	beq.n	8003d5e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	e008      	b.n	8003d5e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e000      	b.n	8003d60 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40013400 	.word	0x40013400
 8003d80:	40014000 	.word	0x40014000
 8003d84:	00010007 	.word	0x00010007

08003d88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e049      	b.n	8003e2e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f841 	bl	8003e36 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fd2a 	bl	8004820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_TIM_OC_Start+0x24>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e03c      	b.n	8003eea <HAL_TIM_OC_Start+0x9e>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d109      	bne.n	8003e8a <HAL_TIM_OC_Start+0x3e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e02f      	b.n	8003eea <HAL_TIM_OC_Start+0x9e>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d109      	bne.n	8003ea4 <HAL_TIM_OC_Start+0x58>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e022      	b.n	8003eea <HAL_TIM_OC_Start+0x9e>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d109      	bne.n	8003ebe <HAL_TIM_OC_Start+0x72>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e015      	b.n	8003eea <HAL_TIM_OC_Start+0x9e>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d109      	bne.n	8003ed8 <HAL_TIM_OC_Start+0x8c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e008      	b.n	8003eea <HAL_TIM_OC_Start+0x9e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e097      	b.n	8004022 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIM_OC_Start+0xb6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f00:	e023      	b.n	8003f4a <HAL_TIM_OC_Start+0xfe>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_OC_Start+0xc6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f10:	e01b      	b.n	8003f4a <HAL_TIM_OC_Start+0xfe>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_OC_Start+0xd6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	e013      	b.n	8003f4a <HAL_TIM_OC_Start+0xfe>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_OC_Start+0xe6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f30:	e00b      	b.n	8003f4a <HAL_TIM_OC_Start+0xfe>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_OC_Start+0xf6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f40:	e003      	b.n	8003f4a <HAL_TIM_OC_Start+0xfe>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 f886 	bl	8005064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a33      	ldr	r2, [pc, #204]	; (800402c <HAL_TIM_OC_Start+0x1e0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <HAL_TIM_OC_Start+0x13e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_TIM_OC_Start+0x1e4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_TIM_OC_Start+0x13e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	; (8004034 <HAL_TIM_OC_Start+0x1e8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_TIM_OC_Start+0x13e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <HAL_TIM_OC_Start+0x1ec>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIM_OC_Start+0x13e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_TIM_OC_Start+0x1f0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_OC_Start+0x142>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_TIM_OC_Start+0x144>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	; (800402c <HAL_TIM_OC_Start+0x1e0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_TIM_OC_Start+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d013      	beq.n	8003fe0 <HAL_TIM_OC_Start+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a20      	ldr	r2, [pc, #128]	; (8004040 <HAL_TIM_OC_Start+0x1f4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIM_OC_Start+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <HAL_TIM_OC_Start+0x1f8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIM_OC_Start+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <HAL_TIM_OC_Start+0x1e4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_OC_Start+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_TIM_OC_Start+0x1e8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d115      	bne.n	800400c <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_TIM_OC_Start+0x1fc>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d015      	beq.n	800401e <HAL_TIM_OC_Start+0x1d2>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d011      	beq.n	800401e <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	e008      	b.n	800401e <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e000      	b.n	8004020 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40013400 	.word	0x40013400
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	00010007 	.word	0x00010007

0800404c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e049      	b.n	80040f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f841 	bl	80040fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f000 fbc8 	bl	8004820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_TIM_PWM_Start+0x24>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e03c      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d109      	bne.n	800414e <HAL_TIM_PWM_Start+0x3e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e02f      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d109      	bne.n	8004168 <HAL_TIM_PWM_Start+0x58>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e022      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d109      	bne.n	8004182 <HAL_TIM_PWM_Start+0x72>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e015      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b10      	cmp	r3, #16
 8004186:	d109      	bne.n	800419c <HAL_TIM_PWM_Start+0x8c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e008      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e097      	b.n	80042e6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xb6>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	e023      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Start+0xc6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d4:	e01b      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_PWM_Start+0xd6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	e013      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_PWM_Start+0xe6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041f4:	e00b      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0xf6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	e003      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2201      	movs	r2, #1
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 ff24 	bl	8005064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a33      	ldr	r2, [pc, #204]	; (80042f0 <HAL_TIM_PWM_Start+0x1e0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_TIM_PWM_Start+0x13e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a32      	ldr	r2, [pc, #200]	; (80042f4 <HAL_TIM_PWM_Start+0x1e4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_TIM_PWM_Start+0x13e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a30      	ldr	r2, [pc, #192]	; (80042f8 <HAL_TIM_PWM_Start+0x1e8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_TIM_PWM_Start+0x13e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <HAL_TIM_PWM_Start+0x1ec>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_TIM_PWM_Start+0x13e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <HAL_TIM_PWM_Start+0x1f0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_TIM_PWM_Start+0x142>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_TIM_PWM_Start+0x144>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <HAL_TIM_PWM_Start+0x1e0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x194>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d013      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x194>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_TIM_PWM_Start+0x1f4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x194>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_TIM_PWM_Start+0x1f8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x194>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <HAL_TIM_PWM_Start+0x1e4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x194>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_TIM_PWM_Start+0x1e8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d115      	bne.n	80042d0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	4b18      	ldr	r3, [pc, #96]	; (800430c <HAL_TIM_PWM_Start+0x1fc>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b06      	cmp	r3, #6
 80042b4:	d015      	beq.n	80042e2 <HAL_TIM_PWM_Start+0x1d2>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d011      	beq.n	80042e2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ce:	e008      	b.n	80042e2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e000      	b.n	80042e4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	00010007 	.word	0x00010007

08004310 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_TIM_OC_ConfigChannel+0x1e>
 800432a:	2302      	movs	r3, #2
 800432c:	e066      	b.n	80043fc <HAL_TIM_OC_ConfigChannel+0xec>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b14      	cmp	r3, #20
 800433a:	d857      	bhi.n	80043ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <HAL_TIM_OC_ConfigChannel+0x34>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004399 	.word	0x08004399
 8004348:	080043ed 	.word	0x080043ed
 800434c:	080043ed 	.word	0x080043ed
 8004350:	080043ed 	.word	0x080043ed
 8004354:	080043a7 	.word	0x080043a7
 8004358:	080043ed 	.word	0x080043ed
 800435c:	080043ed 	.word	0x080043ed
 8004360:	080043ed 	.word	0x080043ed
 8004364:	080043b5 	.word	0x080043b5
 8004368:	080043ed 	.word	0x080043ed
 800436c:	080043ed 	.word	0x080043ed
 8004370:	080043ed 	.word	0x080043ed
 8004374:	080043c3 	.word	0x080043c3
 8004378:	080043ed 	.word	0x080043ed
 800437c:	080043ed 	.word	0x080043ed
 8004380:	080043ed 	.word	0x080043ed
 8004384:	080043d1 	.word	0x080043d1
 8004388:	080043ed 	.word	0x080043ed
 800438c:	080043ed 	.word	0x080043ed
 8004390:	080043ed 	.word	0x080043ed
 8004394:	080043df 	.word	0x080043df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 face 	bl	8004940 <TIM_OC1_SetConfig>
      break;
 80043a4:	e025      	b.n	80043f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fb57 	bl	8004a60 <TIM_OC2_SetConfig>
      break;
 80043b2:	e01e      	b.n	80043f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fbda 	bl	8004b74 <TIM_OC3_SetConfig>
      break;
 80043c0:	e017      	b.n	80043f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fc5b 	bl	8004c84 <TIM_OC4_SetConfig>
      break;
 80043ce:	e010      	b.n	80043f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fcde 	bl	8004d98 <TIM_OC5_SetConfig>
      break;
 80043dc:	e009      	b.n	80043f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fd3b 	bl	8004e60 <TIM_OC6_SetConfig>
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75fb      	strb	r3, [r7, #23]
      break;
 80043f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800441e:	2302      	movs	r3, #2
 8004420:	e0ff      	b.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b14      	cmp	r3, #20
 800442e:	f200 80f0 	bhi.w	8004612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	0800448d 	.word	0x0800448d
 800443c:	08004613 	.word	0x08004613
 8004440:	08004613 	.word	0x08004613
 8004444:	08004613 	.word	0x08004613
 8004448:	080044cd 	.word	0x080044cd
 800444c:	08004613 	.word	0x08004613
 8004450:	08004613 	.word	0x08004613
 8004454:	08004613 	.word	0x08004613
 8004458:	0800450f 	.word	0x0800450f
 800445c:	08004613 	.word	0x08004613
 8004460:	08004613 	.word	0x08004613
 8004464:	08004613 	.word	0x08004613
 8004468:	0800454f 	.word	0x0800454f
 800446c:	08004613 	.word	0x08004613
 8004470:	08004613 	.word	0x08004613
 8004474:	08004613 	.word	0x08004613
 8004478:	08004591 	.word	0x08004591
 800447c:	08004613 	.word	0x08004613
 8004480:	08004613 	.word	0x08004613
 8004484:	08004613 	.word	0x08004613
 8004488:	080045d1 	.word	0x080045d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fa54 	bl	8004940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	619a      	str	r2, [r3, #24]
      break;
 80044ca:	e0a5      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fac4 	bl	8004a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
      break;
 800450c:	e084      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fb2d 	bl	8004b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0208 	orr.w	r2, r2, #8
 8004528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0204 	bic.w	r2, r2, #4
 8004538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69d9      	ldr	r1, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	61da      	str	r2, [r3, #28]
      break;
 800454c:	e064      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fb95 	bl	8004c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	61da      	str	r2, [r3, #28]
      break;
 800458e:	e043      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fbfe 	bl	8004d98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80045ce:	e023      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fc42 	bl	8004e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	021a      	lsls	r2, r3, #8
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004610:	e002      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
      break;
 8004616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004620:	7dfb      	ldrb	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop

0800462c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIM_ConfigClockSource+0x1c>
 8004644:	2302      	movs	r3, #2
 8004646:	e0de      	b.n	8004806 <HAL_TIM_ConfigClockSource+0x1da>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800466a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a63      	ldr	r2, [pc, #396]	; (8004810 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f000 80a9 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 8004688:	4a61      	ldr	r2, [pc, #388]	; (8004810 <HAL_TIM_ConfigClockSource+0x1e4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	f200 80ae 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 8004690:	4a60      	ldr	r2, [pc, #384]	; (8004814 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	f000 80a1 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 8004698:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_TIM_ConfigClockSource+0x1e8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	f200 80a6 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046a0:	4a5d      	ldr	r2, [pc, #372]	; (8004818 <HAL_TIM_ConfigClockSource+0x1ec>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	f000 8099 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 80046a8:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_TIM_ConfigClockSource+0x1ec>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	f200 809e 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046b0:	4a5a      	ldr	r2, [pc, #360]	; (800481c <HAL_TIM_ConfigClockSource+0x1f0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	f000 8091 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 80046b8:	4a58      	ldr	r2, [pc, #352]	; (800481c <HAL_TIM_ConfigClockSource+0x1f0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	f200 8096 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046c4:	f000 8089 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 80046c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046cc:	f200 808e 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d4:	d03e      	beq.n	8004754 <HAL_TIM_ConfigClockSource+0x128>
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	f200 8087 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	f000 8086 	beq.w	80047f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	d87f      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046ec:	2b70      	cmp	r3, #112	; 0x70
 80046ee:	d01a      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xfa>
 80046f0:	2b70      	cmp	r3, #112	; 0x70
 80046f2:	d87b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046f4:	2b60      	cmp	r3, #96	; 0x60
 80046f6:	d050      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x16e>
 80046f8:	2b60      	cmp	r3, #96	; 0x60
 80046fa:	d877      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 80046fc:	2b50      	cmp	r3, #80	; 0x50
 80046fe:	d03c      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x14e>
 8004700:	2b50      	cmp	r3, #80	; 0x50
 8004702:	d873      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d058      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x18e>
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d86f      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d064      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 8004710:	2b30      	cmp	r3, #48	; 0x30
 8004712:	d86b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d060      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 8004718:	2b20      	cmp	r3, #32
 800471a:	d867      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d05c      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 8004720:	2b10      	cmp	r3, #16
 8004722:	d05a      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x1ae>
 8004724:	e062      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6899      	ldr	r1, [r3, #8]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f000 fc75 	bl	8005024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	609a      	str	r2, [r3, #8]
      break;
 8004752:	e04f      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6899      	ldr	r1, [r3, #8]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f000 fc5e 	bl	8005024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004776:	609a      	str	r2, [r3, #8]
      break;
 8004778:	e03c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	461a      	mov	r2, r3
 8004788:	f000 fbd0 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2150      	movs	r1, #80	; 0x50
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fc29 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004798:	e02c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f000 fbef 	bl	8004f8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2160      	movs	r1, #96	; 0x60
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fc19 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 80047b8:	e01c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fbb0 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc09 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 80047d8:	e00c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f000 fc00 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 80047ea:	e003      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      break;
 80047f0:	e000      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80047f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	00100070 	.word	0x00100070
 8004814:	00100040 	.word	0x00100040
 8004818:	00100030 	.word	0x00100030
 800481c:	00100020 	.word	0x00100020

08004820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3c      	ldr	r2, [pc, #240]	; (8004924 <TIM_Base_SetConfig+0x104>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00f      	beq.n	8004858 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483e:	d00b      	beq.n	8004858 <TIM_Base_SetConfig+0x38>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a39      	ldr	r2, [pc, #228]	; (8004928 <TIM_Base_SetConfig+0x108>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_Base_SetConfig+0x38>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a38      	ldr	r2, [pc, #224]	; (800492c <TIM_Base_SetConfig+0x10c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_Base_SetConfig+0x38>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a37      	ldr	r2, [pc, #220]	; (8004930 <TIM_Base_SetConfig+0x110>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d108      	bne.n	800486a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <TIM_Base_SetConfig+0x104>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01b      	beq.n	80048aa <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d017      	beq.n	80048aa <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <TIM_Base_SetConfig+0x108>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <TIM_Base_SetConfig+0x10c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00f      	beq.n	80048aa <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a28      	ldr	r2, [pc, #160]	; (8004930 <TIM_Base_SetConfig+0x110>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00b      	beq.n	80048aa <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a27      	ldr	r2, [pc, #156]	; (8004934 <TIM_Base_SetConfig+0x114>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d007      	beq.n	80048aa <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a26      	ldr	r2, [pc, #152]	; (8004938 <TIM_Base_SetConfig+0x118>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <TIM_Base_SetConfig+0x11c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d108      	bne.n	80048bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a10      	ldr	r2, [pc, #64]	; (8004924 <TIM_Base_SetConfig+0x104>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00f      	beq.n	8004908 <TIM_Base_SetConfig+0xe8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <TIM_Base_SetConfig+0x110>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_Base_SetConfig+0xe8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <TIM_Base_SetConfig+0x114>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_Base_SetConfig+0xe8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <TIM_Base_SetConfig+0x118>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_Base_SetConfig+0xe8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a0e      	ldr	r2, [pc, #56]	; (800493c <TIM_Base_SetConfig+0x11c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d103      	bne.n	8004910 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	615a      	str	r2, [r3, #20]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	40013400 	.word	0x40013400
 8004934:	40014000 	.word	0x40014000
 8004938:	40014400 	.word	0x40014400
 800493c:	40014800 	.word	0x40014800

08004940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 0302 	bic.w	r3, r3, #2
 800498c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <TIM_OC1_SetConfig+0x10c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00f      	beq.n	80049c0 <TIM_OC1_SetConfig+0x80>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2b      	ldr	r2, [pc, #172]	; (8004a50 <TIM_OC1_SetConfig+0x110>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <TIM_OC1_SetConfig+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <TIM_OC1_SetConfig+0x114>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_OC1_SetConfig+0x80>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <TIM_OC1_SetConfig+0x118>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_OC1_SetConfig+0x80>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <TIM_OC1_SetConfig+0x11c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10c      	bne.n	80049da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f023 0308 	bic.w	r3, r3, #8
 80049c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 0304 	bic.w	r3, r3, #4
 80049d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <TIM_OC1_SetConfig+0x10c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00f      	beq.n	8004a02 <TIM_OC1_SetConfig+0xc2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	; (8004a50 <TIM_OC1_SetConfig+0x110>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <TIM_OC1_SetConfig+0xc2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a19      	ldr	r2, [pc, #100]	; (8004a54 <TIM_OC1_SetConfig+0x114>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_OC1_SetConfig+0xc2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <TIM_OC1_SetConfig+0x118>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_OC1_SetConfig+0xc2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <TIM_OC1_SetConfig+0x11c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d111      	bne.n	8004a26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	621a      	str	r2, [r3, #32]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40013400 	.word	0x40013400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800

08004a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0210 	bic.w	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0320 	bic.w	r3, r3, #32
 8004aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <TIM_OC2_SetConfig+0x100>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC2_SetConfig+0x6c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <TIM_OC2_SetConfig+0x104>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10d      	bne.n	8004ae8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <TIM_OC2_SetConfig+0x100>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00f      	beq.n	8004b10 <TIM_OC2_SetConfig+0xb0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <TIM_OC2_SetConfig+0x104>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_OC2_SetConfig+0xb0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <TIM_OC2_SetConfig+0x108>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_OC2_SetConfig+0xb0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <TIM_OC2_SetConfig+0x10c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_OC2_SetConfig+0xb0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <TIM_OC2_SetConfig+0x110>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d113      	bne.n	8004b38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800

08004b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <TIM_OC3_SetConfig+0xfc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_OC3_SetConfig+0x6a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a26      	ldr	r2, [pc, #152]	; (8004c74 <TIM_OC3_SetConfig+0x100>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d10d      	bne.n	8004bfa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <TIM_OC3_SetConfig+0xfc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_OC3_SetConfig+0xae>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <TIM_OC3_SetConfig+0x100>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_OC3_SetConfig+0xae>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <TIM_OC3_SetConfig+0x104>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_OC3_SetConfig+0xae>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <TIM_OC3_SetConfig+0x108>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_OC3_SetConfig+0xae>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <TIM_OC3_SetConfig+0x10c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d113      	bne.n	8004c4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40013400 	.word	0x40013400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800

08004c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <TIM_OC4_SetConfig+0x100>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC4_SetConfig+0x6c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <TIM_OC4_SetConfig+0x104>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10d      	bne.n	8004d0c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <TIM_OC4_SetConfig+0x100>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_OC4_SetConfig+0xb0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <TIM_OC4_SetConfig+0x104>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_OC4_SetConfig+0xb0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <TIM_OC4_SetConfig+0x108>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_OC4_SetConfig+0xb0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <TIM_OC4_SetConfig+0x10c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC4_SetConfig+0xb0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <TIM_OC4_SetConfig+0x110>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d113      	bne.n	8004d5c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	019b      	lsls	r3, r3, #6
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	019b      	lsls	r3, r3, #6
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40013400 	.word	0x40013400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800

08004d98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ddc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <TIM_OC5_SetConfig+0xb4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00f      	beq.n	8004e12 <TIM_OC5_SetConfig+0x7a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <TIM_OC5_SetConfig+0xb8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_OC5_SetConfig+0x7a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <TIM_OC5_SetConfig+0xbc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_OC5_SetConfig+0x7a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <TIM_OC5_SetConfig+0xc0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_OC5_SetConfig+0x7a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <TIM_OC5_SetConfig+0xc4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d109      	bne.n	8004e26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40013400 	.word	0x40013400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800

08004e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	051b      	lsls	r3, r3, #20
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <TIM_OC6_SetConfig+0xb8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00f      	beq.n	8004edc <TIM_OC6_SetConfig+0x7c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <TIM_OC6_SetConfig+0xbc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <TIM_OC6_SetConfig+0x7c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <TIM_OC6_SetConfig+0xc0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_OC6_SetConfig+0x7c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <TIM_OC6_SetConfig+0xc4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC6_SetConfig+0x7c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <TIM_OC6_SetConfig+0xc8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d109      	bne.n	8004ef0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	029b      	lsls	r3, r3, #10
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800

08004f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 030a 	bic.w	r3, r3, #10
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0210 	bic.w	r2, r3, #16
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	031b      	lsls	r3, r3, #12
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	f043 0307 	orr.w	r3, r3, #7
 8005010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	021a      	lsls	r2, r3, #8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	431a      	orrs	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2201      	movs	r2, #1
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	43db      	mvns	r3, r3
 8005086:	401a      	ands	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1a      	ldr	r2, [r3, #32]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_TIMEx_PWMN_Start+0x24>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e022      	b.n	800511a <HAL_TIMEx_PWMN_Start+0x6a>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d109      	bne.n	80050ee <HAL_TIMEx_PWMN_Start+0x3e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	bf14      	ite	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	2300      	moveq	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	e015      	b.n	800511a <HAL_TIMEx_PWMN_Start+0x6a>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d109      	bne.n	8005108 <HAL_TIMEx_PWMN_Start+0x58>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e008      	b.n	800511a <HAL_TIMEx_PWMN_Start+0x6a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e069      	b.n	80051f6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <HAL_TIMEx_PWMN_Start+0x82>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	e013      	b.n	800515a <HAL_TIMEx_PWMN_Start+0xaa>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d104      	bne.n	8005142 <HAL_TIMEx_PWMN_Start+0x92>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005140:	e00b      	b.n	800515a <HAL_TIMEx_PWMN_Start+0xaa>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d104      	bne.n	8005152 <HAL_TIMEx_PWMN_Start+0xa2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005150:	e003      	b.n	800515a <HAL_TIMEx_PWMN_Start+0xaa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2204      	movs	r2, #4
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f9b6 	bl	80054d4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005176:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a20      	ldr	r2, [pc, #128]	; (8005200 <HAL_TIMEx_PWMN_Start+0x150>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d018      	beq.n	80051b4 <HAL_TIMEx_PWMN_Start+0x104>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d013      	beq.n	80051b4 <HAL_TIMEx_PWMN_Start+0x104>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <HAL_TIMEx_PWMN_Start+0x154>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_TIMEx_PWMN_Start+0x104>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <HAL_TIMEx_PWMN_Start+0x158>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_TIMEx_PWMN_Start+0x104>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a19      	ldr	r2, [pc, #100]	; (800520c <HAL_TIMEx_PWMN_Start+0x15c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_TIMEx_PWMN_Start+0x104>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a18      	ldr	r2, [pc, #96]	; (8005210 <HAL_TIMEx_PWMN_Start+0x160>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d115      	bne.n	80051e0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	4b16      	ldr	r3, [pc, #88]	; (8005214 <HAL_TIMEx_PWMN_Start+0x164>)
 80051bc:	4013      	ands	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d015      	beq.n	80051f2 <HAL_TIMEx_PWMN_Start+0x142>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d011      	beq.n	80051f2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051de:	e008      	b.n	80051f2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e000      	b.n	80051f4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40013400 	.word	0x40013400
 8005210:	40014000 	.word	0x40014000
 8005214:	00010007 	.word	0x00010007

08005218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800522c:	2302      	movs	r3, #2
 800522e:	e065      	b.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2b      	ldr	r2, [pc, #172]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d108      	bne.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800526a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d013      	beq.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a17      	ldr	r2, [pc, #92]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a13      	ldr	r2, [pc, #76]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10c      	bne.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40013400 	.word	0x40013400
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40014000 	.word	0x40014000

0800531c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e087      	b.n	8005448 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a27      	ldr	r2, [pc, #156]	; (8005454 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a25      	ldr	r2, [pc, #148]	; (8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d106      	bne.n	80053d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d126      	bne.n	8005436 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	051b      	lsls	r3, r3, #20
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d106      	bne.n	8005436 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400

0800545c <HAL_TIMEx_OC_ConfigPulseOnCompare>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OC_ConfigPulseOnCompare(TIM_HandleTypeDef *htim,
                                                    uint32_t PulseWidthPrescaler,
                                                    uint32_t PulseWidth)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PULSEONCOMPARE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_PULSEONCOMPARE_WIDTH(PulseWidth));
  assert_param(IS_TIM_PULSEONCOMPARE_WIDTHPRESCALER(PulseWidthPrescaler));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_TIMEx_OC_ConfigPulseOnCompare+0x1a>
 8005472:	2302      	movs	r3, #2
 8005474:	e028      	b.n	80054c8 <HAL_TIMEx_OC_ConfigPulseOnCompare+0x6c>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx ECR register value */
  tmpecr = htim->Instance->ECR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	617b      	str	r3, [r7, #20]
  /* Reset the Pulse width prescaler and the Pulse width */
  tmpecr &= ~(TIM_ECR_PWPRSC | TIM_ECR_PW);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 63ff 	bic.w	r3, r3, #133693440	; 0x7f80000
 8005494:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005498:	617b      	str	r3, [r7, #20]
  /* Set the Pulse width prescaler and Pulse width*/
  tmpecr |= PulseWidthPrescaler << TIM_ECR_PWPRSC_Pos;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  tmpecr |= PulseWidth << TIM_ECR_PW_Pos;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
  /* Write to TIMx ECR */
  htim->Instance->ECR = tmpecr;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2204      	movs	r2, #4
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	401a      	ands	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e042      	b.n	80055b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fb fdc2 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2224      	movs	r2, #36	; 0x24
 800554c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f82d 	bl	80055c0 <UART_SetConfig>
 8005566:	4603      	mov	r3, r0
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e022      	b.n	80055b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 faed 	bl	8005b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800558c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800559c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fb74 	bl	8005c9c <UART_CheckIdleState>
 80055b4:	4603      	mov	r3, r0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b08c      	sub	sp, #48	; 0x30
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	431a      	orrs	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	431a      	orrs	r2, r3
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4bab      	ldr	r3, [pc, #684]	; (800589c <UART_SetConfig+0x2dc>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4aa0      	ldr	r2, [pc, #640]	; (80058a0 <UART_SetConfig+0x2e0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005628:	4313      	orrs	r3, r2
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005636:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005640:	430b      	orrs	r3, r1
 8005642:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	f023 010f 	bic.w	r1, r3, #15
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a91      	ldr	r2, [pc, #580]	; (80058a4 <UART_SetConfig+0x2e4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d125      	bne.n	80056b0 <UART_SetConfig+0xf0>
 8005664:	4b90      	ldr	r3, [pc, #576]	; (80058a8 <UART_SetConfig+0x2e8>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b03      	cmp	r3, #3
 8005670:	d81a      	bhi.n	80056a8 <UART_SetConfig+0xe8>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0xb8>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	08005689 	.word	0x08005689
 800567c:	08005699 	.word	0x08005699
 8005680:	08005691 	.word	0x08005691
 8005684:	080056a1 	.word	0x080056a1
 8005688:	2301      	movs	r3, #1
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e0d6      	b.n	800583e <UART_SetConfig+0x27e>
 8005690:	2302      	movs	r3, #2
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e0d2      	b.n	800583e <UART_SetConfig+0x27e>
 8005698:	2304      	movs	r3, #4
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e0ce      	b.n	800583e <UART_SetConfig+0x27e>
 80056a0:	2308      	movs	r3, #8
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e0ca      	b.n	800583e <UART_SetConfig+0x27e>
 80056a8:	2310      	movs	r3, #16
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ae:	e0c6      	b.n	800583e <UART_SetConfig+0x27e>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a7d      	ldr	r2, [pc, #500]	; (80058ac <UART_SetConfig+0x2ec>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d138      	bne.n	800572c <UART_SetConfig+0x16c>
 80056ba:	4b7b      	ldr	r3, [pc, #492]	; (80058a8 <UART_SetConfig+0x2e8>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d82d      	bhi.n	8005724 <UART_SetConfig+0x164>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0x110>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	08005705 	.word	0x08005705
 80056d4:	08005725 	.word	0x08005725
 80056d8:	08005725 	.word	0x08005725
 80056dc:	08005725 	.word	0x08005725
 80056e0:	08005715 	.word	0x08005715
 80056e4:	08005725 	.word	0x08005725
 80056e8:	08005725 	.word	0x08005725
 80056ec:	08005725 	.word	0x08005725
 80056f0:	0800570d 	.word	0x0800570d
 80056f4:	08005725 	.word	0x08005725
 80056f8:	08005725 	.word	0x08005725
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800571d 	.word	0x0800571d
 8005704:	2300      	movs	r3, #0
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800570a:	e098      	b.n	800583e <UART_SetConfig+0x27e>
 800570c:	2302      	movs	r3, #2
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005712:	e094      	b.n	800583e <UART_SetConfig+0x27e>
 8005714:	2304      	movs	r3, #4
 8005716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800571a:	e090      	b.n	800583e <UART_SetConfig+0x27e>
 800571c:	2308      	movs	r3, #8
 800571e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005722:	e08c      	b.n	800583e <UART_SetConfig+0x27e>
 8005724:	2310      	movs	r3, #16
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572a:	e088      	b.n	800583e <UART_SetConfig+0x27e>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5f      	ldr	r2, [pc, #380]	; (80058b0 <UART_SetConfig+0x2f0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d125      	bne.n	8005782 <UART_SetConfig+0x1c2>
 8005736:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <UART_SetConfig+0x2e8>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d016      	beq.n	8005772 <UART_SetConfig+0x1b2>
 8005744:	2b30      	cmp	r3, #48	; 0x30
 8005746:	d818      	bhi.n	800577a <UART_SetConfig+0x1ba>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d00a      	beq.n	8005762 <UART_SetConfig+0x1a2>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d814      	bhi.n	800577a <UART_SetConfig+0x1ba>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <UART_SetConfig+0x19a>
 8005754:	2b10      	cmp	r3, #16
 8005756:	d008      	beq.n	800576a <UART_SetConfig+0x1aa>
 8005758:	e00f      	b.n	800577a <UART_SetConfig+0x1ba>
 800575a:	2300      	movs	r3, #0
 800575c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005760:	e06d      	b.n	800583e <UART_SetConfig+0x27e>
 8005762:	2302      	movs	r3, #2
 8005764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005768:	e069      	b.n	800583e <UART_SetConfig+0x27e>
 800576a:	2304      	movs	r3, #4
 800576c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005770:	e065      	b.n	800583e <UART_SetConfig+0x27e>
 8005772:	2308      	movs	r3, #8
 8005774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005778:	e061      	b.n	800583e <UART_SetConfig+0x27e>
 800577a:	2310      	movs	r3, #16
 800577c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005780:	e05d      	b.n	800583e <UART_SetConfig+0x27e>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a4b      	ldr	r2, [pc, #300]	; (80058b4 <UART_SetConfig+0x2f4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d125      	bne.n	80057d8 <UART_SetConfig+0x218>
 800578c:	4b46      	ldr	r3, [pc, #280]	; (80058a8 <UART_SetConfig+0x2e8>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005796:	2bc0      	cmp	r3, #192	; 0xc0
 8005798:	d016      	beq.n	80057c8 <UART_SetConfig+0x208>
 800579a:	2bc0      	cmp	r3, #192	; 0xc0
 800579c:	d818      	bhi.n	80057d0 <UART_SetConfig+0x210>
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	d00a      	beq.n	80057b8 <UART_SetConfig+0x1f8>
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d814      	bhi.n	80057d0 <UART_SetConfig+0x210>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <UART_SetConfig+0x1f0>
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d008      	beq.n	80057c0 <UART_SetConfig+0x200>
 80057ae:	e00f      	b.n	80057d0 <UART_SetConfig+0x210>
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e042      	b.n	800583e <UART_SetConfig+0x27e>
 80057b8:	2302      	movs	r3, #2
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e03e      	b.n	800583e <UART_SetConfig+0x27e>
 80057c0:	2304      	movs	r3, #4
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e03a      	b.n	800583e <UART_SetConfig+0x27e>
 80057c8:	2308      	movs	r3, #8
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ce:	e036      	b.n	800583e <UART_SetConfig+0x27e>
 80057d0:	2310      	movs	r3, #16
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d6:	e032      	b.n	800583e <UART_SetConfig+0x27e>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a30      	ldr	r2, [pc, #192]	; (80058a0 <UART_SetConfig+0x2e0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d12a      	bne.n	8005838 <UART_SetConfig+0x278>
 80057e2:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <UART_SetConfig+0x2e8>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f0:	d01a      	beq.n	8005828 <UART_SetConfig+0x268>
 80057f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f6:	d81b      	bhi.n	8005830 <UART_SetConfig+0x270>
 80057f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fc:	d00c      	beq.n	8005818 <UART_SetConfig+0x258>
 80057fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005802:	d815      	bhi.n	8005830 <UART_SetConfig+0x270>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <UART_SetConfig+0x250>
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d008      	beq.n	8005820 <UART_SetConfig+0x260>
 800580e:	e00f      	b.n	8005830 <UART_SetConfig+0x270>
 8005810:	2300      	movs	r3, #0
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005816:	e012      	b.n	800583e <UART_SetConfig+0x27e>
 8005818:	2302      	movs	r3, #2
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581e:	e00e      	b.n	800583e <UART_SetConfig+0x27e>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005826:	e00a      	b.n	800583e <UART_SetConfig+0x27e>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582e:	e006      	b.n	800583e <UART_SetConfig+0x27e>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005836:	e002      	b.n	800583e <UART_SetConfig+0x27e>
 8005838:	2310      	movs	r3, #16
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <UART_SetConfig+0x2e0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	f040 80a8 	bne.w	800599a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800584a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800584e:	2b08      	cmp	r3, #8
 8005850:	d834      	bhi.n	80058bc <UART_SetConfig+0x2fc>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x298>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	0800587d 	.word	0x0800587d
 800585c:	080058bd 	.word	0x080058bd
 8005860:	08005885 	.word	0x08005885
 8005864:	080058bd 	.word	0x080058bd
 8005868:	0800588b 	.word	0x0800588b
 800586c:	080058bd 	.word	0x080058bd
 8005870:	080058bd 	.word	0x080058bd
 8005874:	080058bd 	.word	0x080058bd
 8005878:	08005893 	.word	0x08005893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fd ff68 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005882:	e021      	b.n	80058c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <UART_SetConfig+0x2f8>)
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005888:	e01e      	b.n	80058c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588a:	f7fd fef3 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800588e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005890:	e01a      	b.n	80058c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005898:	e016      	b.n	80058c8 <UART_SetConfig+0x308>
 800589a:	bf00      	nop
 800589c:	cfff69f3 	.word	0xcfff69f3
 80058a0:	40008000 	.word	0x40008000
 80058a4:	40013800 	.word	0x40013800
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40004400 	.word	0x40004400
 80058b0:	40004800 	.word	0x40004800
 80058b4:	40004c00 	.word	0x40004c00
 80058b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 812a 	beq.w	8005b24 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	4a9e      	ldr	r2, [pc, #632]	; (8005b50 <UART_SetConfig+0x590>)
 80058d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058da:	461a      	mov	r2, r3
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4413      	add	r3, r2
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d305      	bcc.n	8005900 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d903      	bls.n	8005908 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005906:	e10d      	b.n	8005b24 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	2200      	movs	r2, #0
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	60fa      	str	r2, [r7, #12]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	4a8e      	ldr	r2, [pc, #568]	; (8005b50 <UART_SetConfig+0x590>)
 8005916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800591a:	b29b      	uxth	r3, r3
 800591c:	2200      	movs	r2, #0
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800592a:	f7fa fc75 	bl	8000218 <__aeabi_uldivmod>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	020b      	lsls	r3, r1, #8
 8005940:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005944:	0202      	lsls	r2, r0, #8
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	6849      	ldr	r1, [r1, #4]
 800594a:	0849      	lsrs	r1, r1, #1
 800594c:	2000      	movs	r0, #0
 800594e:	460c      	mov	r4, r1
 8005950:	4605      	mov	r5, r0
 8005952:	eb12 0804 	adds.w	r8, r2, r4
 8005956:	eb43 0905 	adc.w	r9, r3, r5
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	469a      	mov	sl, r3
 8005962:	4693      	mov	fp, r2
 8005964:	4652      	mov	r2, sl
 8005966:	465b      	mov	r3, fp
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	f7fa fc54 	bl	8000218 <__aeabi_uldivmod>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4613      	mov	r3, r2
 8005976:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800597e:	d308      	bcc.n	8005992 <UART_SetConfig+0x3d2>
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d204      	bcs.n	8005992 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	e0c8      	b.n	8005b24 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005998:	e0c4      	b.n	8005b24 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a2:	d167      	bne.n	8005a74 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80059a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d828      	bhi.n	80059fe <UART_SetConfig+0x43e>
 80059ac:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0x3f4>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	080059ff 	.word	0x080059ff
 80059c4:	080059ef 	.word	0x080059ef
 80059c8:	080059ff 	.word	0x080059ff
 80059cc:	080059ff 	.word	0x080059ff
 80059d0:	080059ff 	.word	0x080059ff
 80059d4:	080059f7 	.word	0x080059f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fd feba 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 80059dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059de:	e014      	b.n	8005a0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e0:	f7fd fecc 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 80059e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059e6:	e010      	b.n	8005a0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <UART_SetConfig+0x594>)
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059ec:	e00d      	b.n	8005a0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ee:	f7fd fe41 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059f4:	e009      	b.n	8005a0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059fc:	e005      	b.n	8005a0a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8089 	beq.w	8005b24 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	4a4e      	ldr	r2, [pc, #312]	; (8005b50 <UART_SetConfig+0x590>)
 8005a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a24:	005a      	lsls	r2, r3, #1
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	441a      	add	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2b0f      	cmp	r3, #15
 8005a3c:	d916      	bls.n	8005a6c <UART_SetConfig+0x4ac>
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d212      	bcs.n	8005a6c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f023 030f 	bic.w	r3, r3, #15
 8005a4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	8bfb      	ldrh	r3, [r7, #30]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	8bfa      	ldrh	r2, [r7, #30]
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	e05b      	b.n	8005b24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a72:	e057      	b.n	8005b24 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d828      	bhi.n	8005ace <UART_SetConfig+0x50e>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <UART_SetConfig+0x4c4>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005ab1 	.word	0x08005ab1
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	08005acf 	.word	0x08005acf
 8005a94:	08005abf 	.word	0x08005abf
 8005a98:	08005acf 	.word	0x08005acf
 8005a9c:	08005acf 	.word	0x08005acf
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005ac7 	.word	0x08005ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fd fe52 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005aac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aae:	e014      	b.n	8005ada <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab0:	f7fd fe64 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab6:	e010      	b.n	8005ada <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab8:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <UART_SetConfig+0x594>)
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005abc:	e00d      	b.n	8005ada <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005abe:	f7fd fdd9 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac4:	e009      	b.n	8005ada <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005acc:	e005      	b.n	8005ada <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ad8:	bf00      	nop
    }

    if (pclk != 0U)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d021      	beq.n	8005b24 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	4a1a      	ldr	r2, [pc, #104]	; (8005b50 <UART_SetConfig+0x590>)
 8005ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	fbb3 f2f2 	udiv	r2, r3, r2
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	441a      	add	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d909      	bls.n	8005b1e <UART_SetConfig+0x55e>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b10:	d205      	bcs.n	8005b1e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60da      	str	r2, [r3, #12]
 8005b1c:	e002      	b.n	8005b24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b40:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3730      	adds	r7, #48	; 0x30
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4e:	bf00      	nop
 8005b50:	08006150 	.word	0x08006150
 8005b54:	00f42400 	.word	0x00f42400

08005b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01a      	beq.n	8005c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c56:	d10a      	bne.n	8005c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
  }
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cac:	f7fb fb3e 	bl	800132c <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d10e      	bne.n	8005cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f82f 	bl	8005d32 <UART_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e025      	b.n	8005d2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d10e      	bne.n	8005d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f819 	bl	8005d32 <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e00f      	b.n	8005d2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b09c      	sub	sp, #112	; 0x70
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d42:	e0a9      	b.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	f000 80a5 	beq.w	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fb faed 	bl	800132c <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d140      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d78:	667b      	str	r3, [r7, #100]	; 0x64
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	663b      	str	r3, [r7, #96]	; 0x60
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e069      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d051      	beq.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e02:	d149      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e6      	bne.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e60:	623a      	str	r2, [r7, #32]
 8005e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	69f9      	ldr	r1, [r7, #28]
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e010      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	f43f af46 	beq.w	8005d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3770      	adds	r7, #112	; 0x70
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e027      	b.n	8005f28 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2224      	movs	r2, #36	; 0x24
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e02d      	b.n	8005fa8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2224      	movs	r2, #36	; 0x24
 8005f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f84f 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e02d      	b.n	8006024 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f811 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800604c:	e031      	b.n	80060b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800604e:	2308      	movs	r3, #8
 8006050:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006052:	2308      	movs	r3, #8
 8006054:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0e5b      	lsrs	r3, r3, #25
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	0f5b      	lsrs	r3, r3, #29
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	7b3a      	ldrb	r2, [r7, #12]
 800607a:	4911      	ldr	r1, [pc, #68]	; (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800607c:	5c8a      	ldrb	r2, [r1, r2]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006082:	7b3a      	ldrb	r2, [r7, #12]
 8006084:	490f      	ldr	r1, [pc, #60]	; (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006086:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006088:	fb93 f3f2 	sdiv	r3, r3, r2
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	7b7a      	ldrb	r2, [r7, #13]
 8006098:	4909      	ldr	r1, [pc, #36]	; (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800609a:	5c8a      	ldrb	r2, [r1, r2]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060a0:	7b7a      	ldrb	r2, [r7, #13]
 80060a2:	4908      	ldr	r1, [pc, #32]	; (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 80060a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	08006168 	.word	0x08006168
 80060c4:	08006170 	.word	0x08006170

080060c8 <__libc_init_array>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	4d0d      	ldr	r5, [pc, #52]	; (8006100 <__libc_init_array+0x38>)
 80060cc:	4c0d      	ldr	r4, [pc, #52]	; (8006104 <__libc_init_array+0x3c>)
 80060ce:	1b64      	subs	r4, r4, r5
 80060d0:	10a4      	asrs	r4, r4, #2
 80060d2:	2600      	movs	r6, #0
 80060d4:	42a6      	cmp	r6, r4
 80060d6:	d109      	bne.n	80060ec <__libc_init_array+0x24>
 80060d8:	4d0b      	ldr	r5, [pc, #44]	; (8006108 <__libc_init_array+0x40>)
 80060da:	4c0c      	ldr	r4, [pc, #48]	; (800610c <__libc_init_array+0x44>)
 80060dc:	f000 f820 	bl	8006120 <_init>
 80060e0:	1b64      	subs	r4, r4, r5
 80060e2:	10a4      	asrs	r4, r4, #2
 80060e4:	2600      	movs	r6, #0
 80060e6:	42a6      	cmp	r6, r4
 80060e8:	d105      	bne.n	80060f6 <__libc_init_array+0x2e>
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f0:	4798      	blx	r3
 80060f2:	3601      	adds	r6, #1
 80060f4:	e7ee      	b.n	80060d4 <__libc_init_array+0xc>
 80060f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fa:	4798      	blx	r3
 80060fc:	3601      	adds	r6, #1
 80060fe:	e7f2      	b.n	80060e6 <__libc_init_array+0x1e>
 8006100:	08006180 	.word	0x08006180
 8006104:	08006180 	.word	0x08006180
 8006108:	08006180 	.word	0x08006180
 800610c:	08006184 	.word	0x08006184

08006110 <memset>:
 8006110:	4402      	add	r2, r0
 8006112:	4603      	mov	r3, r0
 8006114:	4293      	cmp	r3, r2
 8006116:	d100      	bne.n	800611a <memset+0xa>
 8006118:	4770      	bx	lr
 800611a:	f803 1b01 	strb.w	r1, [r3], #1
 800611e:	e7f9      	b.n	8006114 <memset+0x4>

08006120 <_init>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr

0800612c <_fini>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr

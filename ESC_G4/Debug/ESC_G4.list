
ESC_G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800761c  0800761c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007624  08007624  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800762c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005098  2000000c  08007638  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050a4  08007638  000250a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001739e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002753  00000000  00000000  000373da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00039b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003af18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f68a  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f81  00000000  00000000  0005b8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d739a  00000000  00000000  00071833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148bcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a4  00000000  00000000  00148c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080075c4 	.word	0x080075c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080075c4 	.word	0x080075c4

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295
 80009a8:	f000 b974 	b.w	8000c94 <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9d08      	ldr	r5, [sp, #32]
 80009ca:	4604      	mov	r4, r0
 80009cc:	468e      	mov	lr, r1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d14d      	bne.n	8000a6e <__udivmoddi4+0xaa>
 80009d2:	428a      	cmp	r2, r1
 80009d4:	4694      	mov	ip, r2
 80009d6:	d969      	bls.n	8000aac <__udivmoddi4+0xe8>
 80009d8:	fab2 f282 	clz	r2, r2
 80009dc:	b152      	cbz	r2, 80009f4 <__udivmoddi4+0x30>
 80009de:	fa01 f302 	lsl.w	r3, r1, r2
 80009e2:	f1c2 0120 	rsb	r1, r2, #32
 80009e6:	fa20 f101 	lsr.w	r1, r0, r1
 80009ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ee:	ea41 0e03 	orr.w	lr, r1, r3
 80009f2:	4094      	lsls	r4, r2
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	0c21      	lsrs	r1, r4, #16
 80009fa:	fbbe f6f8 	udiv	r6, lr, r8
 80009fe:	fa1f f78c 	uxth.w	r7, ip
 8000a02:	fb08 e316 	mls	r3, r8, r6, lr
 8000a06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a0a:	fb06 f107 	mul.w	r1, r6, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d90a      	bls.n	8000a28 <__udivmoddi4+0x64>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a1a:	f080 811f 	bcs.w	8000c5c <__udivmoddi4+0x298>
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	f240 811c 	bls.w	8000c5c <__udivmoddi4+0x298>
 8000a24:	3e02      	subs	r6, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1a5b      	subs	r3, r3, r1
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a30:	fb08 3310 	mls	r3, r8, r0, r3
 8000a34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a38:	fb00 f707 	mul.w	r7, r0, r7
 8000a3c:	42a7      	cmp	r7, r4
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x92>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a48:	f080 810a 	bcs.w	8000c60 <__udivmoddi4+0x29c>
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	f240 8107 	bls.w	8000c60 <__udivmoddi4+0x29c>
 8000a52:	4464      	add	r4, ip
 8000a54:	3802      	subs	r0, #2
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	1be4      	subs	r4, r4, r7
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	b11d      	cbz	r5, 8000a68 <__udivmoddi4+0xa4>
 8000a60:	40d4      	lsrs	r4, r2
 8000a62:	2300      	movs	r3, #0
 8000a64:	e9c5 4300 	strd	r4, r3, [r5]
 8000a68:	4631      	mov	r1, r6
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d909      	bls.n	8000a86 <__udivmoddi4+0xc2>
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	f000 80ef 	beq.w	8000c56 <__udivmoddi4+0x292>
 8000a78:	2600      	movs	r6, #0
 8000a7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a7e:	4630      	mov	r0, r6
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	fab3 f683 	clz	r6, r3
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d14a      	bne.n	8000b24 <__udivmoddi4+0x160>
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d302      	bcc.n	8000a98 <__udivmoddi4+0xd4>
 8000a92:	4282      	cmp	r2, r0
 8000a94:	f200 80f9 	bhi.w	8000c8a <__udivmoddi4+0x2c6>
 8000a98:	1a84      	subs	r4, r0, r2
 8000a9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	469e      	mov	lr, r3
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d0e0      	beq.n	8000a68 <__udivmoddi4+0xa4>
 8000aa6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aaa:	e7dd      	b.n	8000a68 <__udivmoddi4+0xa4>
 8000aac:	b902      	cbnz	r2, 8000ab0 <__udivmoddi4+0xec>
 8000aae:	deff      	udf	#255	; 0xff
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	f040 8092 	bne.w	8000bde <__udivmoddi4+0x21a>
 8000aba:	eba1 010c 	sub.w	r1, r1, ip
 8000abe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac2:	fa1f fe8c 	uxth.w	lr, ip
 8000ac6:	2601      	movs	r6, #1
 8000ac8:	0c20      	lsrs	r0, r4, #16
 8000aca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ace:	fb07 1113 	mls	r1, r7, r3, r1
 8000ad2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ad6:	fb0e f003 	mul.w	r0, lr, r3
 8000ada:	4288      	cmp	r0, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x12c>
 8000ade:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x12a>
 8000ae8:	4288      	cmp	r0, r1
 8000aea:	f200 80cb 	bhi.w	8000c84 <__udivmoddi4+0x2c0>
 8000aee:	4643      	mov	r3, r8
 8000af0:	1a09      	subs	r1, r1, r0
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af8:	fb07 1110 	mls	r1, r7, r0, r1
 8000afc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b00:	fb0e fe00 	mul.w	lr, lr, r0
 8000b04:	45a6      	cmp	lr, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x156>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b10:	d202      	bcs.n	8000b18 <__udivmoddi4+0x154>
 8000b12:	45a6      	cmp	lr, r4
 8000b14:	f200 80bb 	bhi.w	8000c8e <__udivmoddi4+0x2ca>
 8000b18:	4608      	mov	r0, r1
 8000b1a:	eba4 040e 	sub.w	r4, r4, lr
 8000b1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b22:	e79c      	b.n	8000a5e <__udivmoddi4+0x9a>
 8000b24:	f1c6 0720 	rsb	r7, r6, #32
 8000b28:	40b3      	lsls	r3, r6
 8000b2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b32:	fa20 f407 	lsr.w	r4, r0, r7
 8000b36:	fa01 f306 	lsl.w	r3, r1, r6
 8000b3a:	431c      	orrs	r4, r3
 8000b3c:	40f9      	lsrs	r1, r7
 8000b3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b42:	fa00 f306 	lsl.w	r3, r0, r6
 8000b46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b4a:	0c20      	lsrs	r0, r4, #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fb09 1118 	mls	r1, r9, r8, r1
 8000b54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b58:	fb08 f00e 	mul.w	r0, r8, lr
 8000b5c:	4288      	cmp	r0, r1
 8000b5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b62:	d90b      	bls.n	8000b7c <__udivmoddi4+0x1b8>
 8000b64:	eb1c 0101 	adds.w	r1, ip, r1
 8000b68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b6c:	f080 8088 	bcs.w	8000c80 <__udivmoddi4+0x2bc>
 8000b70:	4288      	cmp	r0, r1
 8000b72:	f240 8085 	bls.w	8000c80 <__udivmoddi4+0x2bc>
 8000b76:	f1a8 0802 	sub.w	r8, r8, #2
 8000b7a:	4461      	add	r1, ip
 8000b7c:	1a09      	subs	r1, r1, r0
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b84:	fb09 1110 	mls	r1, r9, r0, r1
 8000b88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	458e      	cmp	lr, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x1e2>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b9c:	d26c      	bcs.n	8000c78 <__udivmoddi4+0x2b4>
 8000b9e:	458e      	cmp	lr, r1
 8000ba0:	d96a      	bls.n	8000c78 <__udivmoddi4+0x2b4>
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000baa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bae:	eba1 010e 	sub.w	r1, r1, lr
 8000bb2:	42a1      	cmp	r1, r4
 8000bb4:	46c8      	mov	r8, r9
 8000bb6:	46a6      	mov	lr, r4
 8000bb8:	d356      	bcc.n	8000c68 <__udivmoddi4+0x2a4>
 8000bba:	d053      	beq.n	8000c64 <__udivmoddi4+0x2a0>
 8000bbc:	b15d      	cbz	r5, 8000bd6 <__udivmoddi4+0x212>
 8000bbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000bc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bca:	fa22 f306 	lsr.w	r3, r2, r6
 8000bce:	40f1      	lsrs	r1, r6
 8000bd0:	431f      	orrs	r7, r3
 8000bd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	f1c2 0320 	rsb	r3, r2, #32
 8000be2:	40d8      	lsrs	r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4301      	orrs	r1, r0
 8000bf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf4:	fa1f fe8c 	uxth.w	lr, ip
 8000bf8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bfc:	fb07 3610 	mls	r6, r7, r0, r3
 8000c00:	0c0b      	lsrs	r3, r1, #16
 8000c02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c06:	fb00 f60e 	mul.w	r6, r0, lr
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x260>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c1a:	d22f      	bcs.n	8000c7c <__udivmoddi4+0x2b8>
 8000c1c:	429e      	cmp	r6, r3
 8000c1e:	d92d      	bls.n	8000c7c <__udivmoddi4+0x2b8>
 8000c20:	3802      	subs	r0, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1b9b      	subs	r3, r3, r6
 8000c26:	b289      	uxth	r1, r1
 8000c28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c34:	fb06 f30e 	mul.w	r3, r6, lr
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x28a>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c44:	d216      	bcs.n	8000c74 <__udivmoddi4+0x2b0>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d914      	bls.n	8000c74 <__udivmoddi4+0x2b0>
 8000c4a:	3e02      	subs	r6, #2
 8000c4c:	4461      	add	r1, ip
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c54:	e738      	b.n	8000ac8 <__udivmoddi4+0x104>
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e705      	b.n	8000a68 <__udivmoddi4+0xa4>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e3      	b.n	8000a28 <__udivmoddi4+0x64>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6f8      	b.n	8000a56 <__udivmoddi4+0x92>
 8000c64:	454b      	cmp	r3, r9
 8000c66:	d2a9      	bcs.n	8000bbc <__udivmoddi4+0x1f8>
 8000c68:	ebb9 0802 	subs.w	r8, r9, r2
 8000c6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7a3      	b.n	8000bbc <__udivmoddi4+0x1f8>
 8000c74:	4646      	mov	r6, r8
 8000c76:	e7ea      	b.n	8000c4e <__udivmoddi4+0x28a>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	e794      	b.n	8000ba6 <__udivmoddi4+0x1e2>
 8000c7c:	4640      	mov	r0, r8
 8000c7e:	e7d1      	b.n	8000c24 <__udivmoddi4+0x260>
 8000c80:	46d0      	mov	r8, sl
 8000c82:	e77b      	b.n	8000b7c <__udivmoddi4+0x1b8>
 8000c84:	3b02      	subs	r3, #2
 8000c86:	4461      	add	r1, ip
 8000c88:	e732      	b.n	8000af0 <__udivmoddi4+0x12c>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e709      	b.n	8000aa2 <__udivmoddi4+0xde>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	e742      	b.n	8000b1a <__udivmoddi4+0x156>

08000c94 <__aeabi_idiv0>:
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <HAL_ADC_ConvCpltCallback>:
  */
volatile uint16_t adc_uvw[5000], adc_x[5000], i_1 = 0, i_2 = 0;
unsigned int p = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1 && i_1 < 5000) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ca8:	d10e      	bne.n	8000cc8 <HAL_ADC_ConvCpltCallback+0x30>
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d807      	bhi.n	8000cc8 <HAL_ADC_ConvCpltCallback+0x30>
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
    	adc_uvw[0] = HAL_ADC_GetValue(&hadc1);
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <HAL_ADC_ConvCpltCallback+0x64>)
 8000cba:	f002 f8cb 	bl	8002e54 <HAL_ADC_GetValue>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_ADC_ConvCpltCallback+0x68>)
 8000cc4:	801a      	strh	r2, [r3, #0]
    } else if(hadc->Instance == ADC2 && i_2 < 5000) {
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
		adc_x[0] = HAL_ADC_GetValue(&hadc2);
//		adc_x[i_2++] = HAL_ADC_GetValue(&hadc2);
	}
}
 8000cc6:	e012      	b.n	8000cee <HAL_ADC_ConvCpltCallback+0x56>
    } else if(hadc->Instance == ADC2 && i_2 < 5000) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_ADC_ConvCpltCallback+0x56>
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d806      	bhi.n	8000cee <HAL_ADC_ConvCpltCallback+0x56>
		adc_x[0] = HAL_ADC_GetValue(&hadc2);
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <HAL_ADC_ConvCpltCallback+0x74>)
 8000ce2:	f002 f8b7 	bl	8002e54 <HAL_ADC_GetValue>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_ADC_ConvCpltCallback+0x78>)
 8000cec:	801a      	strh	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20005094 	.word	0x20005094
 8000cfc:	20000028 	.word	0x20000028
 8000d00:	20000274 	.word	0x20000274
 8000d04:	50000100 	.word	0x50000100
 8000d08:	20005096 	.word	0x20005096
 8000d0c:	20000094 	.word	0x20000094
 8000d10:	20002984 	.word	0x20002984

08000d14 <ADC_Select_CH>:

void ADC_Select_CH(unsigned char ch)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	ADC1->CR &= ~ADC_CR_ADEN;
 8000d1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 &= 0xFFFFF83F;
 8000d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d38:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= ch << ADC_SQR1_SQ1_Pos ;
 8000d3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	0192      	lsls	r2, r2, #6
 8000d48:	4611      	mov	r1, r2
 8000d4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d4e:	430b      	orrs	r3, r1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->CR |= ADC_CR_ADEN;
 8000d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6093      	str	r3, [r2, #8]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <delay_us>:

void delay_us(unsigned long t) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <delay_us+0x2c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < t);
 8000d80:	bf00      	nop
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <delay_us+0x2c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8f9      	bhi.n	8000d82 <delay_us+0x12>
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	2000014c 	.word	0x2000014c

08000da0 <BLDC_phase>:
	while (__HAL_TIM_GET_COUNTER(&htim2) < (tim_temp - advance));

	return 1;
}

void BLDC_phase(unsigned char phase, float p) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	ed87 0a00 	vstr	s0, [r7]
 8000dac:	71fb      	strb	r3, [r7, #7]
	if(phase == 1) {
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d126      	bne.n	8000e02 <BLDC_phase+0x62>
		TIM1->CCER |= TIM_CCER_CC1NP;
 8000db4:	4b7e      	ldr	r3, [pc, #504]	; (8000fb0 <BLDC_phase+0x210>)
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4a7d      	ldr	r2, [pc, #500]	; (8000fb0 <BLDC_phase+0x210>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000dc0:	4b7b      	ldr	r3, [pc, #492]	; (8000fb0 <BLDC_phase+0x210>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	4a7a      	ldr	r2, [pc, #488]	; (8000fb0 <BLDC_phase+0x210>)
 8000dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dca:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000dcc:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <BLDC_phase+0x210>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4a77      	ldr	r2, [pc, #476]	; (8000fb0 <BLDC_phase+0x210>)
 8000dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dd6:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8000dd8:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <BLDC_phase+0x210>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	4a74      	ldr	r2, [pc, #464]	; (8000fb0 <BLDC_phase+0x210>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8000de4:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <BLDC_phase+0x210>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p;
 8000dea:	4b71      	ldr	r3, [pc, #452]	; (8000fb0 <BLDC_phase+0x210>)
 8000dec:	edd7 7a00 	vldr	s15, [r7]
 8000df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df4:	ee17 2a90 	vmov	r2, s15
 8000df8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000dfa:	4b6d      	ldr	r3, [pc, #436]	; (8000fb0 <BLDC_phase+0x210>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->EGR |= TIM_EGR_COMG;
		TIM1->CCR1 = p;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 8000e00:	e0d0      	b.n	8000fa4 <BLDC_phase+0x204>
	} else if(phase == 2) {
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d126      	bne.n	8000e56 <BLDC_phase+0xb6>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000e08:	4b69      	ldr	r3, [pc, #420]	; (8000fb0 <BLDC_phase+0x210>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a68      	ldr	r2, [pc, #416]	; (8000fb0 <BLDC_phase+0x210>)
 8000e0e:	f023 0308 	bic.w	r3, r3, #8
 8000e12:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000e14:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <BLDC_phase+0x210>)
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	4a65      	ldr	r2, [pc, #404]	; (8000fb0 <BLDC_phase+0x210>)
 8000e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e1e:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8000e20:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <BLDC_phase+0x210>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4a62      	ldr	r2, [pc, #392]	; (8000fb0 <BLDC_phase+0x210>)
 8000e26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e2a:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8000e2c:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <BLDC_phase+0x210>)
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <BLDC_phase+0x210>)
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8000e38:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <BLDC_phase+0x210>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = p;
 8000e3e:	4b5c      	ldr	r3, [pc, #368]	; (8000fb0 <BLDC_phase+0x210>)
 8000e40:	edd7 7a00 	vldr	s15, [r7]
 8000e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e48:	ee17 2a90 	vmov	r2, s15
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000e4e:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <BLDC_phase+0x210>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e54:	e0a6      	b.n	8000fa4 <BLDC_phase+0x204>
	} else if(phase == 3) {
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d126      	bne.n	8000eaa <BLDC_phase+0x10a>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000e5c:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <BLDC_phase+0x210>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	4a53      	ldr	r2, [pc, #332]	; (8000fb0 <BLDC_phase+0x210>)
 8000e62:	f023 0308 	bic.w	r3, r3, #8
 8000e66:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 8000e68:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <BLDC_phase+0x210>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a50      	ldr	r2, [pc, #320]	; (8000fb0 <BLDC_phase+0x210>)
 8000e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e72:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000e74:	4b4e      	ldr	r3, [pc, #312]	; (8000fb0 <BLDC_phase+0x210>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a4d      	ldr	r2, [pc, #308]	; (8000fb0 <BLDC_phase+0x210>)
 8000e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e7e:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8000e80:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <BLDC_phase+0x210>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <BLDC_phase+0x210>)
 8000e86:	f043 0320 	orr.w	r3, r3, #32
 8000e8a:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 8000e8c:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <BLDC_phase+0x210>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000e92:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <BLDC_phase+0x210>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = p;
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <BLDC_phase+0x210>)
 8000e9a:	edd7 7a00 	vldr	s15, [r7]
 8000e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea2:	ee17 2a90 	vmov	r2, s15
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ea8:	e07c      	b.n	8000fa4 <BLDC_phase+0x204>
	} else if(phase == 4) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d126      	bne.n	8000efe <BLDC_phase+0x15e>
 		TIM1->CCER |= TIM_CCER_CC1NP;
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <BLDC_phase+0x210>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a3e      	ldr	r2, [pc, #248]	; (8000fb0 <BLDC_phase+0x210>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <BLDC_phase+0x210>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a3b      	ldr	r2, [pc, #236]	; (8000fb0 <BLDC_phase+0x210>)
 8000ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ec6:	6213      	str	r3, [r2, #32]
 		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <BLDC_phase+0x210>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <BLDC_phase+0x210>)
 8000ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ed2:	6213      	str	r3, [r2, #32]
 		TIM1->EGR |= TIM_EGR_COMG;
 8000ed4:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <BLDC_phase+0x210>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <BLDC_phase+0x210>)
 8000eda:	f043 0320 	orr.w	r3, r3, #32
 8000ede:	6153      	str	r3, [r2, #20]
 		TIM1->CCR1 = 0;
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <BLDC_phase+0x210>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
 		TIM1->CCR2 = 0;
 8000ee6:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <BLDC_phase+0x210>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
 		TIM1->CCR3 = p;
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <BLDC_phase+0x210>)
 8000eee:	edd7 7a00 	vldr	s15, [r7]
 8000ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef6:	ee17 2a90 	vmov	r2, s15
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000efc:	e052      	b.n	8000fa4 <BLDC_phase+0x204>
	} else if(phase == 5) {
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d126      	bne.n	8000f52 <BLDC_phase+0x1b2>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <BLDC_phase+0x210>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <BLDC_phase+0x210>)
 8000f0a:	f023 0308 	bic.w	r3, r3, #8
 8000f0e:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC2NP;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <BLDC_phase+0x210>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <BLDC_phase+0x210>)
 8000f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f1a:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC3NP;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <BLDC_phase+0x210>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <BLDC_phase+0x210>)
 8000f22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f26:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <BLDC_phase+0x210>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <BLDC_phase+0x210>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <BLDC_phase+0x210>)
 8000f36:	edd7 7a00 	vldr	s15, [r7]
 8000f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f3e:	ee17 2a90 	vmov	r2, s15
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <BLDC_phase+0x210>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <BLDC_phase+0x210>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f50:	e028      	b.n	8000fa4 <BLDC_phase+0x204>
	} else if(phase == 6) {
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d125      	bne.n	8000fa4 <BLDC_phase+0x204>
		TIM1->CCER &= ~TIM_CCER_CC1NP;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <BLDC_phase+0x210>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <BLDC_phase+0x210>)
 8000f5e:	f023 0308 	bic.w	r3, r3, #8
 8000f62:	6213      	str	r3, [r2, #32]
		TIM1->CCER |= TIM_CCER_CC2NP;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <BLDC_phase+0x210>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <BLDC_phase+0x210>)
 8000f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6e:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~TIM_CCER_CC3NP;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <BLDC_phase+0x210>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <BLDC_phase+0x210>)
 8000f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f7a:	6213      	str	r3, [r2, #32]
		TIM1->EGR |= TIM_EGR_COMG;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <BLDC_phase+0x210>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <BLDC_phase+0x210>)
 8000f82:	f043 0320 	orr.w	r3, r3, #32
 8000f86:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = p;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <BLDC_phase+0x210>)
 8000f8a:	edd7 7a00 	vldr	s15, [r7]
 8000f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f92:	ee17 2a90 	vmov	r2, s15
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <BLDC_phase+0x210>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <BLDC_phase+0x210>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40012c00 	.word	0x40012c00
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <main>:

#define LPF 0.4f

int main(void)
{
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc2:	f001 f9d6 	bl	8002372 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc6:	f000 fbdd 	bl	8001784 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fca:	f000 fef7 	bl	8001dbc <MX_GPIO_Init>
	MX_ADC1_Init();
 8000fce:	f000 fc25 	bl	800181c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000fd2:	f000 fc8f 	bl	80018f4 <MX_ADC2_Init>
	MX_TIM1_Init();
 8000fd6:	f000 fcf5 	bl	80019c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000fda:	f000 fde1 	bl	8001ba0 <MX_TIM2_Init>
	MX_TIM4_Init();
 8000fde:	f000 fe53 	bl	8001c88 <MX_TIM4_Init>
//	MX_TIM6_Init();
	MX_USART2_UART_Init();
 8000fe2:	f000 fe9f 	bl	8001d24 <MX_USART2_UART_Init>

//	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4880      	ldr	r0, [pc, #512]	; (80011ec <main+0x234>)
 8000fea:	f004 fae3 	bl	80055b4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	487e      	ldr	r0, [pc, #504]	; (80011ec <main+0x234>)
 8000ff2:	f005 faaf 	bl	8006554 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	487c      	ldr	r0, [pc, #496]	; (80011ec <main+0x234>)
 8000ffa:	f004 fadb 	bl	80055b4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ffe:	2104      	movs	r1, #4
 8001000:	487a      	ldr	r0, [pc, #488]	; (80011ec <main+0x234>)
 8001002:	f005 faa7 	bl	8006554 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001006:	2108      	movs	r1, #8
 8001008:	4878      	ldr	r0, [pc, #480]	; (80011ec <main+0x234>)
 800100a:	f004 fad3 	bl	80055b4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800100e:	2108      	movs	r1, #8
 8001010:	4876      	ldr	r0, [pc, #472]	; (80011ec <main+0x234>)
 8001012:	f005 fa9f 	bl	8006554 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8001016:	210c      	movs	r1, #12
 8001018:	4874      	ldr	r0, [pc, #464]	; (80011ec <main+0x234>)
 800101a:	f004 f969 	bl	80052f0 <HAL_TIM_OC_Start>

	HAL_TIM_Base_Start(&htim1);
 800101e:	4873      	ldr	r0, [pc, #460]	; (80011ec <main+0x234>)
 8001020:	f004 f8a2 	bl	8005168 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8001024:	4872      	ldr	r0, [pc, #456]	; (80011f0 <main+0x238>)
 8001026:	f004 f89f 	bl	8005168 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800102a:	4872      	ldr	r0, [pc, #456]	; (80011f4 <main+0x23c>)
 800102c:	f004 f89c 	bl	8005168 <HAL_TIM_Base_Start>
	//U, V, W:
	//U, V, W, X:

	unsigned int i;
	unsigned char temp[100];
	unsigned int save[5000], save_i = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001036:	f102 0220 	add.w	r2, r2, #32
 800103a:	6013      	str	r3, [r2, #0]
//		c = snprintf(temp, sizeof(temp),"%d, %d, %d, %d\n", val2[0], val1[0], val1[1], val2[1]);
//		HAL_UART_Transmit(&huart2, temp, c, 100);
//		HAL_Delay(2);
//	}

	TIM1->CCR4 = 450;
 800103c:	4b6e      	ldr	r3, [pc, #440]	; (80011f8 <main+0x240>)
 800103e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
	ADC_Select_CH(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff fe65 	bl	8000d14 <ADC_Select_CH>
//	TIM1->CCR1 = 0; //CH1
//	TIM1->CCR2 = 0; //CH2
//	TIM1->CCR3 = 1000; //CH4
//	while(1);

	TIM1->CCER |= TIM_CCER_CC1NP;
 800104a:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <main+0x240>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <main+0x240>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2NP;
 8001056:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <main+0x240>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a67      	ldr	r2, [pc, #412]	; (80011f8 <main+0x240>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3NP;
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <main+0x240>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a64      	ldr	r2, [pc, #400]	; (80011f8 <main+0x240>)
 8001068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800106c:	6213      	str	r3, [r2, #32]
	TIM1->EGR |= TIM_EGR_COMG;
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <main+0x240>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a61      	ldr	r2, [pc, #388]	; (80011f8 <main+0x240>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6153      	str	r3, [r2, #20]
	TIM1->CCR1 = 0;
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <main+0x240>)
 800107c:	2200      	movs	r2, #0
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001080:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <main+0x240>)
 8001082:	2200      	movs	r2, #0
 8001084:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <main+0x240>)
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
	for(i = 0 ; i < 5000; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001092:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e015      	b.n	80010c6 <main+0x10e>
		__HAL_TIM_SET_COUNTER(&htim2,0);
 800109a:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <main+0x238>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 1000);
 80010a2:	bf00      	nop
 80010a4:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <main+0x238>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ae:	d3f9      	bcc.n	80010a4 <main+0xec>
	for(i = 0 ; i < 5000; i++) {
 80010b0:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80010b4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80010c0:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80010ca:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f241 3287 	movw	r2, #4999	; 0x1387
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d9e0      	bls.n	800109a <main+0xe2>
	}

	unsigned int c = 0, d = 0, t = 2000, tt = 100, max_time = 50000;
 80010d8:	2300      	movs	r3, #0
 80010da:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80010de:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	2300      	movs	r3, #0
 80010e6:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80010ea:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010f4:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80010f8:	f102 021c 	add.w	r2, r2, #28
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001104:	f102 0218 	add.w	r2, r2, #24
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800110e:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001112:	f102 0214 	add.w	r2, r2, #20
 8001116:	6013      	str	r3, [r2, #0]
	signed int tim_temp;
	float commutation_time = 6000;
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <main+0x244>)
 800111a:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800111e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001122:	6013      	str	r3, [r2, #0]

//	HAL_ADC_Start_IT(&hadc1);
//	HAL_ADC_Start_IT(&hadc2);

	__HAL_TIM_SET_COUNTER(&htim4,0);
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <main+0x23c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
	p = 550;
 800112c:	4b34      	ldr	r3, [pc, #208]	; (8001200 <main+0x248>)
 800112e:	f240 2226 	movw	r2, #550	; 0x226
 8001132:	601a      	str	r2, [r3, #0]

 	while (1) {
 		for(i = 1; i <= 6; i++) {
 8001134:	2301      	movs	r3, #1
 8001136:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800113a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e288      	b.n	8001654 <main+0x69c>

 			if(i == 1 || i == 4) {
 8001142:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001146:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d006      	beq.n	800115e <main+0x1a6>
 8001150:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001154:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d103      	bne.n	8001166 <main+0x1ae>
 				ADC_Select_CH(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fdd8 	bl	8000d14 <ADC_Select_CH>
 8001164:	e022      	b.n	80011ac <main+0x1f4>
 			} else if (i == 2 || i == 5) {
 8001166:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800116a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d006      	beq.n	8001182 <main+0x1ca>
 8001174:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001178:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d103      	bne.n	800118a <main+0x1d2>
 				ADC_Select_CH(4);
 8001182:	2004      	movs	r0, #4
 8001184:	f7ff fdc6 	bl	8000d14 <ADC_Select_CH>
 8001188:	e010      	b.n	80011ac <main+0x1f4>
 			} else if(i == 3 || i == 6) {
 800118a:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800118e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d006      	beq.n	80011a6 <main+0x1ee>
 8001198:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800119c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d102      	bne.n	80011ac <main+0x1f4>
 				ADC_Select_CH(2);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff fdb4 	bl	8000d14 <ADC_Select_CH>
 			}
 			BLDC_phase(i, p);
 80011ac:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80011b0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <main+0x248>)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	ee07 2a90 	vmov	s15, r2
 80011c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fde9 	bl	8000da0 <BLDC_phase>

// 			delay_ms(t);
			if(!d) {
 80011ce:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80011d2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d115      	bne.n	8001208 <main+0x250>
				delay_us(t);
 80011dc:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80011e0:	f103 031c 	add.w	r3, r3, #28
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f7ff fdc3 	bl	8000d70 <delay_us>
 80011ea:	e228      	b.n	800163e <main+0x686>
 80011ec:	20000100 	.word	0x20000100
 80011f0:	2000014c 	.word	0x2000014c
 80011f4:	20000198 	.word	0x20000198
 80011f8:	40012c00 	.word	0x40012c00
 80011fc:	45bb8000 	.word	0x45bb8000
 8001200:	20005098 	.word	0x20005098
 8001204:	42c80000 	.word	0x42c80000
			} else {
				unsigned initial_delay = 100, advance = 10;
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800120e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	230a      	movs	r3, #10
 8001216:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800121a:	f102 0210 	add.w	r2, r2, #16
 800121e:	6013      	str	r3, [r2, #0]
				float t;

				if(i % 2 == 1) {
 8001220:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001224:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80f7 	beq.w	8001422 <main+0x46a>
//					wait_bemf_falling(commutation_time);

					t = commutation_time;
 8001234:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001238:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001242:	f102 020c 	add.w	r2, r2, #12
 8001246:	6013      	str	r3, [r2, #0]

					if(t/4 > 100) {
 8001248:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800124c:	f103 030c 	add.w	r3, r3, #12
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125c:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 8001204 <main+0x24c>
 8001260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001268:	dd12      	ble.n	8001290 <main+0x2d8>
						initial_delay = t/4;
 800126a:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800126e:	f103 030c 	add.w	r3, r3, #12
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800127a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001282:	ee17 3a90 	vmov	r3, s15
 8001286:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800128a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800128e:	6013      	str	r3, [r2, #0]
					}

					__HAL_TIM_SET_COUNTER(&htim2,0);
 8001290:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <main+0x550>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
					while (__HAL_TIM_GET_COUNTER(&htim2) < initial_delay);
 8001298:	bf00      	nop
 800129a:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <main+0x550>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80012a4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d8f5      	bhi.n	800129a <main+0x2e2>

					if(p > 3000) {
 80012ae:	4b97      	ldr	r3, [pc, #604]	; (800150c <main+0x554>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d926      	bls.n	8001308 <main+0x350>
						while(adc_uvw[0] > adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < t*0.65);
 80012ba:	bf00      	nop
 80012bc:	4b94      	ldr	r3, [pc, #592]	; (8001510 <main+0x558>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b94      	ldr	r3, [pc, #592]	; (8001514 <main+0x55c>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d942      	bls.n	8001352 <main+0x39a>
 80012cc:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <main+0x550>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fa0c 	bl	80006f0 <__aeabi_ui2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80012e0:	f103 030c 	add.w	r3, r3, #12
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	f7ff fa25 	bl	8000734 <__aeabi_f2d>
 80012ea:	a383      	add	r3, pc, #524	; (adr r3, 80014f8 <main+0x540>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7fe ff92 	bl	8000218 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7ff fad2 	bl	80008a4 <__aeabi_dcmplt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1da      	bne.n	80012bc <main+0x304>
 8001306:	e024      	b.n	8001352 <main+0x39a>
					} else {
						while(adc_uvw[0] > 1732 && __HAL_TIM_GET_COUNTER(&htim2) < t*0.65);
 8001308:	bf00      	nop
 800130a:	4b81      	ldr	r3, [pc, #516]	; (8001510 <main+0x558>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8001314:	4293      	cmp	r3, r2
 8001316:	d91c      	bls.n	8001352 <main+0x39a>
 8001318:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <main+0x550>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f9e6 	bl	80006f0 <__aeabi_ui2d>
 8001324:	4604      	mov	r4, r0
 8001326:	460d      	mov	r5, r1
 8001328:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800132c:	f103 030c 	add.w	r3, r3, #12
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f7ff f9ff 	bl	8000734 <__aeabi_f2d>
 8001336:	a370      	add	r3, pc, #448	; (adr r3, 80014f8 <main+0x540>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ff6c 	bl	8000218 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff faac 	bl	80008a4 <__aeabi_dcmplt>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1db      	bne.n	800130a <main+0x352>
					}
					commutation_time = LPF * (float)__HAL_TIM_GET_COUNTER(&htim4) + (1.0-LPF) * commutation_time;
 8001352:	4b71      	ldr	r3, [pc, #452]	; (8001518 <main+0x560>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001360:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800151c <main+0x564>
 8001364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001368:	ee17 0a90 	vmov	r0, s15
 800136c:	f7ff f9e2 	bl	8000734 <__aeabi_f2d>
 8001370:	4604      	mov	r4, r0
 8001372:	460d      	mov	r5, r1
 8001374:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001378:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f7ff f9d9 	bl	8000734 <__aeabi_f2d>
 8001382:	a35f      	add	r3, pc, #380	; (adr r3, 8001500 <main+0x548>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7fe ff46 	bl	8000218 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4620      	mov	r0, r4
 8001392:	4629      	mov	r1, r5
 8001394:	f7ff f870 	bl	8000478 <__adddf3>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff faa8 	bl	80008f4 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80013aa:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80013ae:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(&htim4,0);
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <main+0x560>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2110      	movs	r1, #16
 80013bc:	4858      	ldr	r0, [pc, #352]	; (8001520 <main+0x568>)
 80013be:	f002 fe9b 	bl	80040f8 <HAL_GPIO_WritePin>

					tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <main+0x550>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80013cc:	f102 0208 	add.w	r2, r2, #8
 80013d0:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(&htim2,0);
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <main+0x550>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
					tim_temp -= advance;
 80013da:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80013de:	f103 0308 	add.w	r3, r3, #8
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80013e8:	f103 0310 	add.w	r3, r3, #16
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80013f4:	f102 0208 	add.w	r2, r2, #8
 80013f8:	6013      	str	r3, [r2, #0]
					if(tim_temp > 0) {
 80013fa:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80013fe:	f103 0308 	add.w	r3, r3, #8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f340 811a 	ble.w	800163e <main+0x686>
						while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 800140a:	bf00      	nop
 800140c:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <main+0x550>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001412:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001416:	f103 0308 	add.w	r3, r3, #8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3f5      	bcc.n	800140c <main+0x454>
 8001420:	e10d      	b.n	800163e <main+0x686>
//					while (__HAL_TIM_GET_COUNTER(&htim2) < commutation_time);

				} else {
//					wait_bemf_rising(commutation_time);

					t = commutation_time;
 8001422:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001426:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001430:	f102 020c 	add.w	r2, r2, #12
 8001434:	6013      	str	r3, [r2, #0]

					if(t/4 > 100) {
 8001436:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800143a:	f103 030c 	add.w	r3, r3, #12
 800143e:	ed93 7a00 	vldr	s14, [r3]
 8001442:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001524 <main+0x56c>
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	dd12      	ble.n	800147e <main+0x4c6>
						initial_delay = t/4;
 8001458:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800145c:	f103 030c 	add.w	r3, r3, #12
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001470:	ee17 3a90 	vmov	r3, s15
 8001474:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001478:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800147c:	6013      	str	r3, [r2, #0]
					}

					__HAL_TIM_SET_COUNTER(&htim2,0);
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <main+0x550>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
					while (__HAL_TIM_GET_COUNTER(&htim2) < initial_delay);
 8001486:	bf00      	nop
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <main+0x550>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001492:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f5      	bhi.n	8001488 <main+0x4d0>

					if(p > 3000) {
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <main+0x554>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d93f      	bls.n	8001528 <main+0x570>
						while(adc_uvw[0] < adc_x[0] && __HAL_TIM_GET_COUNTER(&htim2) < t*0.65);
 80014a8:	bf00      	nop
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <main+0x558>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <main+0x55c>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d25b      	bcs.n	8001572 <main+0x5ba>
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <main+0x550>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f915 	bl	80006f0 <__aeabi_ui2d>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80014ce:	f103 030c 	add.w	r3, r3, #12
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	f7ff f92e 	bl	8000734 <__aeabi_f2d>
 80014d8:	a307      	add	r3, pc, #28	; (adr r3, 80014f8 <main+0x540>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe fe9b 	bl	8000218 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7ff f9db 	bl	80008a4 <__aeabi_dcmplt>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1da      	bne.n	80014aa <main+0x4f2>
 80014f4:	e03d      	b.n	8001572 <main+0x5ba>
 80014f6:	bf00      	nop
 80014f8:	cccccccd 	.word	0xcccccccd
 80014fc:	3fe4cccc 	.word	0x3fe4cccc
 8001500:	30000000 	.word	0x30000000
 8001504:	3fe33333 	.word	0x3fe33333
 8001508:	2000014c 	.word	0x2000014c
 800150c:	20005098 	.word	0x20005098
 8001510:	20000274 	.word	0x20000274
 8001514:	20002984 	.word	0x20002984
 8001518:	20000198 	.word	0x20000198
 800151c:	3ecccccd 	.word	0x3ecccccd
 8001520:	48000400 	.word	0x48000400
 8001524:	42c80000 	.word	0x42c80000
					} else {
						while(adc_uvw[0] < 1732 && __HAL_TIM_GET_COUNTER(&htim2) < t*0.65);
 8001528:	bf00      	nop
 800152a:	4b8b      	ldr	r3, [pc, #556]	; (8001758 <main+0x7a0>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	f240 62c3 	movw	r2, #1731	; 0x6c3
 8001534:	4293      	cmp	r3, r2
 8001536:	d81c      	bhi.n	8001572 <main+0x5ba>
 8001538:	4b88      	ldr	r3, [pc, #544]	; (800175c <main+0x7a4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f8d6 	bl	80006f0 <__aeabi_ui2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800154c:	f103 030c 	add.w	r3, r3, #12
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	f7ff f8ef 	bl	8000734 <__aeabi_f2d>
 8001556:	a37c      	add	r3, pc, #496	; (adr r3, 8001748 <main+0x790>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7fe fe5c 	bl	8000218 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4620      	mov	r0, r4
 8001566:	4629      	mov	r1, r5
 8001568:	f7ff f99c 	bl	80008a4 <__aeabi_dcmplt>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1db      	bne.n	800152a <main+0x572>
					}
					commutation_time = LPF * (float)__HAL_TIM_GET_COUNTER(&htim4) + (1.0-LPF) * commutation_time;
 8001572:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <main+0x7a8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001580:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001764 <main+0x7ac>
 8001584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001588:	ee17 0a90 	vmov	r0, s15
 800158c:	f7ff f8d2 	bl	8000734 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001598:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	f7ff f8c9 	bl	8000734 <__aeabi_f2d>
 80015a2:	a36b      	add	r3, pc, #428	; (adr r3, 8001750 <main+0x798>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7fe fe36 	bl	8000218 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7fe ff60 	bl	8000478 <__adddf3>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff f998 	bl	80008f4 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80015ca:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80015ce:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(&htim4,0);
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <main+0x7a8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	2110      	movs	r1, #16
 80015dc:	4862      	ldr	r0, [pc, #392]	; (8001768 <main+0x7b0>)
 80015de:	f002 fd8b 	bl	80040f8 <HAL_GPIO_WritePin>

					tim_temp = __HAL_TIM_GET_COUNTER(&htim2);
 80015e2:	4b5e      	ldr	r3, [pc, #376]	; (800175c <main+0x7a4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80015ec:	f102 0208 	add.w	r2, r2, #8
 80015f0:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(&htim2,0);
 80015f2:	4b5a      	ldr	r3, [pc, #360]	; (800175c <main+0x7a4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
					tim_temp -= advance;
 80015fa:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80015fe:	f103 0308 	add.w	r3, r3, #8
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001608:	f103 0310 	add.w	r3, r3, #16
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001614:	f102 0208 	add.w	r2, r2, #8
 8001618:	6013      	str	r3, [r2, #0]
					if(tim_temp > 0) {
 800161a:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800161e:	f103 0308 	add.w	r3, r3, #8
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	dd0a      	ble.n	800163e <main+0x686>
						while (__HAL_TIM_GET_COUNTER(&htim2) < tim_temp);
 8001628:	bf00      	nop
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <main+0x7a4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001630:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001634:	f103 0308 	add.w	r3, r3, #8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d3f5      	bcc.n	800162a <main+0x672>
 		for(i = 1; i <= 6; i++) {
 800163e:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001642:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800164e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001658:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b06      	cmp	r3, #6
 8001660:	f67f ad6f 	bls.w	8001142 <main+0x18a>
//			HAL_ADC_Stop_IT(&hadc1);
//			HAL_ADC_Stop_IT(&hadc2);
//			break;
//		}

		if(d == 0) {
 8001664:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001668:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d123      	bne.n	80016ba <main+0x702>
			if(++c >= 250) {
 8001672:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 8001676:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001682:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800168c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2bf9      	cmp	r3, #249	; 0xf9
 8001694:	d911      	bls.n	80016ba <main+0x702>
				d = 1;
 8001696:	2301      	movs	r3, #1
 8001698:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800169c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80016a0:	6013      	str	r3, [r2, #0]
				i_1 = 0;
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <main+0x7b4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	801a      	strh	r2, [r3, #0]
				i_2 = 0;
 80016a8:	4b31      	ldr	r3, [pc, #196]	; (8001770 <main+0x7b8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	801a      	strh	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 80016ae:	4831      	ldr	r0, [pc, #196]	; (8001774 <main+0x7bc>)
 80016b0:	f001 fa9e 	bl	8002bf0 <HAL_ADC_Start_IT>
				HAL_ADC_Start_IT(&hadc2);
 80016b4:	4830      	ldr	r0, [pc, #192]	; (8001778 <main+0x7c0>)
 80016b6:	f001 fa9b 	bl	8002bf0 <HAL_ADC_Start_IT>
			}
		}

		if(d == 1) {
 80016ba:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80016be:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10b      	bne.n	80016e0 <main+0x728>
			d++;
 80016c8:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80016cc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80016d8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e529      	b.n	8001134 <main+0x17c>
//			p = 1000;
		}
		else if(d > 1) {
 80016e0:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80016e4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	f67f ad22 	bls.w	8001134 <main+0x17c>
			d++;
 80016f0:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80016f4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8001700:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001704:	6013      	str	r3, [r2, #0]
			if(d % 350 == 0 && p <= 1500) {
 8001706:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800170a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <main+0x7c4>)
 8001712:	fba3 1302 	umull	r1, r3, r3, r2
 8001716:	09db      	lsrs	r3, r3, #7
 8001718:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f ad06 	bne.w	8001134 <main+0x17c>
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <main+0x7c8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001730:	4293      	cmp	r3, r2
 8001732:	f63f acff 	bhi.w	8001134 <main+0x17c>
				p += 50;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <main+0x7c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3332      	adds	r3, #50	; 0x32
 800173c:	4a10      	ldr	r2, [pc, #64]	; (8001780 <main+0x7c8>)
 800173e:	6013      	str	r3, [r2, #0]
 		for(i = 1; i <= 6; i++) {
 8001740:	e4f8      	b.n	8001134 <main+0x17c>
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	cccccccd 	.word	0xcccccccd
 800174c:	3fe4cccc 	.word	0x3fe4cccc
 8001750:	30000000 	.word	0x30000000
 8001754:	3fe33333 	.word	0x3fe33333
 8001758:	20000274 	.word	0x20000274
 800175c:	2000014c 	.word	0x2000014c
 8001760:	20000198 	.word	0x20000198
 8001764:	3ecccccd 	.word	0x3ecccccd
 8001768:	48000400 	.word	0x48000400
 800176c:	20005094 	.word	0x20005094
 8001770:	20005096 	.word	0x20005096
 8001774:	20000028 	.word	0x20000028
 8001778:	20000094 	.word	0x20000094
 800177c:	5d9f7391 	.word	0x5d9f7391
 8001780:	20005098 	.word	0x20005098

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b094      	sub	sp, #80	; 0x50
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0318 	add.w	r3, r7, #24
 800178e:	2238      	movs	r2, #56	; 0x38
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f005 ff0e 	bl	80075b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f002 fcbe 	bl	8004128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b6:	2340      	movs	r3, #64	; 0x40
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ba:	2302      	movs	r3, #2
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017be:	2302      	movs	r3, #2
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80017c6:	2315      	movs	r3, #21
 80017c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fd48 	bl	8004270 <HAL_RCC_OscConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017e6:	f000 fb33 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ea:	230f      	movs	r3, #15
 80017ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ee:	2303      	movs	r3, #3
 80017f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2104      	movs	r1, #4
 8001802:	4618      	mov	r0, r3
 8001804:	f003 f84c 	bl	80048a0 <HAL_RCC_ClockConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800180e:	f000 fb1f 	bl	8001e50 <Error_Handler>
  }
}
 8001812:	bf00      	nop
 8001814:	3750      	adds	r7, #80	; 0x50
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2220      	movs	r2, #32
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f005 febd 	bl	80075b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <MX_ADC1_Init+0xd0>)
 800183c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001840:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001844:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <MX_ADC1_Init+0xd0>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <MX_ADC1_Init+0xd0>)
 800185e:	2201      	movs	r2, #1
 8001860:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001864:	2204      	movs	r2, #4
 8001866:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <MX_ADC1_Init+0xd0>)
 800186a:	2200      	movs	r2, #0
 800186c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001870:	2200      	movs	r2, #0
 8001872:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001876:	2201      	movs	r2, #1
 8001878:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_ADC1_Init+0xd0>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001884:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_ADC1_Init+0xd0>)
 800188c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_ADC1_Init+0xd0>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_ADC1_Init+0xd0>)
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_ADC1_Init+0xd0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a8:	4810      	ldr	r0, [pc, #64]	; (80018ec <MX_ADC1_Init+0xd0>)
 80018aa:	f001 f817 	bl	80028dc <HAL_ADC_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80018b4:	f000 facc 	bl	8001e50 <Error_Handler>
//    Error_Handler();
//  }
//
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <MX_ADC1_Init+0xd4>)
 80018ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018bc:	2306      	movs	r3, #6
 80018be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018c4:	237f      	movs	r3, #127	; 0x7f
 80018c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018c8:	2304      	movs	r3, #4
 80018ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_ADC1_Init+0xd0>)
 80018d6:	f001 fcf9 	bl	80032cc <HAL_ADC_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80018e0:	f000 fab6 	bl	8001e50 <Error_Handler>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3730      	adds	r7, #48	; 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000028 	.word	0x20000028
 80018f0:	04300002 	.word	0x04300002

080018f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2220      	movs	r2, #32
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f005 fe57 	bl	80075b4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001908:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <MX_ADC2_Init+0xc8>)
 800190a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <MX_ADC2_Init+0xc4>)
 800190e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001912:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <MX_ADC2_Init+0xc4>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <MX_ADC2_Init+0xc4>)
 800192e:	2204      	movs	r2, #4
 8001930:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_ADC2_Init+0xc4>)
 800193a:	2200      	movs	r2, #0
 800193c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001940:	2201      	movs	r2, #1
 8001942:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_ADC2_Init+0xc4>)
 800194e:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001956:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_ADC2_Init+0xc4>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001966:	2200      	movs	r2, #0
 8001968:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_ADC2_Init+0xc4>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001972:	4811      	ldr	r0, [pc, #68]	; (80019b8 <MX_ADC2_Init+0xc4>)
 8001974:	f000 ffb2 	bl	80028dc <HAL_ADC_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800197e:	f000 fa67 	bl	8001e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_ADC2_Init+0xcc>)
 8001984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001986:	2306      	movs	r3, #6
 8001988:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800198e:	237f      	movs	r3, #127	; 0x7f
 8001990:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001992:	2304      	movs	r3, #4
 8001994:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <MX_ADC2_Init+0xc4>)
 80019a0:	f001 fc94 	bl	80032cc <HAL_ADC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80019aa:	f000 fa51 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000094 	.word	0x20000094
 80019bc:	50000100 	.word	0x50000100
 80019c0:	47520000 	.word	0x47520000

080019c4 <MX_TIM1_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b09c      	sub	sp, #112	; 0x70
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	615a      	str	r2, [r3, #20]
 80019f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2234      	movs	r2, #52	; 0x34
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fdd8 	bl	80075b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a04:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a06:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <MX_TIM1_Init+0x1d8>)
 8001a08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 8001a16:	4b60      	ldr	r3, [pc, #384]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a18:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a24:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2a:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a30:	4859      	ldr	r0, [pc, #356]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a32:	f003 fb41 	bl	80050b8 <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a3c:	f000 fa08 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4852      	ldr	r0, [pc, #328]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a4e:	f004 f83f 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a58:	f000 f9fa 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a5c:	484e      	ldr	r0, [pc, #312]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a5e:	f003 fd47 	bl	80054f0 <HAL_TIM_PWM_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a68:	f000 f9f2 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001a6c:	484a      	ldr	r0, [pc, #296]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a6e:	f003 fbdd 	bl	800522c <HAL_TIM_OC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001a78:	f000 f9ea 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001a7c:	2370      	movs	r3, #112	; 0x70
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4842      	ldr	r0, [pc, #264]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001a90:	f004 fe14 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001a9a:	f000 f9d9 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9e:	2360      	movs	r3, #96	; 0x60
 8001aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4835      	ldr	r0, [pc, #212]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001ac4:	f003 fef0 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001ace:	f000 f9bf 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	482f      	ldr	r0, [pc, #188]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001adc:	f003 fee4 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001ae6:	f000 f9b3 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aee:	2208      	movs	r2, #8
 8001af0:	4619      	mov	r1, r3
 8001af2:	4829      	ldr	r0, [pc, #164]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001af4:	f003 fed8 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8001afe:	f000 f9a7 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001b02:	2330      	movs	r3, #48	; 0x30
 8001b04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4619      	mov	r1, r3
 8001b12:	4821      	ldr	r0, [pc, #132]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001b14:	f003 fe4e 	bl	80057b4 <HAL_TIM_OC_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001b1e:	f000 f997 	bl	8001e50 <Error_Handler>
  }
  HAL_TIMEx_OC_ConfigPulseOnCompare(&htim1, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	481c      	ldr	r0, [pc, #112]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001b28:	f004 feea 	bl	8006900 <HAL_TIMEx_OC_ConfigPulseOnCompare>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8001b48:	2332      	movs	r3, #50	; 0x32
 8001b4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001b7a:	f004 fe21 	bl	80067c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0x1c4>
  {
    Error_Handler();
 8001b84:	f000 f964 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM1_Init+0x1d4>)
 8001b8a:	f000 fab3 	bl	80020f4 <HAL_TIM_MspPostInit>

}
 8001b8e:	bf00      	nop
 8001b90:	3770      	adds	r7, #112	; 0x70
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000100 	.word	0x20000100
 8001b9c:	40012c00 	.word	0x40012c00

08001ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bdc:	22aa      	movs	r2, #170	; 0xaa
 8001bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bfa:	4822      	ldr	r0, [pc, #136]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bfc:	f003 fa5c 	bl	80050b8 <HAL_TIM_Base_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c06:	f000 f923 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c14:	4619      	mov	r1, r3
 8001c16:	481b      	ldr	r0, [pc, #108]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c18:	f003 ff5a 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c22:	f000 f915 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c26:	4817      	ldr	r0, [pc, #92]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c28:	f003 fc62 	bl	80054f0 <HAL_TIM_PWM_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c32:	f000 f90d 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	480f      	ldr	r0, [pc, #60]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c46:	f004 fd39 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c50:	f000 f8fe 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c54:	2360      	movs	r3, #96	; 0x60
 8001c56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c6c:	f003 fe1c 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001c76:	f000 f8eb 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	3738      	adds	r7, #56	; 0x38
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000014c 	.word	0x2000014c

08001c88 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <MX_TIM4_Init+0x98>)
 8001caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001cae:	22aa      	movs	r2, #170	; 0xaa
 8001cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ccc:	4813      	ldr	r0, [pc, #76]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001cce:	f003 f9f3 	bl	80050b8 <HAL_TIM_Base_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001cd8:	f000 f8ba 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480c      	ldr	r0, [pc, #48]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001cea:	f003 fef1 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001cf4:	f000 f8ac 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_TIM4_Init+0x94>)
 8001d06:	f004 fcd9 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001d10:	f000 f89e 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000198 	.word	0x20000198
 8001d20:	40000800 	.word	0x40000800

08001d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d2a:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <MX_USART2_UART_Init+0x94>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6c:	4811      	ldr	r0, [pc, #68]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d6e:	f004 fe28 	bl	80069c2 <HAL_UART_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d78:	f000 f86a 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d80:	f005 fb2a 	bl	80073d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d8a:	f000 f861 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001d92:	f005 fb5f 	bl	8007454 <HAL_UARTEx_SetRxFifoThreshold>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d9c:	f000 f858 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_USART2_UART_Init+0x90>)
 8001da2:	f005 fae0 	bl	8007366 <HAL_UARTEx_DisableFifoMode>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001dac:	f000 f850 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200001e4 	.word	0x200001e4
 8001db8:	40004400 	.word	0x40004400

08001dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_GPIO_Init+0x8c>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	480b      	ldr	r0, [pc, #44]	; (8001e4c <MX_GPIO_Init+0x90>)
 8001e20:	f002 f96a 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e24:	2310      	movs	r3, #16
 8001e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_GPIO_Init+0x90>)
 8001e3c:	f001 ffda 	bl	8003df4 <HAL_GPIO_Init>

}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	48000400 	.word	0x48000400

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>
	...

08001e5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b09e      	sub	sp, #120	; 0x78
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ebc:	f107 0320 	add.w	r3, r7, #32
 8001ec0:	2244      	movs	r2, #68	; 0x44
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 fb75 	bl	80075b4 <memset>
  if(hadc->Instance==ADC1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed2:	d146      	bne.n	8001f62 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001eda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ede:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fef7 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ef0:	f7ff ffae 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_ADC_MspInit+0x18c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <HAL_ADC_MspInit+0x18c>)
 8001efc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001efe:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_ADC_MspInit+0x18c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10b      	bne.n	8001f1e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f06:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a4a      	ldr	r2, [pc, #296]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001f0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a44      	ldr	r2, [pc, #272]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001f36:	230b      	movs	r3, #11
 8001f38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4c:	f001 ff52 	bl	8003df4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	2012      	movs	r0, #18
 8001f56:	f001 ff18 	bl	8003d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f5a:	2012      	movs	r0, #18
 8001f5c:	f001 ff2f 	bl	8003dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f60:	e062      	b.n	8002028 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a34      	ldr	r2, [pc, #208]	; (8002038 <HAL_ADC_MspInit+0x194>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d15d      	bne.n	8002028 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f72:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f76:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 feab 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8001f88:	f7ff ff62 	bl	8001e50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_ADC_MspInit+0x18c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_ADC_MspInit+0x18c>)
 8001f94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_ADC_MspInit+0x18c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fbc:	f043 0320 	orr.w	r3, r3, #32
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_ADC_MspInit+0x190>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fea:	2303      	movs	r3, #3
 8001fec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4810      	ldr	r0, [pc, #64]	; (800203c <HAL_ADC_MspInit+0x198>)
 8001ffa:	f001 fefb 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ffe:	2370      	movs	r3, #112	; 0x70
 8002000:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002002:	2303      	movs	r3, #3
 8002004:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f001 feee 	bl	8003df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2012      	movs	r0, #18
 800201e:	f001 feb4 	bl	8003d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002022:	2012      	movs	r0, #18
 8002024:	f001 fecb 	bl	8003dbe <HAL_NVIC_EnableIRQ>
}
 8002028:	bf00      	nop
 800202a:	3778      	adds	r7, #120	; 0x78
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	2000509c 	.word	0x2000509c
 8002034:	40021000 	.word	0x40021000
 8002038:	50000100 	.word	0x50000100
 800203c:	48001400 	.word	0x48001400

08002040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <HAL_TIM_Base_MspInit+0xa4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10c      	bne.n	800206c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 8002058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800205c:	6613      	str	r3, [r2, #96]	; 0x60
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800206a:	e034      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d10c      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6593      	str	r3, [r2, #88]	; 0x58
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
}
 800208e:	e022      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a15      	ldr	r2, [pc, #84]	; (80020ec <HAL_TIM_Base_MspInit+0xac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10c      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	e010      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_TIM_Base_MspInit+0xb0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10b      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 80020c4:	f043 0310 	orr.w	r3, r3, #16
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_TIM_Base_MspInit+0xa8>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
}
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40012c00 	.word	0x40012c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40001000 	.word	0x40001000

080020f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2e      	ldr	r2, [pc, #184]	; (80021cc <HAL_TIM_MspPostInit+0xd8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d155      	bne.n	80021c2 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_TIM_MspPostInit+0xdc>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800215e:	2301      	movs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800216e:	2306      	movs	r3, #6
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4816      	ldr	r0, [pc, #88]	; (80021d4 <HAL_TIM_MspPostInit+0xe0>)
 800217a:	f001 fe3b 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800217e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002190:	2306      	movs	r3, #6
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219e:	f001 fe29 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021b2:	2306      	movs	r3, #6
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4806      	ldr	r0, [pc, #24]	; (80021d8 <HAL_TIM_MspPostInit+0xe4>)
 80021be:	f001 fe19 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	48001400 	.word	0x48001400
 80021d8:	48000400 	.word	0x48000400

080021dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b09a      	sub	sp, #104	; 0x68
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	2244      	movs	r2, #68	; 0x44
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f005 f9d9 	bl	80075b4 <memset>
  if(huart->Instance==USART2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <HAL_UART_MspInit+0xa8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d137      	bne.n	800227c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800220c:	2302      	movs	r3, #2
 800220e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fd5d 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002224:	f7ff fe14 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_UART_MspInit+0xac>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_UART_MspInit+0xac>)
 800222e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002232:	6593      	str	r3, [r2, #88]	; 0x58
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_UART_MspInit+0xac>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_UART_MspInit+0xac>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_UART_MspInit+0xac>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_UART_MspInit+0xac>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002258:	f248 0304 	movw	r3, #32772	; 0x8004
 800225c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226a:	2307      	movs	r3, #7
 800226c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f001 fdbc 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3768      	adds	r7, #104	; 0x68
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004400 	.word	0x40004400
 8002288:	40021000 	.word	0x40021000

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <NMI_Handler+0x4>

08002292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <MemManage_Handler+0x4>

0800229e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <BusFault_Handler+0x4>

080022a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <UsageFault_Handler+0x4>

080022aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d8:	f000 f89e 	bl	8002418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <ADC1_2_IRQHandler+0x14>)
 80022e6:	f000 fdc3 	bl	8002e70 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80022ea:	4803      	ldr	r0, [pc, #12]	; (80022f8 <ADC1_2_IRQHandler+0x18>)
 80022ec:	f000 fdc0 	bl	8002e70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000028 	.word	0x20000028
 80022f8:	20000094 	.word	0x20000094

080022fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <SystemInit+0x20>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <SystemInit+0x20>)
 8002308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800230c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002322:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002324:	480d      	ldr	r0, [pc, #52]	; (800235c <LoopForever+0x6>)
  ldr r1, =_edata
 8002326:	490e      	ldr	r1, [pc, #56]	; (8002360 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <LoopForever+0xe>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800232c:	e002      	b.n	8002334 <LoopCopyDataInit>

0800232e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002332:	3304      	adds	r3, #4

08002334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002338:	d3f9      	bcc.n	800232e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233a:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <LoopForever+0x12>)
  ldr r4, =_ebss
 800233c:	4c0b      	ldr	r4, [pc, #44]	; (800236c <LoopForever+0x16>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002340:	e001      	b.n	8002346 <LoopFillZerobss>

08002342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002344:	3204      	adds	r2, #4

08002346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002348:	d3fb      	bcc.n	8002342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800234a:	f7ff ffd7 	bl	80022fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800234e:	f005 f90d 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002352:	f7fe fe31 	bl	8000fb8 <main>

08002356 <LoopForever>:

LoopForever:
    b LoopForever
 8002356:	e7fe      	b.n	8002356 <LoopForever>
  ldr   r0, =_estack
 8002358:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800235c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002360:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002364:	0800762c 	.word	0x0800762c
  ldr r2, =_sbss
 8002368:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800236c:	200050a4 	.word	0x200050a4

08002370 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <COMP1_2_3_IRQHandler>

08002372 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f001 fcf9 	bl	8003d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002382:	200f      	movs	r0, #15
 8002384:	f000 f80e 	bl	80023a4 <HAL_InitTick>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	e001      	b.n	8002398 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002394:	f7ff fd62 	bl	8001e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002398:	79fb      	ldrb	r3, [r7, #7]

}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_InitTick+0x68>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d022      	beq.n	80023fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_InitTick+0x6c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_InitTick+0x68>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 fd04 	bl	8003dda <HAL_SYSTICK_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10f      	bne.n	80023f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	d809      	bhi.n	80023f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023de:	2200      	movs	r2, #0
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295
 80023e6:	f001 fcd0 	bl	8003d8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_InitTick+0x70>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e007      	b.n	8002402 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e004      	b.n	8002402 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e001      	b.n	8002402 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000008 	.word	0x20000008
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_IncTick+0x1c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_IncTick+0x20>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4413      	add	r3, r2
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_IncTick+0x1c>)
 8002428:	6013      	str	r3, [r2, #0]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	200050a0 	.word	0x200050a0
 8002438:	20000008 	.word	0x20000008

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200050a0 	.word	0x200050a0

08002454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3360      	adds	r3, #96	; 0x60
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <LL_ADC_SetOffset+0x44>)
 80024de:	4013      	ands	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	03fff000 	.word	0x03fff000

08002504 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	461a      	mov	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	431a      	orrs	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002566:	b480      	push	{r7}
 8002568:	b087      	sub	sp, #28
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3360      	adds	r3, #96	; 0x60
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	431a      	orrs	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	615a      	str	r2, [r3, #20]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800261e:	b480      	push	{r7}
 8002620:	b087      	sub	sp, #28
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3330      	adds	r3, #48	; 0x30
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	4413      	add	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	211f      	movs	r1, #31
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	401a      	ands	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 011f 	and.w	r1, r3, #31
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	431a      	orrs	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3314      	adds	r3, #20
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	0e5b      	lsrs	r3, r3, #25
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	0d1b      	lsrs	r3, r3, #20
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2107      	movs	r1, #7
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	401a      	ands	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0d1b      	lsrs	r3, r3, #20
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d10a      	bne.n	800271e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800271c:	e00a      	b.n	8002734 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	407f0000 	.word	0x407f0000

08002744 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 031f 	and.w	r3, r3, #31
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800278c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6093      	str	r3, [r2, #8]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d101      	bne.n	80027ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002804:	d101      	bne.n	800280a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <LL_ADC_IsEnabled+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_IsEnabled+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002876:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d101      	bne.n	80028cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e177      	b.n	8002be6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff facd 	bl	8001ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff3f 	bl	80027a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff25 	bl	800277c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff5a 	bl	80027f0 <LL_ADC_IsInternalRegulatorEnabled>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff3e 	bl	80027c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800294c:	4b9c      	ldr	r3, [pc, #624]	; (8002bc0 <HAL_ADC_Init+0x2e4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	4a9c      	ldr	r2, [pc, #624]	; (8002bc4 <HAL_ADC_Init+0x2e8>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002960:	e002      	b.n	8002968 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3b01      	subs	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f9      	bne.n	8002962 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ff3c 	bl	80027f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f043 0210 	orr.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff75 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 80029a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 8110 	bne.w	8002bd4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 810c 	bne.w	8002bd4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029c4:	f043 0202 	orr.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff35 	bl	8002840 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029e0:	f7ff ff2e 	bl	8002840 <LL_ADC_IsEnabled>
 80029e4:	4604      	mov	r4, r0
 80029e6:	4878      	ldr	r0, [pc, #480]	; (8002bc8 <HAL_ADC_Init+0x2ec>)
 80029e8:	f7ff ff2a 	bl	8002840 <LL_ADC_IsEnabled>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4323      	orrs	r3, r4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4619      	mov	r1, r3
 80029fa:	4874      	ldr	r0, [pc, #464]	; (8002bcc <HAL_ADC_Init+0x2f0>)
 80029fc:	f7ff fd2a 	bl	8002454 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7f5b      	ldrb	r3, [r3, #29]
 8002a04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d106      	bne.n	8002a3c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	3b01      	subs	r3, #1
 8002a34:	045b      	lsls	r3, r3, #17
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_ADC_Init+0x2f4>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff01 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 8002a8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff0e 	bl	80028b4 <LL_ADC_INJ_IsConversionOngoing>
 8002a98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d16d      	bne.n	8002b7c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d16a      	bne.n	8002b7c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aaa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac2:	f023 0302 	bic.w	r3, r3, #2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	69b9      	ldr	r1, [r7, #24]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ae6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002af0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6911      	ldr	r1, [r2, #16]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b06:	e013      	b.n	8002b30 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b2c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d118      	bne.n	8002b6c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b50:	4311      	orrs	r1, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	e007      	b.n	8002b7c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10c      	bne.n	8002b9e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f023 010f 	bic.w	r1, r3, #15
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	1e5a      	subs	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9c:	e007      	b.n	8002bae <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 020f 	bic.w	r2, r2, #15
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bbe:	e011      	b.n	8002be4 <HAL_ADC_Init+0x308>
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	053e2d63 	.word	0x053e2d63
 8002bc8:	50000100 	.word	0x50000100
 8002bcc:	50000300 	.word	0x50000300
 8002bd0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	f043 0210 	orr.w	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop

08002bf0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bf8:	4894      	ldr	r0, [pc, #592]	; (8002e4c <HAL_ADC_Start_IT+0x25c>)
 8002bfa:	f7ff fda3 	bl	8002744 <LL_ADC_GetMultimode>
 8002bfe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fe42 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f040 8114 	bne.w	8002e3a <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_Start_IT+0x30>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e111      	b.n	8002e44 <HAL_ADC_Start_IT+0x254>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 ff3f 	bl	8003aac <ADC_Enable>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f040 80fb 	bne.w	8002e30 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7f      	ldr	r2, [pc, #508]	; (8002e50 <HAL_ADC_Start_IT+0x260>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d002      	beq.n	8002c5e <HAL_ADC_Start_IT+0x6e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	e001      	b.n	8002c62 <HAL_ADC_Start_IT+0x72>
 8002c5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d002      	beq.n	8002c70 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	f023 0206 	bic.w	r2, r3, #6
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	661a      	str	r2, [r3, #96]	; 0x60
 8002c94:	e002      	b.n	8002c9c <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	221c      	movs	r2, #28
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 021c 	bic.w	r2, r2, #28
 8002cba:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d108      	bne.n	8002cd6 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	605a      	str	r2, [r3, #4]
          break;
 8002cd4:	e008      	b.n	8002ce8 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0204 	orr.w	r2, r2, #4
 8002ce4:	605a      	str	r2, [r3, #4]
          break;
 8002ce6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0210 	orr.w	r2, r2, #16
 8002cfe:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_ADC_Start_IT+0x260>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d002      	beq.n	8002d10 <HAL_ADC_Start_IT+0x120>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	e001      	b.n	8002d14 <HAL_ADC_Start_IT+0x124>
 8002d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d008      	beq.n	8002d2e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d002      	beq.n	8002d2e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b09      	cmp	r3, #9
 8002d2c:	d13b      	bne.n	8002da6 <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02d      	beq.n	8002d98 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d110      	bne.n	8002d76 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0220 	bic.w	r2, r2, #32
 8002d62:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	605a      	str	r2, [r3, #4]
              break;
 8002d74:	e011      	b.n	8002d9a <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d84:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0220 	orr.w	r2, r2, #32
 8002d94:	605a      	str	r2, [r3, #4]
              break;
 8002d96:	e000      	b.n	8002d9a <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8002d98:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fd61 	bl	8002866 <LL_ADC_REG_StartConversion>
 8002da4:	e04d      	b.n	8002e42 <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_ADC_Start_IT+0x260>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d002      	beq.n	8002dc2 <HAL_ADC_Start_IT+0x1d2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	e001      	b.n	8002dc6 <HAL_ADC_Start_IT+0x1d6>
 8002dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dc6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d035      	beq.n	8002e40 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ddc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d110      	bne.n	8002e0e <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0220 	bic.w	r2, r2, #32
 8002dfa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0a:	605a      	str	r2, [r3, #4]
              break;
 8002e0c:	e019      	b.n	8002e42 <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0220 	orr.w	r2, r2, #32
 8002e2c:	605a      	str	r2, [r3, #4]
              break;
 8002e2e:	e008      	b.n	8002e42 <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e38:	e003      	b.n	8002e42 <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	75fb      	strb	r3, [r7, #23]
 8002e3e:	e000      	b.n	8002e42 <HAL_ADC_Start_IT+0x252>
        }
 8002e40:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	50000300 	.word	0x50000300
 8002e50:	50000100 	.word	0x50000100

08002e54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e8c:	4883      	ldr	r0, [pc, #524]	; (800309c <HAL_ADC_IRQHandler+0x22c>)
 8002e8e:	f7ff fc59 	bl	8002744 <LL_ADC_GetMultimode>
 8002e92:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d017      	beq.n	8002ece <HAL_ADC_IRQHandler+0x5e>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fe7d 	bl	8003bc0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_IRQHandler+0x72>
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8085 	beq.w	8002ff8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d07f      	beq.n	8002ff8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fb6f 	bl	80025f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d064      	beq.n	8002fea <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a5e      	ldr	r2, [pc, #376]	; (80030a0 <HAL_ADC_IRQHandler+0x230>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d002      	beq.n	8002f30 <HAL_ADC_IRQHandler+0xc0>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e001      	b.n	8002f34 <HAL_ADC_IRQHandler+0xc4>
 8002f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d008      	beq.n	8002f4e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d002      	beq.n	8002f4e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d104      	bne.n	8002f58 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	e00d      	b.n	8002f74 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a50      	ldr	r2, [pc, #320]	; (80030a0 <HAL_ADC_IRQHandler+0x230>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d002      	beq.n	8002f68 <HAL_ADC_IRQHandler+0xf8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	e001      	b.n	8002f6c <HAL_ADC_IRQHandler+0xfc>
 8002f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f6c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d135      	bne.n	8002fea <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d12e      	bne.n	8002fea <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fc7c 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11a      	bne.n	8002fd2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 020c 	bic.w	r2, r2, #12
 8002faa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d112      	bne.n	8002fea <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fd0:	e00b      	b.n	8002fea <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	f043 0210 	orr.w	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fe54 	bl	8000c98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	220c      	movs	r2, #12
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_ADC_IRQHandler+0x19c>
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 809e 	beq.w	8003154 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8098 	beq.w	8003154 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fb18 	bl	8002676 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003046:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fad3 	bl	80025f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003052:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_ADC_IRQHandler+0x230>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d002      	beq.n	8003064 <HAL_ADC_IRQHandler+0x1f4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e001      	b.n	8003068 <HAL_ADC_IRQHandler+0x1f8>
 8003064:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	4293      	cmp	r3, r2
 800306e:	d008      	beq.n	8003082 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d002      	beq.n	8003082 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b07      	cmp	r3, #7
 8003080:	d104      	bne.n	800308c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	e011      	b.n	80030b0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a03      	ldr	r2, [pc, #12]	; (80030a0 <HAL_ADC_IRQHandler+0x230>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d006      	beq.n	80030a4 <HAL_ADC_IRQHandler+0x234>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e005      	b.n	80030a8 <HAL_ADC_IRQHandler+0x238>
 800309c:	50000300 	.word	0x50000300
 80030a0:	50000100 	.word	0x50000100
 80030a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030a8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d047      	beq.n	8003146 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_ADC_IRQHandler+0x260>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03f      	beq.n	8003146 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d13a      	bne.n	8003146 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d133      	bne.n	8003146 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d12e      	bne.n	8003146 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fbe1 	bl	80028b4 <LL_ADC_INJ_IsConversionOngoing>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11a      	bne.n	800312e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003106:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d112      	bne.n	8003146 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	f043 0201 	orr.w	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c
 800312c:	e00b      	b.n	8003146 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	f043 0210 	orr.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fd12 	bl	8003b70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2260      	movs	r2, #96	; 0x60
 8003152:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <HAL_ADC_IRQHandler+0x312>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00c      	beq.n	8003182 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f895 	bl	80032a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <HAL_ADC_IRQHandler+0x342>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fcf8 	bl	8003b98 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <HAL_ADC_IRQHandler+0x372>
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fcea 	bl	8003bac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d036      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ea>
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d031      	beq.n	800325a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80031fe:	2301      	movs	r3, #1
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	e014      	b.n	800322e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800320a:	4825      	ldr	r0, [pc, #148]	; (80032a0 <HAL_ADC_IRQHandler+0x430>)
 800320c:	f7ff faa8 	bl	8002760 <LL_ADC_GetMultiDMATransfer>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003216:	2301      	movs	r3, #1
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	e008      	b.n	800322e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800322a:	2301      	movs	r3, #1
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10e      	bne.n	8003252 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003244:	f043 0202 	orr.w	r2, r3, #2
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f833 	bl	80032b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2210      	movs	r2, #16
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <HAL_ADC_IRQHandler+0x426>
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	2b00      	cmp	r3, #0
 800326c:	d013      	beq.n	8003296 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800328e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fc77 	bl	8003b84 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	50000300 	.word	0x50000300

080032a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b0b6      	sub	sp, #216	; 0xd8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x22>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e3c8      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x7b4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fac7 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 83ad 	bne.w	8003a62 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	f7ff f982 	bl	800261e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fab5 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 8003324:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fac1 	bl	80028b4 <LL_ADC_INJ_IsConversionOngoing>
 8003332:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003336:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 81d9 	bne.w	80036f2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 81d4 	bne.w	80036f2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003352:	d10f      	bne.n	8003374 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2200      	movs	r2, #0
 800335e:	4619      	mov	r1, r3
 8003360:	f7ff f99c 	bl	800269c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f930 	bl	80025d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003372:	e00e      	b.n	8003392 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	461a      	mov	r2, r3
 8003382:	f7ff f98b 	bl	800269c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff f920 	bl	80025d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	08db      	lsrs	r3, r3, #3
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d022      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6919      	ldr	r1, [r3, #16]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033c4:	f7ff f87a 	bl	80024bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6919      	ldr	r1, [r3, #16]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	461a      	mov	r2, r3
 80033d6:	f7ff f8c6 	bl	8002566 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6919      	ldr	r1, [r3, #16]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	7f1b      	ldrb	r3, [r3, #28]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x124>
 80033ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ee:	e000      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x126>
 80033f0:	2300      	movs	r3, #0
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff f8d2 	bl	800259c <LL_ADC_SetOffsetSaturation>
 80033f8:	e17b      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f87f 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8003406:	4603      	mov	r3, r0
 8003408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x15a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f874 	bl	8002504 <LL_ADC_GetOffsetChannel>
 800341c:	4603      	mov	r3, r0
 800341e:	0e9b      	lsrs	r3, r3, #26
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	e01e      	b.n	8003464 <HAL_ADC_ConfigChannel+0x198>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff f869 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800344c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e004      	b.n	8003462 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_ADC_ConfigChannel+0x1b0>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	e018      	b.n	80034ae <HAL_ADC_ConfigChannel+0x1e2>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80034a0:	2320      	movs	r3, #32
 80034a2:	e004      	b.n	80034ae <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80034a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d106      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff f838 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f81c 	bl	8002504 <LL_ADC_GetOffsetChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x220>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f811 	bl	8002504 <LL_ADC_GetOffsetChannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	f003 021f 	and.w	r2, r3, #31
 80034ea:	e01e      	b.n	800352a <HAL_ADC_ConfigChannel+0x25e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff f806 	bl	8002504 <LL_ADC_GetOffsetChannel>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800350a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800350e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e004      	b.n	8003528 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800351e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x276>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0e9b      	lsrs	r3, r3, #26
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	e018      	b.n	8003574 <HAL_ADC_ConfigChannel+0x2a8>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800355a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800355e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003566:	2320      	movs	r3, #32
 8003568:	e004      	b.n	8003574 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800356a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003574:	429a      	cmp	r2, r3
 8003576:	d106      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2200      	movs	r2, #0
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe ffd5 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe ffb9 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8003592:	4603      	mov	r3, r0
 8003594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x2e6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe ffae 	bl	8002504 <LL_ADC_GetOffsetChannel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	e01e      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x324>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2102      	movs	r1, #2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ffa3 	bl	8002504 <LL_ADC_GetOffsetChannel>
 80035be:	4603      	mov	r3, r0
 80035c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80035e0:	2320      	movs	r3, #32
 80035e2:	e004      	b.n	80035ee <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80035e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x33c>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	e016      	b.n	8003636 <HAL_ADC_ConfigChannel+0x36a>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003614:	fa93 f3a3 	rbit	r3, r3
 8003618:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800361a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800361c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e004      	b.n	8003636 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800362c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003636:	429a      	cmp	r2, r3
 8003638:	d106      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	2102      	movs	r1, #2
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe ff74 	bl	8002530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2103      	movs	r1, #3
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe ff58 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8003654:	4603      	mov	r3, r0
 8003656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x3a8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2103      	movs	r1, #3
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe ff4d 	bl	8002504 <LL_ADC_GetOffsetChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	f003 021f 	and.w	r2, r3, #31
 8003672:	e017      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x3d8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2103      	movs	r1, #3
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe ff42 	bl	8002504 <LL_ADC_GetOffsetChannel>
 8003680:	4603      	mov	r3, r0
 8003682:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800368c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800368e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003696:	2320      	movs	r3, #32
 8003698:	e003      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800369a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x3f0>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	e011      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x414>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d106      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2103      	movs	r1, #3
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe ff1f 	bl	8002530 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f8a2 	bl	8002840 <LL_ADC_IsEnabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 8140 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	461a      	mov	r2, r3
 8003712:	f7fe ffef 	bl	80026f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a8f      	ldr	r2, [pc, #572]	; (8003958 <HAL_ADC_ConfigChannel+0x68c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	f040 8131 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_ADC_ConfigChannel+0x47e>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	0e9b      	lsrs	r3, r3, #26
 8003738:	3301      	adds	r3, #1
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2b09      	cmp	r3, #9
 8003740:	bf94      	ite	ls
 8003742:	2301      	movls	r3, #1
 8003744:	2300      	movhi	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	e019      	b.n	800377e <HAL_ADC_ConfigChannel+0x4b2>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800375c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003762:	2320      	movs	r3, #32
 8003764:	e003      	b.n	800376e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2b09      	cmp	r3, #9
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800377e:	2b00      	cmp	r3, #0
 8003780:	d079      	beq.n	8003876 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <HAL_ADC_ConfigChannel+0x4d2>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0e9b      	lsrs	r3, r3, #26
 8003794:	3301      	adds	r3, #1
 8003796:	069b      	lsls	r3, r3, #26
 8003798:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800379c:	e015      	b.n	80037ca <HAL_ADC_ConfigChannel+0x4fe>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80037b6:	2320      	movs	r3, #32
 80037b8:	e003      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80037ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	069b      	lsls	r3, r3, #26
 80037c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x51e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	3301      	adds	r3, #1
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	e017      	b.n	800381a <HAL_ADC_ConfigChannel+0x54e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003802:	2320      	movs	r3, #32
 8003804:	e003      	b.n	800380e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3301      	adds	r3, #1
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f303 	lsl.w	r3, r1, r3
 800381a:	ea42 0103 	orr.w	r1, r2, r3
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x574>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0e9b      	lsrs	r3, r3, #26
 8003830:	3301      	adds	r3, #1
 8003832:	f003 021f 	and.w	r2, r3, #31
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	051b      	lsls	r3, r3, #20
 800383e:	e018      	b.n	8003872 <HAL_ADC_ConfigChannel+0x5a6>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003858:	2320      	movs	r3, #32
 800385a:	e003      	b.n	8003864 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f003 021f 	and.w	r2, r3, #31
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003872:	430b      	orrs	r3, r1
 8003874:	e081      	b.n	800397a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x5c6>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0e9b      	lsrs	r3, r3, #26
 8003888:	3301      	adds	r3, #1
 800388a:	069b      	lsls	r3, r3, #26
 800388c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003890:	e015      	b.n	80038be <HAL_ADC_ConfigChannel+0x5f2>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80038aa:	2320      	movs	r3, #32
 80038ac:	e003      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_ADC_ConfigChannel+0x612>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	0e9b      	lsrs	r3, r3, #26
 80038d0:	3301      	adds	r3, #1
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2101      	movs	r1, #1
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	e017      	b.n	800390e <HAL_ADC_ConfigChannel+0x642>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	61fb      	str	r3, [r7, #28]
  return result;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e003      	b.n	8003902 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	ea42 0103 	orr.w	r1, r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <HAL_ADC_ConfigChannel+0x66e>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	0e9b      	lsrs	r3, r3, #26
 8003924:	3301      	adds	r3, #1
 8003926:	f003 021f 	and.w	r2, r3, #31
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	3b1e      	subs	r3, #30
 8003932:	051b      	lsls	r3, r3, #20
 8003934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003938:	e01e      	b.n	8003978 <HAL_ADC_ConfigChannel+0x6ac>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	613b      	str	r3, [r7, #16]
  return result;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003952:	2320      	movs	r3, #32
 8003954:	e006      	b.n	8003964 <HAL_ADC_ConfigChannel+0x698>
 8003956:	bf00      	nop
 8003958:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f003 021f 	and.w	r2, r3, #31
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	3b1e      	subs	r3, #30
 8003972:	051b      	lsls	r3, r3, #20
 8003974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003978:	430b      	orrs	r3, r1
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	4619      	mov	r1, r3
 8003980:	f7fe fe8c 	bl	800269c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <HAL_ADC_ConfigChannel+0x7bc>)
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d071      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003990:	483e      	ldr	r0, [pc, #248]	; (8003a8c <HAL_ADC_ConfigChannel+0x7c0>)
 8003992:	f7fe fd85 	bl	80024a0 <LL_ADC_GetCommonPathInternalCh>
 8003996:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_ADC_ConfigChannel+0x7c4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_ADC_ConfigChannel+0x6e2>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3a      	ldr	r2, [pc, #232]	; (8003a94 <HAL_ADC_ConfigChannel+0x7c8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d127      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c2:	d157      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039cc:	4619      	mov	r1, r3
 80039ce:	482f      	ldr	r0, [pc, #188]	; (8003a8c <HAL_ADC_ConfigChannel+0x7c0>)
 80039d0:	f7fe fd53 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <HAL_ADC_ConfigChannel+0x7cc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	4a30      	ldr	r2, [pc, #192]	; (8003a9c <HAL_ADC_ConfigChannel+0x7d0>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039ee:	e002      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f9      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039fc:	e03a      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d113      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x764>
 8003a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02a      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	4619      	mov	r1, r3
 8003a28:	4818      	ldr	r0, [pc, #96]	; (8003a8c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a2a:	f7fe fd26 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a2e:	e021      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d11c      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d011      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a58:	4619      	mov	r1, r3
 8003a5a:	480c      	ldr	r0, [pc, #48]	; (8003a8c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a5c:	f7fe fd0d 	bl	800247a <LL_ADC_SetCommonPathInternalCh>
 8003a60:	e008      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	f043 0220 	orr.w	r2, r3, #32
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	37d8      	adds	r7, #216	; 0xd8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	80080000 	.word	0x80080000
 8003a8c:	50000300 	.word	0x50000300
 8003a90:	c3210000 	.word	0xc3210000
 8003a94:	90c00010 	.word	0x90c00010
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	053e2d63 	.word	0x053e2d63
 8003aa0:	c7520000 	.word	0xc7520000
 8003aa4:	50000100 	.word	0x50000100
 8003aa8:	cb840000 	.word	0xcb840000

08003aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fec1 	bl	8002840 <LL_ADC_IsEnabled>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d14d      	bne.n	8003b60 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <ADC_Enable+0xc0>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	f043 0210 	orr.w	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e039      	b.n	8003b62 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fe90 	bl	8002818 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003af8:	f7fe fca0 	bl	800243c <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003afe:	e028      	b.n	8003b52 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fe9b 	bl	8002840 <LL_ADC_IsEnabled>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d104      	bne.n	8003b1a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fe7f 	bl	8002818 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b1a:	f7fe fc8f 	bl	800243c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d914      	bls.n	8003b52 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d00d      	beq.n	8003b52 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	f043 0210 	orr.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e007      	b.n	8003b62 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d1cf      	bne.n	8003b00 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	8000003f 	.word	0x8000003f

08003b70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <__NVIC_SetPriorityGrouping+0x44>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <__NVIC_SetPriorityGrouping+0x44>)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	60d3      	str	r3, [r2, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <__NVIC_GetPriorityGrouping+0x18>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	f003 0307 	and.w	r3, r3, #7
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	db0b      	blt.n	8003c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 021f 	and.w	r2, r3, #31
 8003c50:	4907      	ldr	r1, [pc, #28]	; (8003c70 <__NVIC_EnableIRQ+0x38>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2001      	movs	r0, #1
 8003c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000e100 	.word	0xe000e100

08003c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	6039      	str	r1, [r7, #0]
 8003c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	db0a      	blt.n	8003c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <__NVIC_SetPriority+0x4c>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	440b      	add	r3, r1
 8003c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c9c:	e00a      	b.n	8003cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4908      	ldr	r1, [pc, #32]	; (8003cc4 <__NVIC_SetPriority+0x50>)
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	3b04      	subs	r3, #4
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	761a      	strb	r2, [r3, #24]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000e100 	.word	0xe000e100
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f1c3 0307 	rsb	r3, r3, #7
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	bf28      	it	cs
 8003ce6:	2304      	movcs	r3, #4
 8003ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3304      	adds	r3, #4
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d902      	bls.n	8003cf8 <NVIC_EncodePriority+0x30>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3b03      	subs	r3, #3
 8003cf6:	e000      	b.n	8003cfa <NVIC_EncodePriority+0x32>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d10:	f04f 31ff 	mov.w	r1, #4294967295
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	43d9      	mvns	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d20:	4313      	orrs	r3, r2
         );
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d40:	d301      	bcc.n	8003d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d42:	2301      	movs	r3, #1
 8003d44:	e00f      	b.n	8003d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <SysTick_Config+0x40>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d4e:	210f      	movs	r1, #15
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	f7ff ff8e 	bl	8003c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <SysTick_Config+0x40>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d5e:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <SysTick_Config+0x40>)
 8003d60:	2207      	movs	r2, #7
 8003d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	e000e010 	.word	0xe000e010

08003d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff29 	bl	8003bd4 <__NVIC_SetPriorityGrouping>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d98:	f7ff ff40 	bl	8003c1c <__NVIC_GetPriorityGrouping>
 8003d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	6978      	ldr	r0, [r7, #20]
 8003da4:	f7ff ff90 	bl	8003cc8 <NVIC_EncodePriority>
 8003da8:	4602      	mov	r2, r0
 8003daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ff5f 	bl	8003c74 <__NVIC_SetPriority>
}
 8003db6:	bf00      	nop
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff33 	bl	8003c38 <__NVIC_EnableIRQ>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ffa4 	bl	8003d30 <SysTick_Config>
 8003de8:	4603      	mov	r3, r0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e02:	e15a      	b.n	80040ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	2101      	movs	r1, #1
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 814c 	beq.w	80040b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d005      	beq.n	8003e34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d130      	bne.n	8003e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	2203      	movs	r2, #3
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0201 	and.w	r2, r3, #1
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d017      	beq.n	8003ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2203      	movs	r2, #3
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d123      	bne.n	8003f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	08da      	lsrs	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3208      	adds	r2, #8
 8003ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	08da      	lsrs	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3208      	adds	r2, #8
 8003f20:	6939      	ldr	r1, [r7, #16]
 8003f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	2203      	movs	r2, #3
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 0203 	and.w	r2, r3, #3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a6 	beq.w	80040b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f68:	4b5b      	ldr	r3, [pc, #364]	; (80040d8 <HAL_GPIO_Init+0x2e4>)
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	4a5a      	ldr	r2, [pc, #360]	; (80040d8 <HAL_GPIO_Init+0x2e4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6613      	str	r3, [r2, #96]	; 0x60
 8003f74:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <HAL_GPIO_Init+0x2e4>)
 8003f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f80:	4a56      	ldr	r2, [pc, #344]	; (80040dc <HAL_GPIO_Init+0x2e8>)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	3302      	adds	r3, #2
 8003f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	220f      	movs	r2, #15
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003faa:	d01f      	beq.n	8003fec <HAL_GPIO_Init+0x1f8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a4c      	ldr	r2, [pc, #304]	; (80040e0 <HAL_GPIO_Init+0x2ec>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d019      	beq.n	8003fe8 <HAL_GPIO_Init+0x1f4>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a4b      	ldr	r2, [pc, #300]	; (80040e4 <HAL_GPIO_Init+0x2f0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <HAL_GPIO_Init+0x1f0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a4a      	ldr	r2, [pc, #296]	; (80040e8 <HAL_GPIO_Init+0x2f4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_GPIO_Init+0x1ec>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a49      	ldr	r2, [pc, #292]	; (80040ec <HAL_GPIO_Init+0x2f8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <HAL_GPIO_Init+0x1e8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a48      	ldr	r2, [pc, #288]	; (80040f0 <HAL_GPIO_Init+0x2fc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_GPIO_Init+0x1e4>
 8003fd4:	2305      	movs	r3, #5
 8003fd6:	e00a      	b.n	8003fee <HAL_GPIO_Init+0x1fa>
 8003fd8:	2306      	movs	r3, #6
 8003fda:	e008      	b.n	8003fee <HAL_GPIO_Init+0x1fa>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	e006      	b.n	8003fee <HAL_GPIO_Init+0x1fa>
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e004      	b.n	8003fee <HAL_GPIO_Init+0x1fa>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e002      	b.n	8003fee <HAL_GPIO_Init+0x1fa>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <HAL_GPIO_Init+0x1fa>
 8003fec:	2300      	movs	r3, #0
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	f002 0203 	and.w	r2, r2, #3
 8003ff4:	0092      	lsls	r2, r2, #2
 8003ff6:	4093      	lsls	r3, r2
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ffe:	4937      	ldr	r1, [pc, #220]	; (80040dc <HAL_GPIO_Init+0x2e8>)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800400c:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_GPIO_Init+0x300>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004030:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <HAL_GPIO_Init+0x300>)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004036:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <HAL_GPIO_Init+0x300>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800405a:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <HAL_GPIO_Init+0x300>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_GPIO_Init+0x300>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_GPIO_Init+0x300>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <HAL_GPIO_Init+0x300>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <HAL_GPIO_Init+0x300>)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3301      	adds	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f ae9d 	bne.w	8003e04 <HAL_GPIO_Init+0x10>
  }
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40010000 	.word	0x40010000
 80040e0:	48000400 	.word	0x48000400
 80040e4:	48000800 	.word	0x48000800
 80040e8:	48000c00 	.word	0x48000c00
 80040ec:	48001000 	.word	0x48001000
 80040f0:	48001400 	.word	0x48001400
 80040f4:	40010400 	.word	0x40010400

080040f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
 8004104:	4613      	mov	r3, r2
 8004106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004108:	787b      	ldrb	r3, [r7, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004114:	e002      	b.n	800411c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d141      	bne.n	80041ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004136:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d131      	bne.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004144:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414a:	4a46      	ldr	r2, [pc, #280]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004154:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800415c:	4a41      	ldr	r2, [pc, #260]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004164:	4b40      	ldr	r3, [pc, #256]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2232      	movs	r2, #50	; 0x32
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	4a3f      	ldr	r2, [pc, #252]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	3301      	adds	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800417a:	e002      	b.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d102      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f2      	bne.n	800417c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004196:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d158      	bne.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e057      	b.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041a8:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ae:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041b8:	e04d      	b.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c0:	d141      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041c2:	4b28      	ldr	r3, [pc, #160]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d131      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d6:	4a23      	ldr	r2, [pc, #140]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041e8:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2232      	movs	r2, #50	; 0x32
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	0c9b      	lsrs	r3, r3, #18
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004206:	e002      	b.n	800420e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3b01      	subs	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d102      	bne.n	8004222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f2      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422e:	d112      	bne.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e011      	b.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004244:	e007      	b.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800424e:	4a05      	ldr	r2, [pc, #20]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004254:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40007000 	.word	0x40007000
 8004268:	20000000 	.word	0x20000000
 800426c:	431bde83 	.word	0x431bde83

08004270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e306      	b.n	8004890 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d075      	beq.n	800437a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428e:	4b97      	ldr	r3, [pc, #604]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004298:	4b94      	ldr	r3, [pc, #592]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	d102      	bne.n	80042ae <HAL_RCC_OscConfig+0x3e>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_OscConfig+0x44>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d10b      	bne.n	80042cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05b      	beq.n	8004378 <HAL_RCC_OscConfig+0x108>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d157      	bne.n	8004378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e2e1      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_OscConfig+0x74>
 80042d6:	4b85      	ldr	r3, [pc, #532]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a84      	ldr	r2, [pc, #528]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x98>
 80042ee:	4b7f      	ldr	r3, [pc, #508]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7e      	ldr	r2, [pc, #504]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a7b      	ldr	r2, [pc, #492]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 8004308:	4b78      	ldr	r3, [pc, #480]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a77      	ldr	r2, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b75      	ldr	r3, [pc, #468]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a74      	ldr	r2, [pc, #464]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe f888 	bl	800243c <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fe f884 	bl	800243c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e2a6      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xc0>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe f874 	bl	800243c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fe f870 	bl	800243c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e292      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800436a:	4b60      	ldr	r3, [pc, #384]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0xe8>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d075      	beq.n	8004472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004386:	4b59      	ldr	r3, [pc, #356]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004390:	4b56      	ldr	r3, [pc, #344]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d102      	bne.n	80043a6 <HAL_RCC_OscConfig+0x136>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d002      	beq.n	80043ac <HAL_RCC_OscConfig+0x13c>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d11f      	bne.n	80043ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ac:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_OscConfig+0x154>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e265      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c4:	4b49      	ldr	r3, [pc, #292]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	4946      	ldr	r1, [pc, #280]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043d8:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <HAL_RCC_OscConfig+0x280>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd ffe1 	bl	80023a4 <HAL_InitTick>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d043      	beq.n	8004470 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e251      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d023      	beq.n	800443c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f4:	4b3d      	ldr	r3, [pc, #244]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a3c      	ldr	r2, [pc, #240]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80043fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fe f81c 	bl	800243c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004408:	f7fe f818 	bl	800243c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e23a      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441a:	4b34      	ldr	r3, [pc, #208]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	492d      	ldr	r1, [pc, #180]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
 800443a:	e01a      	b.n	8004472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fd fff8 	bl	800243c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004450:	f7fd fff4 	bl	800243c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e216      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1e0>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d041      	beq.n	8004502 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01c      	beq.n	80044c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004486:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 8004488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004496:	f7fd ffd1 	bl	800243c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449e:	f7fd ffcd 	bl	800243c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1ef      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80044b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ef      	beq.n	800449e <HAL_RCC_OscConfig+0x22e>
 80044be:	e020      	b.n	8004502 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <HAL_RCC_OscConfig+0x27c>)
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd ffb4 	bl	800243c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d6:	e00d      	b.n	80044f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fd ffb0 	bl	800243c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d906      	bls.n	80044f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1d2      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f4:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ea      	bne.n	80044d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80a6 	beq.w	800465c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004510:	2300      	movs	r3, #0
 8004512:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004514:	4b84      	ldr	r3, [pc, #528]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_OscConfig+0x2b4>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x2b6>
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	4b7f      	ldr	r3, [pc, #508]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	4a7e      	ldr	r2, [pc, #504]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004534:	6593      	str	r3, [r2, #88]	; 0x58
 8004536:	4b7c      	ldr	r3, [pc, #496]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004542:	2301      	movs	r3, #1
 8004544:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004546:	4b79      	ldr	r3, [pc, #484]	; (800472c <HAL_RCC_OscConfig+0x4bc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d118      	bne.n	8004584 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004552:	4b76      	ldr	r3, [pc, #472]	; (800472c <HAL_RCC_OscConfig+0x4bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a75      	ldr	r2, [pc, #468]	; (800472c <HAL_RCC_OscConfig+0x4bc>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455e:	f7fd ff6d 	bl	800243c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7fd ff69 	bl	800243c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e18b      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004578:	4b6c      	ldr	r3, [pc, #432]	; (800472c <HAL_RCC_OscConfig+0x4bc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d108      	bne.n	800459e <HAL_RCC_OscConfig+0x32e>
 800458c:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	4a65      	ldr	r2, [pc, #404]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459c:	e024      	b.n	80045e8 <HAL_RCC_OscConfig+0x378>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d110      	bne.n	80045c8 <HAL_RCC_OscConfig+0x358>
 80045a6:	4b60      	ldr	r3, [pc, #384]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	4a5e      	ldr	r2, [pc, #376]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b6:	4b5c      	ldr	r3, [pc, #368]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	4a5a      	ldr	r2, [pc, #360]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c6:	e00f      	b.n	80045e8 <HAL_RCC_OscConfig+0x378>
 80045c8:	4b57      	ldr	r3, [pc, #348]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	4a56      	ldr	r2, [pc, #344]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045d8:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	4a52      	ldr	r2, [pc, #328]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d016      	beq.n	800461e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fd ff24 	bl	800243c <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd ff20 	bl	800243c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e140      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460e:	4b46      	ldr	r3, [pc, #280]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ed      	beq.n	80045f8 <HAL_RCC_OscConfig+0x388>
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461e:	f7fd ff0d 	bl	800243c <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004624:	e00a      	b.n	800463c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fd ff09 	bl	800243c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	; 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e129      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800463c:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ed      	bne.n	8004626 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800464a:	7ffb      	ldrb	r3, [r7, #31]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004650:	4b35      	ldr	r3, [pc, #212]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	4a34      	ldr	r2, [pc, #208]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d03c      	beq.n	80046e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01c      	beq.n	80046aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fd fedc 	bl	800243c <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004688:	f7fd fed8 	bl	800243c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0fa      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 800469c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ef      	beq.n	8004688 <HAL_RCC_OscConfig+0x418>
 80046a8:	e01b      	b.n	80046e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80046ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fd febf 	bl	800243c <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046c2:	f7fd febb 	bl	800243c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0dd      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046d4:	4b14      	ldr	r3, [pc, #80]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80046d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ef      	bne.n	80046c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80d1 	beq.w	800488e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ec:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	f000 808b 	beq.w	8004810 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d15e      	bne.n	80047c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <HAL_RCC_OscConfig+0x4b8>)
 8004708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800470c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fd fe95 	bl	800243c <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004714:	e00c      	b.n	8004730 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004716:	f7fd fe91 	bl	800243c <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d905      	bls.n	8004730 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0b3      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ec      	bne.n	8004716 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473c:	4b56      	ldr	r3, [pc, #344]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	4b56      	ldr	r3, [pc, #344]	; (800489c <HAL_RCC_OscConfig+0x62c>)
 8004742:	4013      	ands	r3, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6a11      	ldr	r1, [r2, #32]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800474c:	3a01      	subs	r2, #1
 800474e:	0112      	lsls	r2, r2, #4
 8004750:	4311      	orrs	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004756:	0212      	lsls	r2, r2, #8
 8004758:	4311      	orrs	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800475e:	0852      	lsrs	r2, r2, #1
 8004760:	3a01      	subs	r2, #1
 8004762:	0552      	lsls	r2, r2, #21
 8004764:	4311      	orrs	r1, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800476a:	0852      	lsrs	r2, r2, #1
 800476c:	3a01      	subs	r2, #1
 800476e:	0652      	lsls	r2, r2, #25
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004776:	06d2      	lsls	r2, r2, #27
 8004778:	430a      	orrs	r2, r1
 800477a:	4947      	ldr	r1, [pc, #284]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 800477c:	4313      	orrs	r3, r2
 800477e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004780:	4b45      	ldr	r3, [pc, #276]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a44      	ldr	r2, [pc, #272]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 8004786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800478c:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a41      	ldr	r2, [pc, #260]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004796:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fd fe50 	bl	800243c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd fe4c 	bl	800243c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e06e      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x530>
 80047be:	e066      	b.n	800488e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c0:	4b35      	ldr	r3, [pc, #212]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a34      	ldr	r2, [pc, #208]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 80047c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047cc:	4b32      	ldr	r3, [pc, #200]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a31      	ldr	r2, [pc, #196]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047d8:	4b2f      	ldr	r3, [pc, #188]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 80047de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fd fe28 	bl	800243c <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f0:	f7fd fe24 	bl	800243c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e046      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004802:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x580>
 800480e:	e03e      	b.n	800488e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e039      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800481c:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_OscConfig+0x628>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0203 	and.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	429a      	cmp	r2, r3
 800482e:	d12c      	bne.n	800488a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	3b01      	subs	r3, #1
 800483c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d123      	bne.n	800488a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d11b      	bne.n	800488a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d113      	bne.n	800488a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	3b01      	subs	r3, #1
 8004870:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d109      	bne.n	800488a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	3b01      	subs	r3, #1
 8004884:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d001      	beq.n	800488e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000
 800489c:	019f800c 	.word	0x019f800c

080048a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e11e      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b8:	4b91      	ldr	r3, [pc, #580]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d910      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b8e      	ldr	r3, [pc, #568]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 020f 	bic.w	r2, r3, #15
 80048ce:	498c      	ldr	r1, [pc, #560]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b8a      	ldr	r3, [pc, #552]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e106      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d073      	beq.n	80049dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d129      	bne.n	8004950 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fc:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0f4      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800490c:	f000 f99e 	bl	8004c4c <RCC_GetSysClockFreqFromPLLSource>
 8004910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4a7c      	ldr	r2, [pc, #496]	; (8004b08 <HAL_RCC_ClockConfig+0x268>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d93f      	bls.n	800499a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800491a:	4b7a      	ldr	r3, [pc, #488]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d033      	beq.n	800499a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004936:	2b00      	cmp	r3, #0
 8004938:	d12f      	bne.n	800499a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800493a:	4b72      	ldr	r3, [pc, #456]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004942:	4a70      	ldr	r2, [pc, #448]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004948:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e024      	b.n	800499a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d107      	bne.n	8004968 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004958:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0c6      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004968:	4b66      	ldr	r3, [pc, #408]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0be      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004978:	f000 f8ce 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 800497c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a61      	ldr	r2, [pc, #388]	; (8004b08 <HAL_RCC_ClockConfig+0x268>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d909      	bls.n	800499a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004986:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498e:	4a5d      	ldr	r2, [pc, #372]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4957      	ldr	r1, [pc, #348]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fd fd46 	bl	800243c <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fd fd42 	bl	800243c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e095      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d023      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a42      	ldr	r2, [pc, #264]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a14:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4936      	ldr	r1, [pc, #216]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d105      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a36:	4b33      	ldr	r3, [pc, #204]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a42:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d21d      	bcs.n	8004a8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 020f 	bic.w	r2, r3, #15
 8004a58:	4929      	ldr	r1, [pc, #164]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a60:	f7fd fcec 	bl	800243c <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fd fce8 	bl	800243c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e03b      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1ed      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4917      	ldr	r1, [pc, #92]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	490f      	ldr	r1, [pc, #60]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aca:	f000 f825 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	490c      	ldr	r1, [pc, #48]	; (8004b0c <HAL_RCC_ClockConfig+0x26c>)
 8004adc:	5ccb      	ldrb	r3, [r1, r3]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_RCC_ClockConfig+0x270>)
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fd fc58 	bl	80023a4 <HAL_InitTick>
 8004af4:	4603      	mov	r3, r0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40022000 	.word	0x40022000
 8004b04:	40021000 	.word	0x40021000
 8004b08:	04c4b400 	.word	0x04c4b400
 8004b0c:	080075dc 	.word	0x080075dc
 8004b10:	20000000 	.word	0x20000000
 8004b14:	20000004 	.word	0x20000004

08004b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b1e:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d102      	bne.n	8004b30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e047      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d102      	bne.n	8004b42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b3c:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e03e      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b42:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d136      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	3301      	adds	r3, #1
 8004b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d10c      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b76:	68d2      	ldr	r2, [r2, #12]
 8004b78:	0a12      	lsrs	r2, r2, #8
 8004b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	617b      	str	r3, [r7, #20]
      break;
 8004b84:	e00c      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b90:	68d2      	ldr	r2, [r2, #12]
 8004b92:	0a12      	lsrs	r2, r2, #8
 8004b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
      break;
 8004b9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0e5b      	lsrs	r3, r3, #25
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	e001      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bc0:	693b      	ldr	r3, [r7, #16]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200

08004bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000000 	.word	0x20000000

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4904      	ldr	r1, [pc, #16]	; (8004c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	080075ec 	.word	0x080075ec

08004c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c24:	f7ff ffda 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	0adb      	lsrs	r3, r3, #11
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4904      	ldr	r1, [pc, #16]	; (8004c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	080075ec 	.word	0x080075ec

08004c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3301      	adds	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d10c      	bne.n	8004c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c70:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7a:	68d2      	ldr	r2, [r2, #12]
 8004c7c:	0a12      	lsrs	r2, r2, #8
 8004c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
    break;
 8004c88:	e00c      	b.n	8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c8a:	4a12      	ldr	r2, [pc, #72]	; (8004cd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c94:	68d2      	ldr	r2, [r2, #12]
 8004c96:	0a12      	lsrs	r2, r2, #8
 8004c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
    break;
 8004ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	0e5b      	lsrs	r3, r3, #25
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cbe:	687b      	ldr	r3, [r7, #4]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	007a1200 	.word	0x007a1200
 8004cd4:	00f42400 	.word	0x00f42400

08004cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8098 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cfa:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	4b40      	ldr	r3, [pc, #256]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	4a3f      	ldr	r2, [pc, #252]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6593      	str	r3, [r2, #88]	; 0x58
 8004d12:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d22:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d2e:	f7fd fb85 	bl	800243c <HAL_GetTick>
 8004d32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d34:	e009      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fd fb81 	bl	800243c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d902      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	74fb      	strb	r3, [r7, #19]
        break;
 8004d48:	e005      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ef      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d159      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01e      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d019      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d84:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d94:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7fd fb41 	bl	800243c <HAL_GetTick>
 8004dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dbc:	e00b      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fd fb3d 	bl	800243c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d902      	bls.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8004dd4:	e006      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ec      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	4903      	ldr	r1, [pc, #12]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e00:	e008      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	74bb      	strb	r3, [r7, #18]
 8004e06:	e005      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e14:	7c7b      	ldrb	r3, [r7, #17]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4ba6      	ldr	r3, [pc, #664]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4aa5      	ldr	r2, [pc, #660]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e32:	4ba0      	ldr	r3, [pc, #640]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	f023 0203 	bic.w	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	499c      	ldr	r1, [pc, #624]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e54:	4b97      	ldr	r3, [pc, #604]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 020c 	bic.w	r2, r3, #12
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	4994      	ldr	r1, [pc, #592]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e76:	4b8f      	ldr	r3, [pc, #572]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	498b      	ldr	r1, [pc, #556]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e98:	4b86      	ldr	r3, [pc, #536]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	4983      	ldr	r1, [pc, #524]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eba:	4b7e      	ldr	r3, [pc, #504]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	497a      	ldr	r1, [pc, #488]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004edc:	4b75      	ldr	r3, [pc, #468]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	4972      	ldr	r1, [pc, #456]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004efe:	4b6d      	ldr	r3, [pc, #436]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	4969      	ldr	r1, [pc, #420]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f20:	4b64      	ldr	r3, [pc, #400]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4961      	ldr	r1, [pc, #388]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f42:	4b5c      	ldr	r3, [pc, #368]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	4958      	ldr	r1, [pc, #352]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d015      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f64:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	4950      	ldr	r1, [pc, #320]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d105      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f84:	4b4b      	ldr	r3, [pc, #300]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a4a      	ldr	r2, [pc, #296]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f9c:	4b45      	ldr	r3, [pc, #276]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4942      	ldr	r1, [pc, #264]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fba:	d105      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fbc:	4b3d      	ldr	r3, [pc, #244]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a3c      	ldr	r2, [pc, #240]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fd4:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4934      	ldr	r1, [pc, #208]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff2:	d105      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff4:	4b2f      	ldr	r3, [pc, #188]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	4926      	ldr	r1, [pc, #152]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502a:	d105      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502c:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005036:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d015      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005044:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	4918      	ldr	r1, [pc, #96]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005062:	d105      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4a12      	ldr	r2, [pc, #72]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800506e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d015      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	490a      	ldr	r1, [pc, #40]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509a:	d105      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000

080050b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e049      	b.n	800515e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc ffae 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 fde4 	bl	8005cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e042      	b.n	8005206 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a21      	ldr	r2, [pc, #132]	; (8005214 <HAL_TIM_Base_Start+0xac>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_TIM_Base_Start+0x5c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d013      	beq.n	80051c4 <HAL_TIM_Base_Start+0x5c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_TIM_Base_Start+0xb0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIM_Base_Start+0x5c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <HAL_TIM_Base_Start+0xb4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIM_Base_Start+0x5c>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <HAL_TIM_Base_Start+0xb8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIM_Base_Start+0x5c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a19      	ldr	r2, [pc, #100]	; (8005224 <HAL_TIM_Base_Start+0xbc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d115      	bne.n	80051f0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	4b17      	ldr	r3, [pc, #92]	; (8005228 <HAL_TIM_Base_Start+0xc0>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d015      	beq.n	8005202 <HAL_TIM_Base_Start+0x9a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051dc:	d011      	beq.n	8005202 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ee:	e008      	b.n	8005202 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e000      	b.n	8005204 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	00010007 	.word	0x00010007

0800522c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e049      	b.n	80052d2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f841 	bl	80052da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f000 fd2a 	bl	8005cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_TIM_OC_Start+0x24>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e03c      	b.n	800538e <HAL_TIM_OC_Start+0x9e>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d109      	bne.n	800532e <HAL_TIM_OC_Start+0x3e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	bf14      	ite	ne
 8005326:	2301      	movne	r3, #1
 8005328:	2300      	moveq	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e02f      	b.n	800538e <HAL_TIM_OC_Start+0x9e>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d109      	bne.n	8005348 <HAL_TIM_OC_Start+0x58>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e022      	b.n	800538e <HAL_TIM_OC_Start+0x9e>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d109      	bne.n	8005362 <HAL_TIM_OC_Start+0x72>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	bf14      	ite	ne
 800535a:	2301      	movne	r3, #1
 800535c:	2300      	moveq	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e015      	b.n	800538e <HAL_TIM_OC_Start+0x9e>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b10      	cmp	r3, #16
 8005366:	d109      	bne.n	800537c <HAL_TIM_OC_Start+0x8c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e008      	b.n	800538e <HAL_TIM_OC_Start+0x9e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e097      	b.n	80054c6 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_OC_Start+0xb6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a4:	e023      	b.n	80053ee <HAL_TIM_OC_Start+0xfe>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_OC_Start+0xc6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b4:	e01b      	b.n	80053ee <HAL_TIM_OC_Start+0xfe>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_OC_Start+0xd6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c4:	e013      	b.n	80053ee <HAL_TIM_OC_Start+0xfe>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b0c      	cmp	r3, #12
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_OC_Start+0xe6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053d4:	e00b      	b.n	80053ee <HAL_TIM_OC_Start+0xfe>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_OC_Start+0xf6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e4:	e003      	b.n	80053ee <HAL_TIM_OC_Start+0xfe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 f886 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a33      	ldr	r2, [pc, #204]	; (80054d0 <HAL_TIM_OC_Start+0x1e0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_TIM_OC_Start+0x13e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a32      	ldr	r2, [pc, #200]	; (80054d4 <HAL_TIM_OC_Start+0x1e4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00e      	beq.n	800542e <HAL_TIM_OC_Start+0x13e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a30      	ldr	r2, [pc, #192]	; (80054d8 <HAL_TIM_OC_Start+0x1e8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_TIM_OC_Start+0x13e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <HAL_TIM_OC_Start+0x1ec>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIM_OC_Start+0x13e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2d      	ldr	r2, [pc, #180]	; (80054e0 <HAL_TIM_OC_Start+0x1f0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d101      	bne.n	8005432 <HAL_TIM_OC_Start+0x142>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <HAL_TIM_OC_Start+0x144>
 8005432:	2300      	movs	r3, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005446:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <HAL_TIM_OC_Start+0x1e0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_TIM_OC_Start+0x194>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d013      	beq.n	8005484 <HAL_TIM_OC_Start+0x194>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a20      	ldr	r2, [pc, #128]	; (80054e4 <HAL_TIM_OC_Start+0x1f4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_TIM_OC_Start+0x194>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <HAL_TIM_OC_Start+0x1f8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_TIM_OC_Start+0x194>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a17      	ldr	r2, [pc, #92]	; (80054d4 <HAL_TIM_OC_Start+0x1e4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_OC_Start+0x194>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a16      	ldr	r2, [pc, #88]	; (80054d8 <HAL_TIM_OC_Start+0x1e8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d115      	bne.n	80054b0 <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	4b18      	ldr	r3, [pc, #96]	; (80054ec <HAL_TIM_OC_Start+0x1fc>)
 800548c:	4013      	ands	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b06      	cmp	r3, #6
 8005494:	d015      	beq.n	80054c2 <HAL_TIM_OC_Start+0x1d2>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549c:	d011      	beq.n	80054c2 <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	e008      	b.n	80054c2 <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e000      	b.n	80054c4 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	00010007 	.word	0x00010007

080054f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e049      	b.n	8005596 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f841 	bl	800559e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f000 fbc8 	bl	8005cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_TIM_PWM_Start+0x24>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e03c      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d109      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x3e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e02f      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d109      	bne.n	800560c <HAL_TIM_PWM_Start+0x58>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e022      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d109      	bne.n	8005626 <HAL_TIM_PWM_Start+0x72>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	bf14      	ite	ne
 800561e:	2301      	movne	r3, #1
 8005620:	2300      	moveq	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	e015      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b10      	cmp	r3, #16
 800562a:	d109      	bne.n	8005640 <HAL_TIM_PWM_Start+0x8c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e008      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e097      	b.n	800578a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <HAL_TIM_PWM_Start+0xb6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	e023      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d104      	bne.n	800567a <HAL_TIM_PWM_Start+0xc6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005678:	e01b      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d104      	bne.n	800568a <HAL_TIM_PWM_Start+0xd6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005688:	e013      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b0c      	cmp	r3, #12
 800568e:	d104      	bne.n	800569a <HAL_TIM_PWM_Start+0xe6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005698:	e00b      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b10      	cmp	r3, #16
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0xf6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a8:	e003      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 ff24 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a33      	ldr	r2, [pc, #204]	; (8005794 <HAL_TIM_PWM_Start+0x1e0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x13e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a32      	ldr	r2, [pc, #200]	; (8005798 <HAL_TIM_PWM_Start+0x1e4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x13e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a30      	ldr	r2, [pc, #192]	; (800579c <HAL_TIM_PWM_Start+0x1e8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x13e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2f      	ldr	r2, [pc, #188]	; (80057a0 <HAL_TIM_PWM_Start+0x1ec>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x13e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2d      	ldr	r2, [pc, #180]	; (80057a4 <HAL_TIM_PWM_Start+0x1f0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_PWM_Start+0x142>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_TIM_PWM_Start+0x144>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d007      	beq.n	800570c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800570a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <HAL_TIM_PWM_Start+0x1e0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d018      	beq.n	8005748 <HAL_TIM_PWM_Start+0x194>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d013      	beq.n	8005748 <HAL_TIM_PWM_Start+0x194>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a20      	ldr	r2, [pc, #128]	; (80057a8 <HAL_TIM_PWM_Start+0x1f4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_TIM_PWM_Start+0x194>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <HAL_TIM_PWM_Start+0x1f8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d009      	beq.n	8005748 <HAL_TIM_PWM_Start+0x194>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a17      	ldr	r2, [pc, #92]	; (8005798 <HAL_TIM_PWM_Start+0x1e4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIM_PWM_Start+0x194>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a16      	ldr	r2, [pc, #88]	; (800579c <HAL_TIM_PWM_Start+0x1e8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d115      	bne.n	8005774 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <HAL_TIM_PWM_Start+0x1fc>)
 8005750:	4013      	ands	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d015      	beq.n	8005786 <HAL_TIM_PWM_Start+0x1d2>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d011      	beq.n	8005786 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005772:	e008      	b.n	8005786 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e000      	b.n	8005788 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40013400 	.word	0x40013400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	00010007 	.word	0x00010007

080057b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e066      	b.n	80058a0 <HAL_TIM_OC_ConfigChannel+0xec>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b14      	cmp	r3, #20
 80057de:	d857      	bhi.n	8005890 <HAL_TIM_OC_ConfigChannel+0xdc>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	08005891 	.word	0x08005891
 80057f0:	08005891 	.word	0x08005891
 80057f4:	08005891 	.word	0x08005891
 80057f8:	0800584b 	.word	0x0800584b
 80057fc:	08005891 	.word	0x08005891
 8005800:	08005891 	.word	0x08005891
 8005804:	08005891 	.word	0x08005891
 8005808:	08005859 	.word	0x08005859
 800580c:	08005891 	.word	0x08005891
 8005810:	08005891 	.word	0x08005891
 8005814:	08005891 	.word	0x08005891
 8005818:	08005867 	.word	0x08005867
 800581c:	08005891 	.word	0x08005891
 8005820:	08005891 	.word	0x08005891
 8005824:	08005891 	.word	0x08005891
 8005828:	08005875 	.word	0x08005875
 800582c:	08005891 	.word	0x08005891
 8005830:	08005891 	.word	0x08005891
 8005834:	08005891 	.word	0x08005891
 8005838:	08005883 	.word	0x08005883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 face 	bl	8005de4 <TIM_OC1_SetConfig>
      break;
 8005848:	e025      	b.n	8005896 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fb57 	bl	8005f04 <TIM_OC2_SetConfig>
      break;
 8005856:	e01e      	b.n	8005896 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fbda 	bl	8006018 <TIM_OC3_SetConfig>
      break;
 8005864:	e017      	b.n	8005896 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fc5b 	bl	8006128 <TIM_OC4_SetConfig>
      break;
 8005872:	e010      	b.n	8005896 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fcde 	bl	800623c <TIM_OC5_SetConfig>
      break;
 8005880:	e009      	b.n	8005896 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fd3b 	bl	8006304 <TIM_OC6_SetConfig>
      break;
 800588e:	e002      	b.n	8005896 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	75fb      	strb	r3, [r7, #23]
      break;
 8005894:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0ff      	b.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b14      	cmp	r3, #20
 80058d2:	f200 80f0 	bhi.w	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005931 	.word	0x08005931
 80058e0:	08005ab7 	.word	0x08005ab7
 80058e4:	08005ab7 	.word	0x08005ab7
 80058e8:	08005ab7 	.word	0x08005ab7
 80058ec:	08005971 	.word	0x08005971
 80058f0:	08005ab7 	.word	0x08005ab7
 80058f4:	08005ab7 	.word	0x08005ab7
 80058f8:	08005ab7 	.word	0x08005ab7
 80058fc:	080059b3 	.word	0x080059b3
 8005900:	08005ab7 	.word	0x08005ab7
 8005904:	08005ab7 	.word	0x08005ab7
 8005908:	08005ab7 	.word	0x08005ab7
 800590c:	080059f3 	.word	0x080059f3
 8005910:	08005ab7 	.word	0x08005ab7
 8005914:	08005ab7 	.word	0x08005ab7
 8005918:	08005ab7 	.word	0x08005ab7
 800591c:	08005a35 	.word	0x08005a35
 8005920:	08005ab7 	.word	0x08005ab7
 8005924:	08005ab7 	.word	0x08005ab7
 8005928:	08005ab7 	.word	0x08005ab7
 800592c:	08005a75 	.word	0x08005a75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fa54 	bl	8005de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0208 	orr.w	r2, r2, #8
 800594a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0204 	bic.w	r2, r2, #4
 800595a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6999      	ldr	r1, [r3, #24]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	619a      	str	r2, [r3, #24]
      break;
 800596e:	e0a5      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fac4 	bl	8005f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6999      	ldr	r1, [r3, #24]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	619a      	str	r2, [r3, #24]
      break;
 80059b0:	e084      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fb2d 	bl	8006018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0208 	orr.w	r2, r2, #8
 80059cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0204 	bic.w	r2, r2, #4
 80059dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69d9      	ldr	r1, [r3, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	61da      	str	r2, [r3, #28]
      break;
 80059f0:	e064      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fb95 	bl	8006128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69d9      	ldr	r1, [r3, #28]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	021a      	lsls	r2, r3, #8
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	61da      	str	r2, [r3, #28]
      break;
 8005a32:	e043      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fbfe 	bl	800623c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0208 	orr.w	r2, r2, #8
 8005a4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0204 	bic.w	r2, r2, #4
 8005a5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005a72:	e023      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fc42 	bl	8006304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005ab4:	e002      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop

08005ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_TIM_ConfigClockSource+0x1c>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e0de      	b.n	8005caa <HAL_TIM_ConfigClockSource+0x1da>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005b0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a63      	ldr	r2, [pc, #396]	; (8005cb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	f000 80a9 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b2c:	4a61      	ldr	r2, [pc, #388]	; (8005cb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	f200 80ae 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b34:	4a60      	ldr	r2, [pc, #384]	; (8005cb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	f000 80a1 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	; (8005cb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	f200 80a6 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b44:	4a5d      	ldr	r2, [pc, #372]	; (8005cbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	f000 8099 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b4c:	4a5b      	ldr	r2, [pc, #364]	; (8005cbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	f200 809e 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b54:	4a5a      	ldr	r2, [pc, #360]	; (8005cc0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	f000 8091 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b5c:	4a58      	ldr	r2, [pc, #352]	; (8005cc0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f200 8096 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b68:	f000 8089 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b70:	f200 808e 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b78:	d03e      	beq.n	8005bf8 <HAL_TIM_ConfigClockSource+0x128>
 8005b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7e:	f200 8087 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b86:	f000 8086 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x1c6>
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	d87f      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b90:	2b70      	cmp	r3, #112	; 0x70
 8005b92:	d01a      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0xfa>
 8005b94:	2b70      	cmp	r3, #112	; 0x70
 8005b96:	d87b      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b98:	2b60      	cmp	r3, #96	; 0x60
 8005b9a:	d050      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
 8005b9c:	2b60      	cmp	r3, #96	; 0x60
 8005b9e:	d877      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ba0:	2b50      	cmp	r3, #80	; 0x50
 8005ba2:	d03c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x14e>
 8005ba4:	2b50      	cmp	r3, #80	; 0x50
 8005ba6:	d873      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d058      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x18e>
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d86f      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005bb0:	2b30      	cmp	r3, #48	; 0x30
 8005bb2:	d064      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005bb4:	2b30      	cmp	r3, #48	; 0x30
 8005bb6:	d86b      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d060      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d867      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d05c      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d05a      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ae>
 8005bc8:	e062      	b.n	8005c90 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6899      	ldr	r1, [r3, #8]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f000 fc75 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	609a      	str	r2, [r3, #8]
      break;
 8005bf6:	e04f      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6899      	ldr	r1, [r3, #8]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f000 fc5e 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1a:	609a      	str	r2, [r3, #8]
      break;
 8005c1c:	e03c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6859      	ldr	r1, [r3, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f000 fbd0 	bl	80063d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2150      	movs	r1, #80	; 0x50
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fc29 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c3c:	e02c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6859      	ldr	r1, [r3, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f000 fbef 	bl	800642e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2160      	movs	r1, #96	; 0x60
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fc19 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c5c:	e01c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6859      	ldr	r1, [r3, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f000 fbb0 	bl	80063d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2140      	movs	r1, #64	; 0x40
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fc09 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c7c:	e00c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f000 fc00 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c8e:	e003      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      break;
 8005c94:	e000      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	00100070 	.word	0x00100070
 8005cb8:	00100040 	.word	0x00100040
 8005cbc:	00100030 	.word	0x00100030
 8005cc0:	00100020 	.word	0x00100020

08005cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3c      	ldr	r2, [pc, #240]	; (8005dc8 <TIM_Base_SetConfig+0x104>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00f      	beq.n	8005cfc <TIM_Base_SetConfig+0x38>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce2:	d00b      	beq.n	8005cfc <TIM_Base_SetConfig+0x38>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a39      	ldr	r2, [pc, #228]	; (8005dcc <TIM_Base_SetConfig+0x108>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d007      	beq.n	8005cfc <TIM_Base_SetConfig+0x38>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a38      	ldr	r2, [pc, #224]	; (8005dd0 <TIM_Base_SetConfig+0x10c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0x38>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a37      	ldr	r2, [pc, #220]	; (8005dd4 <TIM_Base_SetConfig+0x110>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d108      	bne.n	8005d0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2d      	ldr	r2, [pc, #180]	; (8005dc8 <TIM_Base_SetConfig+0x104>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01b      	beq.n	8005d4e <TIM_Base_SetConfig+0x8a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d017      	beq.n	8005d4e <TIM_Base_SetConfig+0x8a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	; (8005dcc <TIM_Base_SetConfig+0x108>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <TIM_Base_SetConfig+0x8a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a29      	ldr	r2, [pc, #164]	; (8005dd0 <TIM_Base_SetConfig+0x10c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00f      	beq.n	8005d4e <TIM_Base_SetConfig+0x8a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a28      	ldr	r2, [pc, #160]	; (8005dd4 <TIM_Base_SetConfig+0x110>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <TIM_Base_SetConfig+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a27      	ldr	r2, [pc, #156]	; (8005dd8 <TIM_Base_SetConfig+0x114>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d007      	beq.n	8005d4e <TIM_Base_SetConfig+0x8a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <TIM_Base_SetConfig+0x118>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_Base_SetConfig+0x8a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <TIM_Base_SetConfig+0x11c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d108      	bne.n	8005d60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <TIM_Base_SetConfig+0x104>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00f      	beq.n	8005dac <TIM_Base_SetConfig+0xe8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a11      	ldr	r2, [pc, #68]	; (8005dd4 <TIM_Base_SetConfig+0x110>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00b      	beq.n	8005dac <TIM_Base_SetConfig+0xe8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a10      	ldr	r2, [pc, #64]	; (8005dd8 <TIM_Base_SetConfig+0x114>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_Base_SetConfig+0xe8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a0f      	ldr	r2, [pc, #60]	; (8005ddc <TIM_Base_SetConfig+0x118>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_Base_SetConfig+0xe8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <TIM_Base_SetConfig+0x11c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d103      	bne.n	8005db4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	615a      	str	r2, [r3, #20]
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800

08005de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 0302 	bic.w	r3, r3, #2
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a2c      	ldr	r2, [pc, #176]	; (8005ef0 <TIM_OC1_SetConfig+0x10c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00f      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <TIM_OC1_SetConfig+0x110>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a2a      	ldr	r2, [pc, #168]	; (8005ef8 <TIM_OC1_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a29      	ldr	r2, [pc, #164]	; (8005efc <TIM_OC1_SetConfig+0x118>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <TIM_OC1_SetConfig+0x11c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10c      	bne.n	8005e7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0308 	bic.w	r3, r3, #8
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <TIM_OC1_SetConfig+0x10c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <TIM_OC1_SetConfig+0x110>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <TIM_OC1_SetConfig+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a18      	ldr	r2, [pc, #96]	; (8005efc <TIM_OC1_SetConfig+0x118>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <TIM_OC1_SetConfig+0x11c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d111      	bne.n	8005eca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800

08005f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0210 	bic.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0320 	bic.w	r3, r3, #32
 8005f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a28      	ldr	r2, [pc, #160]	; (8006004 <TIM_OC2_SetConfig+0x100>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC2_SetConfig+0x6c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a27      	ldr	r2, [pc, #156]	; (8006008 <TIM_OC2_SetConfig+0x104>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10d      	bne.n	8005f8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_OC2_SetConfig+0x100>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <TIM_OC2_SetConfig+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	; (800600c <TIM_OC2_SetConfig+0x108>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <TIM_OC2_SetConfig+0x10c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a19      	ldr	r2, [pc, #100]	; (8006014 <TIM_OC2_SetConfig+0x110>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d113      	bne.n	8005fdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a27      	ldr	r2, [pc, #156]	; (8006114 <TIM_OC3_SetConfig+0xfc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_OC3_SetConfig+0x6a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <TIM_OC3_SetConfig+0x100>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10d      	bne.n	800609e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800609c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <TIM_OC3_SetConfig+0xfc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <TIM_OC3_SetConfig+0x100>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	; (800611c <TIM_OC3_SetConfig+0x104>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <TIM_OC3_SetConfig+0x108>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <TIM_OC3_SetConfig+0x10c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d113      	bne.n	80060ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40013400 	.word	0x40013400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800

08006128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	031b      	lsls	r3, r3, #12
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a28      	ldr	r2, [pc, #160]	; (8006228 <TIM_OC4_SetConfig+0x100>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_OC4_SetConfig+0x6c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a27      	ldr	r2, [pc, #156]	; (800622c <TIM_OC4_SetConfig+0x104>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10d      	bne.n	80061b0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800619a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	031b      	lsls	r3, r3, #12
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_OC4_SetConfig+0x100>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00f      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	; (800622c <TIM_OC4_SetConfig+0x104>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <TIM_OC4_SetConfig+0x108>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a1a      	ldr	r2, [pc, #104]	; (8006234 <TIM_OC4_SetConfig+0x10c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a19      	ldr	r2, [pc, #100]	; (8006238 <TIM_OC4_SetConfig+0x110>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d113      	bne.n	8006200 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	019b      	lsls	r3, r3, #6
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40013400 	.word	0x40013400
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800

0800623c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <TIM_OC5_SetConfig+0xb4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00f      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <TIM_OC5_SetConfig+0xb8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <TIM_OC5_SetConfig+0xbc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a14      	ldr	r2, [pc, #80]	; (80062fc <TIM_OC5_SetConfig+0xc0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a13      	ldr	r2, [pc, #76]	; (8006300 <TIM_OC5_SetConfig+0xc4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d109      	bne.n	80062ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800

08006304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800634a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	051b      	lsls	r3, r3, #20
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a18      	ldr	r2, [pc, #96]	; (80063bc <TIM_OC6_SetConfig+0xb8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00f      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <TIM_OC6_SetConfig+0xbc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <TIM_OC6_SetConfig+0xc0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <TIM_OC6_SetConfig+0xc4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a14      	ldr	r2, [pc, #80]	; (80063cc <TIM_OC6_SetConfig+0xc8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d109      	bne.n	8006394 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	029b      	lsls	r3, r3, #10
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800

080063d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 030a 	bic.w	r3, r3, #10
 800640c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0210 	bic.w	r2, r3, #16
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	031b      	lsls	r3, r3, #12
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800646a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f043 0307 	orr.w	r3, r3, #7
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2201      	movs	r2, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	43db      	mvns	r3, r3
 800652a:	401a      	ands	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <HAL_TIMEx_PWMN_Start+0x24>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	bf14      	ite	ne
 8006570:	2301      	movne	r3, #1
 8006572:	2300      	moveq	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	e022      	b.n	80065be <HAL_TIMEx_PWMN_Start+0x6a>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b04      	cmp	r3, #4
 800657c:	d109      	bne.n	8006592 <HAL_TIMEx_PWMN_Start+0x3e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	bf14      	ite	ne
 800658a:	2301      	movne	r3, #1
 800658c:	2300      	moveq	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	e015      	b.n	80065be <HAL_TIMEx_PWMN_Start+0x6a>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b08      	cmp	r3, #8
 8006596:	d109      	bne.n	80065ac <HAL_TIMEx_PWMN_Start+0x58>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e008      	b.n	80065be <HAL_TIMEx_PWMN_Start+0x6a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e069      	b.n	800669a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d104      	bne.n	80065d6 <HAL_TIMEx_PWMN_Start+0x82>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d4:	e013      	b.n	80065fe <HAL_TIMEx_PWMN_Start+0xaa>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d104      	bne.n	80065e6 <HAL_TIMEx_PWMN_Start+0x92>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065e4:	e00b      	b.n	80065fe <HAL_TIMEx_PWMN_Start+0xaa>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d104      	bne.n	80065f6 <HAL_TIMEx_PWMN_Start+0xa2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065f4:	e003      	b.n	80065fe <HAL_TIMEx_PWMN_Start+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2204      	movs	r2, #4
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f9b6 	bl	8006978 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800661a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a20      	ldr	r2, [pc, #128]	; (80066a4 <HAL_TIMEx_PWMN_Start+0x150>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d018      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d013      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1c      	ldr	r2, [pc, #112]	; (80066a8 <HAL_TIMEx_PWMN_Start+0x154>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <HAL_TIMEx_PWMN_Start+0x158>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d009      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a19      	ldr	r2, [pc, #100]	; (80066b0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_TIMEx_PWMN_Start+0x104>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a18      	ldr	r2, [pc, #96]	; (80066b4 <HAL_TIMEx_PWMN_Start+0x160>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d115      	bne.n	8006684 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <HAL_TIMEx_PWMN_Start+0x164>)
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b06      	cmp	r3, #6
 8006668:	d015      	beq.n	8006696 <HAL_TIMEx_PWMN_Start+0x142>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006670:	d011      	beq.n	8006696 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006682:	e008      	b.n	8006696 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e000      	b.n	8006698 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40013400 	.word	0x40013400
 80066b4:	40014000 	.word	0x40014000
 80066b8:	00010007 	.word	0x00010007

080066bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e065      	b.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a2c      	ldr	r2, [pc, #176]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2b      	ldr	r2, [pc, #172]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d108      	bne.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800670e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674a:	d013      	beq.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a12      	ldr	r2, [pc, #72]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d10c      	bne.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	4313      	orrs	r3, r2
 8006784:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	40012c00 	.word	0x40012c00
 80067b0:	40013400 	.word	0x40013400
 80067b4:	40000400 	.word	0x40000400
 80067b8:	40000800 	.word	0x40000800
 80067bc:	40014000 	.word	0x40014000

080067c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067d8:	2302      	movs	r3, #2
 80067da:	e087      	b.n	80068ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	041b      	lsls	r3, r3, #16
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a25      	ldr	r2, [pc, #148]	; (80068fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d106      	bne.n	8006878 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d126      	bne.n	80068da <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	051b      	lsls	r3, r3, #20
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d004      	beq.n	80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d106      	bne.n	80068da <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40013400 	.word	0x40013400

08006900 <HAL_TIMEx_OC_ConfigPulseOnCompare>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OC_ConfigPulseOnCompare(TIM_HandleTypeDef *htim,
                                                    uint32_t PulseWidthPrescaler,
                                                    uint32_t PulseWidth)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PULSEONCOMPARE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_PULSEONCOMPARE_WIDTH(PulseWidth));
  assert_param(IS_TIM_PULSEONCOMPARE_WIDTHPRESCALER(PulseWidthPrescaler));

  /* Process Locked */
  __HAL_LOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_TIMEx_OC_ConfigPulseOnCompare+0x1a>
 8006916:	2302      	movs	r3, #2
 8006918:	e028      	b.n	800696c <HAL_TIMEx_OC_ConfigPulseOnCompare+0x6c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx ECR register value */
  tmpecr = htim->Instance->ECR;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006930:	617b      	str	r3, [r7, #20]
  /* Reset the Pulse width prescaler and the Pulse width */
  tmpecr &= ~(TIM_ECR_PWPRSC | TIM_ECR_PW);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 63ff 	bic.w	r3, r3, #133693440	; 0x7f80000
 8006938:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800693c:	617b      	str	r3, [r7, #20]
  /* Set the Pulse width prescaler and Pulse width*/
  tmpecr |= PulseWidthPrescaler << TIM_ECR_PWPRSC_Pos;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
  tmpecr |= PulseWidth << TIM_ECR_PW_Pos;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
  /* Write to TIMx ECR */
  htim->Instance->ECR = tmpecr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	2204      	movs	r2, #4
 800698c:	fa02 f303 	lsl.w	r3, r2, r3
 8006990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a1a      	ldr	r2, [r3, #32]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	43db      	mvns	r3, r3
 800699a:	401a      	ands	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1a      	ldr	r2, [r3, #32]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	fa01 f303 	lsl.w	r3, r1, r3
 80069b0:	431a      	orrs	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e042      	b.n	8006a5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fb fbf8 	bl	80021dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f82d 	bl	8006a64 <UART_SetConfig>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e022      	b.n	8006a5a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 faed 	bl	8006ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fb74 	bl	8007140 <UART_CheckIdleState>
 8006a58:	4603      	mov	r3, r0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a68:	b08c      	sub	sp, #48	; 0x30
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4bab      	ldr	r3, [pc, #684]	; (8006d40 <UART_SetConfig+0x2dc>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4aa0      	ldr	r2, [pc, #640]	; (8006d44 <UART_SetConfig+0x2e0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006acc:	4313      	orrs	r3, r2
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ada:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	f023 010f 	bic.w	r1, r3, #15
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a91      	ldr	r2, [pc, #580]	; (8006d48 <UART_SetConfig+0x2e4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d125      	bne.n	8006b54 <UART_SetConfig+0xf0>
 8006b08:	4b90      	ldr	r3, [pc, #576]	; (8006d4c <UART_SetConfig+0x2e8>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d81a      	bhi.n	8006b4c <UART_SetConfig+0xe8>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <UART_SetConfig+0xb8>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b3d 	.word	0x08006b3d
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b45 	.word	0x08006b45
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b32:	e0d6      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b3a:	e0d2      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b42:	e0ce      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b4a:	e0ca      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b52:	e0c6      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a7d      	ldr	r2, [pc, #500]	; (8006d50 <UART_SetConfig+0x2ec>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d138      	bne.n	8006bd0 <UART_SetConfig+0x16c>
 8006b5e:	4b7b      	ldr	r3, [pc, #492]	; (8006d4c <UART_SetConfig+0x2e8>)
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b64:	f003 030c 	and.w	r3, r3, #12
 8006b68:	2b0c      	cmp	r3, #12
 8006b6a:	d82d      	bhi.n	8006bc8 <UART_SetConfig+0x164>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x110>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006ba9 	.word	0x08006ba9
 8006b78:	08006bc9 	.word	0x08006bc9
 8006b7c:	08006bc9 	.word	0x08006bc9
 8006b80:	08006bc9 	.word	0x08006bc9
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006bc9 	.word	0x08006bc9
 8006b8c:	08006bc9 	.word	0x08006bc9
 8006b90:	08006bc9 	.word	0x08006bc9
 8006b94:	08006bb1 	.word	0x08006bb1
 8006b98:	08006bc9 	.word	0x08006bc9
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	08006bc9 	.word	0x08006bc9
 8006ba4:	08006bc1 	.word	0x08006bc1
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bae:	e098      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb6:	e094      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bbe:	e090      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc6:	e08c      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e088      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a5f      	ldr	r2, [pc, #380]	; (8006d54 <UART_SetConfig+0x2f0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d125      	bne.n	8006c26 <UART_SetConfig+0x1c2>
 8006bda:	4b5c      	ldr	r3, [pc, #368]	; (8006d4c <UART_SetConfig+0x2e8>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006be4:	2b30      	cmp	r3, #48	; 0x30
 8006be6:	d016      	beq.n	8006c16 <UART_SetConfig+0x1b2>
 8006be8:	2b30      	cmp	r3, #48	; 0x30
 8006bea:	d818      	bhi.n	8006c1e <UART_SetConfig+0x1ba>
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d00a      	beq.n	8006c06 <UART_SetConfig+0x1a2>
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d814      	bhi.n	8006c1e <UART_SetConfig+0x1ba>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <UART_SetConfig+0x19a>
 8006bf8:	2b10      	cmp	r3, #16
 8006bfa:	d008      	beq.n	8006c0e <UART_SetConfig+0x1aa>
 8006bfc:	e00f      	b.n	8006c1e <UART_SetConfig+0x1ba>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c04:	e06d      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c06:	2302      	movs	r3, #2
 8006c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0c:	e069      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c14:	e065      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c16:	2308      	movs	r3, #8
 8006c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1c:	e061      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c1e:	2310      	movs	r3, #16
 8006c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c24:	e05d      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a4b      	ldr	r2, [pc, #300]	; (8006d58 <UART_SetConfig+0x2f4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d125      	bne.n	8006c7c <UART_SetConfig+0x218>
 8006c30:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <UART_SetConfig+0x2e8>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c3c:	d016      	beq.n	8006c6c <UART_SetConfig+0x208>
 8006c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c40:	d818      	bhi.n	8006c74 <UART_SetConfig+0x210>
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d00a      	beq.n	8006c5c <UART_SetConfig+0x1f8>
 8006c46:	2b80      	cmp	r3, #128	; 0x80
 8006c48:	d814      	bhi.n	8006c74 <UART_SetConfig+0x210>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <UART_SetConfig+0x1f0>
 8006c4e:	2b40      	cmp	r3, #64	; 0x40
 8006c50:	d008      	beq.n	8006c64 <UART_SetConfig+0x200>
 8006c52:	e00f      	b.n	8006c74 <UART_SetConfig+0x210>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e042      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e03e      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e03a      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c72:	e036      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e032      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a30      	ldr	r2, [pc, #192]	; (8006d44 <UART_SetConfig+0x2e0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d12a      	bne.n	8006cdc <UART_SetConfig+0x278>
 8006c86:	4b31      	ldr	r3, [pc, #196]	; (8006d4c <UART_SetConfig+0x2e8>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c94:	d01a      	beq.n	8006ccc <UART_SetConfig+0x268>
 8006c96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9a:	d81b      	bhi.n	8006cd4 <UART_SetConfig+0x270>
 8006c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca0:	d00c      	beq.n	8006cbc <UART_SetConfig+0x258>
 8006ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca6:	d815      	bhi.n	8006cd4 <UART_SetConfig+0x270>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <UART_SetConfig+0x250>
 8006cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb0:	d008      	beq.n	8006cc4 <UART_SetConfig+0x260>
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x270>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cba:	e012      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc2:	e00e      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cca:	e00a      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd2:	e006      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e002      	b.n	8006ce2 <UART_SetConfig+0x27e>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a17      	ldr	r2, [pc, #92]	; (8006d44 <UART_SetConfig+0x2e0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	f040 80a8 	bne.w	8006e3e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d834      	bhi.n	8006d60 <UART_SetConfig+0x2fc>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <UART_SetConfig+0x298>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d61 	.word	0x08006d61
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d61 	.word	0x08006d61
 8006d0c:	08006d2f 	.word	0x08006d2f
 8006d10:	08006d61 	.word	0x08006d61
 8006d14:	08006d61 	.word	0x08006d61
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d37 	.word	0x08006d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fd ff68 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8006d24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d26:	e021      	b.n	8006d6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <UART_SetConfig+0x2f8>)
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d2c:	e01e      	b.n	8006d6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2e:	f7fd fef3 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8006d32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d34:	e01a      	b.n	8006d6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d3c:	e016      	b.n	8006d6c <UART_SetConfig+0x308>
 8006d3e:	bf00      	nop
 8006d40:	cfff69f3 	.word	0xcfff69f3
 8006d44:	40008000 	.word	0x40008000
 8006d48:	40013800 	.word	0x40013800
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	40004400 	.word	0x40004400
 8006d54:	40004800 	.word	0x40004800
 8006d58:	40004c00 	.word	0x40004c00
 8006d5c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 812a 	beq.w	8006fc8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	4a9e      	ldr	r2, [pc, #632]	; (8006ff4 <UART_SetConfig+0x590>)
 8006d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	4413      	add	r3, r2
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d305      	bcc.n	8006da4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d903      	bls.n	8006dac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006daa:	e10d      	b.n	8006fc8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	2200      	movs	r2, #0
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	60fa      	str	r2, [r7, #12]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	4a8e      	ldr	r2, [pc, #568]	; (8006ff4 <UART_SetConfig+0x590>)
 8006dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	607a      	str	r2, [r7, #4]
 8006dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dce:	f7f9 fde1 	bl	8000994 <__aeabi_uldivmod>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	020b      	lsls	r3, r1, #8
 8006de4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006de8:	0202      	lsls	r2, r0, #8
 8006dea:	6979      	ldr	r1, [r7, #20]
 8006dec:	6849      	ldr	r1, [r1, #4]
 8006dee:	0849      	lsrs	r1, r1, #1
 8006df0:	2000      	movs	r0, #0
 8006df2:	460c      	mov	r4, r1
 8006df4:	4605      	mov	r5, r0
 8006df6:	eb12 0804 	adds.w	r8, r2, r4
 8006dfa:	eb43 0905 	adc.w	r9, r3, r5
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	469a      	mov	sl, r3
 8006e06:	4693      	mov	fp, r2
 8006e08:	4652      	mov	r2, sl
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	4649      	mov	r1, r9
 8006e10:	f7f9 fdc0 	bl	8000994 <__aeabi_uldivmod>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4613      	mov	r3, r2
 8006e1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e22:	d308      	bcc.n	8006e36 <UART_SetConfig+0x3d2>
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e2a:	d204      	bcs.n	8006e36 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a3a      	ldr	r2, [r7, #32]
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	e0c8      	b.n	8006fc8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e3c:	e0c4      	b.n	8006fc8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e46:	d167      	bne.n	8006f18 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006e48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d828      	bhi.n	8006ea2 <UART_SetConfig+0x43e>
 8006e50:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <UART_SetConfig+0x3f4>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006e85 	.word	0x08006e85
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	08006ea3 	.word	0x08006ea3
 8006e68:	08006e93 	.word	0x08006e93
 8006e6c:	08006ea3 	.word	0x08006ea3
 8006e70:	08006ea3 	.word	0x08006ea3
 8006e74:	08006ea3 	.word	0x08006ea3
 8006e78:	08006e9b 	.word	0x08006e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e7c:	f7fd feba 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8006e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e82:	e014      	b.n	8006eae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e84:	f7fd fecc 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 8006e88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e8a:	e010      	b.n	8006eae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e8c:	4b5a      	ldr	r3, [pc, #360]	; (8006ff8 <UART_SetConfig+0x594>)
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e90:	e00d      	b.n	8006eae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e92:	f7fd fe41 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8006e96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e98:	e009      	b.n	8006eae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ea0:	e005      	b.n	8006eae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006eac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8089 	beq.w	8006fc8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	4a4e      	ldr	r2, [pc, #312]	; (8006ff4 <UART_SetConfig+0x590>)
 8006ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec8:	005a      	lsls	r2, r3, #1
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	085b      	lsrs	r3, r3, #1
 8006ed0:	441a      	add	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	d916      	bls.n	8006f10 <UART_SetConfig+0x4ac>
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d212      	bcs.n	8006f10 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f023 030f 	bic.w	r3, r3, #15
 8006ef2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	8bfb      	ldrh	r3, [r7, #30]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	8bfa      	ldrh	r2, [r7, #30]
 8006f0c:	60da      	str	r2, [r3, #12]
 8006f0e:	e05b      	b.n	8006fc8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f16:	e057      	b.n	8006fc8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d828      	bhi.n	8006f72 <UART_SetConfig+0x50e>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <UART_SetConfig+0x4c4>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	08006f73 	.word	0x08006f73
 8006f38:	08006f63 	.word	0x08006f63
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006f73 	.word	0x08006f73
 8006f44:	08006f73 	.word	0x08006f73
 8006f48:	08006f6b 	.word	0x08006f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f4c:	f7fd fe52 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8006f50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f52:	e014      	b.n	8006f7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f54:	f7fd fe64 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 8006f58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f5a:	e010      	b.n	8006f7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f5c:	4b26      	ldr	r3, [pc, #152]	; (8006ff8 <UART_SetConfig+0x594>)
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f60:	e00d      	b.n	8006f7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f62:	f7fd fdd9 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f70:	e005      	b.n	8006f7e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f7c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d021      	beq.n	8006fc8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <UART_SetConfig+0x590>)
 8006f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	441a      	add	r2, r3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b0f      	cmp	r3, #15
 8006fac:	d909      	bls.n	8006fc2 <UART_SetConfig+0x55e>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb4:	d205      	bcs.n	8006fc2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60da      	str	r2, [r3, #12]
 8006fc0:	e002      	b.n	8006fc8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006fe4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3730      	adds	r7, #48	; 0x30
 8006fec:	46bd      	mov	sp, r7
 8006fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff2:	bf00      	nop
 8006ff4:	080075f4 	.word	0x080075f4
 8006ff8:	00f42400 	.word	0x00f42400

08006ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	f003 0308 	and.w	r3, r3, #8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01a      	beq.n	8007112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070fa:	d10a      	bne.n	8007112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	605a      	str	r2, [r3, #4]
  }
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af02      	add	r7, sp, #8
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007150:	f7fb f974 	bl	800243c <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b08      	cmp	r3, #8
 8007162:	d10e      	bne.n	8007182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f82f 	bl	80071d6 <UART_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e025      	b.n	80071ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b04      	cmp	r3, #4
 800718e:	d10e      	bne.n	80071ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f819 	bl	80071d6 <UART_WaitOnFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e00f      	b.n	80071ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b09c      	sub	sp, #112	; 0x70
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	603b      	str	r3, [r7, #0]
 80071e2:	4613      	mov	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e6:	e0a9      	b.n	800733c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	f000 80a5 	beq.w	800733c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f2:	f7fb f923 	bl	800243c <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071fe:	429a      	cmp	r2, r3
 8007200:	d302      	bcc.n	8007208 <UART_WaitOnFlagUntilTimeout+0x32>
 8007202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007204:	2b00      	cmp	r3, #0
 8007206:	d140      	bne.n	800728a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800721c:	667b      	str	r3, [r7, #100]	; 0x64
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007228:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800722c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e6      	bne.n	8007208 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	663b      	str	r3, [r7, #96]	; 0x60
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800725a:	64ba      	str	r2, [r7, #72]	; 0x48
 800725c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e5      	bne.n	800723a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e069      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d051      	beq.n	800733c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a6:	d149      	bne.n	800733c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
 80072d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	613b      	str	r3, [r7, #16]
   return(result);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007304:	623a      	str	r2, [r7, #32]
 8007306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	69f9      	ldr	r1, [r7, #28]
 800730a:	6a3a      	ldr	r2, [r7, #32]
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	61bb      	str	r3, [r7, #24]
   return(result);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e5      	bne.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2220      	movs	r2, #32
 800732c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e010      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4013      	ands	r3, r2
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	429a      	cmp	r2, r3
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	429a      	cmp	r2, r3
 8007358:	f43f af46 	beq.w	80071e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3770      	adds	r7, #112	; 0x70
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_UARTEx_DisableFifoMode+0x16>
 8007378:	2302      	movs	r3, #2
 800737a:	e027      	b.n	80073cc <HAL_UARTEx_DisableFifoMode+0x66>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2224      	movs	r2, #36	; 0x24
 8007388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0201 	bic.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e02d      	b.n	800744c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2224      	movs	r2, #36	; 0x24
 80073fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f84f 	bl	80074d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007468:	2302      	movs	r3, #2
 800746a:	e02d      	b.n	80074c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2224      	movs	r2, #36	; 0x24
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0201 	bic.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f811 	bl	80074d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d108      	bne.n	80074f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074f0:	e031      	b.n	8007556 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074f2:	2308      	movs	r3, #8
 80074f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074f6:	2308      	movs	r3, #8
 80074f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	0e5b      	lsrs	r3, r3, #25
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	0f5b      	lsrs	r3, r3, #29
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	7b3a      	ldrb	r2, [r7, #12]
 800751e:	4911      	ldr	r1, [pc, #68]	; (8007564 <UARTEx_SetNbDataToProcess+0x94>)
 8007520:	5c8a      	ldrb	r2, [r1, r2]
 8007522:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007526:	7b3a      	ldrb	r2, [r7, #12]
 8007528:	490f      	ldr	r1, [pc, #60]	; (8007568 <UARTEx_SetNbDataToProcess+0x98>)
 800752a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800752c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007530:	b29a      	uxth	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	7b7a      	ldrb	r2, [r7, #13]
 800753c:	4909      	ldr	r1, [pc, #36]	; (8007564 <UARTEx_SetNbDataToProcess+0x94>)
 800753e:	5c8a      	ldrb	r2, [r1, r2]
 8007540:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007544:	7b7a      	ldrb	r2, [r7, #13]
 8007546:	4908      	ldr	r1, [pc, #32]	; (8007568 <UARTEx_SetNbDataToProcess+0x98>)
 8007548:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800754a:	fb93 f3f2 	sdiv	r3, r3, r2
 800754e:	b29a      	uxth	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007556:	bf00      	nop
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	0800760c 	.word	0x0800760c
 8007568:	08007614 	.word	0x08007614

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4d0d      	ldr	r5, [pc, #52]	; (80075a4 <__libc_init_array+0x38>)
 8007570:	4c0d      	ldr	r4, [pc, #52]	; (80075a8 <__libc_init_array+0x3c>)
 8007572:	1b64      	subs	r4, r4, r5
 8007574:	10a4      	asrs	r4, r4, #2
 8007576:	2600      	movs	r6, #0
 8007578:	42a6      	cmp	r6, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	4d0b      	ldr	r5, [pc, #44]	; (80075ac <__libc_init_array+0x40>)
 800757e:	4c0c      	ldr	r4, [pc, #48]	; (80075b0 <__libc_init_array+0x44>)
 8007580:	f000 f820 	bl	80075c4 <_init>
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	2600      	movs	r6, #0
 800758a:	42a6      	cmp	r6, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f855 3b04 	ldr.w	r3, [r5], #4
 8007594:	4798      	blx	r3
 8007596:	3601      	adds	r6, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f855 3b04 	ldr.w	r3, [r5], #4
 800759e:	4798      	blx	r3
 80075a0:	3601      	adds	r6, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	08007624 	.word	0x08007624
 80075a8:	08007624 	.word	0x08007624
 80075ac:	08007624 	.word	0x08007624
 80075b0:	08007628 	.word	0x08007628

080075b4 <memset>:
 80075b4:	4402      	add	r2, r0
 80075b6:	4603      	mov	r3, r0
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d100      	bne.n	80075be <memset+0xa>
 80075bc:	4770      	bx	lr
 80075be:	f803 1b01 	strb.w	r1, [r3], #1
 80075c2:	e7f9      	b.n	80075b8 <memset+0x4>

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
